
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Security.Cryptography;
using DAL;
using HCMIS.Security.Helpers;

namespace BLL
{
    /// <summary>
    /// Logic that consurs with users
    /// </summary>
	public class User : _User
	{
        /// <summary>
        /// Gets a list of users
        /// </summary>
        /// <returns></returns>
	    public DataTable GetUsers()
        {
            this.FlushData();
            this.LoadFromRawSql(HCMIS.Repository.Queries.User.SelectGetUsers());
            return this.DataTable;
        }

       


        /// <summary>
        /// Why this was needed: Some sites had the wrong doodads stored procedure which wasn't selecting all the columns.
        /// This can be removed when all sites have been updated to use the most upto date stored procedure.
        /// </summary>
        /// <param name="ID"></param>
        /// <returns></returns>
        public override bool LoadByPrimaryKey(int ID)
        {
            string query = HCMIS.Repository.Queries.User.SelectLoadByPrimaryKey(ID);
            this.LoadFromRawSql(query);
            return this.RowCount > 0;
        }

      
        /// <summary>
        /// checks if a user name and password exists
        /// </summary>
        /// <param name="userName">Name of the user.</param>
        /// <param name="password">The password.</param>
        /// <returns></returns>
        public DataTable GetUserByAccountInfo(string userName, string password)
        {

            string encriptedPassword = HCMIS.Security.Helpers.Cryptography.EncryptPassword(EncryptionAlgorithms.MD5, password);
            string query =
                HCMIS.Repository.Queries.User.SelectGetUserByAccountInfo(userName, password, encriptedPassword);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

       

        /// <summary>
        /// Saves the password.
        /// </summary>
        /// <param name="newPassword">The new password.</param>
        public void SavePassword(string newPassword)
        {
            string query = HCMIS.Repository.Queries.User.UpdateSavePassword(newPassword, this.ID);
            this.LoadFromRawSql(query);
        }

      

        /// <summary>
        /// Gets a value indicating whether [does user have financial rights].
        /// </summary>
        /// <value>
        /// <c>true</c> if [does user have financial rights]; otherwise, <c>false</c>.
        /// </value>
        public bool DoesUserHaveFinancialRights
        {
            get
            {
                string query = HCMIS.Repository.Queries.User.SelectDoesUserHaveFinancialRights(this.ID);
                BLL.User user = new User();
                user.LoadFromRawSql(query);
                return (user.RowCount > 0);
            }
        }

       

        /// <summary>
        /// Gets the type of the user.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        /// <returns></returns>
        public static int GetUserType(int userID)
        {
            BLL.User usr = new User();
            usr.LoadByPrimaryKey(userID);
            if (usr.RowCount > 0)
                return usr.UserType;
            else
                return -1;
        }


        public object GetUsersExceptSysAdmins()
        {
            this.FlushData();
            string query =
                HCMIS.Repository.Queries.User.SelectGetUsersExceptSysAdmins(BLL.UserType.Constants.SUPER_ADMINISTRATOR);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }
	}
}