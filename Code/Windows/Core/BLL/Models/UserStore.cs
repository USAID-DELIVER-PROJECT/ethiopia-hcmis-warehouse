
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using DAL;

namespace BLL
{
	public class UserActivity : _UserActivity
	{
		public UserActivity()
		{
		
		}

        /// <summary>
        /// Loads the by user ID.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        public void LoadByUserID(int userID)
        {
            string query = HCMIS.Repository.Queries.UserActivity.SelectLoadByUserID(userID);
            this.LoadFromRawSql(query);
            // TO Clean: This 
            while (!EOF)
            {
                Activity activity = new Activity();
                activity.LoadByPrimaryKey(Getint("StoreID"));
                SetColumn("StoreName", activity.FullActivityName);
                MoveNext();
            }
            this.Rewind();

        }

	  

	    /// <summary>
        /// Loads the stores (Account Types) for the user based on the selected Store Type
        /// </summary>
        /// <param name="userID">The user ID.</param>
        /// <param name="storeTypeID">The store type ID.</param>
        /// <param name="itemID">The item ID.</param>
        /// <param name="unitID">The unit ID.</param>
        public void LoadByUserIDAndStoreType(int userID, int storeTypeID,int itemID,int unitID)
        {
            string query = HCMIS.Repository.Queries.UserActivity.SelectLoadByUserIDAndStoreType(userID, storeTypeID, itemID, unitID);
            this.LoadFromRawSql(query);
        }

	  

	    /// <summary>
        /// Loads the by user and store ID.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        /// <param name="storeID">The store ID.</param>
        public void LoadByUserAndStoreID(int userID, int storeID)
        {
            string query = HCMIS.Repository.Queries.UserActivity.SelectLoadByUserAndStoreID(userID, storeID);
            this.LoadFromRawSql(query);
        }

	  

	    /// <summary>
        /// Generates the matrix for A new user.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        public void GenerateMatrixForANewUser(int userID)
        {
            BLL.Activity store = new Activity();
            store.LoadAll();
            while (!store.EOF)
            {
                BLL.UserActivity usrStore = new UserActivity();
                usrStore.AddNew();
                usrStore.UserID = userID;
                usrStore.ActivityID = store.ID;
                usrStore.CanAccess = false;
                usrStore.IsDefault = false;
                usrStore.Save();
                store.MoveNext();
            }
        }

        /// <summary>
        /// Renews the matrix for A user.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        public void RenewMatrixForAUser(int userID)
        {
            BLL.Activity store = new Activity();
            store.LoadAll();
            while (!store.EOF)
            {
                BLL.UserActivity usrStore = new UserActivity();
                this.LoadByUserAndStoreID(userID,store.ID);
                if (this.RowCount == 0)
                {
                    usrStore.AddNew();
                    usrStore.UserID = userID;
                    usrStore.ActivityID = store.ID;
                    usrStore.CanAccess = false;
                    usrStore.IsDefault = false;
                    usrStore.Save();
                }
                store.MoveNext();
            }
        }



        /// <summary>
        /// Makes the default.
        /// </summary>
        public void MakeDefault()
        {
            int id = this.ID;
            int userID = this.UserID;
            int storeID = this.ActivityID;            
            this.FlushData();
            
            string query = HCMIS.Repository.Queries.UserActivity.UpdateMakeDefault(userID, storeID);
            this.LoadFromRawSql(query);
            query = HCMIS.Repository.Queries.UserActivity.UpdateUserStoreMakeDefault(userID, storeID);
            this.LoadFromRawSql(query);
            this.LoadByPrimaryKey(id);
        }
	}
}
