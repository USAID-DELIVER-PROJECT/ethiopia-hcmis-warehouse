
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Collections.Generic;
using System.Data;
using DAL;

namespace BLL
{
	/// <summary>
	/// Items class
	/// It has all kinds of
	/// </summary>
	public class Item : _Item
	{
		#region Static Members

		public static DataTable GetAllItemsByCommodityType(int CommodityType)
		{
			Item itms = new Item();
			itms.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetAllItemsByCommodityType(CommodityType));
			return itms.DataTable;
		}

	    #endregion
         
		/***
		 * Only works after the GetAllItems() function is called.
		 */
		///<summary>
		/// returns the full item name
		///</summary>
		public String FullItemName
		{
			get
			{
                if(IsColumnNull("FullItemName"))
                {
                    var itm = new Item();
                    var query = HCMIS.Repository.Queries.Item.SelectFullItemName(ID);
                    itm.LoadFromRawSql(query);
                    return itm.Getstring("FullItemName");

                   
                }
				return Getstring("FullItemName");
			}
		}

	    public new void LoadAll()
	    {
	        var query = HCMIS.Repository.Queries.Item.SelectFromVwgetAllItems();
            LoadFromRawSql(query);
	    }
        public new void LoadByPrimaryKey(int id)
        {
            var query = HCMIS.Repository.Queries.Item.SelectFromVwgetAllItemsByID(id);
            LoadFromRawSql(query);
        }
	    public string SerialNumber
	    {
	        get
	        {
	            try
	            {
                    return Convert.ToInt32(this.GetColumn("SN")).ToString();
	            }
	            catch
	            {
	                return "";
	            }
                
	        }
	    }

        public int GetIDFromSerialNumber(int serialNumber)
        {
            var query = HCMIS.Repository.Queries.Item.SelectGetIDFromSerialNumber(serialNumber);
            this.FlushData();
            this.LoadFromRawSql(query);
            return Convert.ToInt32(this.ID);
        }

	    public  int GetSerialNumberFromItemID(int id)
        {
            var query = HCMIS.Repository.Queries.Item.SelectGetSerialNumberFromItemID(id);
            this.FlushData();
            this.LoadFromRawSql(query);
            return Convert.ToInt32(this.GetColumn("SN").ToString());
        }

	    ///<summary>
		/// get the set Stack height
		///</summary>
		///<param name="itemId"></param>
		///<param name="manufId"></param>
		///<returns></returns>
		public double GetStackHeight(int itemId, int manufId)
		{
			var query = HCMIS.Repository.Queries.Item.SelectGetStackHeight(itemId, manufId);
			this.LoadFromRawSql(query);
			if (this.RowCount == 0 || this.IsColumnNull("StackHeight"))
			{
				return 0;
			}
			return Convert.ToDouble(this.GetColumn("StackHeight"));
		}


	    ///<summary>
		/// Gets distinct years of operation
		///</summary>
		///<returns></returns>
		public DataTable AllYears()
		{
			this.FlushData();
	        var query = HCMIS.Repository.Queries.Item.SelectAllYears();
			//this.LoadFromRawSql("SELECT Distinct YEAR(Date)as Year from ReceiveDoc where  Month(Date) < 11 order by year desc");
            this.LoadFromRawSql(query);

			DataRowView drv = this.DefaultView.AddNew();

			if (this.RowCount > 1)
			{
				drv["Year"] = this.Getint("Year") + 1;
			}
			else
			{
				//TODO: Pleae remove this hard code by including an Ethiopian Date library.
				drv["Year"] = 2003;
			}
			return this.DataTable;
		}

	    /// <summary>
		/// Returns list of items
		/// </summary>
		/// <param name="inList"></param>
		/// <returns></returns>
		public DataTable GetAllItems(int inList)
		{
			this.FlushData();
			//this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = {0} AND Name = 'Drug' ORDER BY ItemName", inList));
			// upgraded to also check if the drug has a manufacturer set.
			var query = HCMIS.Repository.Queries.Item.SelectGetAllItems(inList);
			this.LoadFromRawSql(query);
			return this.DataTable;
		}

	    public DataTable GetAllItems()
		{
			this.FlushData();
			//this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = {0} AND Name = 'Drug' ORDER BY ItemName", inList));
			// upgraded to also check if the drug has a manufacturer set.
			var query = HCMIS.Repository.Queries.Item.SelectGetAllItems();
			this.LoadFromRawSql(query);
			return this.DataTable;
		}

	    /// <summary>
		/// Brings Active Items that have stock and
		/// Excludes units of items that are stocked out. Incluldes items that are completely stocked out.
		/// (For example, if it has two units and one is stocked out,
		/// it doesn't get included.)  If it has two units and both are stocked out, it gets included.
		/// </summary>
		/// <param name="commodityType"></param>
		/// <returns></returns>
		public static DataTable GetCommodityForRequisition(int commodityTypeId,int modeId)
		{
            var itmsNormal = new Item();
            var query = HCMIS.Repository.Queries.Item.SelectGetCommodityForRequisition(commodityTypeId, modeId, BLL.Settings.IsCenter);
            itmsNormal.LoadFromRawSql(query);
		    return itmsNormal.DefaultView.ToTable();
		}

	    /// <summary>
	    /// Brings All Active Items Previously Issued to the specefic Facility and that have stock and
	    /// Excludes units of items that are stocked out. Incluldes items that are completely stocked out.
	    /// (For example, if it has two units and one is stocked out,
	    /// it doesn't get included.)  If it has two units and both are stocked out, it gets included.
	    /// </summary>
	    /// <param name="facilityID"></param>
	    /// <param name="modeId"></param>
	    /// <param name="range"> </param>
	    /// <returns></returns>
	    public static DataTable GetCommodityHistoryByFacilityForRequisition(int facilityID, int modeId,int range = -1)
        {
            var itmsNormal = new Item();
            var query = HCMIS.Repository.Queries.Item.SelectGetCommodityHistoryByFacilityForRequisition(facilityID, modeId, BLL.Settings.IsCenter,range);
            itmsNormal.LoadFromRawSql(query);
            return itmsNormal.DefaultView.ToTable();
        }

        public static DataTable GetFacilityHistory(int facilityID, DateTime fromDate, DateTime toDate)
        {
            var query = HCMIS.Repository.Queries.Item.SelectGetFacilityHistory(facilityID, fromDate.ToShortDateString(), toDate.ToShortDateString());
            var item = new Item();
            item.LoadFromRawSql(query);
            return item.DefaultView.ToTable();
        }

	    /// <summary>
		/// Returns the commodites by type
		/// </summary>
		/// <param name="commodityType">0 - All Items</param>
		/// <param name="storeID">The store ID.</param>
		/// <returns></returns>
		public static DataTable GetActiveItemsByCommodityType(int commodityType, int? storeID)
		{
			string query = "";

			if (Settings.IsRdfMode)
			{
				// let 0 mean all items
				if (commodityType == 0)
				{
					query = HCMIS.Repository.Queries.Item.SelectGetActiveItemsByCommodityTypeAllItems(query, storeID);
					
				}
				else
				{
					query = HCMIS.Repository.Queries.Item.SelectGetActiveItemsByCommodityType(commodityType, query, storeID);
					
				}
			}
			else
			{
				// handle the freaking program store
				query = HCMIS.Repository.Queries.Item.SelectGetActiveItemsByCommodityTypeNotRdfMode(commodityType, query, storeID);
			}


			Item itms = new Item();
			itms.LoadFromRawSql(query);
			return itms.DataTable;
		}

	    public static DataTable GetActiveItemsBySupplier(int supplierID, int? storeID)
	    {
	        string query = HCMIS.Repository.Queries.Item.SelectGetActiveItemsBySupplier(supplierID, storeID);
	        Item it = new Item();
	        it.LoadFromRawSql(query);
	        return it.DataTable;
	    }

	    /// <summary>
		/// Returns the commodites by type
		/// </summary>
		/// <param name="commodityType">0 - All Items</param>
		/// <param name="storeID">The store ID.</param>
		/// <returns></returns>
		public static DataTable GetDistinctActiveItemsByCommodityType(int commodityType, int userID,bool ExcludeNeverReceived = true)
		{
			string query = "";
            
			// let 0 mean all items
			if (commodityType == 0)
			{
                query = HCMIS.Repository.Queries.Item.SelectGetDistinctActiveItemsByCommodityTypeAllItems(query, userID, ExcludeNeverReceived);

			}
			else
			{
                query = HCMIS.Repository.Queries.Item.SelectGetDistinctActiveItemsByCommodityType(commodityType, query, userID, ExcludeNeverReceived);

			}
			Item itms = new Item();
			itms.LoadFromRawSql(query);
			return itms.DataTable;
		}


	    /// <summary>
		/// Returns the commodites by type
		/// </summary>
		/// <param name="commodityType">0 - All Items</param>
		/// <param name="storeID">The store ID.</param>
		/// <returns></returns>
		public static DataTable GetActiveItemsByCommodityTypeForReceiveScreen(int commodityType, int? storeID)
		{
			string query = "";
			
			if (Settings.IsRdfMode)
			{
				// let 0 mean all items
				if (commodityType == 0)
				{
					query = HCMIS.Repository.Queries.Item.SelectGetActiveItemsByCommodityTypeForReceiveScreenAllItem(query, storeID);
				}
				else
				{
					query = HCMIS.Repository.Queries.Item.SelectGetActiveItemsByCommodityTypeForReceiveScreen(commodityType, query, storeID);
				}
			}
			else
			{
				// handle the freaking program store
			    query = HCMIS.Repository.Queries.Item.SelectGetActiveItemsByCommodityTypeForReceiveScreenNotRdfMode(
			        commodityType, query, storeID);
			}

            Item itms = new Item();
			itms.LoadFromRawSql(query);
			return itms.DataTable;
		}


	    /// <summary>
		/// Returns items that have been issued using an STV/Invoice number for SRM
		/// </summary>
		/// <param name="stvID">The STV ID.</param>
		/// <param name="storeID">The store ID.</param>
		/// <returns></returns>
		public static DataTable GetItemsBySTVInvoiceNoForStockReturn(int stvID,int storeID)
		{
            var query = HCMIS.Repository.Queries.Item.SelectGetItemsBySTVInvoiceNoForStockReturn(stvID, storeID);
			
			Item itms = new Item();
			itms.LoadFromRawSql(query);
            itms.AddColumn("LineNo", typeof(int));
            // make a better numbering 
            int i = 1;
            while (!itms.EOF)
            {
                itms.SetColumn("LineNo", i++);
                itms.MoveNext();
            }
			return itms.DataTable;
		}

        /// <summary>
        /// Returns items that have been issued using an STV/Invoice number for SRM
        /// </summary>
        /// <param name="receiptInvoiceID">The Receipt Invoice ID.</param>
        /// <returns></returns>
        public static DataTable GetItemsByReceiptInvoiceNoForSTVTransfer(int receiptInvoiceID)
        {
            string query = "";

            query = HCMIS.Repository.Queries.Item.SelectGetItemsByReceiptInvoiceNoForSTVTransfer(receiptInvoiceID);

            Item itms = new Item();
            itms.LoadFromRawSql(query);
            itms.AddColumn("LineNo", typeof(int));
            // make a better numbering 
            int i = 1;
            while (!itms.EOF)
            {
                itms.SetColumn("LineNo", i++);
                itms.MoveNext();
            }
            return itms.DataTable;
        }


	    /**
		 * The difference between this and the other default one is that this one loads the item with all the neccessary realtionship datas
		 * */

		///<summary>
		/// Loads items from the vwAllItems this makes the full item name available
		/// </summary>
		public Boolean GetItemByPrimaryKey(int pk)
		{
			this.FlushData();
			return this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetItemByPrimaryKey(pk));
		}

	    /// <summary>
		/// Counts all drug items in usable items list
		/// </summary>
		/// <returns></returns>
		public int CountAllItems()
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectCountAllItems());
			return this.DataTable.Rows.Count;
		}


	    /// <summary>
		/// Counts essential item list
		/// </summary>
		/// <returns></returns>
		public int CountEdlItems()
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectCountEdlItems());
			return this.DataTable.Rows.Count;
		}

	    /// <summary>
		/// returns the essential drug list items
		/// </summary>
		/// <returns></returns>
		public DataTable GetEdlItems()
		{
			this.FlushData();
            this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetEdlItems());
			return this.DataTable;
		}

	    /// <summary>
		/// Counts the free items.
		/// </summary>
		/// <returns></returns>
		public int CountFreeItems()
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectCountFreeItems());
			return this.DataTable.Rows.Count;
		}

	    /// <summary>
		/// Gets the free items.
		/// </summary>
		/// <returns></returns>
		public DataTable GetFreeItems()
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetFreeItems());
			return this.DataTable;
		}

	    /// <summary>
		/// Gets the vital items.
		/// </summary>
		/// <returns></returns>
		public DataTable GetVitalItems()
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetVitalItems());
			return this.DataTable;
		}

	    /// <summary>
		/// Counts the refrigerated items.
		/// </summary>
		/// <returns></returns>
		public int CountRefrigeratedItems()
		{
			this.FlushData();
            this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectCountRefrigeratedItems(StorageType.ColdChain));
			return this.DataTable.Rows.Count;
		}

	    /// <summary>
		/// Gets the refrigerated items.
		/// </summary>
		/// <returns></returns>
		public DataTable GetRefrigeratedItems()
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetRefrigeratedItems());
			return this.DataTable;
		}


	    /// <summary>
		/// Gets the item by id.
		/// </summary>
		/// <param name="itemId">The item id.</param>
		/// <returns></returns>
		public DataTable GetItemById(int itemId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetItemById(itemId));
			return this.DataTable;
		}


	    /// <summary>
		/// Gets the items by sub category.
		/// </summary>
		/// <param name="subCategoryId">The sub category id.</param>
		/// <returns></returns>
		public DataTable GetItemsBySubCategory(int subCategoryId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetItemsBySubCategory(subCategoryId));
			return this.DataTable;
		}


	    /// <summary>
		/// Gets the items received by batch.
		/// </summary>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public DataTable GetItemsReceivedByBatch(int storeId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetItemsReceivedByBatch(storeId));
			return this.DataTable;
		}

	    /// <summary>
		/// Gets the commodities received by batch.
		/// </summary>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public DataTable GetCommoditiesReceivedByBatch(int storeId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetCommoditiesReceivedByBatch(storeId));
			return this.DataTable;
		}

	    /// <summary>
		/// Gets the items received by batch by keyword.
		/// </summary>
		/// <param name="keyword">The keyword.</param>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public DataTable GetItemsReceivedByBatchByKeyword(string keyword, int storeId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetItemsReceivedByBatchByKeyword(keyword, storeId));
			return this.DataTable;
		}

	    public DataTable GetCommoditiesReceivedByBatchByKeyword(string keyword, int storeId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetCommoditiesReceivedByBatchByKeyword(keyword, storeId));
			return this.DataTable;
		}

	    /// <summary>
		/// Gets the items received by batch by cat ID.
		/// </summary>
		/// <param name="categoryId">The category id.</param>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public DataTable GetItemsReceivedByBatchByCatID(int categoryId, int storeId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetItemsReceivedByBatchByCatId(categoryId, storeId));
			return this.DataTable;
		}

	    /// <summary>
		/// Gets the items received by batch by sub cat ID.
		/// </summary>
		/// <param name="subCategoryId">The sub category id.</param>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public DataTable GetItemsReceivedByBatchBySubCatID(int subCategoryId, int storeId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetItemsReceivedByBatchBySubCatId(subCategoryId, storeId));
			return this.DataTable;
		}

	    /// <summary>
		/// Gets the items issued by batch.
		/// </summary>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public DataTable GetItemsIssuedByBatch(int storeId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetItemsIssuedByBatch(storeId));
			return this.DataTable;
		}

	    /// <summary>
		/// Gets the quantity issued by batch.
		/// </summary>
		/// <param name="batchNo">The batch no.</param>
		/// <param name="itemId">The item id.</param>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public Int64 GetQuantityIssuedByBatch(string batchNo, int itemId, int storeId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetQuantityIssuedByBatch(batchNo, itemId, storeId));
			Int64 qunatity = 0;
			foreach (DataRowView dv in this.DataTable.DefaultView)
			{
				qunatity = qunatity + Convert.ToInt64(dv["Quantity"]);
			}
			return qunatity;
		}

	    /// <summary>
		/// Gets the quantity issued by item per month.
		/// </summary>
		/// <param name="month">The month.</param>
		/// <param name="itemId">The item id.</param>
		/// <param name="storeId">The store id.</param>
		/// <param name="year">The year.</param>
		/// <returns></returns>
		public Int64 GetQuantityIssuedByItemPerMonth(int month, int itemId, int storeId, int year)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetQuantityIssuedByItemPerMonth(month, itemId, storeId, year));
			Int64 qunatity = 0;
			if (this.DataTable.Rows[0]["Quantity"].ToString() != "")
			{
				qunatity = Convert.ToInt64(this.DataTable.Rows[0]["Quantity"]);
			}
			return qunatity;
		}

	    /// <summary>
		/// Gets the quantity receive by item per month.
		/// </summary>
		/// <param name="month">The month.</param>
		/// <param name="itemId">The item id.</param>
		/// <param name="storeId">The store id.</param>
		/// <param name="yr">The yr.</param>
		/// <returns></returns>
		public Int64 GetQuantityReceiveByItemPerMonth(int month, int itemId, int storeId, int yr)
		{
			this.FlushData();
			int year = yr;// (month < 11) ? yr : yr - 1;
			var query = HCMIS.Repository.Queries.Item.SelectGetQuantityReceiveByItemPerMonth(month, itemId, storeId, year);

			this.LoadFromRawSql(query);
			Int64 qunatity = 0;
			if (this.DataTable.Rows[0]["Quantity"].ToString() != "")
			{
				qunatity = Convert.ToInt64(this.DataTable.Rows[0]["Quantity"]);
			}
			return qunatity;
		}

	    /// <summary>
		/// Gets the cost issued by item per month.
		/// </summary>
		/// <param name="month">The month.</param>
		/// <param name="storeId">The store id.</param>
		/// <param name="yr">The yr.</param>
		/// <returns></returns>
		public double GetCostIssuedByItemPerMonth(int month, int storeId, int yr)
		{
			this.FlushData();
			int year = (month < 11) ? yr : yr - 1;
            this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetCostIssuedByItemPerMonth(month, storeId, year));
			double cost = 0;
			if (this.DataTable.Rows[0]["Cost"].ToString() != "")
			{
				cost = Convert.ToInt64(this.DataTable.Rows[0]["Cost"]);
			}
			return cost;
		}

	    /// <summary>
		/// Gets the cost receive by item per month.
		/// </summary>
		/// <param name="month">The month.</param>
		/// <param name="storeId">The store id.</param>
		/// <param name="yr">The yr.</param>
		/// <returns></returns>
		public double GetCostReceiveByItemPerMonth(int month, int storeId, int yr)
		{
			this.FlushData();
			int year = (month < 11) ? yr : yr - 1;
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetCostReceiveByItemPerMonth(month, storeId, year));
			double cost = 0;
			if (this.DataTable.Rows[0]["Cost"].ToString() != "")
			{
				cost = Convert.ToInt64(this.DataTable.Rows[0]["Cost"]);
			}
			return cost;
		}

	    /// <summary>
		/// Gets the lost quantity.
		/// </summary>
		/// <param name="batchNo">The batch no.</param>
		/// <param name="itemId">The item id.</param>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public Int64 GetLostQuantity(string batchNo, int itemId, int storeId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetLostQuantity(batchNo, itemId, storeId));
			Int64 qunatity = 0;
			foreach (DataRowView dv in this.DataTable.DefaultView)
			{
				qunatity = qunatity + Convert.ToInt64(dv["Quantity"]);
			}
			return qunatity;
		}

	    /// <summary>
		/// Gets the adjusted quantity.
		/// </summary>
		/// <param name="batchNo">The batch no.</param>
		/// <param name="itemId">The item id.</param>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public Int64 GetAdjustedQuantity(string batchNo, int itemId, int storeId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetAdjustedQuantity(batchNo, itemId, storeId));
			Int64 qunatity = 0;
			foreach (DataRowView dv in this.DataTable.DefaultView)
			{
				qunatity = qunatity + Convert.ToInt64(dv["Quantity"]);
			}
			return qunatity;
		}

	    /// <summary>
		/// Gets the expired items by batch.
		/// </summary>
		/// <param name="storeId">The store id.</param>
		/// <param name="typeId">The type id.</param>
		/// <returns></returns>
		public DataTable GetExpiredItemsByBatch(int modeID)
		{
			this.FlushData();
		    var query = HCMIS.Repository.Queries.Item.SelectGetExpiredItemsByBatch(modeID);
		    this.LoadFromRawSql(query);
			while(!this.EOF)
			{
                this.SetColumn("Difference", DateTimeHelper.GetExpiryDateSpan(Convert.ToDateTime(this.GetColumn("ReceivedDate")),
			                                                            Convert.ToDateTime(this.GetColumn("ExpDate"))));
                this.MoveNext();
			}
            return this.DataTable;
		}


   


        /// <summary>
        /// Gets the expired items by batch.
        /// </summary>
        /// <param name="storeId">The store id.</param>
        /// <param name="typeId">The type id.</param>
        /// <returns></returns>

        public DataTable GetExpiredItemsByBatch(int modeID ,int warehouseID)
        {
            this.FlushData();
            var query = HCMIS.Repository.Queries.Item.SelectGetExpiredItemsByBatch(modeID ,warehouseID);
			
		    this.LoadFromRawSql(query);
            while (!this.EOF)
            {
                this.SetColumn("Difference", DateTimeHelper.GetExpiryDateSpan(Convert.ToDateTime(this.GetColumn("ReceivedDate")),
                                                                        Convert.ToDateTime(this.GetColumn("ExpDate"))));
                this.MoveNext();
            }
            return this.DataTable;
        }
        public DataTable GetExpiredItemsByReceivedDate(int modeID ,DateTime datefrom ,DateTime todate ,int warehouseID)
        {
            this.FlushData();
            var query = HCMIS.Repository.Queries.Item.SelectGetExpiredItemsByReceivedDate(modeID ,datefrom ,todate ,warehouseID);
            this.LoadFromRawSql(query);
            while (!this.EOF)
            {
                this.SetColumn("Difference", DateTimeHelper.GetExpiryDateSpan(Convert.ToDateTime(this.GetColumn("ReceivedDate")),
                                                                        Convert.ToDateTime(this.GetColumn("ExpDate"))));
                this.MoveNext();
            }
            return this.DataTable;
        }
	    /// <summary>
		/// Gets the expired items.
		/// </summary>
		/// <param name="modeID">The store id.</param>
		/// <param name="typeId">The type id.</param>
		/// <returns></returns>
		public DataTable GetExpiredItems(int modeID)
		{
			this.FlushData();
		    var query = HCMIS.Repository.Queries.Item.SelectGetExpiredItems(modeID);
		    this.LoadFromRawSql(query);
			return this.DataTable; 
		}

        // <summary>
        /// Gets the expired items.
        /// </summary>
        /// <param name="modeID">The store id.</param>
        /// <param name="typeId">The type id.</param>
        /// <returns></returns>
        public DataTable GetExpiredItems(int modeID ,int warehouseID)
        {
            this.FlushData();
            var query = HCMIS.Repository.Queries.Item.SelectGetExpiredItems(modeID ,warehouseID);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

	    /// <summary>
		/// Gets the expired items by batch by keyword.
		/// </summary>
		/// <param name="storeId">The store id.</param>
		/// <param name="keyword">The keyword.</param>
		/// <returns></returns>
		public DataTable GetExpiredItemsByBatchByKeyword(int storeId, string keyword)
		{
			this.FlushData();
			if (storeId != 0)
				this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetExpiredItemsByBatchByKeywordByStore(storeId, keyword));
			else
                this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetExpiredItemsByBatchByKeyword(keyword));
			return this.DataTable;
		}

	    /// <summary>
		/// Gets the expired supply by batch by keyword.
		/// </summary>
		/// <param name="storeId">The store id.</param>
		/// <param name="keyword">The keyword.</param>
		/// <returns></returns>
		public DataTable GetExpiredSupplyByBatchByKeyword(int storeId, string keyword)
		{
			this.FlushData();
			if (storeId != 0)
				this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetExpiredSupplyByBatchByKeywordByStore(storeId, keyword));
			else
				this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetExpiredSupplyByBatchByKeyword(keyword));
			return this.DataTable;
		}

	    /// <summary>
		/// Counts the expired items and amount.
		/// </summary>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public object[] CountExpiredItemsAndAmount(int storeId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectCountExpiredItemsAndAmount(storeId));
			object[] obj = new object[2];
			obj[0] = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt32(this.DataTable.Rows[0]["Qty"]) : 0);
			obj[1] = ((this.DataTable.Rows.Count > 0) ? ((this.DataTable.Rows[0]["Price"].ToString() != "") ? Convert.ToDouble(this.DataTable.Rows[0]["Price"]) : 0) : 0);
			return obj;
		}

	    /// <summary>
		/// Gets the expired supplys by batch.
		/// </summary>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public DataTable GetExpiredSupplysByBatch(int storeId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetExpiredSupplysByBatch(storeId));
			return this.DataTable;
		}

	    /// <summary>
		/// Gets the expired items by id.
		/// </summary>
		/// <param name="storeId">The store id.</param>
		/// <param name="itemId">The item id.</param>
		/// <returns></returns>
		public DataTable GetExpiredItemsById(int storeId, int itemId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetExpiredItemsById(storeId, itemId));
			return this.DataTable;
		}

        public DataTable GetExpiredItemsByActivity(int ActivityID)
        {
            this.FlushData();
            this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetExpiredItemsActivity(ActivityID));
            return this.DataTable;
        }

	    /// <summary>
		/// Gets the expired qty items by id.
		/// </summary>
		/// <param name="itemId">The item id.</param>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public Int64 GetExpiredQtyItemsById(int itemId, int storeId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetExpiredQtyItemsById(itemId, storeId));
			Int64 qunatity = 0;
			foreach (DataRowView dv in this.DataTable.DefaultView)
			{
				qunatity = qunatity + Convert.ToInt64(dv["QuantityLeft"]);
			}
			return qunatity;
		}

	    /// <summary>
		/// Gets the expired qty amount items by id.
		/// </summary>
		/// <param name="itemId">The item id.</param>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public object[] GetExpiredQtyAmountItemsById(int itemId, int storeId)
		{
			this.FlushData();
			Int64 quantity = 0;
			double price = 0;
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetExpiredQtyAmountItemsById(itemId, storeId));
			foreach (DataRowView dv in this.DataTable.DefaultView)
			{
				if (dv["QuantityLeft"] != DBNull.Value)
					quantity = quantity + Convert.ToInt64(dv["QuantityLeft"]);
				if (dv["Price"] != DBNull.Value)
					price = price + Convert.ToDouble(dv["Price"]);
			}
			object[] obj = { quantity, price };
			return obj;
		}

	    /// <summary>
		/// Gets the nearly expired qty items by id.
		/// </summary>
		/// <param name="itemId">The item id.</param>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public Int64 GetNearlyExpiredQtyItemsById(int itemId, int storeId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetNearlyExpiredQtyItemsById(itemId, storeId));
			Int64 qunatity = 0;
			foreach (DataRowView dv in this.DataTable.DefaultView)
			{
				qunatity = qunatity + Convert.ToInt64(dv["QuantityLeft"]);
			}
			return qunatity;
		}

	    /// <summary>
		/// Gets the nearly expired qty amount items by id.
		/// </summary>
		/// <param name="itemId">The item id.</param>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public object[] GetNearlyExpiredQtyAmountItemsById(int itemId, int storeId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetNearlyExpiredQtyAmountItemsById(itemId, storeId));
			Int64 qunatity = 0;
			double price = 0;
			foreach (DataRowView dv in this.DataTable.DefaultView)
			{
				qunatity = qunatity + Convert.ToInt64(dv["QuantityLeft"]);
				if (dv["Price"] != DBNull.Value)
				{
					price = price + Convert.ToDouble(dv["Price"]);
				}
			}
			object[] obj = { qunatity, price };
			return obj;
		}

	    /// <summary>
		/// Counts the nearly expired qty amount.
		/// </summary>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public object[] CountNearlyExpiredQtyAmount(int storeId)
		{
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectCountNearlyExpiredQtyAmount(storeId));
			Int64 qunatity = 0;
			double price = 0;
			qunatity = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt64(this.DataTable.Rows[0]["Qty"]) : 0);
			price = ((this.DataTable.Rows.Count > 0) ? ((this.DataTable.Rows[0]["Price"].ToString() != "") ? Convert.ToDouble(this.DataTable.Rows[0]["Price"]) : 0) : 0);

			object[] obj = { qunatity, price };
			return obj;
		}


	    /// <summary>
		/// Gets last issued date for an item
		/// </summary>
		/// <param name="itemId">The item id.</param>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public static DateTime GetLastIssuedDate(int itemId, int storeId)
		{
			Item items = new Item();
			items.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetLastIssuedDate(itemId, storeId));
			DateTime dt = (items.DataTable.Rows.Count > 0) ? Convert.ToDateTime(items.DataTable.Rows[0]["Date"]) : new DateTime();

			return dt;
		}

	    /// <summary>
		/// Gets last received date for an item in a logical store
		/// </summary>
		/// <param name="itemId">The item id.</param>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public static DateTime GetLastReceiveDate(int itemId, int storeId)
		{
			Item items = new Item();

			items.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetLastReceiveDate(itemId, storeId));
			DateTime dt = (items.DataTable.Rows.Count > 0) ? Convert.ToDateTime(items.DataTable.Rows[0]["Date"]) : new DateTime();

			return dt;
		}


	    /// <summary>
		/// Get Items Excluding never received items for a logical store
		/// </summary>
		/// <param name="storeId">The store id.</param>
		/// <returns></returns>
		public DataTable GetItemsExcludeNeverReceived(int storeId)
		{
			this.FlushData();
			if (storeId == 0)
			{
				this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetItemsExcludeNeverReceived());
			}
			else
			{
				this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectGetItemsExcludeNeverReceivedByStoreId(storeId));
			}
			return this.DataTable;
		}

	    /// <summary>
		/// Gets list of items used in hub excluding never received items
		/// </summary>
		/// <param name="storeId">The store id.</param>
		/// <param name="itemName">Name of the item.</param>
		/// <returns></returns>
		public DataTable ExcludeNeverReceivedItemsByKeyword(int storeId, string itemName)
		{
			this.FlushData();
			if (storeId == 0)
			{
				this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectExcludeNeverReceivedItemsByKeyword(itemName));
			}
			else
			{
				this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectExcludeNeverReceivedItemsByKeywordByStoreId(storeId, itemName));
			}
			return this.DataTable;
		}


	    /// <summary>
		/// checks if an item has transactions or not
		/// </summary>
		/// <param name="itemId">The item id.</param>
		/// <returns>
		///   <c>true</c> if the specified item id has transactions; otherwise, <c>false</c>.
		/// </returns>
		public bool HasTransactions(int itemId)
		{
			bool tran = false;
			this.FlushData();
			this.LoadFromRawSql(HCMIS.Repository.Queries.Item.SelectHasTransactions(itemId));
			if (this.DataTable.Rows.Count > 0)
				tran = true;
			return tran;
		}

	    /// <summary>
		/// Loads items by storage type
		/// </summary>
		/// <param name="storageType">Type of the storage.</param>
		private void LoadItemsByStorageType(string storageType)
	    {
	        var query = HCMIS.Repository.Queries.Item.SelectLoadItemsByStorageType(storageType);
	        this.LoadFromRawSql(query);
	    }


	    /// <summary>
		/// Get list of items under specified storage type
		/// </summary>
		/// <param name="storageType"></param>
		/// <returns></returns>
		public static DataTable GetItems(string storageType)
		{
			Item itms = new Item();
			itms.LoadItemsByStorageType(storageType);
			return itms.DataTable;
		}

		/// <summary>
		/// Get list of items that could be ordered from the hub
		/// </summary>
		/// <returns></returns>
		public DataTable GetAllItemsForOrder()
		{
			this.GetAllItems(1);
			this.DataTable.Columns.Add("SKUBU", typeof(int));

			//ItemManufacturer im = new ItemManufacturer();
			while (!this.EOF)
			{
				//// TODO: check if the item happens to be non ARV

				this.SetColumn("SKUBU", ReceiveDoc.GetNextQtyPerPackFor(this.ID));
				this.MoveNext();
			}
			return this.DataTable;
		}
		// this is a hack i had to use because the datbase field for the ID is not auto increment
		// please remove any chance i got.
		public int GetNextItemID()
		{
		    var query = HCMIS.Repository.Queries.Item.SelectGetNextItemId();
            this.LoadFromRawSql(query);
			return Convert.ToInt32(this.GetColumn("MaxTop")) + 1;
		}


	    /// <summary>
		/// Gets list of items that were issued for a given route.
		/// </summary>
		/// <param name="storeId">The store id.</param>
		/// <param name="routeId">The route id.</param>
		/// <param name="type">The type.</param>
		/// <returns></returns>
		public DataTable GetIssuesByReceivingUnit(int storeId, int routeId, int type)
		{
			//This function does not look efficient.
            var rus = new Institution();
			rus.LoadAll();
			rus.GetAllUnderRoute(routeId);

			string theFrom = "";
			int i = 0;
			while (!rus.EOF)
			{
                theFrom += HCMIS.Repository.Queries.Item.GetFromClauseFor_GetIssueByReceivingUnits(rus.ID, i, storeId);
				i++;
				rus.MoveNext();
			}
			string select = "";
			rus.Rewind();
			for (int j = 0; j < i; j++)
			{
				select = HCMIS.Repository.Queries.Item.GetSelectClauseFor_GetIssueByReceivingUnits(select, rus.Name, j);
				rus.MoveNext();
			}
			var query = HCMIS.Repository.Queries.Item.SelectGetIssuesByReceivingUnit(type, select, theFrom);
            Item ite =new Item();
			ite.LoadFromRawSql(query);
			return ite.DataTable;
		}

        public DataTable GetIssuesByReceivingUnit(int storeId, int routeId, int type, DateTime sdate, DateTime edate,int storeid)
		{
			//This function does not look efficient.
            var rus = new Institution();
			rus.LoadAll();
			rus.GetAllUnderRoute(routeId);

			string theFrom = "";
			int i = 0;
			while (!rus.EOF)
			{
				theFrom += HCMIS.Repository.Queries.Item.GetFromClauseFor_GetIssueByReceivingUnitsFilterByDateRange(rus.ID, i,sdate,edate, storeid);
				i++;
				rus.MoveNext();
			}
			string select = "";
			rus.Rewind();
			for (int j = 0; j < i; j++)
			{
				select = HCMIS.Repository.Queries.Item.GetSelectClauseFor_GetIssueByReceivingUnits(select, rus.Name, j);
				rus.MoveNext();
			}
			var query = HCMIS.Repository.Queries.Item.SelectGetIssuesByReceivingUnit(type, select, theFrom);
            Item ite =new Item();
			ite.LoadFromRawSql(query);
			return ite.DataTable;
		}
	   
	    /// <summary>
		/// Gets the issues by receiving unit faster.
		/// </summary>
		/// <param name="storeID">The store ID.</param>
		/// <param name="routeID">The route ID.</param>
		/// <param name="type">The type.</param>
		/// <returns></returns>
        /// Shit: what a name? and it does crazy stuff too.
		public DataTable GetIssuesByReceivingUnitFaster(int storeID, int routeID, int type)
		{
			var ru = new Institution();

			if (Settings.IsRdfMode)
				ru.GetFacilitiesThatEverReceivedItems();
			else
				ru.GetAllUnderRoute(routeID);

			//Load all the items.
			var query = HCMIS.Repository.Queries.Item.SelectGetIssuesByReceivingUnitFaster(type);
			this.LoadFromRawSql(query);

			//Add the columns
			while (!ru.EOF)
			{
				this.AddColumn(string.Format("{0},{1}", ru.Name, ru.ID), typeof(int));
				ru.MoveNext();
			}

			while (!this.EOF)
			{
				Institution rus = new Institution();
				if (Settings.IsRdfMode)
					rus.GetFacilitiesThatEverReceivedItems();
				else
					rus.GetAllUnderRoute(routeID);

				while (!rus.EOF)
				{
					int itemID = int.Parse(this.GetColumn("ID").ToString());

					var itm = new Item();
					var issueQuery = HCMIS.Repository.Queries.Item.SelectGetIssuesByReceivingUnitFasterIssueQuery(itemID, rus.ID);
					itm.LoadFromRawSql(issueQuery);

					if (itm.RowCount > 0 && !itm.IsColumnNull("Quantity"))
						this.SetColumn(string.Format("{0},{1}", ru.Name, ru.ID), itm.GetColumn("Quantity"));
					rus.MoveNext();

				}
				this.MoveNext();

			}
			return this.DataTable;
		}


	    /// <summary>
		/// Gets list of issued items
		/// </summary>
		/// <returns></returns>
		public static Dictionary<int, int> GetIssuedItems()
		{
			var query = HCMIS.Repository.Queries.Item.SelectGetIssuedItems();
			Item itms = new Item();
			itms.LoadFromRawSql(query);

			System.Collections.Generic.Dictionary<int, int> dict = new System.Collections.Generic.Dictionary<int, int>();

			int[] arr = new int[itms.RowCount];
			for (int i = 0; i < itms.RowCount; i++)
			{
				dict.Add(itms.ID, itms.ID);
				itms.MoveNext();
			}
			return dict;
		}


	    /// <summary>
		/// Gets list of ever received items
		/// </summary>
		/// <returns></returns>
		public static Dictionary<int, int> GetRecievedItems()
		{
			var query = HCMIS.Repository.Queries.Item.SelectGetRecievedItems();
			Item itms = new Item();
			itms.LoadFromRawSql(query);

			System.Collections.Generic.Dictionary<int, int> dict = new System.Collections.Generic.Dictionary<int, int>();

			int[] arr = new int[itms.RowCount];
			for (int i = 0; i < itms.RowCount; i++)
			{
				dict.Add(itms.ID, itms.ID);
				itms.MoveNext();
			}
			return dict;
		}

	    /// <summary>
		/// Gets the name of the Item
		/// </summary>
		/// <param name="itemId">The item id.</param>
		/// <returns></returns>
		public static string GetName(int itemId)
		{
			Item itm = new Item();
			itm.LoadByPrimaryKey(itemId);
			return itm.FullItemName;
		}


		/// <summary>
		/// Get List of expired items by batch
		/// </summary>
		/// <param name="storeId">The store id.</param>
		/// <param name="months">The months.</param>
		/// <param name="category">The category.</param>
		/// <returns></returns>
		public static DataView GetNearlyExpiredItemsByBatch(int modeID, int months, int category ,int warehouseID) //Added warehouse filter
		{
			var query = HCMIS.Repository.Queries.Item.SelectGetNearlyExpiredItemsByBatch(modeID, months, category , warehouseID);
			Item itms = new Item();
			itms.LoadFromRawSql(query);
			return itms.DefaultView;
		}

	    /// <summary>
		/// Gets the nearly expired items.
		/// </summary>
		/// <param name="storeId">The store id.</param>
		/// <param name="months">The months.</param>
		/// <param name="category">The category.</param>
		/// <returns></returns>
        public static DataView GetNearlyExpiredItems(int modeID, int months, int category ,int warehouseID) // Added warehouse filter
		{
            var query = HCMIS.Repository.Queries.Item.SelectGetNearlyExpiredItems(modeID, months, category ,warehouseID);
			Item itms = new Item();
			itms.LoadFromRawSql(query);
			return itms.DefaultView;
		}


	    /// <summary>
		/// Checks if the item is has to apply moving average or not
		/// </summary>
		/// <param name="itemId">The item id.</param>
		/// <param name="supplierId">The supplier id.</param>
		/// <returns>
		///   <c>true</c> if [is moving average] [the specified item id]; otherwise, <c>false</c>.
		/// </returns>
		public static bool IsMovingAverage(int itemId, int supplierId)
		{
			//TODO: this has to be a flag on the 
			var query = HCMIS.Repository.Queries.Item.SelectIsMovingAverage(itemId, supplierId);

			Item itms = new Item();
			itms.LoadFromRawSql(query);
			return (itms.RowCount > 0);

		}

	    /// <summary>
		/// Gets the near expiry breakdown.
		/// </summary>
		/// <param name="itemType">Type of the item.</param>
		/// <returns></returns>
        public static DataTable GetNearExpiryBreakdown(int itemType, int modeID)
		{
            var query = HCMIS.Repository.Queries.Item.SelectGetNearExpiryBreakdown(itemType, modeID);
			Item items = new Item();
			items.LoadFromRawSql(query);
			return items.DataTable;
		}

        /// <summary>
        /// Gets the near expiry breakdown.
        /// </summary>
        /// <param name="itemType">Type of the item.</param>
        /// <returns></returns>
        public static DataTable GetNearExpiryBreakdown(int itemType, int modeID ,int warehouseID)
        {
            var query = HCMIS.Repository.Queries.Item.SelectGetNearExpiryBreakdown(itemType, modeID ,warehouseID);
            Item items = new Item();
            items.LoadFromRawSql(query);
            return items.DataTable;
        }
	    /// <summary>
		/// Entire Price list
		/// </summary>
		/// <param name="storeID">The store ID.</param>
		/// <returns></returns>
		public static DataTable GetItemPriceList(Int32 storeID)
		{
			var query = HCMIS.Repository.Queries.Item.SelectGetItemPriceList(storeID);

			Item itm = new Item();
			itm.LoadFromRawSql(query);
			itm.AddColumn("UnitsSelling", typeof(string));
			//For the items that haven't been priced
			while (!itm.EOF)
			{
				string priceString = itm.GetColumn("UnitsSellingBeforeFormat").ToString();

				itm.SetColumn("UnitsSelling", FormatNumber(priceString));
				itm.MoveNext();
			}

			return itm.DataTable;
		}

	    /// <summary>
		/// Gets the item price list.
		/// </summary>
		/// <param name="fromDate">Date in gregorian calendar</param>
		/// <param name="toDate">Date in gregorian calendar</param>
		/// <param name="storeID">The store ID.</param>
		/// <returns></returns>
		public static DataTable GetItemPriceList(DateTime fromDate, DateTime toDate, Int32 storeID)
		{
			var query = HCMIS.Repository.Queries.Item.SelectGetItemPriceList(fromDate, toDate, storeID);

			Item itm = new Item();
			itm.LoadFromRawSql(query);
			itm.AddColumn("UnitsSelling", typeof(string));
			//For the items that haven't been priced
			while (!itm.EOF)
			{
				string priceString = itm.GetColumn("UnitsSellingBeforeFormat").ToString();

				itm.SetColumn("UnitsSelling", FormatNumber(priceString));
				itm.MoveNext();
			}

			return itm.DataTable;
		}

	    /// <summary>
		/// Returns the price list for items received on a specific date
		/// </summary>
		/// <param name="date">Date in Gregorian Calendar</param>
		/// <param name="storeID">The store ID.</param>
		/// <returns></returns>
		public static DataTable GetItemPriceList(DateTime date, Int32 storeID)
		{
			var query = HCMIS.Repository.Queries.Item.SelectGetItemPriceList(date, storeID);

			Item itm = new Item();
			itm.LoadFromRawSql(query);
			itm.AddColumn("UnitsSelling", typeof(string));
			//For the items that haven't been priced
			while (!itm.EOF)
			{
				string priceString = itm.GetColumn("UnitsSellingBeforeFormat").ToString();

				itm.SetColumn("UnitsSelling", FormatNumber(priceString));
				itm.MoveNext();
			}

			return itm.DataTable;
		}

	    /// <summary>
		/// Entire Price list by Manufacturer
		/// </summary>
		/// <param name="storeID">Account.</param>
		/// <returns></returns>
		public static DataTable GetItemPriceListByManufacturer(Int32 storeID)
		{
			var query = HCMIS.Repository.Queries.Item.SelectGetItemPriceListByManufacturer(storeID);

			Item itm = new Item();
			itm.LoadFromRawSql(query);
			itm.AddColumn("UnitsSelling", typeof(string));
			//For the items that haven't been priced
			while (!itm.EOF)
			{
				string priceString = itm.GetColumn("UnitsSellingBeforeFormat").ToString();

				itm.SetColumn("UnitsSelling", FormatNumber(priceString));
				itm.MoveNext();
			}

			return itm.DataTable;
		}

	    /// <summary>
		/// Gets the item price list by manufacturer.
		/// </summary>
		/// <param name="fromDate">Date in gregorian calendar</param>
		/// <param name="toDate">Date in gregorian calendar</param>
		/// <param name="storeID">The store ID.</param>
		/// <returns></returns>
		public static DataTable GetItemPriceListByManufacturer(DateTime fromDate, DateTime toDate, Int32 storeID)
		{
			var query = HCMIS.Repository.Queries.Item.SelectGetItemPriceListByManufacturer(fromDate, toDate, storeID);

			Item itm = new Item();
			itm.LoadFromRawSql(query);
			itm.AddColumn("UnitsSelling", typeof(string));
			//For the items that haven't been priced
			while (!itm.EOF)
			{
				string priceString = itm.GetColumn("UnitsSellingBeforeFormat").ToString();

				itm.SetColumn("UnitsSelling", FormatNumber(priceString));
				itm.MoveNext();
			}

			return itm.DataTable;
		}

	    /// <summary>
		/// Returns the price list by Manufacturer for items received on a specific date
		/// </summary>
		/// <param name="date">Date in Gregorian Calendar</param>
		/// <param name="storeID">The store ID.</param>
		/// <returns></returns>
		public static DataTable GetItemPriceListByManufacturer(DateTime date, Int32 storeID)
		{
			var query = HCMIS.Repository.Queries.Item.SelectGetItemPriceListByManufacturer(date, storeID);

			Item itm = new Item();
			itm.LoadFromRawSql(query);
			itm.AddColumn("UnitsSelling", typeof(string));
			//For the items that haven't been priced
			while (!itm.EOF)
			{
				string priceString = itm.GetColumn("UnitsSellingBeforeFormat").ToString();

				itm.SetColumn("UnitsSelling", FormatNumber(priceString));
				itm.MoveNext();
			}

			return itm.DataTable;
		}

	    /// <summary>
		/// Formats the number.
		/// </summary>
		/// <param name="priceString">The price string.</param>
		/// <returns></returns>
		private static string FormatNumber(string priceString)
		{
			if (string.IsNullOrEmpty(priceString))
			{
				return "Pending";
			}
			else
			{
				double price = double.Parse(priceString);
				return string.Format("ETB {0}", price.ToString("#,##0.#0"));
			}
		}

		/// <summary>
		/// The item allow status for the specific receiving unit
		/// 1=AllowFully, 0=Warning, -1 = Restricted
		/// </summary>
		/// <param name="itemID">The item ID.</param>
		/// <param name="receivingUnitID">The receiving unit ID.</param>
		/// <returns></returns>
		public int GetItemAllowStatus(int itemID, int receivingUnitID)
		{
			this.FlushData();
			this.LoadByPrimaryKey(itemID);
			Product product = new Product();

			return product.ProductAllowStatus(this.IINID, receivingUnitID);
		}

		/// <summary>
		/// If it returns 0, there is no quota
		/// </summary>
		/// <param name="itemID">The item ID.</param>
		/// <param name="receivingUnitID">The receiving unit ID.</param>
		/// <returns></returns>
		public long GetItemMaxIssueLimit(int itemID, int receivingUnitID)
		{
			this.FlushData();
			this.LoadByPrimaryKey(itemID);

			ItemOwnershipType ownershipIssueQty = new ItemOwnershipType();
			ItemReceivingUnitType receivingUnitIssueQty = new ItemReceivingUnitType();
			long maxQty = 0;

			maxQty = ownershipIssueQty.GetMaxIssueQuantity(itemID, receivingUnitID);

			long tempQty = receivingUnitIssueQty.GetMaxIssueQuantity(itemID, receivingUnitID);
			//We take the lesser of the two max values because the facility should not take more than the lowest value specified
			if (maxQty != 0 && tempQty != 0)
				maxQty = maxQty < tempQty ? maxQty : tempQty;

			return maxQty;
		}

		/// <summary>
		/// Gets the items by commodity type for transfer to hub.
		/// </summary>
		/// <param name="commodityType">Type of the commodity.</param>
		/// <param name="StoreID">The store ID.</param>
		/// <returns></returns>
		public static DataTable GetItemsByCommodityTypeForTransferToHub(int commodityType,int StoreID)
		{
			string query = "";

			//all items = 0
			if (commodityType == 0)
			{
				query = HCMIS.Repository.Queries.Item.SelectGetItemsByCommodityTypeForTransferToHub(StoreID);
			}
			else
			{
				query = HCMIS.Repository.Queries.Item.SelectGetItemsByCommodityTypeForTransferToHubByCommodity(commodityType, StoreID);
			}


			Item itms = new Item();
			itms.LoadFromRawSql(query);
			return itms.DataTable;
		}

	    public static DataTable GetItemsByCommodityTypeForTransferByPhysicalStore(int commodityType, int StoreID,int PhysicalStoreID)
        {
            string query = "";

            //all items = 0
            if (commodityType == 0)
            {
                query = HCMIS.Repository.Queries.Item.SelectGetItemsByCommodityTypeForTransferByPhysicalStore(StoreID, PhysicalStoreID);
            }
            else
            {
                query = HCMIS.Repository.Queries.Item.SelectGetItemsByCommodityTypeForTransferByPhysicalStoreByCommodity(commodityType, StoreID, PhysicalStoreID);
            }


            Item itms = new Item();
            itms.LoadFromRawSql(query);
            return itms.DataTable;
        }

	    /// <summary>
		/// Gets the item by id for transfer to hub.
		/// </summary>
		/// <param name="ItemID">The item ID.</param>
		/// <param name="unitID">The unit ID.</param>
		/// <param name="StoreID">The store ID.</param>
		/// <returns></returns>
		public static DataTable GetItemByIdForTransfer(int ItemID, int unitID, int StoreID,int PhysicalStoreID)
		{
			var query = HCMIS.Repository.Queries.Item.SelectGetItemByIdForTransfer(ItemID, unitID, StoreID, PhysicalStoreID);
	        Item itms = new Item();
			itms.LoadFromRawSql(query);
			return itms.DataTable;
		}

	    public static DataTable GetItemByIdForTransferToHub(int ItemID, int unitID, int StoreID)
        {
            string query = "";
            query = HCMIS.Repository.Queries.Item.SelectGetItemByIdForTransferToHub(ItemID, unitID, StoreID);
            Item itms = new Item();
            itms.LoadFromRawSql(query);
            return itms.DataTable;
        }

	    public static DataTable GetItemByIdForCustomIssue(int ItemID, int unitID, int StoreID)
		{
			string query = "";
			if (Settings.IsCenter)
			{
				query = HCMIS.Repository.Queries.Item.SelectGetItemByIdForCustomIssueCenter(ItemID, unitID, StoreID);


			}
			else
			{
				query = HCMIS.Repository.Queries.Item.SelectGetItemByIdForCustomIssueHub(ItemID, unitID, StoreID);
			}
			Item itms = new Item();
			itms.LoadFromRawSql(query);
			return itms.DataTable;
		}

	    /// <summary>
		/// Gets the items by commodity type for transfer to account.
		/// </summary>
		/// <param name="AccountFrom">The account from.</param>
		/// <param name="AccountTo">The account to.</param>
		/// <returns></returns>
		public static DataTable GetItemsByCommodityTypeForTransferToAccount(int AccountFrom, int AccountTo)
		{
			string query = "";

			//all items = 0
			query = HCMIS.Repository.Queries.Item.SelectGetItemsByCommodityTypeForTransferToAccount(AccountFrom, AccountTo);

			Item itms = new Item();
			itms.LoadFromRawSql(query);
			return itms.DataTable;
		}

	    /// <summary>
		/// Gets the item by manufactuer and unit.
		/// </summary>
		/// <returns></returns>
		public  DataTable GetItemByManufactuerAndUnit()
		{
			string query = "";

			//all items = 0
			query = HCMIS.Repository.Queries.Item.SelectGetItemByManufactuerAndUnit();

			Item itms = new Item();
			itms.LoadFromRawSql(query);
			return itms.DataTable;
		}

	    public DataTable GetCostTierComparision()
       {
           string query = "";

           //all items = 0
           query = HCMIS.Repository.Queries.Item.SelectGetCostTierComparision();

           Item itms = new Item();
           itms.LoadFromRawSql(query);
           return itms.DataTable;
       }

	   public DataTable GetReceiveDocDetailForDiagnostics(int itemID,int ManufacturerID,int UnitID,int MovingAverageID)
       {
           string query = "";

           //all items = 0
           query = HCMIS.Repository.Queries.Item.SelectGetReceiveDocDetailForDiagnostics(itemID, ManufacturerID, UnitID, MovingAverageID);

           Item itms = new Item();
           itms.LoadFromRawSql(query);
           return itms.DataTable;
       }

	   public DataTable GetJournalEntriesForDiagnostics(int AffectedLedgerID)
       {
           string query = "";

           //all items = 0
           query = HCMIS.Repository.Queries.Item.SelectGetJournalEntriesForDiagnostics(AffectedLedgerID);

           Item itms = new Item();
           itms.LoadFromRawSql(query);
           return itms.DataTable;
       }

	   public DataTable GetMovingAverageLogForDiagnostics(int itemID, int ManufacturerID, int UnitID, int MovingAverageID)
       {
           string query = "";

           //all items = 0
           query = HCMIS.Repository.Queries.Item.SelectGetMovingAverageLogForDiagnostics(itemID, ManufacturerID, UnitID, MovingAverageID);

           Item itms = new Item();
           itms.LoadFromRawSql(query);
           return itms.DataTable;
       }

	    /// <summary>
		/// Gets the receive doc by item and manufactuer and unit.
		/// </summary>
		/// <param name="ItemID">The item ID.</param>
		/// <param name="ManufacturerID">The manufacturer ID.</param>
		/// <param name="ItemUnitID">The item unit ID.</param>
		/// <param name="AccountID">The account ID.</param>
		/// <returns></returns>
		public DataTable GetReceiveDocByItemAndManufactuerAndUnit(int ItemID, int ManufacturerID, int ItemUnitID,int AccountID)
		{
			string query = "";

			//all items = 0
			query = HCMIS.Repository.Queries.Item.SelectGetReceiveDocByItemAndManufactuerAndUnit(ItemID, ManufacturerID, ItemUnitID, AccountID);

			Item itms = new Item();
			itms.LoadFromRawSql(query);
			return itms.DataTable;
		}

	    /// <summary>
		/// Gets the picklist by item and manufactuer and unit.
		/// </summary>
		/// <param name="ItemID">The item ID.</param>
		/// <param name="ManufacturerID">The manufacturer ID.</param>
		/// <param name="ItemUnitID">The item unit ID.</param>
		/// <param name="AccountID">The account ID.</param>
		/// <returns></returns>
		public DataTable GetPicklistByItemAndManufactuerAndUnit(int ItemID, int ManufacturerID, int ItemUnitID, int AccountID)
		{
			string query = "";

			//all items = 0
			query = HCMIS.Repository.Queries.Item.SelectGetPicklistByItemAndManufactuerAndUnit(ItemID, ManufacturerID, ItemUnitID, AccountID);

			Item itms = new Item();
			itms.LoadFromRawSql(query);
			return itms.DataTable;
		}

	    /// <summary>
		/// Gets the issue doc by item and manufactuer and unit.
		/// </summary>
		/// <param name="ItemID">The item ID.</param>
		/// <param name="ManufacturerID">The manufacturer ID.</param>
		/// <param name="ItemUnitID">The item unit ID.</param>
		/// <param name="AccountID">The account ID.</param>
		/// <returns></returns>
		public DataTable GetIssueDocByItemAndManufactuerAndUnit(int ItemID, int ManufacturerID, int ItemUnitID, int AccountID)
		{
			string query = "sel";

			//all items = 0
			query = string.Format(@"", ItemID, ManufacturerID, ItemUnitID, AccountID);

			Item itms = new Item();
			itms.LoadFromRawSql(query);
			return itms.DataTable;
		}

		/// <summary>
		/// Changes the item ID.
		/// </summary>
		/// <param name="fromItemId">From item id.</param>
		/// <param name="fromUnitId">From unit id.</param>
		/// <param name="toItemId">To item id.</param>
		/// <param name="toUnitId">To unit id.</param>
		/// <returns></returns>
		public static String ChangeItemID(int fromItemId, int fromUnitId, int toItemId, int toUnitId)
		{
		   System.Collections.Specialized.ListDictionary Parms = new System.Collections.Specialized.ListDictionary(); 
			Parms.Add("@toItemID", toItemId);
			Parms.Add("@fromitemID",fromItemId);
			Parms.Add("@fromUnitID",fromUnitId);
			Parms.Add("@toUnitID" ,toUnitId);

			try
			{
				Item items = new Item();
				items.LoadFromSql("procChangeItemID", Parms);
				//return items.DataRow.ItemArray[0].ToString();
				return "Successful";
			}
			catch (Exception ex)
			{
				return ex.Message;
			}
			
		}
		public static DataTable GetItemsDetailByFilter(String Filter)
		{
            var query = HCMIS.Repository.Queries.Item.SelectGetItemsDetailByFilter(Filter);

			Item itms = new Item();
			 itms.LoadFromRawSql(query);
			return itms.DataTable;
		}

	    public static DataTable GetGRNFDetailByFilter(String Filter)
        {
            var query = HCMIS.Repository.Queries.Item.SelectGetGRNFDetailByFilter(Filter);

            Item itms = new Item();
            itms.LoadFromRawSql(query);
            return itms.DataTable;
        }

	    public static DataTable GetItemDetailForItemChanger(int ItemID,int ManufacturerID,int UnitID,int ActivityID)
        {
            var query = HCMIS.Repository.Queries.Item.SelectGetItemDetailForItemChanger(ItemID, ManufacturerID, UnitID, ActivityID);

            Item itms = new Item();
            itms.LoadFromRawSql(query);
            return itms.DataTable;
        }


	    public static void FixExpirySettings()
        {
            // Applys the default setting for those columns that do have null as expiry setting
            // pharmacuticals require batch and expiry, non pharmacuticals don't require it.
            Item items = new Item();
	        var query = HCMIS.Repository.Queries.Item.UpdateFixExpirySettings();
            items.LoadFromRawSql(query);
        }



        public DataTable GetItemsDistributedByAccount(int accountid, DateTime fromdate, DateTime todate)
        {
            var items = new Item();
            var query = HCMIS.Repository.Queries.Item.SelectItemsDistributedByAccount(accountid, fromdate, todate);
            items.LoadFromRawSql(query);
            return items.DataTable;
        }

      
    }
}