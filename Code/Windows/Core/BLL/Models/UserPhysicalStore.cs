
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using DAL;

namespace BLL
{
    public class UserPhysicalStore : _UserPhysicalStore
    {
        public UserPhysicalStore()
        {

        }

        /// <summary>
        /// Loads the allowed for user ID.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        public void LoadAllowedForUserID(int userID)
        {
            string query = HCMIS.Repository.Queries.UserPhysicalStore.SelectLoadAllowedForUserID(userID);
            this.LoadFromRawSql(query);
        }

      

        /// <summary>
        /// Loads all entries by user ID.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        public void LoadAllEntriesByUserID(int userID)
        {
            string query = HCMIS.Repository.Queries.UserPhysicalStore.SelectLoadAllEntriesByUserID(userID);
            this.LoadFromRawSql(query);
        }

        

        /// <summary>
        /// Generates the matrix for A new user.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        public void GenerateMatrixForANewUser(int userID)
        {
            BLL.PhysicalStore phyStore = new PhysicalStore();
            phyStore.LoadAll();
            while (!phyStore.EOF)
            {
                BLL.UserPhysicalStore usrPhyStore = new UserPhysicalStore();
                usrPhyStore.AddNew();
                usrPhyStore.UserID = userID;
                usrPhyStore.PhysicalStoreID = phyStore.ID;
                usrPhyStore.CanAccess = false;
                usrPhyStore.IsDefault = false;
                usrPhyStore.Save();
                phyStore.MoveNext();
            }
        }


        public static bool DoesItNeedToBeRefreshed(int userID)
        {
            BLL.PhysicalStore phyStore = new PhysicalStore();
            phyStore.LoadAll();
            while (!phyStore.EOF)
            {
                BLL.UserPhysicalStore usrPhyStore = new UserPhysicalStore();
                usrPhyStore.LoadAllByUserAndStoreID(userID, phyStore.ID);
                if (usrPhyStore.RowCount == 0)
                {
                    return true;
                }
                phyStore.MoveNext();
            }
            return false;
        }

        /// <summary>
        /// Renews the matrix for A user.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        public void RenewMatrixForAUser(int userID)
        {
            BLL.PhysicalStore phyStore = new PhysicalStore();
            phyStore.LoadAll();
            while (!phyStore.EOF)
            {
                BLL.UserPhysicalStore usrPhyStore = new UserPhysicalStore();
                this.LoadByUserAndStoreID(userID, phyStore.ID);
                if (this.RowCount == 0)
                {
                    usrPhyStore.AddNew();
                    usrPhyStore.UserID = userID;
                    usrPhyStore.PhysicalStoreID = phyStore.ID;
                    usrPhyStore.CanAccess = false;
                    usrPhyStore.IsDefault = false;
                    usrPhyStore.Save();
                }
                phyStore.MoveNext();
            }
        }

        /// <summary>
        /// Loads the by user and store ID.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        /// <param name="phyStoreID">The phy store ID.</param>
        private void LoadByUserAndStoreID(int userID, int phyStoreID)
        {
            string query = HCMIS.Repository.Queries.UserPhysicalStore.SelectLoadByUserAndStoreID(userID, phyStoreID);
            this.LoadFromRawSql(query);
        }

       

        private void LoadAllByUserAndStoreID(int userID, int phyStoreID)
        {
            string query = HCMIS.Repository.Queries.UserPhysicalStore.SelectLoadAllByUserAndStoreID(userID, phyStoreID);
            this.LoadFromRawSql(query);
        }

      

        /// <summary>
        /// Makes the default.
        /// </summary>
        public void MakeDefault()
        {
            int id = this.ID;
            int userID = this.UserID;
            int phyStoreID = this.PhysicalStoreID;
            this.FlushData();

            string query = HCMIS.Repository.Queries.UserPhysicalStore.UpdateMakeDefault(userID, phyStoreID);
            this.LoadFromRawSql(query);
            query = HCMIS.Repository.Queries.UserPhysicalStore.UpdateUserPhysicalStoreMakeDefault(userID, phyStoreID);
            this.LoadFromRawSql(query);
            this.LoadByPrimaryKey(id);
        }
    }
}
