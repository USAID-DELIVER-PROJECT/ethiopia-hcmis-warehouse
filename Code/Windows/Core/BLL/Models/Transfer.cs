
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using BLL.Helpers;
using DAL;
using MyGeneration.dOOdads;

namespace BLL
{
    public class Transfer : _Transfer
    {
        private ReceiveDocConstraintHelper _receiveDocConstraintHelper;

        public class Constants
        {
            
            public static int HUB_TO_HUB;
            public static int ACCOUNT_TO_ACCOUNT;
            public static int STORE_TO_STORE;

        }

        public Transfer()
        {
            _receiveDocConstraintHelper = new ReceiveDocConstraintHelper();
        }

        /// <summary>
        /// Gets the detail for store transfer.
        /// </summary>
        /// <param name="PickListID">The pick list ID.</param>
        /// <returns></returns>
        public static DataView GetDetailForStoreTransfer(int PickListID)
        {
            Transfer transfer = new Transfer();
            string query = HCMIS.Repository.Queries.Transfer.SelectGetDetailForStoreTransfer(PickListID);
            transfer.LoadFromRawSql(query);
            return transfer.DefaultView;
        }

       

        /// <summary>
        /// Gets the store transfer.
        /// </summary>
        /// <param name="PicklistID">The picklist ID.</param>
        /// <returns></returns>
        public static DataRowView GetStoreTransfer(int PicklistID)
        {
            Transfer transfer = new Transfer();

            string query = HCMIS.Repository.Queries.Transfer.SelectGetStoreTransfer(PicklistID);
            transfer.LoadFromRawSql(query);
            foreach (DataRowView drv in transfer.DefaultView)
            {
                return drv;
            }
            return null;
        }

       

        /// <summary>
        /// Transfers to store.
        /// </summary>
        /// <param name="PicklistID">The picklist ID.</param>
        public static void TransferToStore(int PicklistID)
        {
            Transfer transfer = new Transfer();

            string query = HCMIS.Repository.Queries.Transfer.SelectTransferToStore(PicklistID);
            transfer.LoadFromRawSql(query);
        }

      

        /// <summary>
        /// Gets the transfer report.
        /// </summary>
        /// <returns></returns>
        public static DataView GetTransferReport()
        {
            Transfer transfer = new Transfer();

            string query = HCMIS.Repository.Queries.Transfer.SelectGetTransferReport();
            transfer.LoadFromRawSql(query);
            return transfer.DefaultView;

        }

    

        /// <summary>
        /// Gets the transfer report for store.
        /// </summary>
        /// <returns></returns>
        public static DataView GetTransferReportForStore()
        {
            Transfer transfer = new Transfer();

            string query = HCMIS.Repository.Queries.Transfer.SelectGetTransferReportForStore();
            transfer.LoadFromRawSql(query);
            return transfer.DefaultView;

        }

        

        /// <summary>
        /// Moves the specified pick list ID.
        /// </summary>
        /// <param name="PickListID">The pick list ID.</param>
        public static void Move(int PickListID)
        {
            DataView dv = GetTransferReportForStore();
            PalletLocation pl = new PalletLocation();
            foreach (DataRowView dr in dv)
            {

                int amount = Convert.ToInt32(dr["packs"]);
                int palletLocationID = Convert.ToInt32(dr["PalletLocationID"]);

                ReceivePallet rp = new ReceivePallet();
                ReceiveDoc rdoc = new ReceiveDoc();

                rp.LoadByPrimaryKey(Convert.ToInt32(dr["ReceivePalletID"]));
                rdoc.LoadByPrimaryKey(rp.ReceiveID);
                amount *= rdoc.QtyPerPack;

                int qPalletLocationID = PalletLocation.GetTransferPalletLocation(Convert.ToInt32(dr["PhysicalStoreID"]));
                pl.LoadByPrimaryKey(qPalletLocationID);
                if (pl.IsColumnNull("PalletID"))
                {
                    Pallet p = new Pallet();
                    p.AddNew();
                    p.StorageTypeID = Convert.ToInt32(StorageType.Quaranteen);
                    p.Save();
                    pl.PalletID = p.ID;
                    pl.Save();
                }


                ReceivePallet rp2 = new ReceivePallet();
                ReceiveDoc rd = new ReceiveDoc();


                rd.LoadByPrimaryKey(rp.ReceiveID);
                rp2.AddNew();

                rp2.PalletID = pl.PalletID;
                rp2.ReceiveID = rp.ReceiveID;


                // calculate the new balance
                BLL.ItemManufacturer im = new BLL.ItemManufacturer();
                //im.LoadDefaultReceiving(rd.ItemID, Convert.ToInt32(dr["ManufacturerID"]));
                if (dr["BoxLevel"] == DBNull.Value)
                {
                    dr["BoxLevel"] = 0;
                }
                im.LoadIMbyLevel(rd.ItemID, Convert.ToInt32(dr["ManufacturerID"]), Convert.ToInt32(dr["BoxLevel"]));
                int packqty = (amount / im.QuantityInBasicUnit);
                rp2.ReservedStock = 0;
                rp.ReservedStock -= amount;
                BLL.ReceivePallet.MoveBalance(rp, rp2, amount);
                //rp2.Balance = amount;
                //rp.Balance -= rp2.Balance;

                //rp.Save();                            
                //rp2.Save();

                pl.Confirmed = false;
                pl.Save();
                if (rp.Balance == 0)
                {
                    PalletLocation.GarbageCollection();
                }

            }
        }

        /// <summary>
        /// Commits the account to account transfer.
        /// </summary>
        /// <param name="orderID">The order ID.</param>
        /// <param name="userID">The user ID.</param>
        /// <param name="convertedEthDate">The converted eth date.</param>
        public void CommitAccountToAccountTransfer(int orderID, int userID, DateTime convertedEthDate)
        {
             int? supplierID = null;
            BLL.Transfer transfer = new Transfer();
            transfer.LoadByOrderID(orderID);
            if (transfer.RowCount == 0)
                return;

            int newStoreID, newPhysicalStoreID;
            newStoreID = transfer.ToStoreID;
            newPhysicalStoreID = transfer.ToPhysicalStoreID;

            PhysicalStore toPhysicalStore = new PhysicalStore();
            toPhysicalStore.LoadByPrimaryKey(transfer.ToPhysicalStoreID);

            BLL.PickList picklist = new PickList();
            picklist.LoadByOrderID(orderID);
            BLL.PickListDetail pld = new PickListDetail();
            pld.LoadByPickListIDWithStvlogID(picklist.ID);
            BLL.ReceiveDoc rdOriginal = new ReceiveDoc();
            rdOriginal.LoadByPrimaryKey(pld.ReceiveDocID);
          

            BLL.Order order=new Order();
            order.LoadByPrimaryKey(orderID); 
            if(order.OrderTypeID == OrderType.CONSTANTS.ACCOUNT_TO_ACCOUNT_TRANSFER)
            {
                var activity = new Activity();
                activity.LoadByPrimaryKey(newStoreID);
                supplierID = activity.SupplierID;
            }
            else if(order.OrderTypeID == OrderType.CONSTANTS.STORE_TO_STORE_TRANSFER)
            {
                var activity = new Activity();
                activity.LoadByPrimaryKey(newPhysicalStoreID);
                supplierID = activity.SupplierID;
            }
            PO po = PO.CreatePOforStandard( (int) order.GetColumn("OrderTypeID"),transfer.ToStoreID,supplierID,"Transfer",CurrentContext.LoggedInUser.ID);
            int IDPrinted = Convert.ToInt32(pld.GetColumn("IDPrinted"));
            int receiptTypeID = order.OrderTypeID == OrderType.CONSTANTS.ACCOUNT_TO_ACCOUNT_TRANSFER
                                    ? ReceiptType.CONSTANTS.ACCOUNT_TO_ACCOUNT_TRANSFER
                                    :order.OrderTypeID == OrderType.CONSTANTS.STORE_TO_STORE_TRANSFER
                                          ? ReceiptType.CONSTANTS.STORE_TO_STORE_TRANSFER
                                          : order.OrderTypeID == OrderType.CONSTANTS.ERROR_CORRECTION_TRANSFER
                                          ? ReceiptType.CONSTANTS.ERROR_CORRECTION:ReceiptType.CONSTANTS.STANDARD_RECEIPT;

            
            
            Receipt receipt = ReceiptInvoice.CreateReceiptInvoiceAndReceiptForTransfer(receiptTypeID,po.ID,toPhysicalStore.PhysicalStoreTypeID,IDPrinted,userID);

            var mergedPickLists = MergePickListsOfSameInfo(pld); // Picklists of the same info means: Based on all constraints we have on receiveDoc(Batch,Exp,ItemID,UnitID...): should be merged with summed quantity.
            
            pld.Rewind();
            while (!pld.EOF)
            {
                if(IDPrinted != Convert.ToInt32(pld.GetColumn("IDPrinted")))
                {
                    IDPrinted = Convert.ToInt32(pld.GetColumn("IDPrinted"));
                    receipt = ReceiptInvoice.CreateReceiptInvoiceAndReceiptForTransfer(receiptTypeID,po.ID, toPhysicalStore.PhysicalStoreTypeID, IDPrinted, userID);
                }

                var rDoc = new ReceiveDoc();
                if (!mergedPickLists.ContainsKey(pld.ID))
                {
                    pld.MoveNext();
                    continue;
                }

                rDoc.SaveNewReceiveDocEntryFromPicklistDetail(pld, userID, newStoreID, newPhysicalStoreID,
                                                              convertedEthDate,receipt.ID,supplierID);
                pld.MoveNext();
            }
        }

        private Dictionary<int, Dictionary<decimal,decimal>> MergePickListsOfSameInfo(PickListDetail pld) //~ Dic(Pld.ID,Dic<pld.Pack,pld.QuanInBU>) Just to make things simple~//
        {
            var mergedPickLists = new Dictionary<int, Dictionary<decimal, decimal>>();
           var valid = _receiveDocConstraintHelper.IsValid(pld.DefaultView.Table);
           if(valid)
           {
               pld.Rewind();
               while (!pld.EOF)
               {
                   var pack_QInBU = new Dictionary<decimal, decimal> {{pld.Packs, pld.QuantityInBU}};
                   mergedPickLists[pld.ID] = pack_QInBU;
                   pld.MoveNext();
               }
               return mergedPickLists;
           }

            var groupedPickLists = _receiveDocConstraintHelper.GroupByConstraints(pld.DefaultView.Table);
            foreach (DataRow groupedPickList in groupedPickLists.Rows)
            {
                var pack_QInBU = new Dictionary<decimal, decimal>
                {
                    {Convert.ToDecimal(groupedPickList["Packs"]), Convert.ToDecimal(groupedPickList["QuantityInBU"])}
                };

                mergedPickLists[Convert.ToInt32(groupedPickList["ID"])] = pack_QInBU;

            } 
            pld.Rewind();
            while (!pld.EOF)
            {
                if (mergedPickLists.ContainsKey(pld.ID))
                {
                    var packs = mergedPickLists[pld.ID].FirstOrDefault().Key;
                    pld.Packs = packs;
                    pld.QuantityInBU = mergedPickLists[pld.ID][packs];
                }
                pld.MoveNext();
            }
            return mergedPickLists;
        }

        /// <summary>
        /// Loads the by order ID.
        /// </summary>
        /// <param name="orderID">The order ID.</param>
        public void LoadByOrderID(int orderID)
        {
            this.Where.OrderID.Value = orderID;
            this.Query.Load();
        }
    }
}
