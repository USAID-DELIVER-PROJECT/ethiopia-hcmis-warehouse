
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.ComponentModel;
using System.Data;
using DAL;
using HCMIS.Repository;

namespace BLL
{
    /// <summary>
    /// pallet location logics
    /// </summary>
    public class PalletLocation : _PalletLocation
    {
        /// <summary>
        /// Gets the full name of the pallet location 
        /// this includes all the prefixes including the Shelf Name, the storage type and the addressing.
        /// </summary>
        public String FullName
        {
            get
            {

                Shelf slf = new Shelf();
                slf.LoadByPrimaryKey(ShelfID);
                PhysicalStore ps = new PhysicalStore();
                ps.LoadByPrimaryKey(slf.StoreID);
                StorageType st = new StorageType();
                st.LoadByPrimaryKey(slf.ShelfStorageType);
                return ps.Name + " " + st.Prefix + " " + this.Label;
            }
        }

        /// <summary>
        /// Gets the name of the warehouse.
        /// </summary>
        /// <value>
        /// The name of the warehouse.
        /// </value>
        public string WarehouseName
        {
            get
            {
                Shelf slf = new Shelf();
                slf.LoadByPrimaryKey(ShelfID);
                PhysicalStore ps = new PhysicalStore();
                ps.LoadByPrimaryKey(slf.StoreID);
                Warehouse psType = new Warehouse();
                psType.LoadByPrimaryKey(ps.PhysicalStoreTypeID);
                return psType.Name;
            }
        }

        /// <summary>
        /// Gets the name of the physical store.
        /// </summary>
        /// <value>
        /// The name of the physical store.
        /// </value>
        public string PhysicalStoreName
        {
            get
            {
                Shelf slf = new Shelf();
                slf.LoadByPrimaryKey(ShelfID);
                PhysicalStore ps = new PhysicalStore();
                ps.LoadByPrimaryKey(slf.StoreID);
                return ps.Name;
            }
        }

        /// <summary>
        /// Load all pallet location by shelf
        /// </summary>
        /// <param name="shelfId"></param>
        public void LoadPalletLocationsByShelf(int shelfId)
        {
            this.FlushData();
            LoadFromRawSql(HCMIS.Repository.Queries.PalletLocation.SelectLoadPalletLocationsByShelf(shelfId));
        }

       


        /// <summary>
        /// Loads the pallet locations by shelf.
        /// </summary>
        /// <param name="shelfId">The shelf id.</param>
        /// <param name="storageType">Type of the storage.</param>
        public void LoadPalletLocationsByShelf(int shelfId, string storageType)
        {
            this.FlushData();
            String query = HCMIS.Repository.Queries.PalletLocation.SelectLoadPalletLocationsByShelf(shelfId, storageType);
            this.LoadFromRawSql(query);
        }

     

        /// <summary>
        /// Loads the pallet location for shelf row and column
        /// </summary>
        /// <param name="shelfId">The shelf id.</param>
        /// <param name="column">The column.</param>
        /// <param name="row">The row.</param>
        public void LoadPalletLocationFor(string shelfId, string column, string row)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectLoadPalletLocationFor(shelfId, column, row);
            this.LoadFromRawSql(query);
        }

       


        /// <summary>
        /// Loads the pallet location for shelf, column and row
        /// </summary>
        /// <param name="shelfId">The shelf id.</param>
        /// <param name="column">The column.</param>
        /// <param name="row">The row.</param>
        public void LoadPalletLocationFor(int shelfId, int column, int row)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectLoadPalletLocationFor(shelfId, column, row);
            this.LoadFromRawSql(query);
        }

       

        /// <summary>
        /// Loads the label.
        /// </summary>
        internal void LoadLabel()
        {
            Shelf shelf = new Shelf();
            shelf.LoadByPrimaryKey(this.ShelfID);
            this.Label = shelf.ShelfCode;

            ShelfRowColumn src = new ShelfRowColumn();
            src.LoadColumnsForShelf(this.ShelfID, this.Column);
            this.Label = this.Label;
            this.Label += "-" + src.Label;

            src.LoadRowForShelf(this.ShelfID, this.Row);
            this.Label += "-" + src.Label;

        }

        /// <summary>
        /// Changes the storage types of a specific shelf 
        /// </summary>
        /// <param name="shelfID">The shelf ID.</param>
        /// <param name="from">From.</param>
        /// <param name="to">To.</param>
        internal void ChangeStorageTypesOf(int shelfID, int from, int to)
        {

            this.LoadFromRawSql(HCMIS.Repository.Queries.PalletLocation.UpdateChangeStorageTypesOf(shelfID, from, to));
            // correctly removes entries from PickFace and PreferedItemLocation!            
            PickFace.FixPickFaceEntries();
        }

       

        /// <summary>
        /// Changes the storage types of.
        /// </summary>
        /// <param name="shelfID">The shelf ID.</param>
        /// <param name="to">To.</param>
        internal void ChangeStorageTypesOf(int shelfID, int to)
        {


            this.LoadFromRawSql(HCMIS.Repository.Queries.PalletLocation.UpdateChangeStorageTypesOf(shelfID, to));
            // correctly removes entries from PickFace and PreferedItemLocation!
            PickFace.FixPickFaceEntries();
        }

       


        /// <summary>
        /// Loads the fixed storage pallets.
        /// </summary>
        /// <param name="selectedRackID">The selected rack ID.</param>
        public void LoadFixedStoragePallets(String selectedRackID)
        {
            FlushData();
            LoadFromRawSql(HCMIS.Repository.Queries.PalletLocation.SelectLoadFixedStoragePallets(selectedRackID,BLL.StorageType.BulkStore,BLL.StorageType.PickFace));
        }

        /// <summary>
        /// Gets all free Pallet Locations
        /// </summary>
        /// <param name="StorageType">Type of the storage.</param>
        /// <returns></returns>
        public static DataTable GetAllFree(string StorageType)
        {
            string query; 
            if ( StorageType == BLL.StorageType.BulkStore)
            {
                query = HCMIS.Repository.Queries.PalletLocation.SelectGetAllFreeBulkStore(StorageType, BLL.StorageType.StackedStorage, BLL.StorageType.PickFace, BLL.StorageType.Free);
            }
            else if(StorageType == BLL.StorageType.Free)
            {
                query = HCMIS.Repository.Queries.PalletLocation.SelectGetAllFreeFree(StorageType);
            }
            else
            {
                query = HCMIS.Repository.Queries.PalletLocation.SelectGetAllFreeElse(StorageType, BLL.StorageType.Free);
            }

            PalletLocation pl = new PalletLocation();
            pl.LoadFromRawSql(query);
            return pl.DataTable;
        }

        /// <summary>
        /// Gets all Pallet locations by warehouse: 
        /// </summary>
        /// <param name="isSuspended"></param>
        /// <param name="warehouseID"></param>
        /// <returns></returns>
        public static DataTable GetPalletLocation(bool isSuspended,int warehouseID)
        {   
            var pl = new PalletLocation();
            string query = !isSuspended ? HCMIS.Repository.Queries.PalletLocation.SelectNormalPalletLocation(warehouseID, CurrentContext.UserId) : HCMIS.Repository.Queries.PalletLocation.SelectQuaranteenPalletLocation(warehouseID, CurrentContext.UserId);
            pl.LoadFromRawSql(query);
            return pl.DataTable;
        }
       


        /// <summary>
        /// Gets all free pallet locations for item.
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        /// <param name="StorageType">Type of the storage.</param>
        /// <returns></returns>
        public static DataTable GetAllFreeForItem(int itemID, string StorageType,int shelfID = 0)
        {
            string query;
            if (StorageType == BLL.StorageType.Free)// This option doesnt work so I just left it for the time being //
            {
                query = HCMIS.Repository.Queries.PalletLocation.SelectGetAllFreeForItemFree(itemID, StorageType);
            }
            else
            {
                query = HCMIS.Repository.Queries.PalletLocation.SelectGetAllFreeForItemElse(itemID, StorageType, BLL.StorageType.BulkStore,shelfID);
            }
            PalletLocation pl = new PalletLocation();
            pl.LoadFromRawSql(query);
            return pl.DataTable;
        }

      


        /// <summary>
        /// Gets all free for pallet locations item.
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        /// <param name="StorageType">Type of the storage.</param>
        /// <param name="volume">The volume.</param>
        /// <param name="userID">The user ID.</param>
        /// <returns></returns>
        public static DataTable GetAllFreeForItem(int itemID, string StorageType, double volume,int userID)
        {
            if (volume == 0)
            {
                volume = 1;
            }
            //Hack to avoid division by zero, it needs to be fixed somehow.
            string query;
            if (StorageType == BLL.StorageType.BulkStore)
            {
                query = HCMIS.Repository.Queries.PalletLocation.SelectGetAllFreeForItemBulkStore(itemID, StorageType, volume, userID, BLL.StorageType.StackedStorage, BLL.StorageType.Free);
            }
            else if (StorageType == BLL.StorageType.Free)
            {
                query =
                    HCMIS.Repository.Queries.PalletLocation.SelectGetAllFreeForItem(itemID, StorageType, volume, userID);
            }
            else
            {
                // load existing locations that contain the item.

                query = HCMIS.Repository.Queries.PalletLocation.SelectGetAllFreeForItemElseExistingLocation(itemID);

                PalletLocation pl = new PalletLocation();
                pl.LoadFromRawSql(query);
                //TODO: What the ins string here is used for is not clear.  This query needs to be changed.  It seems like it's needlessly complicated
                string ins = "";
                while (!pl.EOF)
                {
                    if (ins == "")
                    {
                        ins = pl.PalletID.ToString();
                    }
                    else
                    {
                        ins += "," + pl.PalletID;
                    }
                    pl.MoveNext();
                }

                //TOFIX: this is a query where the error resides
                query = HCMIS.Repository.Queries.PalletLocation.SelectGetAllFreeForItemElseError(itemID, StorageType, volume, userID, ins, BLL.StorageType.Free);
            }

            PalletLocation plc = new PalletLocation();
            plc.LoadFromRawSql(query);
            return plc.DataTable;
        }

       


        /// <summary>
        /// Loads the location for pallet.
        /// </summary>
        /// <param name="pallet">The pallet.</param>
        public void LoadLocationForPallet(int pallet)
        {
            this.LoadFromRawSql(HCMIS.Repository.Queries.PalletLocation.SelectLoadLocationForPallet(pallet));
        }

      

        /// <summary>
        /// Gets all free for.
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        /// <returns></returns>
        public static DataTable GetAllFreeFor(int itemID,int shelfId = 0)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetAllFreeFor(itemID);
            PalletLocation pl = new PalletLocation();
            pl.LoadFromRawSql(query);
            Item itm = new Item();
            itm.LoadByPrimaryKey(itemID);
            pl.DataTable.Merge(PalletLocation.GetAllFreeForItem(itemID, itm.StorageTypeID.ToString(),shelfId));
            return pl.DataTable;
        }

        public static DataTable GetAllFreeForIntheSameStore(int itemID, int palletid)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetAllFreeForthesameStore(itemID,palletid);
            PalletLocation pl = new PalletLocation();
            pl.LoadFromRawSql(query);
            return pl.DataTable;
        }

       

        /// <summary>
        /// Gets the current and all free for.
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        /// <param name="current">The current.</param>
        /// <returns></returns>
        public static DataTable GetCurrentAndAllFreeFor(int itemID, int current)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetCurrentAndAllFreeFor(itemID);
            PalletLocation pl = new PalletLocation();
            pl.LoadFromRawSql(query);
            Item itm = new Item();
            itm.LoadByPrimaryKey(itemID);
            pl.DataTable.Merge(PalletLocation.GetAllFreeForItem(itemID, itm.StorageTypeID.ToString()));
            return pl.DataTable;
        }


        /// <summary>
        /// Gets all free for.
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        /// <param name="volume">The volume.</param>
        /// <param name="userID">The user ID.</param>
        /// <param name="warehouseID">WarehouseID default is null </param>
        /// <returns></returns>
      
        public static DataTable GetAllFreeFor(int itemID, double volume, int userID,int? warehouseID=null)
        {
            if (volume == 0)
            {

                //Hack to avoid division by zero, it needs to be fixed somehow.
                volume = 1;
            }
            var query =
                 HCMIS.Repository.Queries.PalletLocation.SelectGetAllFreeFor(itemID, volume, userID);
            var pl = new PalletLocation();
            pl.LoadFromRawSql(query);
            var itm = new Item();
            itm.LoadByPrimaryKey(itemID);
            pl.DataTable.Merge(GetAllFreeForItem(itemID, itm.StorageTypeID.ToString(), volume, userID));
            var dataTable = pl.DataTable;
            if (warehouseID.HasValue)
            {
                var rows = dataTable.Select("WarehouseID =" + warehouseID.Value);
                dataTable = rows.Length > 0 ? rows.CopyToDataTable() : null;
            }
            return dataTable;
        }


        /// <summary>
        /// Gets the quaranteen.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        /// <param name="warehouseID">WarehouseID default is null </param>
        /// <returns></returns>
        public static DataTable GetQuaranteen(int userID,int? warehouseID =null)
        {
            var query =
                HCMIS.Repository.Queries.PalletLocation.SelectGetQuaranteen(userID, StorageType.Quaranteen);
            var pl = new PalletLocation();
            pl.LoadFromRawSql(query);
            var dataTable = pl.DataTable;
            if(warehouseID.HasValue)
            {
                var rows = dataTable.Select("WarehouseID =" + warehouseID.Value);
                dataTable = rows.Length>0?rows.CopyToDataTable():null;
            }
            return dataTable;
        }



        /// <summary>
        /// Gets all free non bulk.
        /// </summary>
        /// <returns></returns>
        public static DataTable GetAllFreeNonBulk()
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetAllFreeNonBulk(StorageType.BulkStore, StorageType.PickFace, StorageType.Quaranteen, StorageType.Free);
            PalletLocation pl = new PalletLocation();
            pl.LoadFromRawSql(query);
            return pl.DataTable;
        }

       

        /// <summary>
        /// Populates the pallet location for.
        /// </summary>
        /// <param name="dtbl">The DTBL.</param>
        public static void PopulatePalletLocationFor(DataTable dtbl)
        {
            PalletLocation pl = new PalletLocation();
            dtbl.Columns.Add("PalletLocation");
            foreach (DataRow dr in dtbl.Rows)
            {
                int pallet = Convert.ToInt32(dr["PalletID"]);
                pl.LoadLocationForPallet(pallet);
                if (pl.RowCount > 0)
                {
                    dr["PalletLocation"] = pl.FullName;
                }
            }
        }

        /// <summary>
        /// Populates the pallet location for pick up.
        /// </summary>
        /// <param name="dtbl">The DTBL.</param>
        public static void PopulatePalletLocationForPickUp(DataTable dtbl)
        {
            PalletLocation pl = new PalletLocation();
            dtbl.Columns.Add("PalletLocation");
            dtbl.Columns.Add("PalletLocationID");
            dtbl.Columns.Add("StorageType");
            Item itm = new Item();

            foreach (DataRow dr in dtbl.Rows)
            {
                int pallet = Convert.ToInt32(dr["PalletID"]);

                pl.LoadLocationForPallet(pallet);

                itm.LoadByPrimaryKey(Convert.ToInt32(dr["ItemID"]));
                if (itm.StorageTypeID.ToString() == StorageType.BulkStore)
                {
                    //int manufID = Convert.ToInt32(dr["ManufacturerID"]);
                    //im.LoadDefaultReceiving(itm.ID,manufID);
                    //int bxLevel = Convert.ToInt32(dr["BoxLevel"]);
                    //if (im.PackageLevel != bxLevel)
                    //{
                    //    PickFace pf = new PickFace();
                    //    pf.GetPalletLocationsForItem(itm.ID);
                    //    pl.LoadByPrimaryKey(pf.PalletLocationID);
                    //}

                }

                if (pl.RowCount <= 0) continue;
                dr["PalletLocation"] = pl.FullName;
                dr["PalletLocationID"] = pl.ID;
                dr["StorageType"] = pl.StorageTypeID;
            }
        }

        /// <summary>
        /// Gets all.
        /// </summary>
        /// <returns></returns>
        public static DataTable GetAll()
        {
            PalletLocation pl = new PalletLocation();
            String query = HCMIS.Repository.Queries.PalletLocation.SelectGetAll();
            pl.LoadFromRawSql(query);
            return pl.DataTable;
        }

       

        public static DataTable GetAll(int physicalStoreId)
        {
            PalletLocation pl = new PalletLocation();
            String query = HCMIS.Repository.Queries.PalletLocation.SelectGetAll(physicalStoreId, StorageType.Quaranteen);
            pl.LoadFromRawSql(query);
            return pl.DataTable;
        }


        public static DataTable GetAllByPhisicalStore(int physicalStoreId,bool isNormal)
        {
            PalletLocation pl = new PalletLocation();
            String query = isNormal
                               ? HCMIS.Repository.Queries.PalletLocation.SelectNormalPalletLocationByPhysicalStore(physicalStoreId,
                                                                                                    CurrentContext.
                                                                                                        UserId)
                               : HCMIS.Repository.Queries.PalletLocation.SelectQuaranteenPalletLocationByPhysicalStore(
                                   physicalStoreId, CurrentContext.UserId);
            pl.LoadFromRawSql(query);
            return pl.DataTable;
        }

        /// <summary>
        /// Loads the free preffered location for.
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        public void LoadFreePrefferedLocationFor(int itemID)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectLoadFreePrefferedLocationFor(itemID);
            this.LoadFromRawSql(query);
        }

     

        /// <summary>
        /// Gets the un confirmed receives.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        /// <returns></returns>
        public DataTable GetUnConfirmedReceives(int userID)
        {
            //string query = string.Format("select  distinct(RefNo),  min(Date) as Date from ReceivePallet rp join ReceiveDoc rd on rp.ReceiveID = rd.ID where rd.StoreID in (select StoreID from UserStore where UserID = {2}) and PalletID in (select PalletID from PalletLocation where (PalletID is not null and Confirmed <> 1 and StorageTypeID <> {0} and StorageTypeID <> {1})) group by RefNo", StorageType.PickFace, StorageType.Quaranteen,userID);
            //string query = string.Format("select rd.RefNo, min(rd.Date)  as Date from ReceiveDoc rd where rd.StoreID in (select StoreID from UserStore where UserID = {0} and CanAccess=1) and (rd.Confirmed=0 or rd.Confirmed is null) group by RefNo", userID);
            BLL.User user = new User();
            user.LoadByPrimaryKey(userID);

            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetUnConfirmedReceivesForUser(userID, user.UserType == UserType.Constants.FUND_OFFICER ? ReceiptConfirmationStatus.Constants.PRICE_CONFIRMED : ReceiptConfirmationStatus.Constants.RECEIVE_ENTERED);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

     

        /// <summary>
        /// Gets the un confirmed receives.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        /// <param name="receiptConfirmationStatus">The receipt confirmation status.</param>
        /// <returns></returns>
        public DataTable GetUnConfirmedReceives(int userID, int receiptConfirmationStatus)//,int receiptConfirmationStatusToExclude)
        {
            BLL.User user = new User();
            user.LoadByPrimaryKey(userID);
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetUnConfirmedReceives(userID, receiptConfirmationStatus);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

       

        #region Flow Management

        /// <summary>
        /// Gets the receives for qty confirmation.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        /// <returns></returns>
        public DataTable GetReceivesForQtyConfirmation(int userID)
        {
            BLL.User user = new User();
            user.LoadByPrimaryKey(userID);
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetReceivesForQtyConfirmation(userID, BLL.ReceiptConfirmationStatus.Constants.RECEIVE_ENTERED, BLL.ReceiptConfirmationStatus.Constants.RECEIVE_QUANTITY_CONFIRMED, Settings.ShowBeginningBalanceOnGRNF);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

        

        /// <summary>
        /// 
        /// </summary>
        /// <param name="userID"></param>
        /// <param name="printingMode">1=GRV,2=SRM,3=DeliveryNote</param>
        /// <returns></returns>
        public DataTable GetReceivesForGRVPrinting(int userID, int printingMode)
        {
            BLL.User user = new User();
            string query = "";
            user.LoadByPrimaryKey(userID);
            if (printingMode == 1)
                query = HCMIS.Repository.Queries.PalletLocation.SelectGetReceivesForGRVPrinting(userID, BLL.ReceiptConfirmationStatus.Constants.PRICE_CONFIRMED);
            else if(printingMode==2)
                query = HCMIS.Repository.Queries.PalletLocation.SelectPrintingModeGetReceivesForGRVPrinting(userID, BLL.ReceiptConfirmationStatus.Constants.PRICE_CONFIRMED);
            else if(printingMode==3)
                query = HCMIS.Repository.Queries.PalletLocation.SelectGetReceivesForGRVPrintingElse(userID, BLL.ReceiptConfirmationStatus.Constants.PRICE_CONFIRMED);
            
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

     


        public DataTable GetReceivesForGRVConfirmation(int userID)
        {
            BLL.User user = new User();
            string query = "";
            user.LoadByPrimaryKey(userID);

            query = HCMIS.Repository.Queries.PalletLocation.SelectGetReceivesForGRVConfirmation(userID, BLL.ReceiptConfirmationStatus.Constants.GRV_PRINTED);

            this.LoadFromRawSql(query);

          
            return this.DataTable;
        }



        public DataTable GetReceivesForUnitCostConfirmation(int userID)//,int receiptConfirmationStatusToExclude)
        {
            BLL.User user = new User();
            user.LoadByPrimaryKey(userID);
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetReceivesForUnitCostConfirmation(userID, BLL.ReceiptConfirmationStatus.Constants.GRNF_PRINTED);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

    

        public DataView GetReceivesForMovingAverage(int userID)//,int receiptConfirmationStatusToExclude)
        {
            BLL.User user = new User();
            user.LoadByPrimaryKey(userID);
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetReceivesForMovingAverage(userID, BLL.ReceiptConfirmationStatus.Constants.PRICE_CONFIRMED);
            this.LoadFromRawSql(query);
            return this.DefaultView;
        }

 
        public DataTable GetReceivesForUnitCostApproval(int userID)//,int receiptConfirmationStatusToExclude)
        {
            BLL.User user = new User();
            user.LoadByPrimaryKey(userID);
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetReceivesForUnitCostApproval(userID, BLL.ReceiptConfirmationStatus.Constants.PRICE_CALCULATED);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

       
        public DataTable GetReceivesForUnitCostCalculation(int userID)//,int receiptConfirmationStatusToExclude)
        {
            string query;
            BLL.User user = new User();
            user.LoadByPrimaryKey(userID);
            if (BLL.Settings.IsCenter)
                query = HCMIS.Repository.Queries.PalletLocation.SelectGetReceivesForUnitCostCalculation(userID, BLL.ReceiptConfirmationStatus.Constants.GRNF_PRINTED);

            else
                query = HCMIS.Repository.Queries.PalletLocation.SelectGetReceivesForUnitCostCalculationElse(userID, BLL.ReceiptConfirmationStatus.Constants.GRNF_PRINTED);
                                                
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

       

        public DataTable GetReceivesForInvoiceConfirmation(int userID)
        {
            string query;
            BLL.User user = new User();
            user.LoadByPrimaryKey(userID);
            if (BLL.Settings.IsCenter)
                query = HCMIS.Repository.Queries.PalletLocation.SelectGetReceivesForInvoiceConfirmation(userID, BLL.ReceiptConfirmationStatus.Constants.RECEIVE_QUANTITY_CONFIRMED);

            else
                query = HCMIS.Repository.Queries.PalletLocation.SelectGetReceivesForInvoiceConfirmationElse(userID, BLL.ReceiptConfirmationStatus.Constants.RECEIVE_QUANTITY_CONFIRMED);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

  

        #endregion

        /// <summary>
        /// Gets the details of reference no.
        /// </summary>
        /// <param name="referenceNo">The reference no.</param>
        /// <returns></returns>
        public DataTable GetDetailsOfReferenceNo(string referenceNo)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetDetailsOfReferenceNo(referenceNo);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

      

        /// <summary>
        /// Gets the details of by receipt ID.
        /// </summary>
        /// <param name="receiptID">The receipt ID.</param>
        /// <returns></returns>
        public DataTable GetDetailsOfByReceiptID(int receiptID)
        {
            string query;
            if (BLL.Settings.IsCenter)
            {
                query = HCMIS.Repository.Queries.PalletLocation.SelectGetDetailsOfByReceiptIDIsCenter(receiptID);
                this.LoadFromRawSql(query);
            }
            else
            {
                query = HCMIS.Repository.Queries.PalletLocation.SelectGetDetailsOfByReceiptIDElse(receiptID);
                this.LoadFromRawSql(query);
            }
            return this.DataTable;
        }

      

      
        
        /// <summary>
        /// Gets the master of invoice by receipt ID.
        /// </summary>
        /// <param name="reference">The reference.</param>
        /// <returns></returns>
        public DataTable GetMasterOfInvoiceByReceiptID(string reference)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetMasterOfInvoiceByReceiptID(reference);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

      

        /// <summary>
        /// Gets the details of invoice.
        /// </summary>
        /// <param name="referenceNo">The reference no.</param>
        /// <returns></returns>
        public DataTable GetDetailsOfInvoice(string referenceNo)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetDetailsOfInvoice(referenceNo);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

       
        /// <summary>
        /// Gets the details of shortaga and damaged by receipt ID.
        /// </summary>
        /// <param name="receiptID">The receipt ID.</param>
        /// <returns></returns>
        public DataTable GetDetailsOfShortagaAndDamagedByReceiptID(int receiptID)
        {
//            string query = String.Format(@"select distinct RefNo, rd.ID ReceiveID, rd.ItemID, p.PalletNo,s.StoreName as Store,rd.UnitID,rd.ManufacturerID, su.CompanyName as Supplier , rp.PalletID, vw.FullItemName , rd.ExpDate,rd.BatchNo Batch,vw.StockCode StockCode, rd.NoOfPack , pl.ID PalletLocationID, pl.ID as ProposedPalletLocationID ,rd.PricePerPack PricePerPack, rd.Cost as UnitCost, rp.ReceivedQuantity / rd.QtyPerPack as Packs, (rp.ReceivedQuantity / rd.QtyPerPack) * rd.Cost as TotalCost,(rp.ReceivedQuantity / rd.QtyPerPack) * rd.PricePerPack as TotalReceived, m.Name as Manufacturer, isNull(rd.Margin,0.10) Margin,  IsNull(rd.Insurance,0) Insurance, 'Damaged' as Status from ReceivePallet rp join ReceiveDoc rd on rp.ReceiveID = rd.ID join Stores s on s.ID = rd.StoreID join Manufacturers m on m.ID = rd.ManufacturerID join vwGetAllItems vw  on vw.ID = rd.ItemID join Pallet p on p.ID = rp.PalletID join PalletLocation pl on pl.PalletID = p.ID left join Supplier su on su.ID = rd.SupplierID join Shelf sh on pl.ShelfID = sh.ID join PhysicalStore ps on ps.Id = sh.StoreID join PhysicalStoreType WH on WH.ID = ps.PhysicalStoreTypeID join Cluster CL on CL.ID = WH.ClusterID Join Receipt r on r.ID = rd.ReceiptID join ShortageReasons shR on rd.ShortageReasonID=shR.ID where  pl.StorageTypeID = {1} and r.ID ='{0}' 
//                                                    union
//                                           select distinct RefNo, rd.ID ReceiveID, rd.ItemID, p.PalletNo,s.StoreName as Store,rd.UnitID,rd.ManufacturerID, su.CompanyName as Supplier , rp.PalletID, vw.FullItemName , rd.ExpDate,rd.BatchNo Batch,vw.StockCode StockCode, rd.InvoicedNoOfPack - rd.NoOfPack , pl.ID PalletLocationID, pl.ID as ProposedPalletLocationID ,rd.PricePerPack PricePerPack, rd.Cost as UnitCost, rp.ReceivedQuantity / rd.QtyPerPack as Packs, (rp.ReceivedQuantity / rd.QtyPerPack) * rd.Cost as TotalCost,(rp.ReceivedQuantity / rd.QtyPerPack) * rd.PricePerPack as TotalReceived, m.Name as Manufacturer, isNull(rd.Margin,0.10) Margin,  IsNull(rd.Insurance,0) Insurance, 'Shortage' as Status from ReceivePallet rp join ReceiveDoc rd on rp.ReceiveID = rd.ID join Stores s on s.ID = rd.StoreID join Manufacturers m on m.ID = rd.ManufacturerID join vwGetAllItems vw  on vw.ID = rd.ItemID join Pallet p on p.ID = rp.PalletID join PalletLocation pl on pl.PalletID = p.ID left join Supplier su on su.ID = rd.SupplierID join Shelf sh on pl.ShelfID = sh.ID join PhysicalStore ps on ps.Id = sh.StoreID join PhysicalStoreType WH on WH.ID = ps.PhysicalStoreTypeID join Cluster CL on CL.ID = WH.ClusterID  where rd.receiptID = {0} and rd.InvoicedNoOfPack - rd.NoOfPack >0 ", receiptID, StorageType.Quaranteen);
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetDetailsOfShortagaAndDamagedByReceiptID(receiptID, StorageType.Quaranteen);
            
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

     

        /// <summary>
        /// Gets the details of shortage and damaged by receipt ID.
        /// </summary>
        /// <param name="referenceNo">The reference no.</param>
        /// <returns></returns>
        public DataTable GetDetailsOfShortagaAndDamagedByReceiptID(string referenceNo)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetDetailsOfShortagaAndDamagedByReceiptID(referenceNo, StorageType.Quaranteen);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

       
        /// <summary>
        /// Gets the quaranteen items.
        /// </summary>
        /// <returns></returns>
        public DataTable GetQuaranteenItems()
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetQuaranteenItems(StorageType.Quaranteen);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

      

        /// <summary>
        /// Confirms all received.
        /// </summary>
        /// <param name="reference">The reference.</param>
        public void ConfirmAllReceived(string reference)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.UpdateConfirmAllReceived(reference);
            this.LoadFromRawSql(query);
        }

       


        /// <summary>
        /// Calculates all volumes.
        /// </summary>
        public static void CalculateAllVolumes()
        {
            PalletLocation pl = new PalletLocation();
            pl.LoadFromRawSql(HCMIS.Repository.Queries.PalletLocation.SelectCalculateAllVolumes());
            Pallet pallet = new Pallet();
            while (!pl.EOF)
            {
                pl.UsedVolume = pallet.CalculateCurrentVolume(pl.PalletID);
                pl.Save();
                pl.MoveNext();
            }
        }

       


        /// <summary>
        /// Recommends the pallet movments.
        /// </summary>
        /// <returns></returns>
        public DataView RecommendPalletMovments()
        {
            // check for each pallet in bulk store
            this.LoadFromRawSql(HCMIS.Repository.Queries.PalletLocation.SelectRecommendPalletMovments(StorageType.BulkStore));
            DataTable dtbl = new DataTable();
            dtbl.Columns.Add("ItemID");
            dtbl.Columns.Add("FullItemName");
            dtbl.Columns.Add("PalletNo");
            dtbl.Columns.Add("FromID");
            dtbl.Columns.Add("ToID");
            dtbl.Columns.Add("From");
            dtbl.Columns.Add("To");
            int itemID = 0;
            int freePreferedLocationCount = 0;
            Item itms = new Item();
            bool checkable = false;
            PalletLocation pl = new PalletLocation();

            while (!this.EOF)
            {
                if (Convert.ToInt32(this.DataRow["ItemID"]) != itemID)
                {
                    itemID = Convert.ToInt32(this.DataRow["ItemID"]);
                    // do this if this item is a bulk storage
                    itms.GetItemByPrimaryKey(itemID);
                    if (itms.StorageTypeID.ToString() == StorageType.BulkStore)
                    {
                        checkable = true;

                        pl.LoadFreePrefferedLocationFor(itemID);
                        freePreferedLocationCount = pl.RowCount;
                    }
                    else
                    {
                        checkable = false;
                    }
                }

                if (checkable && freePreferedLocationCount > 0)
                {
                    //add it to the table
                    DataRowView drv = dtbl.DefaultView.AddNew();
                    drv["ItemID"] = itemID;
                    drv["FullItemName"] = itms.FullItemName;
                    drv["FromID"] = this.ID;
                    drv["ToID"] = pl.ID;
                    Pallet pallet = new Pallet();
                    pallet.LoadByPrimaryKey(this.PalletID);
                    drv["PalletNo"] = pallet.PalletNo;
                    pl.MoveNext();
                    freePreferedLocationCount--;
                    drv["From"] = this.FullName;
                    drv["To"] = pl.FullName;
                }

                this.MoveNext();
            }

            return dtbl.DefaultView;
        }

      

        /// <summary>
        /// Loads the non primary half.
        /// </summary>
        /// <param name="shelfID">The shelf ID.</param>
        /// <param name="row">The row.</param>
        /// <param name="col">The col.</param>
        public void LoadNonPrimaryHalf(int shelfID, int row, int col)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectLoadNonPrimaryHalf(shelfID, row, col);
            this.LoadFromRawSql(query);
            // this.MoveNext();
        }

       

        /// <summary>
        /// Uns the extend.
        /// </summary>
        public void UnExtend()
        {
            int id = this.ID;
            this.IsExtended = false;
            int ext = this.ExtendedRows;
            this.ExtendedRows = 0;
            // this.SetColumnNull("PalletID");
            this.LoadLabel();
            this.Save();
            PalletLocation pl = new PalletLocation();
            ShelfRowColumn src = new ShelfRowColumn();
            for (int i = 0; i < ext; i++)
            {
                // recreate the removed pallet locations
                pl.AddNew();
                pl.ShelfID = this.ShelfID;
                pl.StorageTypeID = this.StorageTypeID;
                pl.Column = this.Column;
                pl.Row = this.Row + i + 1;
                pl.Width = this.Width;
                pl.IsEnabled = true;
                src.LoadRowForShelf(this.ShelfID, pl.Row);
                pl.Height = src.Dimension;
                pl.Length = this.Length;
                pl.IsFullSize = true;
                pl.IsExtended = false;
                pl.ExtendedRows = 0;
                pl.AvailableVolume = (pl.Length * pl.Height * pl.Width);
                pl.UsedVolume = 0;
                pl.Confirmed = false;
                pl.LoadLabel();
            }
            pl.Save();
        }

        /// <summary>
        /// Gets the percentage grid for.
        /// </summary>
        /// <param name="shelfID">The shelf ID.</param>
        /// <returns></returns>
        public static DataTable GetPercentageGridFor(int shelfID)
        {
            // create the table
            DataTable dtbl = new DataTable();
            ShelfRowColumn src = new ShelfRowColumn();
            src.LoadColumnsForShelf(shelfID);
            while (!src.EOF)
            {
                dtbl.Columns.Add(src.Label, typeof(float));
                src.MoveNext();
            }


            ShelfRowColumn srcrows = new ShelfRowColumn();
            srcrows.LoadRowsForShelf(shelfID);
            PalletLocation pl = new PalletLocation();

            while (!srcrows.EOF)
            {
                src.Rewind();
                DataRowView drv = dtbl.DefaultView.AddNew();
                while (!src.EOF)
                {
                    pl.LoadPalletLocationFor(shelfID, src.Index, srcrows.Index);
                    if (pl.RowCount > 0)
                    {

                        {
                            if (pl.IsColumnNull("PalletID"))
                            {
                                pl.UsedVolume = 0;
                            }
                            else
                            {
                                Pallet p = new Pallet();
                                p.LoadByPrimaryKey(pl.PalletID);
                                pl.UsedVolume = p.CalculateCurrentVolume(pl.PalletID);
                                pl.Save();
                            }

                        }
                        pl.PercentUsed = pl.AvailableVolume == 0 ? 0 : Convert.ToDouble((pl.UsedVolume / pl.AvailableVolume) * 100);
                        pl.Save();
                        drv[src.Label] = pl.PercentUsed;

                    }
                    src.MoveNext();
                }
                srcrows.MoveNext();
            }
            return dtbl;
        }

        /// <summary>
        /// Gets the ID item data table for.
        /// </summary>
        /// <param name="shelfID">The shelf ID.</param>
        /// <param name="bw">The bw.</param>
        /// <returns></returns>
        public static DataTable GetIDItemDataTableFor(int shelfID, BackgroundWorker bw)
        {

            GarbageCollection();
            var dtbl = new DataTable();
            var plc = new PalletLocation();
            var ld = new System.Collections.Specialized.ListDictionary { { "@shelfid", shelfID } };

            // This does the job depending on the pivot Stored procedure.
            plc.LoadFromSql("PLView", ld, CommandType.StoredProcedure);

            return plc.DataTable;
        }

        /// <summary>
        /// Garbages the collection.
        /// </summary>
        public static void GarbageCollection()
        {
            // clean the items with 0 balance and still holding the pallet location.
            string query = HCMIS.Repository.Queries.PalletLocation.UpdateGarbageCollection();
            var pl = new PalletLocation();
            pl.LoadFromRawSql(query);
            // clean out the removed pallet locations.
            query = HCMIS.Repository.Queries.PalletLocation.UpdateGarbageCollectionPalletLocation();
            pl.LoadFromRawSql(query);
        }

       


        /// <summary>
        /// Counts the utilized.
        /// </summary>
        /// <param name="shelfID">The shelf ID.</param>
        /// <returns></returns>
        public double CountUtilized(int shelfID)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectCountUtilized(shelfID);
            this.LoadFromRawSql(query);
            double count = Convert.ToDouble(this.Getint("Count"));
            query = HCMIS.Repository.Queries.PalletLocation.SelectCountUtilizedOther(shelfID);
            this.LoadFromRawSql(query);
            double real = Convert.ToDouble(this.Getint("Count"));
            if (real != 0)
                return count / real;
            return 0;
        }

      


        /// <summary>
        /// Gets the quaranteen pallet location.
        /// </summary>
        /// <returns></returns>
        public static int GetQuaranteenPalletLocation(int physicalStoreID)
        {
            int storageType;
            int.TryParse(StorageType.Quaranteen, out storageType);
            var pl = new PalletLocation();
            pl.LoadFromRawSql(HCMIS.Repository.Queries.PalletLocation.SelectGetQuaranteenPalletLocation(physicalStoreID, storageType));
            if (pl.RowCount == 0)
            {
                var physicalStore = new BLL.PhysicalStore();
                physicalStore.LoadByPrimaryKey(physicalStoreID);
                throw new Exception(String.Format("Please Create a suspended pallet location on store:  {0} ",physicalStore.Name));
            }


            return pl.ID;
        }
        public static int GetQuaranteenPalletLocationByPalletLocationID(int palletLocationID)
        {
            PhysicalStore ps=new PhysicalStore();
            ps.LoadByPalletLocationID(palletLocationID);
            int physicalStoreID = ps.ID;

            int storageType;
            int.TryParse(StorageType.Quaranteen, out storageType);
            var pl = new PalletLocation();
            pl.LoadFromRawSql(HCMIS.Repository.Queries.PalletLocation.SelectGetQuaranteenPalletLocation(physicalStoreID, storageType));
            if (pl.RowCount == 0)
            {
                CreateDefaultQuaranteen();
                return GetQuaranteenPalletLocation(physicalStoreID);
            }


            return pl.ID;
        }

        
        /// <summary>
        /// Gets the transfer pallet location.
        /// </summary>
        /// <returns></returns>
        public static int GetTransferPalletLocation(int physicalStoreID)
        {
            var pl = new PalletLocation();
            pl.LoadFromRawSql(HCMIS.Repository.Queries.PalletLocation.SelectGetTransferPalletLocation(), StorageType.Quaranteen);
            if (pl.RowCount == 0)
            {
                CreateDefaultTransfer();
                return GetQuaranteenPalletLocation(physicalStoreID);
            }


            return pl.ID;
        }

        

        /// <summary>
        /// Creates the default transfer.
        /// </summary>
        public static void CreateDefaultTransfer()
        {
            // create the quaranteen type shelf
            PhysicalStore ps = new PhysicalStore();
            ps.LoadAll();

            Shelf shlf = new Shelf();
            shlf.AddNew();

            shlf.ShelfCode = "Transfer";
            shlf.StoreID = ps.ID;
            shlf.ShelfStorageType = Convert.ToInt32(StorageType.Quaranteen);
            shlf.Width = shlf.Height = shlf.Length = 1;
            shlf.Save();

            shlf.SavePalletLocationsInShelf(1, 1);
            shlf.SaveDimentions(1, 1, 1);
        }

        /// <summary>
        /// Creates the default quaranteen.
        /// </summary>
        private static void CreateDefaultQuaranteen()
        {
            // create the quaranteen type shelf
            PhysicalStore ps = new PhysicalStore();
            ps.LoadAll();

            Shelf shlf = new Shelf();
            shlf.AddNew();

            shlf.ShelfCode = "A";
            shlf.StoreID = ps.ID;
            shlf.ShelfStorageType = Convert.ToInt32(StorageType.Quaranteen);
            shlf.Width = shlf.Height = shlf.Length = 1;
            shlf.Save();

            shlf.SavePalletLocationsInShelf(1, 1);
            shlf.SaveDimentions(1, 1, 1);
        }

        /// <summary>
        /// Loads the preferred locations for.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        public void LoadPreferredLocationsFor(int itemId)
        {
            this.LoadFromRawSql(HCMIS.Repository.Queries.PalletLocation.SelectLoadPreferredLocationsFor(itemId));
        }

      

        /// <summary>
        /// Gets the non free.
        /// </summary>
        /// <param name="selectedRackID">The selected rack ID.</param>
        /// <returns></returns>
        public static DataView GetNonFree(int selectedRackID)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetNonFree(selectedRackID);
            PalletLocation pl = new PalletLocation();
            pl.LoadFromRawSql(query);
            return pl.DefaultView;
        }

     


        /// <summary>
        /// Gets the free in.
        /// </summary>
        /// <param name="selectedRackID">The selected rack ID.</param>
        /// <returns></returns>
        public static DataView GetFreeIn(int selectedRackID)
        {
            Shelf slf = new Shelf();
            slf.LoadByPrimaryKey(selectedRackID);

            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetFreeIn(slf.ShelfStorageType, slf.ID);

            PalletLocation pl = new PalletLocation();
            pl.LoadFromRawSql(query);
            return pl.DefaultView;
        }

      

        /// <summary>
        /// Moves the specified from.
        /// </summary>
        /// <param name="from">From.</param>
        /// <param name="to">To.</param>
        /// <returns></returns>
        public static bool Move(int from, int to)
        {
            PalletLocation pl = new PalletLocation();
            pl.LoadByPrimaryKey(from);
            if (!pl.IsColumnNull("PalletID"))
            {
                PalletLocation pl2 = new PalletLocation();

                pl2.LoadByPrimaryKey(to);
                if (pl2.IsColumnNull("PalletID"))
                {
                    pl2.PalletID = pl.PalletID;
                    pl.SetColumnNull("PalletID");
                    pl.Save();
                    pl2.Confirmed = true;
                    pl2.Save();
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Calculates all volumes.
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        internal static void CalculateAllVolumes(int itemID)
        {
            PalletLocation pl = new PalletLocation();
            pl.LoadFromRawSql(HCMIS.Repository.Queries.PalletLocation.SelectCalculateAllVolumes(itemID));
            Pallet pallet = new Pallet();
            while (!pl.EOF)
            {
                pl.UsedVolume = pallet.CalculateCurrentVolume(pl.PalletID);
                pl.Save();
                pl.MoveNext();
            }
        }

       

        //TOFIX this function should work with store ids
        /// <summary>
        /// Gets the location for items.
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        /// <returns></returns>
        public DataView GetLocationForItems(int itemID)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetLocationForItems(itemID, StorageType.PickFace, StorageType.Quaranteen);
            this.LoadFromRawSql(query);
            return this.DefaultView;
        }

      

        /// <summary>
        /// Gets the location for items exclude.
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        /// <param name="excludePalletLocationID">The exclude pallet location ID.</param>
        /// <returns></returns>
        public DataView GetLocationForItemsExclude(int itemID, int excludePalletLocationID)
        {
            this.LoadByPrimaryKey(excludePalletLocationID);
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetLocationForItemsExclude(excludePalletLocationID, PalletID, StorageType.Quaranteen, StorageType.PickFace);
            this.LoadFromRawSql(query);
            return this.DefaultView;
        }

       

        /// <summary>
        /// Loads the by pallet ID.
        /// </summary>
        /// <param name="p">The p.</param>
        public void loadByPalletID(int p)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectloadByPalletID(p);
            this.LoadFromRawSql(query);
        }

       

        /// <summary>
        /// Loads the consolidation option.
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        /// <param name="expiry">The expiry.</param>
        /// <param name="boxSize">Size of the box.</param>
        /// <param name="store">The store.</param>
        public void LoadConsolidationOption(int itemID, DateTime? expiry, int boxSize, int store)
        {
            string pfaceQuery = "";
            if (boxSize == 0)
            {
                PickFace pf = new PickFace();
                pf.LoadPickFaceFor(itemID, store);
                if (pf.RowCount > 0)
                {

                    if (!pf.IsColumnNull("PalletLocationID"))
                    {
                        PalletLocation pl = new PalletLocation();
                        pl.LoadByPrimaryKey(pf.PalletLocationID);
                        if (pl.IsColumnNull("PalletID"))
                        {
                            Pallet pallet = new Pallet();
                            pallet.AddNew();
                            pallet.StorageTypeID = Convert.ToInt32(StorageType.PickFace);
                            pallet.Save();

                            pl.PalletID = pallet.ID;
                            pl.Save();
                        }

                        pfaceQuery = string.Format(" pl.ID = {0}", pl.ID);
                    }

                }
            }

            string date = expiry != null ? string.Format("ExpDate = '{0}'", expiry.Value.ToShortDateString()) : "ExpDate is null";
            string query = HCMIS.Repository.Queries.PalletLocation.SelectLoadConsolidationOption(itemID, date);

            this.LoadFromRawSql(query);

            DataTable dtbl = this.DataTable;
            if (pfaceQuery != "")
            {
                query = HCMIS.Repository.Queries.PalletLocation.SelectLoadConsolidationOptionOther(pfaceQuery);
                this.LoadFromRawSql(query);
            }
            this.DataTable.Merge(dtbl);
        }

       


        /// <summary>
        /// Gets all occupied.
        /// </summary>
        /// <returns></returns>
        public static DataView GetAllOccupied()
        {
             string query = HCMIS.Repository.Queries.PalletLocation.SelectGetAllOccupied();
            PalletLocation pl = new PalletLocation();
            pl.LoadFromRawSql(query);
            DataRowView drv = pl.DefaultView.AddNew();
            drv["Label"] = "New Pallet";
            drv["ID"] = 0;
            return pl.DefaultView;
        }

        


        /// <summary>
        /// Gets the location list view.
        /// </summary>
        /// <param name="shelfID">The shelf ID.</param>
        /// <returns></returns>
        public DataView GetLocationListView(string shelfID)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetLocationListView(shelfID);
            this.LoadFromRawSql(query);
            return this.DefaultView;
        }

      

        /// <summary>
        /// Loads the by pallet number.
        /// </summary>
        /// <param name="p">The p.</param>
        /// <returns></returns>
        public DataView LoadByPalletNumber(int p)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectLoadByPalletNumber(p);
            this.LoadFromRawSql(query);
            return this.DefaultView;
        }

     

        /// <summary>
        /// Gets the pallet location ID.
        /// </summary>
        /// <param name="palletID">The pallet ID.</param>
        /// <returns></returns>
        public static int GetPalletLocationID(int palletID)
        {
            BLL.PalletLocation pl = new PalletLocation();
            pl.loadByPalletID(palletID);
            return pl.ID;
        }

        /// <summary>
        /// Gets the draft receives.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        /// <returns></returns>
        public DataView GetDraftReceives(int userID)
        {
            BLL.User user = new User();
            user.LoadByPrimaryKey(userID);
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetDraftReceives(userID, BLL.ReceiptConfirmationStatus.Constants.DRAFT_RECEIPT);
            this.LoadFromRawSql(query);
            return this.DefaultView;
        }

       

        /// <summary>
        /// Creates the inventory location.
        /// </summary>
        /// <param name="physicalStoreID">The physical store ID.</param>
        /// <exception cref="System.NotImplementedException"></exception>
        internal void CreateInventoryLocation(int physicalStoreID)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Loads the inventory location.
        /// </summary>
        /// <param name="physicalStoreID">The physical store ID.</param>
        internal void LoadInventoryLocation(int physicalStoreID)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Inventories the location exists.
        /// </summary>
        /// <param name="physicalStoreID">The physical store ID.</param>
        /// <returns></returns>
        internal bool InventoryLocationExists(int physicalStoreID)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Loads the first or default.
        /// </summary>
        /// <param name="physicalStoreID">The physical store ID.</param>
        /// <param name="storageTypeID">The storage type ID.</param>
        internal void LoadFirstOrDefault(int physicalStoreID, int storageTypeID)
        {
            string query =
                HCMIS.Repository.Queries.PalletLocation.SelectLoadFirstOrDefault(physicalStoreID, storageTypeID);
            this.LoadFromRawSql(query);
        }

     

        public int PhysicalStoreID
        {
            get
            {
                //TODO: Revise this code to throw an exception if the shelf is not found for a pallet location.
                if (this.RowCount > 0)
                {
                    Shelf shelf = new Shelf();
                    shelf.LoadByPrimaryKey(this.ShelfID);
                    return shelf.StoreID;
                }
                return 0;
            }            
        }

        public int WarehouseID
        {
            get
            {
                PhysicalStore pStore = new PhysicalStore() ;
                pStore.LoadByPrimaryKey(this.PhysicalStoreID);
                return pStore.PhysicalStoreTypeID;
            }
        }


        internal void GetDefaultPalletLocation(int physicalStoreID, string storageType)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectGetDefaultPalletLocation(physicalStoreID, storageType);
            this.LoadFromRawSql(query);
        }

        public  DataTable GetPalletLocationsOnTheSameStore(int palletId)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.SelectPalletLocationsOnTheSameStore(palletId);
            PalletLocation pl = new PalletLocation();
            pl.LoadFromRawSql(query);
            return pl.DataTable;
        }

        public int GetpalletidbyPalletLocationOrgetnew( int palletlocationid)
        {
            string query = HCMIS.Repository.Queries.PalletLocation.selectpalletidbyPalletLocation(palletlocationid);
            PalletLocation pl = new PalletLocation();
            pl.LoadFromRawSql(query);
            if (pl.RowCount > 0)
                return pl.PalletID;
            else
            {// create new pallet
                Pallet pallet = new Pallet();
                pallet.AddNew();
                
                string query2 = HCMIS.Repository.Queries.PalletLocation.selectstoreIDbyPalletLocationID(palletlocationid);
                PalletLocation pl2 = new PalletLocation();
                pl2.LoadFromRawSql(query2);
                pallet.StorageTypeID = pl2.StorageTypeID;
               
                pallet.Save();

                return pallet.ID;
            }
        }

        public  int GetPalletLocationIDByPalletID(int palletID)
        {
            BLL.PalletLocation pl = new PalletLocation();
            pl.loadByPalletID(palletID);
            return pl.ID;
        }

    }
}
