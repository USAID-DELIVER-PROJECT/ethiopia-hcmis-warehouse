
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using DAL;
namespace BLL
{
    /// <summary>
    /// pick face logic
    /// </summary>
	public class PickFace : _PickFace
	{
	    ///<summary>
	    /// Load pick face by pallet location designated to it.
		///</summary>
		///<param name="palletLocationId"></param>
		public void LoadByPalletLocation(int palletLocationId)
		{
			String query = HCMIS.Repository.Queries.PickFace.SelectLoadByPalletLocation(palletLocationId);
			this.LoadFromRawSql(query);
		}

       

        /// <summary>
        /// Loads pick face pallet locations that don't have no designated items
        /// </summary>
		public void LoadPalletLocationsWithoutEntries()
		{
            String query = HCMIS.Repository.Queries.PickFace.SelectLoadPalletLocationsWithoutEntries(StorageType.PickFace);
			this.LoadFromRawSql(query);
		}

       

        /// <summary>
        ///  Delete from pick face entries that don't belong to pick face location
        /// this is a clean up code 
        /// </summary>
		internal void DeleteNonPickfaceEntries()
		{
            String query = HCMIS.Repository.Queries.PickFace.DeleteDeleteNonPickfaceEntries(StorageType.PickFace);
			this.LoadFromRawSql(query);
		}

      


        /// <summary>
        /// Fixes the pick face entries.
        /// </summary>
		public static void FixPickFaceEntries()
		{
			PickFace pf = new PickFace();
			pf.LoadPalletLocationsWithoutEntries();
			PickFace pfl = new PickFace();
			while (!pf.EOF)
			{
				pfl.AddNew();
				pfl.PalletLocationID = pf.ID;
				pfl.Save();
				pf.MoveNext();
			}
			pf.DeleteNonPickfaceEntries();

		}

        /// <summary>
        /// Gets the pallet locations for item lookup.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <returns></returns>
		public DataTable GetPalletLocationsForItemLookup(int itemId)
		{
			String query = HCMIS.Repository.Queries.PickFace.SelectGetPalletLocationsForItemLookup(itemId);
			this.LoadFromRawSql(query);
			return this.DataTable;
		}

       

        /// <summary>
        /// Gets the pallet locations for item.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="storeID">The store ID.</param>
        /// <returns></returns>
		public DataTable GetPalletLocationsForItem(int itemId,int storeID)
		{
			String query = HCMIS.Repository.Queries.PickFace.SelectGetPalletLocationsForItem(itemId, storeID);
			this.LoadFromRawSql(query);
			return this.DataTable;
		}

      

        /// <summary>
        /// Gets the existing pallet locations for item.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <returns></returns>
		public DataTable GetExistingPalletLocationsForItem(int itemId)
		{
			String query = HCMIS.Repository.Queries.PickFace.SelectGetExistingPalletLocationsForItem(itemId);
			this.LoadFromRawSql(query);
			return this.DataTable;
		}

     

        /// <summary>
        /// Pallets the location for item.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <returns></returns>
		public string PalletLocationForItem(int itemId)
		{
			this.FlushData();
			String query = HCMIS.Repository.Queries.PickFace.SelectPalletLocationForItem(itemId);
			this.LoadFromRawSql(query);
			return (RowCount > 0)? this.ID.ToString(): "";
		}

       

        /// <summary>
        /// Saves the pick face location.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="palletLocation">The pallet location.</param>
        /// <param name="storeID">The store ID.</param>
		public void SavePickFaceLocation(int itemId, int palletLocation,int storeID)
		{
			// check if there is entry representing this item;
			
			this.GetPalletLocationsForItem(itemId, storeID);
			if (this.RowCount > 0)
			{
				this.LoadFromRawSql(HCMIS.Repository.Queries.PickFace.UpdateSavePickFaceLocation(itemId, storeID));
			}
			this.LoadByPalletLocation(palletLocation);
			if (this.RowCount == 0)
			{
				this.AddNew();
				
			}
			this.PalletLocationID = palletLocation;
			this.LogicalStore = storeID;
			if (this.IsColumnNull("DesignatedItem"))
			{
				this.DesignatedItem = itemId;
				this.Save();
			}
		}

        


        /// <summary>
        /// Get dtail items for Pick face
        /// </summary>
        /// <param name="pickfaceId"></param>
        /// <param name="palletLocationId"></param>
        /// <returns></returns>
		public DataTable GetDetailItemsFor(int pickfaceId, int palletLocationId)
		{
			this.FlushData();
			PalletLocation pl = new PalletLocation();
			pl.LoadByPrimaryKey(palletLocationId);
			if (!pl.IsColumnNull("PalletID"))
			{
				string query = HCMIS.Repository.Queries.PickFace.SelectGetDetailItemsFor(pl.PalletID);
				this.LoadFromRawSql(query);
			}
			return this.DataTable;

		}

      

        /// <summary>
        /// Get replenishment list options for item
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <returns></returns>
		public DataTable GetReplenishmentListFor(int itemId)
		{
            string query = HCMIS.Repository.Queries.PickFace.SelectGetReplenishmentListFor(itemId, StorageType.BulkStore);
			this.LoadFromRawSql(query);
			return this.DataTable;
		}

       

        /// <summary>
        ///Load pallet location for item grid
        /// </summary>
        /// <param name="itemId"></param>
		public void LoadPalletLocationForItemGrid(int itemId)
		{
			string query = HCMIS.Repository.Queries.PickFace.SelectFormLoadPalletLocationForItemGridat(itemId);
			this.LoadFromRawSql(query);
		}

       

        /// <summary>
        /// Gets pick face stock level (this is adjusted)
        /// </summary>
        /// <param name="logicalStore">The logical store.</param>
        /// <returns></returns>
		public DataTable GetPickFaceStockLevel(int logicalStore)
		{
			// update the pickface balance based on the reserved amounts in the receive Pallet table
            // Note: Check if this doesn't create a logical error.
            
            string query = HCMIS.Repository.Queries.PickFace.UpdateGetPickFaceStockLevel();
			this.LoadFromRawSql(query);
			
			// 
			query = HCMIS.Repository.Queries.PickFace.SelectGetPickFaceStockLevel(logicalStore);
			this.LoadFromRawSql(query);
			return this.DataTable;
		}

       


        /// <summary>
        /// Gets replenishment list for item id in logical store storeid
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="storeId">The store id.</param>
        /// <returns></returns>
		public DataTable GetReplenishmentListFor(int itemId, int storeId)
		{
			
			PalletLocation.CalculateAllVolumes(itemId);
            string query = HCMIS.Repository.Queries.PickFace.SelectGetReplenishmentListFor(itemId, storeId, StorageType.BulkStore);
			this.LoadFromRawSql(query);
			this.DataTable.Columns.Add("SKU", typeof(int));
			this.DataTable.Columns.Add("CanReplenish", typeof(bool));
			ItemManufacturer im = new ItemManufacturer();
			DateTime exp = new DateTime();
			int boxsize = -1;
			int j = 0;
			while (!this.EOF)
			{
				if (j == 0)
				{
					this.SetColumn("CanReplenish", true);
					boxsize = Convert.ToInt32(this.GetColumn("BoxSize"));
					if (!this.IsColumnNull("ExpiryDate"))
					{
						exp = Convert.ToDateTime(this.GetColumn("ExpiryDate"));
					}
				}
				else
				{
					int bs = Convert.ToInt32(this.GetColumn("BoxSize"));
					if ( bs < boxsize && exp.Subtract(Convert.ToDateTime(this.GetColumn("ExpiryDate"))).Days == 0)
					{
						this.SetColumn( "CanReplenish" , true);
					}else{
						this.SetColumn( "CanReplenish" , false);
					}
				}
				j++;
				im.LoadIMbyLevel(Convert.ToInt32( this.GetColumn( "ItemID" ) ), Convert.ToInt32(this.GetColumn("ManufacturerID")), 0);
				int i = Convert.ToInt32(this.GetColumn("Balance"));
				this.SetColumn("SKU", i / im.QuantityInBasicUnit ); 
				this.MoveNext();
			}
			return this.DataTable;
		}

     

        /// <summary>
        /// Loads pick face for an item.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="storeId">The store id.</param>
		public void LoadPickFaceFor( int itemId, int storeId )
		{
            //Manufacturer preference as well as delivery notes note handled here.
			string query = HCMIS.Repository.Queries.PickFace.SelectLoadPickFaceFor(itemId, storeId);
			this.LoadFromRawSql( query );
		}

      


        /// <summary>
        /// Clears pick face
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="logicalStore">The logical store.</param>
		public void ClearPickFaceFor(int itemId, int logicalStore)
		{
			string query = HCMIS.Repository.Queries.PickFace.SelectClearPickFaceFor(itemId, logicalStore);
			this.LoadFromRawSql(query);

		}
	}
}
