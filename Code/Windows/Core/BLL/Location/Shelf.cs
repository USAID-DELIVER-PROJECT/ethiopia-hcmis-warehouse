
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using DAL;

namespace BLL
{
	public class Shelf : _Shelf
	{
        private const int NumericValueA = 'A';

	    #region StaticProperties.
        public static DataTable AllShelves
        {
            get
            {
                Shelf s = new Shelf();
                s.LoadAllShelves();
                return s.DataTable;
            }
        }

        #endregion

        /// <summary>
        /// Gets the shelves.
        /// </summary>
        /// <returns></returns>
        public DataTable GetShelves()
        {
            this.FlushData();
            this.LoadFromRawSql(HCMIS.Repository.Queries.Shelf.SelectGetShelves());
            return this.DataTable;
        }

        private static char getChar(int index)
        {
            return (char)(NumericValueA + index);
        }
	   

	   

	    /// <summary>
        /// Saves the pallet locations in shelf.
        /// </summary>
        /// <param name="rows">The rows.</param>
        /// <param name="cols">The cols.</param>
        public void SavePalletLocationsInShelf(int rows, int cols)
        {
            // preserve the id of this shelf
            int id = this.ID;
            ShelfRowColumn src = new ShelfRowColumn();
            // check if the existing rows are null;
            if (this.IsColumnNull("Rows")) this.Rows = 0;
            if (this.IsColumnNull("Columns")) this.Columns = 0;
            this.Save();
            bool isColumnsChanged = (this.Columns != cols);
            bool isRowsChanged = (this.Rows != rows);
            
            PalletLocation pl = new PalletLocation();
            
            // Fix the row and columns if there are any new additions
            for (int i = this.Columns; i < cols; i++)
            {
                src.AddNew();
                src.ShelfID = id;
                src.Type = "Column";
                src.Index = i;
                src.Label = (i + 1).ToString();
                src.Save();
            }
            for (int i = this.Rows; i < rows; i++)
            {

                src.AddNew();
                src.ShelfID = id;
                src.Type = "Row";
                src.Index = i;
                src.Label = getChar(i).ToString();
                src.Save();
            }
            
            if (rows > this.Rows)
            {
                for (int i = this.Rows; i < rows; i++)
                {
                    for (int j = 0; j < cols; j++)
                    {
                        pl.AddNew();
                        pl.Column = j;
                        pl.Row = i;
                        pl.StorageTypeID = this.ShelfStorageType;
                        pl.ShelfID = id;
                        pl.LoadLabel();
                        pl.IsFullSize = true;
                        pl.IsExtended = false;
                        pl.IsEnabled = true;
                        pl.Width = this.Width;
                        pl.Height = 1;
                        pl.Length = 1;
                        pl.AvailableVolume = 0;
                        pl.UsedVolume = 0;
                        pl.Save();
                    }
                }
            }
            else if (rows < this.Rows)
            {
                this.LoadFromRawSql(HCMIS.Repository.Queries.Shelf.DeleteSavePalletLocationsInShelf(rows, id));
                this.LoadFromRawSql(HCMIS.Repository.Queries.Shelf.DeleteShelfRowColumnSavePalletLocationsInShelf(rows, id));
            }
            // if we have lost it for //rows < this.Rows
            this.LoadByPrimaryKey(id);

            if (cols > this.Columns)
            {
                

                for (int i = this.Columns; i < cols; i++)
                {
                    
                    for (int j = 0; j < this.Rows; j++)
                    {
                       
                        {
                            pl.AddNew();
                            pl.Column = i;
                            pl.Row = j;
                            pl.StorageTypeID = this.ShelfStorageType;
                            pl.ShelfID = id;
                            pl.LoadLabel();
                            pl.IsFullSize = true;
                            pl.IsExtended = false;
                            pl.IsEnabled = true;
                            pl.Width = this.Width;
                            pl.Height = 1;
                            pl.Length = 1;
                            pl.AvailableVolume = 0;
                            pl.UsedVolume = 0;
                            pl.Save();
                        }
                    }
                }
            }
            else if (cols < this.Columns)
            {
                this.LoadFromRawSql(HCMIS.Repository.Queries.Shelf.DeletePalletLocationSavePalletLocationsInShelf(cols, id));
                this.LoadFromRawSql(HCMIS.Repository.Queries.Shelf.DeleteFromShelfRowColumnSavePalletLocationsInShelf(cols, id));
            }
            this.FlushData();
            this.LoadByPrimaryKey(id);
            this.Rows = rows;
            this.Columns = cols;
            this.Save();

            if (isColumnsChanged)
            {
                FixLengthOfPalletLocations();
            }
            if (isRowsChanged)
            {
                FixHeightOfPalletLocations();
            }
            // make the approprait entry in the pick list locations
            if (this.ShelfStorageType.ToString() == StorageType.PickFace)
            {
                PickFace.FixPickFaceEntries();
            }

            FixVolume();

            //Find all Shelf pallet locations
            Shelf shelf = new Shelf();
            shelf.LoadFromRawSql(HCMIS.Repository.Queries.Shelf.SelectSavePalletLocationsInShelf(id));
            while (!shelf.EOF)
            {
                PalletLocation plc = new PalletLocation();
                plc.LoadByPrimaryKey(shelf.ID);
                plc.Label = string.Format("{0}-{1}-{2}", this.ShelfCode, plc.Column + 1, getChar(plc.Row));
                plc.Save();
                shelf.MoveNext();
            }

        }

	  

	    /// <summary>
        /// Fixes the volume.
        /// </summary>
        private void FixVolume()
        {
            PalletLocation pl = new PalletLocation();
            pl.LoadPalletLocationsByShelf(this.ID);
            while (!pl.EOF)
            {
                pl.AvailableVolume = (pl.Width * pl.Height * pl.Length);
                pl.MoveNext();
            }
            pl.Save();
        }

        /// <summary>
        /// Saves the dimentions.
        /// </summary>
        /// <param name="width">The width.</param>
        /// <param name="height">The height.</param>
        /// <param name="length">The length.</param>
        public void SaveDimentions(double width, double height, double length)
        {
            if (height != this.Height)
            {
                this.Height = height;
                this.Save();
                this.FixHeightOfPalletLocations();
            }
            if (length != this.Length)
            {
                this.Length = length;
                this.Save();
                FixLengthOfPalletLocations();
            }

            if (width != this.Width)
            {
                this.Width = width;
                this.Save();
                int id = this.ID;
                this.LoadFromRawSql(HCMIS.Repository.Queries.Shelf.SelectSaveDimentions(width, id));
                this.LoadByPrimaryKey(id);
            }
        }

	   

	    /// <summary>
        /// Fixes the height of pallet locations.
        /// </summary>
        private void FixHeightOfPalletLocations()
        {
            int id = this.ID;
            if (this.Rows > 0)
            {
                double palletHeight = Math.Round(this.Height / this.Rows, 2);
                this.LoadFromRawSql(HCMIS.Repository.Queries.Shelf.UpdateUpdatePalletLocationFixHeightOfPalletLocations(id, palletHeight));
                this.LoadFromRawSql(HCMIS.Repository.Queries.Shelf.UpdateFixHeightOfPalletLocations(id, palletHeight));
                this.LoadByPrimaryKey(id);
            }
        }

	    /// <summary>
        /// Fixes the length of pallet locations.
        /// </summary>
        private void FixLengthOfPalletLocations()
        {
            int id = this.ID;
            if (this.Columns > 0)
            {
                double palletLength = Math.Round(this.Length / this.Columns, 2);
                this.LoadFromRawSql(HCMIS.Repository.Queries.Shelf.UpdatePalletLocationFixLengthOfPalletLocations(id, palletLength));
                this.LoadFromRawSql(HCMIS.Repository.Queries.Shelf.UpdateShelfRowColumnFixLengthOfPalletLocations(id, palletLength));
                this.LoadByPrimaryKey(id);
            }
        }

	  


	    /// <summary>
        /// Saves the type of the shelf storage.
        /// </summary>
        /// <param name="storageType">Type of the storage.</param>
        public void SaveShelfStorageType(int storageType)
        {
            if (this.IsColumnNull("ShelfStorageType") || this.ShelfStorageType != storageType)
            {
                // make the modification to all simmilar storage types of pallet Locations

                PalletLocation pl = new PalletLocation();
                if (this.IsColumnNull("ShelfStorageType"))
                {
                    pl.ChangeStorageTypesOf(this.ID, storageType);
                }
                else
                {
                    pl.ChangeStorageTypesOf(this.ID, this.ShelfStorageType, storageType);
                }
            }
            this.ShelfStorageType = storageType;
            this.Save();
        }


	    /// <summary>
        /// Loads the type of the shelves by storage.
        /// </summary>
        /// <param name="StorageType">Type of the storage.</param>
        public void LoadShelvesByStorageType(string StorageType, int storeID=0)
        {

            this.LoadFromRawSql(HCMIS.Repository.Queries.Shelf.SelectLoadShelvesByStorageType(StorageType, storeID));
        }

	  

	    public void LoadForMergedView()
        {
            this.LoadFromRawSql(HCMIS.Repository.Queries.Shelf.SelectLoadForMergedView());
            
        }


	    /// <summary>
        /// Loads for merged view.
        /// </summary>
        /// <param name="storageType">Type of the storage.</param>
        public void LoadForMergedView(string storageType)
        {
            this.LoadFromRawSql(HCMIS.Repository.Queries.Shelf.SelectLoadForMergedView(storageType));
        }

	  

	    /// <summary>
        /// Loads for merged view by shelf ID.
        /// </summary>
        /// <param name="shelfID">The shelf ID.</param>
        public void LoadForMergedViewByShelfID(int shelfID)
        {
            this.LoadFromRawSql(HCMIS.Repository.Queries.Shelf.SelectLoadForMergedViewByShelfID(shelfID));

        }


// the past three functions basically return the same kind of result and should be treated as view

        /// <summary>
        /// Loads all shelves.
        /// </summary>
        public void LoadAllShelves()
        {
            this.LoadFromRawSql(HCMIS.Repository.Queries.Shelf.SelectLoadAllShelves());
        }

	   

	    /// <summary>
        /// Loads all shelves.
        /// </summary>
        /// <param name="storeID">The store ID.</param>
        public void LoadAllShelves(int storeID)
        {
            this.LoadFromRawSql(HCMIS.Repository.Queries.Shelf.SelectLoadAllShelves(storeID));
        }

	


	    /// <summary>
        /// Gets the utilization.
        /// </summary>
        /// <param name="storageTypeID">The storage type ID.</param>
        /// <returns></returns>
        public DataTable GetUtilization(int storageTypeID)
        {
            
            string query = HCMIS.Repository.Queries.Shelf.SelectGetUtilization(storageTypeID);
            this.LoadFromRawSql(query);
            PalletLocation pl = new PalletLocation();
            while (!this.EOF)
            {
                this.DataRow["Value"] =  pl.CountUtilized(this.ID);
                this.MoveNext();
            }
            return this.DataTable;
        }

	  

	    /// <summary>
        /// Gets the items on shelf.
        /// </summary>
        /// <param name="selectedRackID">The selected rack ID.</param>
        /// <returns></returns>
        public static DataTable GetItemsOnShelf(int selectedRackID)
        {
            string query = HCMIS.Repository.Queries.Shelf.SelectGetItemsOnShelf(selectedRackID);
            Shelf s = new Shelf();
            s.LoadFromRawSql(query);
            return s.DataTable;
        }
	}
}
