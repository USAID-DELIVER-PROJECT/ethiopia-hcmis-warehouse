
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using DAL;
using System.Data;

namespace BLL
{
    /// <summary>
    /// 
    /// </summary>
    public class ReceiptInvoice : _ReceiptInvoice
    {
        PO _po;
        public ReceiptInvoice()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiptInvoice" /> class.
        /// </summary>
        /// <param name="ID">The ID.</param>
        public ReceiptInvoice(int ID)
        {
            LoadByPrimaryKey(ID);
            _po = new PO(POID);
            ConvertNull();
        }

        private BLL.Receipt _Receipt = new BLL.Receipt();
        /// <summary>
        /// Gets or Sets The Receipt associated with ReceiptInvoice
        /// </summary>
        /// <value>
        /// The receipts.
        /// </value>
        public BLL.Receipt Receipts
        {
            get
            {
                _Receipt.LoadByReceiptInvoiceID(this.ID);
                return _Receipt;
            }
            set
            {
                value.SetReceiptInvoiceID(this.ID);
            }
        }
        /// <summary>
        /// Gets or sets the PO.
        /// </summary>
        /// <value>
        /// The PO.
        /// </value>
        public PO PO
        {
            get
            {
                return _po;
            }
            set
            {
                this.POID = value.ID;
            }
        }

        public static Receipt CreateReceiptInvoiceAndReceiptForTransfer(int receiptTypeID, int POID, int warehouseID, int IDPrinted, int userID)
        {
            BLL.ReceiptInvoice rctInvoice = new ReceiptInvoice();
            rctInvoice.AddNew();
            var po = new BLL.PO();
            po.LoadByPrimaryKey(POID);
            var activityID = po.StoreID;

            //Enter Invoice Related Information
            //We should Save the STV Number Here
            rctInvoice.POID = POID;
            rctInvoice.STVOrInvoiceNo = IDPrinted.ToString("00000");
            rctInvoice.ExchangeRate = 1;
            rctInvoice.Insurance = 0;
            rctInvoice.DateOfEntry = DateTimeHelper.ServerDateTime;
            rctInvoice.SavedByUserID = userID;
            rctInvoice.ActivityID = activityID;
            rctInvoice.IsDeliveryNote = false;
            rctInvoice.InvoiceTypeID = BLL.InvoiceType.InternalSTV;

            rctInvoice.PrintedDate = DateTimeHelper.ServerDateTime;
            rctInvoice.Rowguid = Guid.NewGuid();
            rctInvoice.IsVoided = false;
            rctInvoice.ShippingSite = " ";
            rctInvoice.IsConvertedFromDeliveryNote = false;
            rctInvoice.DocumentTypeID = DocumentType.CONSTANTS.STV;

            rctInvoice.Save();
            //Save the receipt
            BLL.Receipt receipt = new Receipt();
            int receiptID = receipt.AddNewReceipt(receiptTypeID, warehouseID, userID, rctInvoice.ID, null, ReceiptConfirmationStatus.Constants.RECEIVE_ENTERED);
            receipt.LoadByPrimaryKey(receiptID);
            return receipt;
        }


        public static Receipt CreateAutomaticReceiptInvoiceForSTVTransfer(int POID, int warehouseID, int IDPrinted, int userID)
        {
            BLL.ReceiptInvoice rctInvoice = new ReceiptInvoice();
            rctInvoice.AddNew();

            //Enter Invoice Related Information
            //We should Save the STV Number Here
            rctInvoice.POID = POID;
            rctInvoice.STVOrInvoiceNo = IDPrinted.ToString("00000");
            rctInvoice.ExchangeRate = 1;
            rctInvoice.Insurance = 0;
            rctInvoice.DateOfEntry = DateTimeHelper.ServerDateTime;
            rctInvoice.IsDeliveryNote = false;
            rctInvoice.Save();
            //Save the receipt
            BLL.Receipt receipt = new Receipt();
            int receiptID = receipt.AddNewReceipt(BLL.ReceiptType.CONSTANTS.STANDARD_RECEIPT, warehouseID, userID, rctInvoice.ID, null, ReceiptConfirmationStatus.Constants.RECEIVE_ENTERED);
            receipt.LoadByPrimaryKey(receiptID);
            return receipt;
        }
        /// <summary>
        /// Gets the total FOB value.
        /// </summary>
        /// <value>
        /// The total FOB value.
        /// </value>
        public double TotalFOBValue
        {
            get
            {
                return GetTotalFOBValue();
            }
        }
        /// <summary>
        /// Gets the shipped by.
        /// </summary>
        /// <value>
        /// The shipped by.
        /// </value>
        public string ShippedBy
        {
            get
            {
                if (!IsColumnNull("InvoiceTypeID") && InvoiceTypeID == BLL.ReceiptInvoiceType.InvoiceType.INVOICE_AIR)
                    return "Air";
                else if (!IsColumnNull("InvoiceTypeID") && InvoiceTypeID == BLL.ReceiptInvoiceType.InvoiceType.INVOICE_SEA)
                    return "Sea";
                else
                    return "N/A";

            }
        }
        public double GetFreight(double Value)
        {

            if (PO.TotalValue != 0)
                return (PO.AirFreight / PO.TotalValue) * Value;
            else
                return 0;
        }
        /// <summary>
        /// Gets the total FOB value.
        /// </summary>
        /// <returns></returns>
        private double GetTotalFOBValue()
        {
            Rewind();
            double TotalFOBValue = 0;
            while (!EOF)
            {

                if (!IsColumnNull("TotalValue") && !IsColumnNull("InvoiceTypeID") && InvoiceTypeID != BLL.ReceiptInvoiceType.InvoiceType.NON_STANDARD)
                    TotalFOBValue += this.TotalValue;
                MoveNext();
            }
            return TotalFOBValue;
        }

        /// <summary>
        /// Load All Invoice Under a PO:
        /// </summary>
        /// <param name="POID">Purchase Order ID</param>
        public void LoadForPO(int POID)
        {
            var query = HCMIS.Repository.Queries.ReceiptInvoice.SelectLoadForPO(POID);
            this.LoadFromRawSql(query);
        }

        /// <summary>
        /// Sets the POID.
        /// </summary>
        /// <param name="POID">The POID.</param>
        public void SetPOID(int POID)
        {

        }

        /// <summary>
        /// It will return all Invoice For Now
        /// </summary>
        /// <returns></returns>
        public static DataView GetIncompleteInvoices(int userID, int poTypeID, int documentTypeID)
        {
            SoftwareSettings softwareSetting = new SoftwareSettings();
            ReceiptInvoice Invoice = new ReceiptInvoice();

            var settingDT = softwareSetting.GetValue("IsElectronicReceiveOnly");
            bool isNonElectronicReceiveOnly = true;

            if (settingDT.Rows.Count != 0)
            {
                isNonElectronicReceiveOnly = bool.Parse(settingDT.Rows[0].Field<string>("Value").ToLower());
            }
            
            var query = HCMIS.Repository.Queries.ReceiptInvoice.SelectGetIncompleteInvoices(userID, isNonElectronicReceiveOnly,poTypeID,documentTypeID);
            Invoice.LoadFromRawSql(query);
            

            return Invoice.DefaultView;
        }

        public static DataView GetIncompleteInvoicesForCenter(int userID, bool isDeliveryNote)
        {
            var invoice = new ReceiptInvoice();

            if (BLL.Settings.IsCenter) // If Center, Get incomplete invoices including those with FOB = 0
            {
                var query = HCMIS.Repository.Queries.ReceiptInvoice.SelectGetIncompleteInvoicesForCenter(userID, isDeliveryNote);
                invoice.LoadFromRawSql(query);
            }
            return invoice.DefaultView;
        }
    

        public void GetPrintedDate(int receiptInvoiceID)
        {
            var query = HCMIS.Repository.Queries.ReceiptInvoice.SelectGetPrintedDate(receiptInvoiceID);
            this.LoadFromRawSql(query);
        }

        /// <summary>
        /// Gets the store ID.
        /// </summary>
        /// <returns></returns>
        public int GetStoreID()
        {
            BLL.PO po = new PO();
            po.LoadByPrimaryKey(this.POID);
            return po.StoreID;
        }

        /// <summary>
        /// Gets the supplier.
        /// </summary>
        /// <returns></returns>
        public int GetSupplier()
        {
            BLL.PO po = new PO();
            po.LoadByPrimaryKey(this.POID);
            return po.SupplierID;
        }

        /// <summary>
        /// Converts the null.
        /// </summary>
        public void ConvertNull()
        {
            if (IsColumnNull("TotalValue"))
                TotalValue = 0.0;
            if (IsColumnNull("Insurance"))
                Insurance = 0.0;
            if (IsColumnNull("AirFreight"))
                AirFreight = 0.0;
            if (IsColumnNull("SeaFreight"))
                SeaFreight = 0.0;
            if (IsColumnNull("InlandFreight"))
                InlandFreight = 0.0;
            if (IsColumnNull("NBE"))
                NBE = 0.0;
            if (IsColumnNull("CBE"))
                CBE = 0.0;
            if (IsColumnNull("CustomDutyTax"))
                CustomDutyTax = 0.0;
            if (IsColumnNull("Provision"))
                Provision = 0.0;
            if (IsColumnNull("TransitServiceCharge"))
                TransitServiceCharge = 0.0;
            if (IsColumnNull("ExchangeRate"))
                ExchangeRate = 1.0;
            if (IsColumnNull("InvoiceTypeID"))
                InvoiceTypeID = BLL.ReceiptInvoiceType.InvoiceType.STV;
            if (IsColumnNull("LCID"))
                LCID = 0x045e;

        }

        /// <summary>
        /// Gets the data table.
        /// </summary>
        /// <returns></returns>
        public DataTable GetDataTable()
        {
            var query = HCMIS.Repository.Queries.ReceiptInvoice.SelectGetDataTable();
            this.LoadFromRawSql(query);
            return this.DataTable;
        }


        public void GetStatusOfInvoice(string invoiceNo)
        {
            var query = HCMIS.Repository.Queries.ReceiptInvoice.SelectGetStatusOfInvoice(invoiceNo);
            this.LoadFromRawSql(query);
        }

        public static bool IsInvoiceEditable(int ID)
        {
            ReceiptInvoice invoice = new ReceiptInvoice();

            var query = HCMIS.Repository.Queries.ReceiptInvoice.SelectIsInvoiceEditable(ID, Settings.DisableInvoiceEditAfterStepNo);
            invoice.LoadFromRawSql(query);
            return invoice.RowCount == 0;
        }

        public DataTable GetRelatedReceives()
        {
            ReceiptInvoice invoice = new ReceiptInvoice();
            var query = HCMIS.Repository.Queries.ReceiptInvoice.SelectGetRelatedReceives(this.ID);
            invoice.LoadFromRawSql(query);
            return invoice.DataTable;
        }

        public static bool IsInvoiceElectronic(string invoiceNo)
        {
            ReceiptInvoice invoice = new ReceiptInvoice();
            var query = HCMIS.Repository.Queries.ReceiptInvoice.SelectIsInvoiceElectronic(invoiceNo);
            invoice.LoadFromRawSql(query);

            if (invoice.RowCount == 0) return false;
            return (bool)invoice.GetColumn("IsElectronic");
        }

        public static decimal GetInvoiceQuantity(string invoiceNo, string itemId, string unitId, string manufacturerId)
        {
            ReceiptInvoice invoice = new ReceiptInvoice();
            var query = HCMIS.Repository.Queries.ReceiptInvoice.SelectGetInvoiceQuantity(invoiceNo, itemId, unitId, manufacturerId);
            invoice.LoadFromRawSql(query);
            if (invoice.RowCount == 0) return 0;

            return (decimal)invoice.GetColumn("Quantity");
        }

        public bool CheckIfThisInvoiceHasBeenReceived()
        {
            var invoice = new ReceiptInvoice();
            var query = HCMIS.Repository.Queries.ReceiptInvoice.SelectIfThisInvoiceHasBeenReceived(ID);
            invoice.LoadFromRawSql(query);
            return (invoice.RowCount > 0);
        }

    }
}
