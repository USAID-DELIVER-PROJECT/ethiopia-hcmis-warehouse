// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Globalization;
using System.Linq;
using DAL;
using MyGeneration.dOOdads;

namespace BLL
{
    /// <summary>
    /// Receiving document
    /// </summary>
    public class ReceiveDoc : _ReceiveDoc
    {


        /// <summary>
        /// Loads the by item ID.
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        public void LoadByItemID(int itemID)
        {
            this.FlushData();
            this.Where.ItemID.Value = itemID;
            this.Query.Load();
        }



        public void GetAllWithQuantityLeft(int itemID, int storeID)
        {
            this.FlushData();
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetAllWithQuantityLeft(itemID, storeID);

            this.LoadFromRawSql(query);
        }

        /// <summary>
        /// Gets distinct receive documents
        /// </summary>
        /// <param name="storeId"></param>
        /// <returns></returns>
        public DataTable GetDistinctRecDocments(int storeId)
        {
            FlushData();
            string query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetDistinctRecDocments(storeId);
            LoadFromRawSql(query);
            return DataTable;
        }

        /// <summary>
        /// Gets detail of receive transaction by reference number
        /// </summary>
        /// <param name="refNo">The ref no.</param>
        /// <param name="storeId">The store id.</param>
        /// <param name="dt">The dt.</param>
        /// <returns></returns>
        public DataTable GetTransactionByRefNo(string refNo, int storeId, string dt)
        {
            FlushData();
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetTransactionByRefNo(refNo, storeId, dt);
            LoadFromRawSql(query);
            return DataTable;
        }

        /// <summary>
        /// Gets all receive transactions in store
        /// </summary>
        /// <param name="storeId">The store id.</param>
        /// <returns></returns>
        public DataTable GetAllTransaction(int storeId)
        {
            FlushData();
            LoadFromRawSql(
                HCMIS.Repository.Queries.ReceiveDoc.SelectGetAllTransaction(storeId));
            return DataTable;
        }

        /// <summary>
        /// Returns receive transactions by supplier id
        /// </summary>
        /// <param name="storeId">The store id.</param>
        /// <param name="supplierId">The supplier id.</param>
        /// <returns></returns>
        public DataTable GetTransactionBySupplierId(int storeId, int supplierId)
        {
            FlushData();
            LoadFromRawSql(
                HCMIS.Repository.Queries.ReceiveDoc.SelectGetTransactionBySupplierId(storeId, supplierId));
            return DataTable;
        }

        /// <summary>
        /// Returns receive transactions by date range
        /// </summary>
        /// <param name="storeId">The store id.</param>
        /// <param name="dt1">The DT1.</param>
        /// <param name="dt2">The DT2.</param>
        /// <returns></returns>
        public DataTable GetTransactionByDateRange(int storeId, DateTime dt1, DateTime dt2)
        {
            FlushData();
            LoadFromRawSql(
                HCMIS.Repository.Queries.ReceiveDoc.SelectGetTransactionByDateRange(storeId, dt1, dt2));
            return DataTable;
        }


        /// <summary>
        /// Returns received quanitity to specified month
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="storeId">The store id.</param>
        /// <param name="month">The month.</param>
        /// <param name="year">The year.</param>
        /// <returns></returns>
        public Int64 GetReceivedQuantityTillMonth(int itemId, int storeId, int month, int year)
        {
            // this may create a logical error
            if (year == 0)
            {
                year = 2002;
            }
            FlushData();
            int yr = (month < 11) ? year - 1 : year;
            var dt1 = new DateTime(yr, 11, 1);
            var dt2 = new DateTime(year, month, DateTime.DaysInMonth(year, month));
            //?IChanged Quantity to NoOfPack
            LoadFromRawSql(
                HCMIS.Repository.Queries.ReceiveDoc.SelectGetReceivedQuantityTillMonth(itemId, storeId, dt1, dt2));
            Int64 quant = 0;
            quant = (DataTable.Rows[0]["Quantity"].ToString() != "")
                        ? Convert.ToInt64(DataTable.Rows[0]["Quantity"])
                        : 0;
            return quant;
        }


        /// <summary>
        /// Returns count of never received items
        /// that are marked as used items in the hub
        /// </summary>
        /// <param name="storeId">The store id.</param>
        /// <returns></returns>
        public int CountNeverReceivedItems(int storeId)
        {
            FlushData();
            if (storeId == 0)
            {
                LoadFromRawSql(
                    HCMIS.Repository.Queries.ReceiveDoc.SelectCountNeverReceivedItems());
            }
            else
            {
                LoadFromRawSql(
                    HCMIS.Repository.Queries.ReceiveDoc.SelectCountNeverReceivedItems(storeId));
            }
            int count = 0;
            count = DataTable.Rows.Count;
            return count;
        }


        /// <summary>
        /// Gets received items with balance
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        /// <param name="storeID">The store ID.</param>
        /// <param name="unitID">The unit ID.</param>
        /// <returns></returns>
        public DataTable GetRecievedItemsWithBalance(int itemID, int storeID, int? unitID)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetRecievedItemsWithBalance(itemID, storeID, unitID);
            LoadFromRawSql(query);
            return DataTable;
        }

        /// <summary>
        /// Get Received items
        /// Exclues Quaranteen
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        /// <param name="unitID">The unit ID.</param>
        /// <returns></returns>
        public DataTable GetRecievedItemsWithBalanceExcludeQuaranteen(int itemID, int unitID,bool showZeroBalance = false)
        {
            FlushData();
            string query;
            if (showZeroBalance)
            {
                query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetRecievedItemsWithBalanceExcludeQuaranteenShowZeroBalance(itemID, unitID, StorageType.Quaranteen);
            }
            else
            {
                query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetRecievedItemsWithBalanceExcludeQuaranteen(itemID, unitID, StorageType.Quaranteen);

            }
            LoadFromRawSql(query);
            return DataTable;
        }


        /// <summary>
        /// Gets expired items with balance
        /// this exclues quaranteen
        /// </summary>
        /// <returns></returns>
        public DataTable GetExpiredItemsWithBalanceExcludeQuaranteen()
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetExpiredItemsWithBalanceExcludeQuaranteen(StorageType.Quaranteen);
            LoadFromRawSql(query);
            return DataTable;
        }


        /// <summary>
        /// Load all priced receives
        /// </summary>
        /// <param name="storeId">The store id.</param>
        public void LoadAllPricedReceives(int storeId)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadAllPricedReceives(storeId);
            LoadFromRawSql(query);
        }


        public static bool DoesPriceNeedToBeChanged(int storeID, int itemID, int unitID,int ManufacturerID)
        {
            BLL.Activity store = new Activity();
             store.LoadByPrimaryKey(storeID);

              
            ReceiveDoc rd = new ReceiveDoc();
            string query;
              query = HCMIS.Repository.Queries.ReceiveDoc.SelectDoesPriceNeedToBeChanged(storeID, itemID, unitID, ManufacturerID);
                                rd.LoadFromRawSql(query);
            if (rd.RowCount > 1)
                return true;
            return false;
        }

        /// <summary>
        /// Loads the receives for stores.
        /// </summary>
        /// <param name="storeID">The store ID.</param>
        public void LoadReceivesForStores(int storeID)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadReceivesForStores(storeID);
            this.LoadFromRawSql(query);
        }

        /// <summary>
        /// Confirmation Page is open for the Finance Manager
        /// </summary>
        /// <param name="AccountID">Account ID for items to be Confirmed</param>
        public void LoadAllItemsPendingPriceConfirmation(int accountId)
        {
            string query;
            query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadAllItemsPendingPriceConfirmation(accountId);


            LoadFromRawSql(query);
        }

        /// <summary>
        /// Loads all items pending average beginning balance included.
        /// </summary>
        /// <param name="AccountID">The account ID.</param>
        public void LoadAllItemsPendingAverageBeginningBalanceIncluded(int accountId)
        {
            string query;
            query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadAllItemsPendingAverageBeginningBalanceIncluded(accountId);

            LoadFromRawSql(query);
        }

        /// <summary>
        /// Loads all items pending average.
        /// </summary>
        /// <param name="AccountID">The account ID.</param>
        public void LoadAllItemsPendingAverage(int accountId)
        {
            string query;

            query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadAllItemsPendingAverage(accountId);


            LoadFromRawSql(query);
        }

        /// <summary>
        /// Loads all non priced items
        /// <param name="storeId">StoreId is the Account ID</param>
        /// </summary>
        /// <param name="AccountID">The account ID.</param>
        /// <param name="openForConfirmation">if set to <c>true</c> [open for confirmation].</param>
        public void LoadAllNonPricedItems(int AccountID, bool openForConfirmation)
        {


            if (openForConfirmation)
            {
                LoadAllItemsPendingPriceConfirmation(AccountID);
            }
            else if (BLL.Settings.SkipBeginningBalancePricing)
            {

                LoadAllItemsPendingAverageBeginningBalanceIncluded(AccountID);

            }
            else
            {

                LoadAllItemsPendingAverage(AccountID);

            }

        }


        public static DataView ReceivedAmountByReason(int ethiopianMonth, int ethiopianYear, int accountID)
        {
            ReceiveDoc receiveDoc = new ReceiveDoc();
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectReceivedAmountByReason(ethiopianMonth, ethiopianYear, accountID);
            receiveDoc.LoadFromRawSql(query);
            return receiveDoc.DefaultView; 
        }


        public static DataView ReceivedAmoutByYear(int ethiopianYear, int accountID)
        {
            ReceiveDoc receiveDoc = new ReceiveDoc();
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectReceivedAmoutByYear(ethiopianYear, accountID);
            receiveDoc.LoadFromRawSql(query);
            return receiveDoc.DefaultView;
        }

        public  DataTable VitalReport(int fromEthiopianYear, int fromEthiopianMonth, int toEthiopianYear, int toEthiopianMonth, int storeId,int userId,int categoryId)
        {
            var startDate = EthiopianDate.EthiopianDate.EthiopianToGregorian(String.Format("{0}/{1}/{2}", 1, fromEthiopianMonth, fromEthiopianYear));
            var endDate = EthiopianDate.EthiopianDate.EthiopianToGregorian(String.Format("{0}/{1}/{2}", 30, toEthiopianMonth, toEthiopianYear));
            if (fromEthiopianMonth != 1)
                fromEthiopianMonth--;
            else
            {
                fromEthiopianYear--;
                fromEthiopianYear = 12;//Because SOH returns stock until the end of the month
            }
            DataTable soh1 = Balance.GetSohForAllItemsByType(storeId, "MODE", userId , fromEthiopianYear, fromEthiopianMonth,categoryId);
            DataTable soh2 = Balance.GetSohForAllItemsByType(storeId, "MODE", userId, toEthiopianYear, toEthiopianMonth, categoryId);

           

            var dt1 = new DateTime(fromEthiopianYear, fromEthiopianMonth, DateTime.DaysInMonth(fromEthiopianYear, fromEthiopianMonth));
            var dt2 = new DateTime(toEthiopianYear, toEthiopianMonth, DateTime.DaysInMonth(toEthiopianYear, toEthiopianMonth));

            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectVitalReportReceived(storeId, dt1, dt2);
            LoadFromRawSql(query);
            var received = DataTable;

            query = HCMIS.Repository.Queries.ReceiveDoc.SelectVitalReportIssued(storeId, dt1, dt2);
            LoadFromRawSql(query);
            var issued = DataTable;

            query = HCMIS.Repository.Queries.ReceiveDoc.SelectVitalReportLost(storeId, dt1, dt2);
            LoadFromRawSql(query);
            DataTable lost = DataTable;

            query = HCMIS.Repository.Queries.ReceiveDoc.SelectVitalReportPreferredPackSize();
            LoadFromRawSql(query);
            var preferredPackSizetbl = DataTable;

            new Item();

            var x = (from y in soh1.AsEnumerable()
                     join z in soh2.AsEnumerable()
                     on y["ID"] equals z["ID"] 
                     //join p in preferredPackSizetbl.AsEnumerable()
                     //on y["ID"] equals p["ID"]
                     where Convert.ToInt32(y["EverReceived"]) == 1
                     select new
                     {
                         ID = y["ID"],
                         FullItemName = y["FullItemName"],
                         Unit = y["Unit"],
                         StockCode = y["StockCode"],
                         BeginingBalance = Convert.ToInt32(y["SOH"]),
                         SOH = Convert.ToInt32(z["SOH"]),
                         Max = Convert.ToInt32(z["Max"]),
                         AMC = Convert.ToInt32(z["AMC"]),
                         MOS = Convert.ToInt32(z["MOS"])
                         //QtyPerPack = Convert.ToInt32(p["QtyPerPack"]),
                         //StockCodeDACA = p["StockCodeDACA"]
                     }).Distinct().ToArray();

            var m = (from n in x
                     join z in received.AsEnumerable()
                     on n.ID equals z["ID"]
                     select new
                     {
                         n.ID,
                         n.FullItemName,
                         n.Unit,
                         n.StockCode,
                         n.BeginingBalance,
                         n.SOH,
                         n.Max,
                         //n.QtyPerPack,
                         //n.StockCodeDACA,
                         n.MOS,
                         n.AMC,
                         Received = z["Quantity"]
                     }).ToArray();

            var l = (from n in m
                     join z in issued.AsEnumerable()
                         on n.ID equals z["ID"]
                     select
                         new
                         {
                             n.ID,
                             n.FullItemName,
                             n.Unit,
                             n.StockCode,
                             n.BeginingBalance,
                             n.SOH,
                             Max = Convert.ToInt32(z["Quantity"]) * 2,
                             //n.StockCodeDACA,
                             //n.QtyPerPack,
                             n.AMC,
                             n.MOS,
                             n.Received,
                             Issued = Convert.ToInt32(z["Quantity"])
                         }).ToArray();

            var t = (from n in l
                     join z in lost.AsEnumerable()
                     on n.ID equals z["ID"]
                     select new
                     {
                         n.ID,
                         n.FullItemName,
                         n.Unit,
                         n.StockCode,
                         n.BeginingBalance,
                         n.SOH,
                         n.Max,
                         //n.StockCodeDACA,
                         //n.QtyPerPack,
                         n.AMC,
                         n.MOS,
                         n.Received,
                         n.Issued,
                         LossAdj = z["Quantity"],
                         Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH
                     }).ToArray();

            var t1 = (from n in t
                      select
                          new
                          {
                              n.ID,
                              n.FullItemName,
                              n.Unit,
                              n.StockCode,
                              n.BeginingBalance,
                              n.SOH,
                              n.Max,
                              n.AMC,
                              n.MOS,
                              //n.StockCodeDACA,
                              //n.QtyPerPack,
                              n.Received,
                              n.Issued,
                              n.LossAdj,
                              Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH
                              
                          }).ToArray();

            var t2 = (from n in t1
                      select
                          new
                          {
                              n.ID,
                              n.FullItemName,
                              n.Unit,
                              n.StockCode,
                              n.BeginingBalance,
                              n.SOH,
                              n.Max,
                              //n.StockCodeDACA,
                              //n.QtyPerPack,
                              n.AMC,
                              n.MOS,
                              n.Received,
                              n.Issued,
                              n.LossAdj,
                              Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
                             
                          }).ToArray();

            //return t;
            // Converting shit into antoher shit.
            // Just because i was not able to read the elemntes of the anonymus type in another method
            var value = new DataTable();
            var rowNo = 0;
            value.Columns.Add("RowNo", typeof(int));
            value.Columns.Add("ID", typeof(int));
            value.Columns.Add("FullItemName");
            value.Columns.Add("Unit");
            value.Columns.Add("StockCode");
            value.Columns.Add("BeginningBalance", typeof(int));
            value.Columns.Add("SOH", typeof(int));
            value.Columns.Add("Max", typeof(int));
            value.Columns.Add("StockCodeDACA", typeof(string));
            value.Columns.Add("QtyPerPack", typeof(int));
            value.Columns.Add("Issued", typeof(int));
            value.Columns.Add("AMC", typeof(int));
            value.Columns.Add("MOS", typeof(int));
            value.Columns.Add("Received", typeof(int));
            value.Columns.Add("LossAdj", typeof(int));
            value.Columns.Add("Quantity", typeof(int));
            value.Columns.Add("DaysOutOfStock", typeof(int));
            value.Columns.Add("MaxStockQty", typeof(int));
            value.Columns.Add("ProgramID", typeof(int));
            foreach (var v in t2)
            {
                rowNo = rowNo + 1;
                DataRowView drv = value.DefaultView.AddNew();
                drv["RowNo"] = rowNo;
                drv["ID"] = v.ID;
                drv["FullItemName"] = v.FullItemName;
                drv["Unit"] = v.Unit;
                drv["StockCode"] = v.StockCode;
                drv["BeginningBalance"] = v.BeginingBalance;
                drv["SOH"] = v.SOH;
                drv["Max"] = v.Max;
                drv["AMC"] = v.AMC;
                drv["MOS"] = v.MOS;
                //drv["StockCodeDACA"] = v.StockCodeDACA;
                //drv["QtyPerPack"] = v.QtyPerPack;
                drv["Issued"] = v.Issued;
                drv["Received"] = v.Received;
                drv["LossAdj"] = v.LossAdj;
                drv["Quantity"] = v.Quantity;
            }

            return value;

        }


        /// <summary>
        /// Loads for pricing an item from supplier
        /// </summary>
        /// <param name="itemID"></param>
        /// <param name="storeID">For center, this should just be the store group ID</param>
        /// <param name="supplierID"></param>
        public void LoadForPricing(int itemID, int supplierID, int storeID, int manufacturerID, int? unitId)
        {
            string query;
            if (!BLL.Settings.SkipBeginningBalancePricing)
            {

                query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadForPricingSkipBeginningBalancePricing(itemID, supplierID, storeID, manufacturerID, unitId, StorageType.Quaranteen);

            }
            else
            {
                query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadForPricing(itemID, supplierID, storeID, manufacturerID, unitId, StorageType.Quaranteen);

            }

            LoadFromRawSql(query);
        }

        /// <summary>
        /// Loads the pricing summary
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        /// <param name="storeID">The store ID.</param>
        /// <param name="supplierID">The supplier ID.</param>
        /// <param name="manufacturerID">The manufacturer ID.</param>
        /// <param name="unitId">The unit id.</param>
        /// <returns></returns>
        public static DataView LoadForCostSheetDetail(int itemID, int storeID, int supplierID, int manufacturerID, int unitId)
        {
            //They asked that beginningBalance shows on the moving Average
            //u do what they ask
            if (!BLL.Settings.SkipBeginningBalancePricing)
            {
                Activity st = new Activity();
                st.LoadByPrimaryKey(storeID);
                String query;
                query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadForCostSheetDetailSkipBeginningBalancePricing(itemID, storeID, supplierID, manufacturerID, unitId);


                ReceiveDoc receivedoc = new ReceiveDoc();
                receivedoc.LoadFromRawSql(query);
                return receivedoc.DefaultView;
            }
            else
            {
                Activity st = new Activity();
                st.LoadByPrimaryKey(storeID);
                String query;
                query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadForCostSheetDetail(itemID, storeID, supplierID, manufacturerID, unitId);


                ReceiveDoc receivedoc = new ReceiveDoc();
                receivedoc.LoadFromRawSql(query);
                return receivedoc.DefaultView;
            }
        }

        /// <summary>
        /// Sets the price per pack cost and selling price.
        /// </summary>
        /// <param name="rs">The rs.</param>
        public void SetPricePerPackCostAndSellingPrice(ReceivedSummary rs)
        {
            //Set Receivedoc Including The beginning Balance Initial Price Setting is Done here
            string query = "";
            query = HCMIS.Repository.Queries.ReceiveDoc.UpdateSetPricePerPackCostAndSellingPrice(rs.ItemID, rs.SupplierID, rs.NewUnitCost, rs.StoreID, rs.ManufacturerID, rs.UnitID, rs.NewSellingPrice, rs.Margin, query, BLL.Settings.NoOfDigitsAfterTheDecimalPoint);
            LoadFromRawSql(query);
        }

        /// <summary>
        /// Sends to finance manager confirmation.
        /// </summary>
        /// <param name="rs">The rs.</param>
        /// <param name="userID">The user ID.</param>
        public void SendToFinanceManagerConfirmation(ReceivedSummary rs, int userID)
        {
            string query = "";
            query = HCMIS.Repository.Queries.ReceiveDoc.UpdateSendToFinanceManagerConfirmation(userID, rs.ItemID, rs.SupplierID, rs.StoreID, rs.ManufacturerID, rs.UnitID);
            LoadFromRawSql(query);
        }

        /// <summary>
        /// Prices the delivery notefor hub.
        /// </summary>
        /// <param name="rs">The rs.</param>
        public void PriceDeliveryNoteforHub(ReceivedSummary rs)
        {
            string query = "";
            query = HCMIS.Repository.Queries.ReceiveDoc.UpdatePriceDeliveryNoteforHub(rs.ItemID, rs.SupplierID, rs.StoreID, rs.ManufacturerID, rs.UnitID, rs.NewSellingPrice, BLL.Settings.NoOfDigitsAfterTheDecimalPoint);
            LoadFromRawSql(query);

            query = HCMIS.Repository.Queries.ReceiveDoc.UpdatePriceDeliveryNoteforHub1(rs.ItemID, rs.SupplierID, rs.StoreID, rs.ManufacturerID, rs.UnitID, rs.NewSellingPrice, BLL.Settings.NoOfDigitsAfterTheDecimalPoint);

            //Fix the Items in the pick list for delivery notes. (That have already been issued but need to be reprinted)
            LoadFromRawSql(query);
            query = HCMIS.Repository.Queries.ReceiveDoc.UpdatePriceDeliveryNoteforHubPld(rs.ItemID, rs.SupplierID, rs.StoreID, rs.ManufacturerID, rs.UnitID, rs.NewSellingPrice, BLL.Settings.NoOfDigitsAfterTheDecimalPoint);
            LoadFromRawSql(query);
        }

        /// <summary>
        /// Prices the delivery notefor center.
        /// </summary>
        /// <param name="rs">The rs.</param>
        public void PriceDeliveryNoteforCenter(ReceivedSummary rs)
        {
            string query = "";
            query = HCMIS.Repository.Queries.ReceiveDoc.UpdatePriceDeliveryNoteforCenterIssueDoc(rs.ItemID, rs.SupplierID, rs.StoreID, rs.ManufacturerID, rs.UnitID, rs.NewUnitCost, BLL.Settings.NoOfDigitsAfterTheDecimalPoint);
            LoadFromRawSql(query);


            query = HCMIS.Repository.Queries.ReceiveDoc.UpdatePriceDeliveryNoteforCenter(rs.ItemID, rs.SupplierID, rs.StoreID, rs.ManufacturerID, rs.UnitID, rs.NewUnitCost, BLL.Settings.NoOfDigitsAfterTheDecimalPoint);

            //Fix the Items in the pick list for delivery notes. (That have already been issued but need to be reprinted)
            LoadFromRawSql(query);
            query = HCMIS.Repository.Queries.ReceiveDoc.UpdatePriceDeliveryNoteforCenterPld(rs.ItemID, rs.SupplierID, rs.StoreID, rs.ManufacturerID, rs.UnitID, rs.NewUnitCost, BLL.Settings.NoOfDigitsAfterTheDecimalPoint);
            LoadFromRawSql(query);
        }

        /// <summary>
        /// Sets the cost and selling price and send to confirmation.
        /// </summary>
        /// <param name="rs">The rs.</param>
        /// <param name="userID">The user ID.</param>
        public void SetCostAndSellingPriceAndSendToConfirmation(ReceivedSummary rs, int userID)
        {

            string query = "";
            query = HCMIS.Repository.Queries.ReceiveDoc.UpdateSetCostAndSellingPriceAndSendToConfirmationReceiveDoc(rs.NewUnitCost, BLL.Settings.NoOfDigitsAfterTheDecimalPoint, rs.ItemID, rs.SupplierID, rs.StoreID, rs.ManufacturerID, rs.UnitID, rs.NewSellingPrice, rs.Margin);
            LoadFromRawSql(query);

            query = HCMIS.Repository.Queries.ReceiveDoc.UpdateSetCostAndSellingPriceAndSendToConfirmationReceiveDocConfirmation(rs.ItemID, rs.SupplierID, rs.StoreID, rs.ManufacturerID, rs.UnitID, userID);
            LoadFromRawSql(query);
        }

        /// <summary>
        /// Prices the picklistfor hub.
        /// </summary>
        /// <param name="rs">The rs.</param>
        public void PricePicklistforHub(ReceivedSummary rs)
        {
            string query = "";

            query = HCMIS.Repository.Queries.ReceiveDoc.UpdatePricePicklistforHub(rs.ItemID, rs.NewSellingPrice, BLL.Settings.NoOfDigitsAfterTheDecimalPoint, rs.SupplierID, rs.StoreID, rs.ManufacturerID, rs.UnitID, OrderStatus.Constant.ISSUED);
            LoadFromRawSql(query);

        }

        /// <summary>
        /// Prices the picklistfor center.
        /// </summary>
        /// <param name="rs">The rs.</param>
        public void PricePicklistforCenter(ReceivedSummary rs)
        {
            string query = "";

            query = HCMIS.Repository.Queries.ReceiveDoc.UpdatePricePicklistforCenter(rs.ItemID, rs.NewUnitCost, BLL.Settings.NoOfDigitsAfterTheDecimalPoint, rs.SupplierID, rs.StoreID, rs.ManufacturerID, rs.UnitID, OrderStatus.Constant.ISSUED);
            LoadFromRawSql(query);

        }

        /// <summary>
        /// Saves the price.
        /// </summary>
        /// <param name="rs">The rs.</param>
        /// <param name="userID">The user ID.</param>
        public void SavePrice(ReceivedSummary rs, int userID)
        {
            FlushData();
            if (BLL.Settings.SkipBeginningBalancePricing)
            {
                SetPricePerPackCostAndSellingPrice(rs);
                SendToFinanceManagerConfirmation(rs, userID);
            }
            else

                SetCostAndSellingPriceAndSendToConfirmation(rs, userID);

            if (!BLL.Settings.IsCenter)
            {
                PricePicklistforHub(rs);
                PriceDeliveryNoteforHub(rs);
            }
            else
            {
                PricePicklistforCenter(rs);
                PriceDeliveryNoteforCenter(rs);
            }
            rs.SaveWeightedAverageLog(userID);

        }

        public void SavePrice(CostElement costElement, int userID)
        {
            ReceivedSummary receivedSummary = new ReceivedSummary();
            receivedSummary.ItemID = costElement.ItemID;
            receivedSummary.UnitID = costElement.ItemUnitID;
            receivedSummary.ManufacturerID = costElement.ManufacturerID;
            receivedSummary.StoreID = costElement.MovingAverageID;
            receivedSummary.NewUnitCost = costElement.AverageCost;
            receivedSummary.Margin = costElement.Margin;
            receivedSummary.NewSellingPrice = costElement.SellingPrice;
            receivedSummary.NewPrice = costElement.AverageCost;
            receivedSummary.Remark = "Price override";
            FlushData();
            if (BLL.Settings.SkipBeginningBalancePricing)
            {
                SetPricePerPackCostAndSellingPrice(receivedSummary);
                SendToFinanceManagerConfirmation(receivedSummary, userID);
            }
            else

                SetCostAndSellingPriceAndSendToConfirmation(receivedSummary, userID);

            if (!BLL.Settings.IsCenter)
            {
                PricePicklistforHub(receivedSummary);
             
            }
            else
            {
                PricePicklistforCenter(receivedSummary);
            }
            receivedSummary.SaveWeightedAverageLog(userID);

        }

        /// <summary>
        /// Confirms the moving average.
        /// </summary>
        /// <param name="rs">The rs.</param>
        /// <param name="userID">The user ID.</param>
        public void ConfirmMovingAverage(ReceivedSummary rs, int userID)
        {
            FlushData();
            string query = "";

            query = HCMIS.Repository.Queries.ReceiveDoc.UpdateConfirmMovingAverage(rs.ItemID, rs.SupplierID, rs.StoreID, rs.ManufacturerID, userID, rs.UnitID);
            LoadFromRawSql(query);
        }

        /// <summary>
        /// Loads unique received items
        /// </summary>
        public void LoadUniqueReceivedItems()
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadUniqueReceivedItems();
            LoadFromRawSql(query);
        }

        /// <summary>
        /// checks if an issue has been done from the receive document
        /// </summary>
        /// <returns>
        ///   <c>true</c> if this instance has transactions; otherwise, <c>false</c>.
        /// </returns>
        public bool HasTransactions()
        {
            var id = new IssueDoc();
            id.LoadByReceiveId(ID);
            return (id.RowCount > 0);
        }
        /// <summary>
        /// Returns a QtyPerPack of an item as it exists in the ReceiveDoc table.
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        /// <returns></returns>
        public static int GetNextQtyPerPackFor(int itemID)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetNextQtyPerPackFor(itemID);
            ReceiveDoc receiveDoc = new ReceiveDoc();
            receiveDoc.LoadFromRawSql(query);
            if (receiveDoc.RowCount > 0)
            {
                return receiveDoc.QtyPerPack;
            }
            return 1;
        }

        /// <summary>
        /// Fixes the quantity left problem.
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        public static void FixQuantityLeftProblem(int itemID)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.UpdateFixQuantityLeftProblemRd(itemID); //and (rd.Quantity-x.TotalQty-x.LostQty>0) 
            ReceiveDoc receiveDoc = new ReceiveDoc();
            receiveDoc.LoadFromRawSql(query);

            query =
                HCMIS.Repository.Queries.ReceiveDoc.UpdateFixQuantityLeftProblemReceivedoc(itemID);
            receiveDoc.LoadFromRawSql(query);
        }


        /// <summary>
        /// Loads the expiry dates for item.
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        /// <param name="storeID">The store ID.</param>
        /// <param name="unitID">The unit ID.</param>
        /// <param name="loadOnlyThoseWithBalance">if set to <c>true</c> [load only those with balance].</param>
        /// <param name="preferredManufacturer">The preferred manufacturer.</param>
        /// <param name="preferredLocation">The preferred location.</param>
        internal void LoadExpiryDatesForItem(int itemID, int storeID, int unitID, bool loadOnlyThoseWithBalance, int? preferredManufacturer, int? preferredLocation)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadExpiryDatesForItem(itemID, storeID, unitID,
                                                                                         loadOnlyThoseWithBalance,
                                                                                         preferredManufacturer,
                                                                                         preferredLocation);
            this.LoadFromRawSql(query);
        }

        /// <summary>
        /// Loads the expiry dates for all items.
        /// </summary>
        /// <returns></returns>
        public static DataView LoadExpiryDatesForAllItems()
        {
            //string balanceQuery = loadOnlyThoseWithBalance ? " and QuantityLeft>0 " : "";
            // cast(cast(ExpDate as date) as nvarchar(50))
            BLL.ReceiveDoc rd = new ReceiveDoc();
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadExpiryDatesForAllItems();
            rd.LoadFromRawSql(query);
            return rd.DefaultView;
        }

        /// <summary>
        /// Loads the by reference no.
        /// </summary>
        /// <param name="reference">The reference.</param>
        public void LoadByReferenceNo(string reference)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadByReferenceNo(reference);
            this.LoadFromRawSql(query);

        }

        /// <summary>
        /// Loads the by receipt ID.
        /// </summary>
        /// <param name="ReceiptID">The receipt ID.</param>
        public void LoadByReceiptID(int ReceiptID)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadByReceiptID(ReceiptID);
            this.LoadFromRawSql(query);
        }


        /// <summary>
        /// Sets the status as received.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        public void SetStatusAsReceived(int? userID)
        {
            this.Rewind();
            while (!this.EOF)
            {
                int receiveID = this.ID;
                BLL.ReceiveDocConfirmation rDocConfirmation = new ReceiveDocConfirmation();
                rDocConfirmation.SetStatusItemReceived(receiveID, userID);
                this.MoveNext();
            }
        }

        /// <summary>
        /// Sets the status as draft.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        public void SetStatusAsDraft(int userID)
        {
            this.Rewind();
            while (!this.EOF)
            {
                int receiveID = this.ID;
                BLL.ReceiveDocConfirmation rDocConfirmation = new ReceiveDocConfirmation();
                rDocConfirmation.SetStatusItemDraft(receiveID, userID);
                this.MoveNext();
            }
        }

        /// <summary>
        /// Sets the status as deleted.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        public void SetStatusAsDeleted(int userID)
        {
            this.Rewind();
            while (!this.EOF)
            {
                int receiveID = this.ID;
                BLL.ReceiveDocConfirmation rDocConfirmation = new ReceiveDocConfirmation();
                rDocConfirmation.SetStatusDeleted(receiveID, userID);
                this.MoveNext();
            }
        }

        /// <summary>
        /// Confirms the quantity and location.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        public void ConfirmQuantityAndLocation(int? userID)
        {
            while (!this.EOF)
            {
                int receiveID = this.ID;
                BLL.ReceiveDocConfirmation rDocConfirmation = new ReceiveDocConfirmation();
                rDocConfirmation.SetStatusConfirmQuantityAndLocation(receiveID, userID);

                this.Save();
                this.MoveNext();
            }
        }

        /// <summary>
        /// Sets the unit cost.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        public void ConfirmGRNFPrinted(int? userID)
        {
            while (!this.EOF)
            {
                int receiveID = this.ID;
                BLL.ReceiveDocConfirmation rDocConfirmation = new ReceiveDocConfirmation();
                rDocConfirmation.SetStatusPrintGRNF(receiveID, userID);
                this.MoveNext();
            }
        }

        /// <summary>
        /// Sets the price.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        public void SetPrice(int? userID)
        {
            while (!this.EOF)
            {
                int receiveID = this.ID;
                BLL.ReceiveDocConfirmation rDocConfirmation = new ReceiveDocConfirmation();
                rDocConfirmation.SetStatusSetPrice(receiveID, userID);
                this.MoveNext();
            }
        }

        /// <summary>
        /// Confirms the price.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        public void ConfirmPrice(int? userID)
        {
            while (!this.EOF)
            {
                int receiveID = this.ID;
                BLL.ReceiveDocConfirmation rDocConfirmation = new ReceiveDocConfirmation();
                rDocConfirmation.SetStatusConfirmPrice(receiveID, userID);
                this.MoveNext();
            }
        }

        /// <summary>
        /// Confirms the GRV printed.
        /// </summary>
        /// <param name="userID">The user ID.</param>
        public void ConfirmGRVPrinted(int? userID)
        {
            while (!this.EOF)
            {
                this.Confirmed = true;
                if (userID.HasValue)
                {
                    this.ConfirmedByUserID = userID.Value;
                }
                this.ConfirmedDateTime = DateTimeHelper.ServerDateTime;
                int receiveID = this.ID;
                BLL.ReceiveDocConfirmation rDocConfirmation = new ReceiveDocConfirmation();
                rDocConfirmation.SetStatusPrintGRV(receiveID, userID);
                this.MoveNext();
            }
            this.Save();
        }

        

        /// <summary>
        /// Receives from account transfer.
        /// </summary>
        /// <param name="PicklistID">The picklist ID.</param>
        /// <param name="StoreID">The store ID.</param>
        /// <param name="User">The user.</param>
        /// <param name="UserID">The user ID.</param>
        /// <returns></returns>
        public static String ReceiveFromAccountTransfer(int PicklistID, int StoreID, string User, int UserID)
        {
            PickListDetail pickListDetail = new PickListDetail();
            pickListDetail.LoadByPickListID(PicklistID);
            DataView dv = pickListDetail.DefaultView;
            ReceiveDoc NewReceiveDoc = new ReceiveDoc();
            String ReferenceID = ReceiveDoc.GetNextRefForTransfer();
            foreach (DataRowView dvr in dv)
            {
                //Get ReceiveDoc information.
                int receiveDocID = Convert.ToInt32(dvr["ReceiveDocID"]);
                ReceiveDoc receiveDocFromPicklist = new ReceiveDoc();
                receiveDocFromPicklist.LoadByPrimaryKey(receiveDocID);
                //We have all the Receivedoc information that we want
                NewReceiveDoc.AddNew();
                if (receiveDocFromPicklist.s_BatchNo == null)
                    NewReceiveDoc.BatchNo = receiveDocFromPicklist.BatchNo;
                NewReceiveDoc.ItemID = receiveDocFromPicklist.ItemID;
                NewReceiveDoc.SupplierID = receiveDocFromPicklist.SupplierID;
                if (receiveDocFromPicklist.s_ExpDate == null)
                    NewReceiveDoc.ExpDate = receiveDocFromPicklist.ExpDate;
                NewReceiveDoc.StoreID = StoreID;
                NewReceiveDoc.ReceivedBy = User;
                NewReceiveDoc.Remark = receiveDocFromPicklist.Remark;
                NewReceiveDoc.RefNo = "TA" + receiveDocFromPicklist.RefNo;
                if (!receiveDocFromPicklist.IsColumnNull("Cost"))
                    NewReceiveDoc.Cost = receiveDocFromPicklist.Cost;
                NewReceiveDoc.ManufacturerId = receiveDocFromPicklist.ManufacturerId;
                NewReceiveDoc.Quantity = Convert.ToInt32(dvr["Packs"]) * Convert.ToInt32(dvr["QtyPerPack"]);
                NewReceiveDoc.NoOfPack = Convert.ToInt32(dvr["Packs"]);
                NewReceiveDoc.QtyPerPack = Convert.ToInt32(dvr["QtyPerPack"]);
                if (!receiveDocFromPicklist.IsColumnNull("PricePerPack"))
                    NewReceiveDoc.PricePerPack = receiveDocFromPicklist.PricePerPack;
                if (!receiveDocFromPicklist.IsColumnNull("SellingPrice"))
                    NewReceiveDoc.SellingPrice = receiveDocFromPicklist.SellingPrice;
                NewReceiveDoc.UnitID = receiveDocFromPicklist.UnitID;
                NewReceiveDoc.DeliveryNote = receiveDocFromPicklist.DeliveryNote;
                //NewReceiveDoc.PricePerPack = receiveDocFromPicklist.PricePerPack;
                NewReceiveDoc.QuantityLeft = Convert.ToInt32(dvr["Packs"]) * Convert.ToInt32(dvr["QtyPerPack"]);
                NewReceiveDoc.EurDate = DateTimeHelper.ServerDateTime;
                NewReceiveDoc.Date = EthiopianDate.EthiopianDate.Now.ToGregorianDate();
                NewReceiveDoc.IsDamaged = receiveDocFromPicklist.IsDamaged;
                NewReceiveDoc.Save();
                NewReceiveDoc.SetStatusAsReceived(UserID);
                PalletizeTransfer(NewReceiveDoc);
            }
            return ReferenceID;
        }
        /// <summary>
        /// Gets the next ref for transfer.
        /// </summary>
        /// <returns></returns>
        public static String GetNextRefForTransfer()
        {
            return "Transfer";
        }
        /// <summary>
        /// Palletizes the transfer.
        /// </summary>
        /// <param name="rec">The rec.</param>
        public static void PalletizeTransfer(ReceiveDoc rec)
        {
            BLL.ReceivePallet rp = new ReceivePallet();
            Pallet pallet = new Pallet();
            PalletLocation pl = new PalletLocation();
            rec.Rewind();
            BLL.ItemManufacturer im = new BLL.ItemManufacturer();
            rp.AddNew();
            rp.ReceivedQuantity = rec.Quantity;
            rp.Balance = rec.Quantity;
            rp.ReservedStock = 0;
            rp.ReceiveID = rec.ID;
            //Just To Get the First Free pallet
            DataTable dtpl = PalletLocation.GetAllFreeForItem(rec.ItemID, StorageType.Free);
            DataRow drpl = dtpl.Rows[0];
            //After we assign the Location for it
            pl.LoadByPrimaryKey(Convert.ToInt32(drpl["ID"]));

            rp.PalletID = pl.PalletID;
            rp.PalletLocationID = pl.ID;
            rp.IsOriginalReceive = true;
            rp.Save();
        }

        /// <summary>
        /// Determines whether [is there shortage or damage] [the specified reference].
        /// </summary>
        /// <param name="reference">The reference.</param>
        /// <returns>
        ///   <c>true</c> if [is there shortage or damage] [the specified reference]; otherwise, <c>false</c>.
        /// </returns>
        public static bool IsThereShortageOrDamage(int reference)
        {
            //TODO: Make this not use the ReceivePallet table.
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectIsThereShortageOrDamage(reference);
            BLL.ReceiveDoc rd = new ReceiveDoc();
            rd.LoadFromRawSql(query);
            return rd.RowCount > 0;
        }

        public static bool IsBatchElectronicReceive(int reference)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectIsBatchElectronicReceive(reference);
            ReceiveDoc rd = new ReceiveDoc();
            rd.LoadFromRawSql(query);
            return rd.DataTable.Rows.Count == 1;
        }

        public static bool IsShortageOrDamageForBatchElectronicReceive(int reference)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectIsBatchElectronicReceive(reference);
            ReceiveDoc rd = new ReceiveDoc();
            rd.LoadFromRawSql(query);
            var invoicedQty = rd.DataTable.AsEnumerable().Select(t => t.Field<decimal>("InvoicedQty")).FirstOrDefault<decimal>();
            var TotalReceived = rd.DataTable.AsEnumerable().Select(t => t.Field<decimal>("TotalReceived")).FirstOrDefault<decimal>();
            return invoicedQty != TotalReceived;
        }


        /// <summary>
        /// Loads the by item ID unit ID store ID.
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        /// <param name="unitID">The unit ID.</param>
        /// <param name="storeID">The store ID.</param>
        public void LoadByItemIDUnitIDStoreID(int itemID, int unitID, int storeID)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadByItemIDUnitIDStoreID(itemID, unitID, storeID);
            this.LoadFromRawSql(query);
        }

        /// <summary>
        /// Changes the unit ID.
        /// </summary>
        /// <param name="destinationUnitID">The destination unit ID.</param>
        internal void ChangeUnitID(int destinationUnitID)
        {
            BLL.ItemUnit iuTo = new ItemUnit();
            BLL.ItemUnit iuFrom = new ItemUnit();

            iuTo.LoadByPrimaryKey(destinationUnitID);
            iuFrom.LoadByPrimaryKey(this.UnitID);
            decimal multiplier = iuTo.QtyPerUnit / iuFrom.QtyPerUnit;

            while (!this.EOF)
            {

                this.QtyPerPack = iuTo.QtyPerUnit;
                this.Quantity =Convert.ToDecimal(this.Quantity * multiplier);
                this.QuantityLeft = Convert.ToDecimal(multiplier * this.QuantityLeft);
                this.UnitID = iuTo.ID;
                this.Save();


                BLL.ReceivePallet rp = new ReceivePallet();
                rp.LoadByReceiveDocID(this.ID);
                rp.ReceivedQuantity = Convert.ToDecimal(rp.ReceivedQuantity * multiplier);
                rp.Balance = Convert.ToDecimal(rp.Balance * multiplier);
                rp.ReservedStock = Convert.ToInt32(rp.ReservedStock * multiplier);
                rp.Save();

                this.MoveNext();
            }
        }

        /// <summary>
        /// Saves the new receive doc entry from picklist detail.
        /// </summary>
        /// <param name="pld">The PLD.</param>
        /// <param name="userID">The user ID.</param>
        /// <param name="activityID">The new store ID.</param>
        /// <param name="newPhysicalStoreID">The new physical store ID.</param>
        /// <param name="convertedEthDate">The converted eth date.</param>
        /// <param name="supplierID">Activity or Store where it has Transfered from </param>
        /// <exception cref="System.Exception"></exception>
        internal void SaveNewReceiveDocEntryFromPicklistDetail(PickListDetail pld, int userID, int activityID, int newPhysicalStoreID, DateTime convertedEthDate,int receiptID,int? supplierID)
        {
            BLL.User user = new User();
            user.LoadByPrimaryKey(userID);

           
           
            BLL.ReceiveDoc rdOriginal = new ReceiveDoc();
            rdOriginal.LoadByPrimaryKey(pld.ReceiveDocID);
            
            //Now Save the receive doc entry
            this.AddNew();
            this.SetColumn("BatchNo", pld.GetColumn("BatchNumber"));
            this.ItemID = pld.ItemID;
            if (supplierID != null) this.SupplierID = supplierID.Value;
            this.Quantity = pld.QuantityInBU;
            //this.Date=
            this.Date = convertedEthDate;
            this.SetColumn("ExpDate", rdOriginal.GetColumn("ExpDate"));
            this.Out = false;
            this.ReceivedBy = user.UserName;
            this.StoreID = activityID;
            SetColumn("LocalBatchNo", rdOriginal.GetColumn("LocalBatchNo"));
            this.RefNo = receiptID.ToString();
            this.SetColumn("Cost", rdOriginal.GetColumn("Cost"));
            this.SetColumn("IsApproved", rdOriginal.GetColumn("IsApproved"));
            this.ManufacturerId = rdOriginal.ManufacturerId;
            this.QuantityLeft = this.Quantity;
            this.NoOfPack = pld.Packs;
            this.QtyPerPack = rdOriginal.QtyPerPack;
            this.EurDate = DateTimeHelper.ServerDateTime;
            this.SetColumn("SellingPrice", rdOriginal.GetColumn("SellingPrice"));
            this.SetColumn("UnitCost", rdOriginal.GetColumn("Cost"));
            this.SetColumn("Cost", rdOriginal.GetColumn("Cost"));
            this.SetColumn("PricePerPack", rdOriginal.GetColumn("Cost"));
            this.SetColumn("UnitID", rdOriginal.GetColumn("UnitID"));
            this.SetColumn("DeliveryNote", rdOriginal.GetColumn("DeliveryNote"));
            this.Confirmed = false;
            this.ConfirmedDateTime = DateTimeHelper.ServerDateTime;
            this.ReturnedStock = false;
            this.ReceiptID = receiptID;
            this.PhysicalStoreID = newPhysicalStoreID;
            PhysicalStore physicalStore = new PhysicalStore();
            physicalStore.LoadByPrimaryKey(newPhysicalStoreID);
            this.InventoryPeriodID = physicalStore.CurrentInventoryPeriodID;
            this.SetColumn("Margin", rdOriginal.GetColumn("Margin"));
            this.InvoicedNoOfPack = pld.Packs;
            this.IsDamaged = (bool) rdOriginal.GetColumn("IsDamaged");
            this.Save();

            //Now Save the ReceiveDocConfirmation

            ReceiveDocConfirmation rdConf = new ReceiveDocConfirmation();
            rdConf.AddNew();
            rdConf.ReceiveDocID = this.ID;
            rdConf.ReceivedByUserID = userID;
            rdConf.ReceiptConfirmationStatusID = BLL.ReceiptConfirmationStatus.Constants.RECEIVE_ENTERED;
            rdConf.Save();

            //Now Save the palletization.

            ReceivePallet rp = new ReceivePallet();
            rp.AddNew();

            rp.ReceivedQuantity = this.Quantity;
            rp.Balance = this.Quantity;
            rp.ReservedStock = 0;
            rp.ReceiveID = this.ID;


            PalletLocation pLocation = new PalletLocation();
            pLocation.LoadFirstOrDefault(newPhysicalStoreID, int.Parse(BLL.StorageType.BulkStore));

            if (pLocation.RowCount == 0)
            {
                throw new Exception("No locations created in the destination store. Please check if there are Bulk store pallet locations in the physical store.");
            }
            else
            {
                if (pLocation.IsColumnNull("PalletID"))
                {
                    Pallet pallet = new Pallet();
                    pallet.AddNew();
                    pallet.PalletNo = BLL.Pallet.GetLastPanelNumber() + 1;
                    pallet.StorageTypeID = int.Parse(BLL.StorageType.Free);
                    pallet.Save();
                    pLocation.PalletID = pallet.ID;
                }

                rp.PalletID = pLocation.PalletID;
                rp.PalletLocationID = pLocation.ID;
                rp.BoxSize = 0;
                rp.IsOriginalReceive = true;
                rp.Save();
            }

        }

        /// <summary>
        /// Deletes the A receive doc entry.
        /// </summary>
        /// <param name="receiveDocID">The receive doc ID.</param>
        /// <param name="userID">The user ID.</param>
        /// <exception cref="System.Exception"></exception>
        public static void DeleteAReceiveDocEntry(int receiveDocID, int userID)
        {
                var rd = new ReceiveDoc();
                rd.LoadByPrimaryKey(receiveDocID);

                if (rd.RowCount > 0)
                {
                    if (rd.HasTransactions())
                    {
                        string printedIDs = "";

                        var issueDoc = new IssueDoc();
                        issueDoc.LoadByReceiveDocID(rd.ID);

                        issueDoc.Rewind();
                        while (!issueDoc.EOF)
                        {
                            var stvs = new BLL.Issue();
                            stvs.LoadByPrimaryKey(issueDoc.STVID);
                            printedIDs += stvs.IDPrinted.ToString(CultureInfo.InvariantCulture) + " ,";
                            issueDoc.MoveNext();
                        }

                        printedIDs = printedIDs.Remove(printedIDs.Length - 1, 1);
                        throw new Exception(
                            string.Format("Please cancel/void the following Stvs: With PrintedIDs : {0}", printedIDs));
                    }

                    HandleReceiveDocDeleting(receiveDocID, userID, rd);
                }
        }

        private static void 
            HandleReceiveDocDeleting(int receiveDocID, int userID, ReceiveDoc rd)
        {
            //Check if there is a Related Picklists
            var pld = new PickListDetail();
            pld.LoadByReceiveDocID(receiveDocID);
            pld.Rewind();
            if(pld.RowCount > 0)
            {
                var pl = new PickList();
                pl.LoadByPrimaryKey(pld.PickListID);

                var order = new Order();
                order.LoadByPrimaryKey(pl.OrderID);

                string printedIDs = "";
                var stvs = new BLL.Issue();
                stvs.Where.PickListID.Value = pl.ID;
                stvs.Query.Load();
                stvs.Rewind();
                while (!stvs.EOF)
                {
                    printedIDs += stvs.IDPrinted.ToString(CultureInfo.InvariantCulture) + " ,";
                    stvs.MoveNext();
                }
                printedIDs = printedIDs.Remove(printedIDs.Length - 1, 1);
                throw new Exception(
                    string.Format("Please cancel/void the following Stvs: Ref No = {0} With PrintedIDs : {1}",
                                  order.RefNo,printedIDs));
            }

            // Add new record on ReceiveDocDeleted
            var recDel = ReceiveDocDeleted.AddNewLog(rd, userID);

            // Delete related ReceivePallet
            var receivePallet = new BLL.ReceivePallet();
            receivePallet.LoadByReceiveDocID(receiveDocID);
            receivePallet.Rewind();
            while(!receivePallet.EOF)
            {
                receivePallet.MarkAsDeleted();
                receivePallet.MoveNext();
            }

            // Delete related ReceivePriceConfirmation
            var receivePriceConfirmation = new ReceivePriceConfirmation();
            receivePriceConfirmation.LoadByReceiveDocID(rd.ID);
            receivePriceConfirmation.MarkAsDeleted();

            // Delete related ReceiveDocShortage
            var rdShr = new ReceiveDocShortage();
            rdShr.Where.ReceiveDocID.Value = rd.ID;
            rdShr.Query.Load();
            rdShr.Rewind();
            while(!rdShr.EOF)
            {
                rdShr.MarkAsDeleted();
                rdShr.MoveNext();
            }
            
            // Delete related ReceiveDocConfirmation
            var rdConf = new ReceiveDocConfirmation();
            rdConf.Where.ReceiveDocID.Value = rd.ID;
            rdConf.Query.Load();
            rdConf.Rewind();
            while(!rdConf.EOF)
            {
                rdConf.MarkAsDeleted();
                rdConf.MoveNext();
            }

            rd.MarkAsDeleted();

            var transaction = MyGeneration.dOOdads.TransactionMgr.ThreadTransactionMgr();
            transaction.BeginTransaction();
            try
            {
                receivePallet.Save();
                receivePriceConfirmation.Save();
                rdShr.Save();
                rdConf.Save();
                recDel.Save();
                rd.Save();
                transaction.CommitTransaction();
            }
            catch (Exception exception)
            {
                transaction.RollbackTransaction();
                throw;
            }
        }

        /// <summary>
        /// Loads All Receivedoc By ReceiptID
        /// </summary>
        /// <param name="ReceiptID"></param>
        public void LoadAllByReceiptID(int ReceiptId)
        {
            LoadFromRawSql(HCMIS.Repository.Queries.ReceiveDoc.SelectLoadAllByReceiptId(ReceiptId));
        }

        #region Cost Calculation

        /// <summary>
        /// Get Related Receive for Pricing 
        /// </summary>
        /// <param name="ReceiptID">Receipt ID</param>
        /// <param name="ItemID">Item ID</param>
        /// <param name="ItemUnitID">Unit ID</param>
        /// <param name="ManufacturerID">Manufacture ID</param>
        /// <param name="ActivityID"> Activity ID</param>
        /// <param name="NewPricePerPack">New Price To be Commit</param>
        /// <returns></returns>


        public static DataTable GetRelatedReceive(int ReceiptID, int ItemID, int ItemUnitID, int ManufacturerID, int ActivityID, double NewPricePerPack)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetRelatedReceive(ReceiptID, ItemID, ItemUnitID, ManufacturerID, ActivityID, NewPricePerPack);
            ReceiveDoc receivedoc = new ReceiveDoc();
            receivedoc.LoadFromRawSql(query);
            return receivedoc.DataTable;
        }

        /// <summary>
        /// Set Price Per Pack using Store Procedure (Safe Code)
        /// </summary>
        /// <param name="Receivedoc">ID of the Record to be affected </param>
        /// <param name="NewPricePerPack">The New Price Per Pack </param>
        /// <param name="UserID">User ID For Logging</param>
        public static void SetPricePerPackByReceiveDoc(int ReceiveDocID, double NewPricePerPack, int UserID)
        {
            System.Collections.Specialized.ListDictionary Parms = new System.Collections.Specialized.ListDictionary();
            Parms.Add("@ReceiveDocID", ReceiveDocID);
            Parms.Add("@PricePerPack", NewPricePerPack);
            Parms.Add("@Reason", "Receive Cost Setting");
            Parms.Add("@UserID", UserID);

            ReceiveDoc receiveDoc = new ReceiveDoc();
            receiveDoc.LoadFromSql("procChangePricePerPack", Parms);
        }


        public static DataTable GetRelatedReceiveForMarginChange(int ReceiptID, int ItemID, int ItemUnitID, int ManufacturerID, int ActivityID, double Margin)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetRelatedReceiveForMarginChange(ReceiptID, ItemID, ItemUnitID, ManufacturerID, ActivityID, Margin);
            ReceiveDoc receivedoc = new ReceiveDoc();
            receivedoc.LoadFromRawSql(query);
            return receivedoc.DataTable;
        }

        public static DataTable GetItemInformation(int ItemID, int ItemUnitID, int ManufacturerID, int AccountID)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetItemInformation(ItemID, ItemUnitID, ManufacturerID, AccountID);
            ReceiveDoc receivedoc = new ReceiveDoc();
            receivedoc.LoadFromRawSql(query);
            return receivedoc.DataTable;
        }

        public static DataTable GetRelatedReceiveForFinalPriceSetting(int? ReceiptID, int ItemID, int ManufacturerID, int ItemUnitID, int AccountID)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetRelatedReceiveForFinalPriceSetting(ReceiptID, ItemID, ManufacturerID, ItemUnitID, AccountID);
            ReceiveDoc receivedoc = new ReceiveDoc();
            receivedoc.LoadFromRawSql(query);
            return receivedoc.DataTable;
        }

        public static void SetMarginByReceiveDoc(int ReceiveDocID, double NewMargin, int UserID)
        {
            System.Collections.Specialized.ListDictionary Parms = new System.Collections.Specialized.ListDictionary();
            Parms.Add("@ReceiveDocID", ReceiveDocID);
            Parms.Add("@Margin", (NewMargin / 100));
            Parms.Add("@Reason", "Receive Cost Setting");
            Parms.Add("@UserID", UserID);

            ReceiveDoc receiveDoc = new ReceiveDoc();
            receiveDoc.LoadFromSql("procChangeMargin", Parms);
        }

        public static void SetSellingPriceByReceiveDoc(int ReceiveDocID, double NewSellingPrice, int UserID)
        {
            System.Collections.Specialized.ListDictionary Parms = new System.Collections.Specialized.ListDictionary();
            Parms.Add("@ReceiveDocID", ReceiveDocID);
            Parms.Add("@SellingPrice", NewSellingPrice);
            Parms.Add("@Reason", "Receive Cost Setting");
            Parms.Add("@UserID", UserID);

            ReceiveDoc receiveDoc = new ReceiveDoc();
            receiveDoc.LoadFromSql("procChangeSellingPrice", Parms);
        }

        public static DataTable GetRelatedReceiveForUnitCost(int ReceiptID, int ItemID, int ItemUnitID, int ManufacturerID, int ActivityID, double NewUnitCost)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetRelatedReceiveForUnitCost(ReceiptID, ItemID, ItemUnitID, ManufacturerID, ActivityID, NewUnitCost);
            ReceiveDoc receivedoc = new ReceiveDoc();
            receivedoc.LoadFromRawSql(query);
            return receivedoc.DataTable;
        }

        public static DataTable GetRelatedPreviousStockForUnitCostAndSellingPrice(int ReceiptID, int ItemID, int ManufacturerID, int ItemUnitID, int ActivityID, double NewUnitCost, double SellingPrice)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetRelatedPreviousStockForUnitCostAndSellingPrice(ReceiptID, ItemID, ManufacturerID, ItemUnitID, ActivityID, NewUnitCost, SellingPrice);
            ReceiveDoc receivedoc = new ReceiveDoc();
            receivedoc.LoadFromRawSql(query);
            return receivedoc.DataTable;
        }

        public void LoadByReceiptIDWithReceivePallet(int receiptID)
        {
            string query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadByReceiptIDWithReceivePallet(receiptID);
            this.LoadFromRawSql(query);
        }

        
        public static DataTable GetRelatedPicklistForChangingPrice(int ItemID, int ManufacturerID, int ItemUnitID, int AccountID, double SellingPrice)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetRelatedPicklistForChangingPrice(ItemID, ManufacturerID, ItemUnitID, AccountID, SellingPrice);
            ReceiveDoc receivedoc = new ReceiveDoc();
            receivedoc.LoadFromRawSql(query);
            return receivedoc.DataTable;
        }

        public static DataTable GetRelatedDeliveryNotesChangingPrice(int ReceiptID, int ItemID, int ManufacturerID, int ItemUnitID, int ActivityID, double NewUnitCost, double SellingPrice)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetRelatedDeliveryNotesChangingPrice(ReceiptID, ItemID, ManufacturerID, ItemUnitID, ActivityID, NewUnitCost, SellingPrice);
            ReceiveDoc receivedoc = new ReceiveDoc();
            receivedoc.LoadFromRawSql(query);
            return receivedoc.DataTable;
        }

        public static DataTable GetRelatedReceiveForUnitCostAndSellingPrice(int ReceiptID, int ItemID, int ManufacturerID, int ItemUnitID, int ActivityID, double NewUnitCost, double NewSellingPrice)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetRelatedReceiveForUnitCostAndSellingPrice(ReceiptID, ItemID, ManufacturerID, ItemUnitID, ActivityID, NewUnitCost, NewSellingPrice);
            ReceiveDoc receivedoc = new ReceiveDoc();
            receivedoc.LoadFromRawSql(query);
            return receivedoc.DataTable;
        }

        public static DataTable GetRelatedReceiveForUnitCostAndSellingPrice(int ReceiptID,CostElement costElement)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetRelatedReceiveForUnitCostAndSellingPriceRd(ReceiptID, costElement.ItemID, costElement.ItemUnitID, costElement.ManufacturerID, costElement.MovingAverageID, costElement.AverageCost, costElement.SellingPrice);
            ReceiveDoc receivedoc = new ReceiveDoc();
            receivedoc.LoadFromRawSql(query);
            return receivedoc.DataTable;
        }

        public static void SetUnitCostByReceiveDoc(int ReceiveDocID, double NewUnitCost, int UserID)
        {
            System.Collections.Specialized.ListDictionary Parms = new System.Collections.Specialized.ListDictionary();
            Parms.Add("@ReceiveDocID", ReceiveDocID);
            Parms.Add("@UnitCost", NewUnitCost);
            Parms.Add("@Reason", "Receive Cost Setting");
            Parms.Add("@UserID", UserID);

            ReceiveDoc receiveDoc = new ReceiveDoc();
            receiveDoc.LoadFromSql("procChangeUnitCost", Parms);
            if (BLL.Settings.IsCenter)
            {

            }
        }

        public static void SetAverageCostByReceiveDoc(int ReceiveDocID, double NewUnitCost, int UserID)
        {
            System.Collections.Specialized.ListDictionary Parms = new System.Collections.Specialized.ListDictionary();
            Parms.Add("@ReceiveDocID", ReceiveDocID);
            Parms.Add("@UnitCost", NewUnitCost);
            Parms.Add("@Reason", "Moving Average Cost Setting");
            Parms.Add("@UserID", UserID);

            ReceiveDoc receiveDoc = new ReceiveDoc();
            receiveDoc.LoadFromSql("procChangeAverageCost", Parms);
        }
      
        public static void SetUnitCostByReceivedocIDs(double NewUnitCost, string ReceiveDocIDs, int UserID, string Reason)
        {

            System.Collections.Specialized.ListDictionary Parms = new System.Collections.Specialized.ListDictionary();
            Parms.Add("@UnitCost", NewUnitCost);
            Parms.Add("@ReceiveDocIDs", ReceiveDocIDs);
            Parms.Add("@Reason", Reason);
            Parms.Add("@UserID", UserID);

            ReceiveDoc receiveDoc = new ReceiveDoc();
            receiveDoc.LoadFromSql("procChangeUnitCostbyIDs", Parms);
        }
        
        public static void SetBegginingBalanceCostByReceiveDocIDs(double NewUnitCost,double Margin, string ReceiveDocIDs, int UserID, string Reason)
        {
            System.Collections.Specialized.ListDictionary Parms = new System.Collections.Specialized.ListDictionary();
            Parms.Add("@UnitCost", NewUnitCost);
            Parms.Add("@Margin", Margin);
            Parms.Add("@SellingPrice", BLL.Settings.IsCenter ? NewUnitCost : Math.Round(NewUnitCost * (1+Margin),2,MidpointRounding.AwayFromZero));
            Parms.Add("@ReceiveDocIDs", ReceiveDocIDs);
            Parms.Add("@Reason", Reason);
            Parms.Add("@UserID", UserID);

            ReceiveDoc receiveDoc = new ReceiveDoc();
            receiveDoc.LoadFromSql("procChangeSellingPriceAndCostbyIDs", Parms);
        }
    
        public void suspendForPricing(int ItemID, int ManufacturerID, int ItemUnitID, int MovingAverageID)
        {
            string query;
            query = HCMIS.Repository.Queries.ReceiveDoc.InsertSuspendForPricing();
            LoadFromRawSql(query);
            query = HCMIS.Repository.Queries.ReceiveDoc.UpdateSuspendForPricing(ItemID, ManufacturerID, ItemUnitID, MovingAverageID);

            LoadFromRawSql(query);



        }

        public void releaseForIssue(int ItemID, int ManufacturerID, int ItemUnitID, int AccountID)
        {
            string query;
            query = HCMIS.Repository.Queries.ReceiveDoc.InsertReleaseForIssue();
            LoadFromRawSql(query);
            query = HCMIS.Repository.Queries.ReceiveDoc.UpdateReleaseForIssue(ItemID, ManufacturerID, ItemUnitID, AccountID);
            // receivedoc = new ReceiveDoc();
            LoadFromRawSql(query);

        }

        public static DataTable ListOfItemPendingPrintAndConfirmation(int itemID, int ManufacturerID, int ItemUnitID, int MovingAverageID)
        {
            ReceiveDoc rd = new ReceiveDoc();
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectListOfItemPendingPrintAndConfirmation(itemID, ManufacturerID, ItemUnitID, MovingAverageID, ReceiptConfirmationStatus.Constants.GRNF_PRINTED, ReceiptConfirmationStatus.Constants.GRV_PRINTED);
            rd.LoadFromRawSql(query);
            return rd.DataTable;

        }

        #endregion

       
        public bool AreThereIssues
        {
            get
            {
                while (!this.EOF)
                {
                    BLL.IssueDoc id = new IssueDoc();
                    id.LoadByReceiveDocID(this.ID);
                    if (id.RowCount > 0)
                        return true;
                    this.MoveNext();
                }
                return false;
            }
        }

        public static int FixQuantityProblem(int itemId)
        {
            BLL.ReceiveDoc rd = new ReceiveDoc();
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectFixQuantityProblem(itemId);
            rd.LoadFromRawSql(query);
            int i = Convert.ToInt32(rd.GetColumn("Count"));
            query =
                HCMIS.Repository.Queries.ReceiveDoc.UpdateFixQuantityProblemReceivedoc(itemId);
            rd.LoadFromRawSql(query);
            return i;
        }

        public void LoadDeletedByReceiptID(int receiptId)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadDeletedByReceiptId(receiptId);
            this.LoadFromRawSql(query);
        }

        public bool FindByGUID(string guid)
        {
            this.Rewind();

            while (!this.EOF)
            {
                if (this.GetColumn("GUID").ToString() == guid)
                {
                    return true;
                }
                this.MoveNext();
            }
            return false;
        }

        internal void LoadRelatedReceiveDocs(int itemID, int unitID, int manufacturerID, string batchNo, DateTime? expDate, int physicalStoreID)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectLoadRelatedReceiveDocs(itemID, unitID, manufacturerID,
                                                                                         physicalStoreID, batchNo,
                                                                                         expDate);
            this.LoadFromRawSql(query);
        }

        internal PalletLocation GetWhereItIsLocated()
        {
            int receiveDocID = this.ID;
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetWhereItIsLocated(receiveDocID);
            BLL.ReceiveDoc rd = new ReceiveDoc();
            rd.LoadFromRawSql(query);

            if(rd.RowCount==0)
            {
                throw new Exception(string.Format("Pallet doesn't exist for the receive ID = {0}", receiveDocID));
            }

            int palletLocationID = Convert.ToInt32(rd.GetColumn("PalletLocationID")); //We just take the first one.
            BLL.PalletLocation pl = new PalletLocation();
            pl.LoadByPrimaryKey(palletLocationID);
            return pl;
        }

        public static decimal GetSoundStock(CostElement costElement)
        {
            ReceiveDoc receipt = new ReceiveDoc();
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetSoundStock(costElement.ItemID, costElement.ItemUnitID, costElement.ManufacturerID, costElement.MovingAverageID, ReceiptConfirmationStatus.Constants.GRV_PRINTED);
            receipt.LoadFromRawSql(query);
            return Convert.ToDecimal(receipt.GetColumn("Quantity"));
        }

        public static DataTable GetOutstandingReceives(int warehouseID = 0)
        {
            var query =
                HCMIS.Repository.Queries.ReceiveDoc.SelectGetOutstandingReceives(
                    ReceiptConfirmationStatus.Constants.GRNF_PRINTED, warehouseID, ReceiptType.CONSTANTS.STOCK_RETURN,
                    ReceiptType.CONSTANTS.STANDARD_RECEIPT);
            ReceiveDoc receipt = new ReceiveDoc();
            receipt.LoadFromRawSql(query);
            return receipt.DataTable;
        }


        public static DataTable GetOutstandingReceiveDeliveryNote(int warehouseID = 0)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetOutstandingReceiveDeliveryNote(warehouseID, ReceiptConfirmationStatus.Constants.GRNF_PRINTED, ReceiptType.CONSTANTS.DELIVERY_NOTE);
            ReceiveDoc receipt = new ReceiveDoc();
            receipt.LoadFromRawSql(query);
            return receipt.DataTable;
        }


        public static DataTable GetOutstandingTransfer(int receiptType)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetOutstandingTransfer(receiptType, ReceiptConfirmationStatus.Constants.GRNF_PRINTED);
            ReceiveDoc receipt = new ReceiveDoc();
            receipt.LoadFromRawSql(query);
            return receipt.DataTable;
        }

        public static DataTable GetCutOffNumber(int fiscalPeriodID, int accountID)
        {
           
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetCutOffNumber(fiscalPeriodID, accountID);
            ReceiveDoc receipt = new ReceiveDoc();
            receipt.LoadFromRawSql(query);
            return receipt.DataTable;
        }

        public static DataTable GetOutstandingVoidRequestGRV(int warehouseID = 0)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectGetOutstandingVoidRequestGRV(warehouseID, ReceiptConfirmationStatus.Constants.GRNF_PRINTED);
            var receipt = new ReceiveDoc();
            receipt.LoadFromRawSql(query);
            return receipt.DataTable;
        }

        public static bool checkOutstandingReceives(int warehouseID)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectCheckOutstandingReceives(warehouseID, ReceiptConfirmationStatus.Constants.GRV_PRINTED, ReceiptType.CONSTANTS.STOCK_RETURN, ReceiptType.CONSTANTS.STANDARD_RECEIPT);
            ReceiveDoc receipt = new ReceiveDoc();
            receipt.LoadFromRawSql(query);
            return receipt.Getint("count") == 0;
        }

        internal void ChangeQuantity(decimal quantity)
        {
            
            ItemUnit itemUnit = new ItemUnit();
            itemUnit.LoadByPrimaryKey(UnitID);
            ReceiveDocConfirmation receiveDocConfirmation = new ReceiveDocConfirmation();
            receiveDocConfirmation.LoadByReceiveDocID(ID);
            
            if(receiveDocConfirmation.ReceiptConfirmationStatusID == ReceiptConfirmationStatus.Constants.GRV_PRINTED)
            {
                throw new Exception("Price has already been set for this Item, You cannot commit the Change you have Made");
            }

            if(QuantityLeft != Quantity)
            {
                 throw new Exception("Some Quantity has already been issued, You cannot commit the Change you have Made");
            }

            QuantityLeft= Quantity = quantity * itemUnit.QtyPerUnit;
            InvoicedNoOfPack = NoOfPack = quantity;
            Save();
            ReceivePallet receivePallet = new ReceivePallet();
            receivePallet.LoadByReceiveDocID(ID);
            
            receivePallet.ReceivedQuantity = receivePallet.Balance = Quantity;
            receivePallet.Save();


        }

        public void LoadbyItemUnitManufacturerMovingAverageID(int receiptID, int itemID, int itemUnitID, int manufacturerID, int movingAverageID)
        {
            var query = HCMIS.Repository.Queries.ReceiveDoc.SelectReceives(receiptID, itemID, itemUnitID, manufacturerID,
                                                                           movingAverageID);
            LoadFromRawSql(query);
        }


        //This Creates a Clone of the ReceiveDoc
        public ReceiveDoc Clone()
        {
            var receiveDoc = new ReceiveDoc();
            receiveDoc.AddNew();
            receiveDoc.DataRow.ItemArray = DataRow.ItemArray;
            receiveDoc.DataRow["ID"] = DBNull.Value;
            return  receiveDoc;
        }
    }
}
