
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using BLL.Finance;
using DAL;
using System.Data;
using HCMIS.Specification.Finance.CostTier;

namespace BLL
{
    public class Receipt : _Receipt
    {
        ReceiptInvoice _receiptInvoice;
        double GrandTotal;
        DataView _pGRV;
        DataView _pGRVSound;
        DataView _pGRVNotReceivedDamaged;
        public double OtherExpenses;
        public Receipt()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Receipt" /> class.
        /// </summary>
        /// <param name="ID">The ID.</param>
        public Receipt(int ID)
        {
            LoadByPrimaryKey(ID);
            _receiptInvoice = new ReceiptInvoice(ReceiptInvoiceID);
            ConvertNull();
        }

        /// <summary>
        /// get or sets the ReceiptInvoice for the Receipt
        /// </summary>
        /// <value>
        /// The receipt invoice.
        /// </value>
        public ReceiptInvoice ReceiptInvoice
        {
            get
            {
                return _receiptInvoice;
            }
            set
            {
                this.ReceiptInvoiceID = value.ID;
            }
        }

       
        /// <summary>
        /// Gets the total landed cost.
        /// </summary>
        /// <value>
        /// The total landed cost.
        /// </value>
        public double TotalLandedCost
        {
            get
            {
                if (BLL.Settings.IsCenter)
                    return CIF + NBE + CBE + CustomDutyTax + TransitServiceCharge + Provision;
                else
                    return TotalValue + Insurance;
            }
        }  


        /// <summary>
        /// Gets the total sound item.
        /// </summary>
        /// <value>
        /// The total sound item.
        /// </value>
        public double TotalSoundItem
        {
            get
            {
                return GetTotalSoundedItem();
            }
        }
        /// <summary>
        /// Gets the CIF.
        /// </summary>
        /// <value>
        /// The CIF.
        /// </value>
        public double CIF
        {
            get
            {
                if (BLL.Settings.IsCenter)
                    return TotalValueInBirr + Insurance + AirFreight + SeaFreight + InlandFreight + OtherExpenses;
                else
                    return TotalLandedCost + Insurance;
            }
        }

        /// <summary>
        /// Gets the total value in birr.
        /// </summary>
        /// <value>
        /// The total value in birr.
        /// </value>
        public double TotalValueInBirr
        {
            get
            {
                return Math.Round(TotalValue * ReceiptInvoice.PO.ExhangeRate, BLL.Settings.NoOfDigitsAfterTheDecimalPoint);
            }
        }
        
        /// <summary>
        /// Gets the price per pack.
        /// </summary>
        /// <param name="ItemID">The item ID.</param>
        /// <param name="UnitID">The unit ID.</param>
        /// <param name="ManufacturerID">The manufacturer ID.</param>
        /// <returns></returns>
        private double GetPricePerPack(int ItemID, int UnitID, int ManufacturerID)
        {
            double PricePerPack = 0;


            try
            {
                foreach (DataRowView drv in _pGRV)
                {
                    if ((drv["PricePerPack"] != DBNull.Value && Convert.ToInt32(drv["ItemID"]) == ItemID && Convert.ToInt32(drv["UnitID"]) == UnitID && Convert.ToInt32(drv["ManufacturerID"]) == ManufacturerID))
                        PricePerPack = Convert.ToDouble(drv["PricePerPack"]);
                }

                return PricePerPack;
            }
            catch
            {
                return 0;
            }
        }
        /// <summary>
        /// Gets the margin.
        /// </summary>
        /// <param name="ItemID">The item ID.</param>
        /// <param name="UnitID">The unit ID.</param>
        /// <param name="ManufacturerID">The manufacturer ID.</param>
        /// <returns></returns>
        private double GetMargin(int ItemID, int UnitID, int ManufacturerID)
        {
            double PricePerPack = 0;

            try
            {
                foreach (DataRowView drv in _pGRV)
                {
                    if ((drv["Margin"] != DBNull.Value && Convert.ToInt32(drv["ItemID"]) == ItemID && Convert.ToInt32(drv["UnitID"]) == UnitID && Convert.ToInt32(drv["ManufacturerID"]) == ManufacturerID))
                        PricePerPack = Convert.ToDouble(drv["Margin"]);
                }

                return PricePerPack;
            }
            catch
            {
                return 0;
            }
        }

        /// <summary>
        /// Gets the unit cost.
        /// </summary>
        /// <param name="ItemID">The item ID.</param>
        /// <param name="UnitID">The unit ID.</param>
        /// <param name="ManufacturerID">The manufacturer ID.</param>
        /// <returns></returns>
        private double GetUnitCost(int ItemID, int UnitID, int ManufacturerID)
        {

            double UnitCost = 0;


            try
            {
                foreach (DataRowView drv in _pGRV)
                {
                    if ((drv["PricePerPack"] != DBNull.Value && Convert.ToInt32(drv["ItemID"]) == ItemID && Convert.ToInt32(drv["UnitID"]) == UnitID && Convert.ToInt32(drv["ManufacturerID"]) == ManufacturerID))
                        UnitCost = Convert.ToDouble(drv["UnitCost"]);
                }

                return UnitCost;
            }
            catch
            {
                return 0;
            }
        }

        /// <summary>
        /// Gets the warehouse.
        /// </summary>
        /// <returns></returns>
        public String GetWarehouse()
        {
            Receipt receipt = new Receipt();
            var query = HCMIS.Repository.Queries.Receipt.SelectGetWarehouse(ID);
            receipt.LoadFromRawSql(query);
            try
            {
                return receipt.GetColumn("WarehouseName").ToString();
            }
            catch
            {
                return "";
            }
        }

        /// <summary>
        /// Loads the soundp GRV.
        /// </summary>
        public void LoadSoundpGRV()
        {
            Receipt receipt = new Receipt();
            var query = HCMIS.Repository.Queries.Receipt.SelectLoadSoundpGRV(ID);
            receipt.LoadFromRawSql(query);
            _pGRVSound = receipt.DefaultView;

        }


        /// <summary>
        /// Adds the new receipt.
        /// </summary>
        /// <param name="receiptTypeID">The receipt type ID.</param>
        /// <param name="userID">The user ID.</param>
        /// <param name="receiptInvoiceID">The receipt invoice ID.</param>
        /// /// <param name="receiptStatusID">The receipt confirmation status ID.</param>
        /// <returns></returns>
        public int AddNewReceipt(int receiptTypeID,int warehouseID ,int userID, int receiptInvoiceID, string txtTransitTransferVoucherNoOverride, int receiptStatusID) //, string transitTransferNo, string insurancePolicyNo, string wayBillNo)
        {
            this.AddNew();
            this.DateOfEntry = DateTimeHelper.ServerDateTime;
            this.ReceiptTypeID = receiptTypeID;
            this.SavedByUserID = userID;
            this.WarehouseID = warehouseID;
            this.ReceiptInvoiceID = receiptInvoiceID;
            this.ReceiptStatusID = receiptStatusID;

            BLL.ReceiptInvoice rctInvoice = new ReceiptInvoice();
            rctInvoice.LoadByPrimaryKey(receiptInvoiceID);

            this.STVOrInvoiceNo = rctInvoice.STVOrInvoiceNo;
            if (string.IsNullOrEmpty(txtTransitTransferVoucherNoOverride))
            {
                this.TransitTransferNo = rctInvoice.TransitTransferNo;
            }
            else
            {
                this.TransitTransferNo = txtTransitTransferVoucherNoOverride;
            }            
            this.InsurancePolicyNo = rctInvoice.InsurancePolicyNo;
            this.WayBillNo = rctInvoice.WayBillNo;
            this.Save();
            return this.ID;
        }

        

        /// <summary>
        /// Loads the by receipt invoice ID.
        /// </summary>
        /// <param name="ID">The ID.</param>
        internal void LoadByReceiptInvoiceID(int ID)
        {
            var query = HCMIS.Repository.Queries.Receipt.SelectLoadByReceiptInvoiceId(ID);
            this.LoadFromRawSql(query);
        }


        /// <summary>
        /// Converts the null.
        /// </summary>
        public void ConvertNull()
        {
            if (IsColumnNull("TotalValue"))
                TotalValue = 0.0;
            if (IsColumnNull("Insurance"))
                Insurance = 0.0;
            if (IsColumnNull("AirFreight"))
                AirFreight = 0.0;
            if (IsColumnNull("SeaFreight"))
                SeaFreight = 0.0;
            if (IsColumnNull("InlandFreight"))
                InlandFreight = 0.0;
            if (IsColumnNull("NBE"))
                NBE = 0.0;
            if (IsColumnNull("CBE"))
                CBE = 0.0;
            if (IsColumnNull("CustomDutyTax"))
                CustomDutyTax = 0.0;
            if (IsColumnNull("Provision"))
                Provision = 0.0;
            if (IsColumnNull("TransitServiceCharge"))
            {
                TransitServiceCharge = 0.0;
            }
        }

        /// <summary>
        /// Sets the receipt invoice ID.
        /// </summary>
        /// <param name="p">The p.</param>
        /// <exception cref="System.NotImplementedException"></exception>
        internal void SetReceiptInvoiceID(int p)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Costs the analysis.
        /// </summary>
        /// <param name="pGRVNo">The p GRV no.</param>
        /// <returns></returns>
        public DataView CostAnalysis(string pGRVNo)
        {

            GetGrandTotal();
            PO PO = ReceiptInvoice.PO;
            ReceiptInvoice receiptInvoice = ReceiptInvoice;
            Activity Activity = new Activity();
            Activity.LoadByPrimaryKey(receiptInvoice.ActivityID);
            double GIT = TotalLandedCost - Provision;
            JournalEntry UnitCostJournal = new JournalEntry(Activity.AccountName, Activity.SubAccountName, Activity.Name, PO.Supplier.CompanyName, "", PO.PONumber, pGRVNo, receiptInvoice.STVOrInvoiceNo, receiptInvoice.TransitTransferNo, receiptInvoice.WayBillNo, receiptInvoice.InsurancePolicyNo);
            double PriceDifference = Math.Round(TotalLandedCost - this.GrandTotal, BLL.Settings.NoOfDigitsAfterTheDecimalPoint);
            

            if (BLL.Settings.IsCenter)
            {
                if (this.ReceiptInvoice.InvoiceTypeID != ReceiptInvoiceType.InvoiceType.LOCAL_PURCHASE && this.ReceiptInvoice.InvoiceTypeID != ReceiptInvoiceType.InvoiceType.CIP)
                {
                    UnitCostJournal.AddNewEntry("Stock", GrandTotal, null);
                    UnitCostJournal.AddNewEntry("ClaimFromSupplier", GetSupplierClaim(), null);
                    UnitCostJournal.AddNewEntry("ClaimFromInsurance", GetInsuranceClaim(), null);

                    if (PriceDifference < 0)
                    {
                        UnitCostJournal.AddNewEntry("Price Difference", null, Math.Abs(PriceDifference));
                    }
                    else
                    {
                        UnitCostJournal.AddNewEntry("Price Difference", Math.Abs(PriceDifference), null);
                    }

                    UnitCostJournal.AddNewEntry("GIT", null, GIT);
                    UnitCostJournal.AddNewEntry("Provision", null, Provision);
                    UnitCostJournal.AddNewEntry("Other Income", null, 0);
                }
                else
                {

                    UnitCostJournal.AddNewEntry("Stock", GrandTotal, null);
                    if (PriceDifference < 0)
                    {
                        UnitCostJournal.AddNewEntry("Price Difference", null, Math.Abs(PriceDifference));
                    }
                    else
                    {
                        UnitCostJournal.AddNewEntry("Price Difference", Math.Abs(PriceDifference), null);
                    }
                    UnitCostJournal.AddNewEntry("Account Payable ", null, GIT);

                }
            }
            else
            {
                UnitCostJournal.AddNewEntry("Stock", GrandTotal, null);
                if (PriceDifference < 0)
                {
                    UnitCostJournal.AddNewEntry("Price Difference", null, Math.Abs(PriceDifference));
                }
                else if (PriceDifference > 0)
                {
                    UnitCostJournal.AddNewEntry("Price Difference", Math.Abs(PriceDifference), null);
                }
                UnitCostJournal.AddNewEntry("Account Payable ", null, GIT);
            }

            return UnitCostJournal.DefaultView();
        }


        /// <summary>
        /// Gets the grand total.
        /// </summary>
        /// <returns></returns>
        private double GetGrandTotal()
        {
            GrandTotal = 0;
            try
            {
                foreach (DataRowView drv in _pGRVSound)
                {
                    if (drv["PricePerPack"] != DBNull.Value)
                    {
                        drv["TotalCost"] = Convert.ToDouble(drv["UnitCost"]) * Convert.ToDouble(drv["InvoicedQuantity"]);
                        GrandTotal = GrandTotal + Math.Round(Convert.ToDouble(drv["UnitCost"]) * Convert.ToDouble(drv["InvoicedQuantity"]), BLL.Settings.NoOfDigitsAfterTheDecimalPoint);
                    }
                }
            }
            catch
            {
                return 0;
            }
            return GrandTotal;
        }
        /// <summary>
        /// Gets the insurance claim.
        /// </summary>
        /// <returns></returns>
        private double GetInsuranceClaim()
        {
            double ClaimInsurance = 0;
            double PricePerPack = 0;
            double UnitCost = 0;
            try
            {
                foreach (DataRowView drv in _pGRVNotReceivedDamaged)
                {
                    if (drv["Status"].ToString() == "Damaged")
                    {
                        ClaimInsurance = ClaimInsurance + GetInsuranceClaimPerItem(Convert.ToInt32(drv["ItemID"]), Convert.ToInt32(drv["UnitID"]), Convert.ToInt32(drv["ManufacturerID"]), Convert.ToInt32(drv["NoOfPack"]));
                        drv["PricePerPack"] = PricePerPack = GetPricePerPack(Convert.ToInt32(drv["ItemID"]), Convert.ToInt32(drv["UnitID"]), Convert.ToInt32(drv["ManufacturerID"]), Convert.ToInt32(drv["NoOfPack"]));
                        drv["TotalReceived"] = PricePerPack * Convert.ToInt32(drv["NoOfPack"]);
                        drv["UnitCost"] = UnitCost = GetUnitCost(Convert.ToInt32(drv["ItemID"]), Convert.ToInt32(drv["UnitID"]), Convert.ToInt32(drv["ManufacturerID"]), Convert.ToInt32(drv["NoOfPack"]));
                        drv["TotalCost"] = UnitCost * Convert.ToInt32(drv["NoOfPack"]);
                    }
                }
                return ClaimInsurance;
            }
            catch
            { }
            return 0.0;
        }
        /// <summary>
        /// Gets the supplier claim per item.
        /// </summary>
        /// <param name="ItemID">The item ID.</param>
        /// <param name="UnitID">The unit ID.</param>
        /// <param name="ManufacturerID">The manufacturer ID.</param>
        /// <param name="ShortageQty">The shortage qty.</param>
        /// <returns></returns>
        private double GetSupplierClaimPerItem(int ItemID, int UnitID, int ManufacturerID, int ShortageQty)
        {
            double supplierClaim = 0;
            double totalQty = 0;

            try
            {
                foreach (DataRowView drv in _pGRVNotReceivedDamaged)
                {
                    if (drv["PricePerPack"] != DBNull.Value && Convert.ToInt32(drv["ItemID"]) == ItemID && Convert.ToInt32(drv["UnitID"]) == UnitID && Convert.ToInt32(drv["ManufacturerID"]) == ManufacturerID)
                    {
                        supplierClaim = Convert.ToDouble(drv["PricePerPack"]) * ShortageQty * ReceiptInvoice.PO.ExhangeRate;
                    }
                }
                return supplierClaim;
            }
            catch
            {
                return 0;
            }
        }
        /// <summary>
        /// Gets the supplier claim.
        /// </summary>
        /// <returns></returns>
        private double GetSupplierClaim()
        {
            double ClaimSupplier = 0;
            double PricePerPack = 0;
            double UnitCost = 0;
            try
            {
                foreach (DataRowView drv in _pGRVNotReceivedDamaged as DataView)
                {
                    if (drv["Status"].ToString() == "Shortage")
                        ClaimSupplier = ClaimSupplier + GetSupplierClaimPerItem(Convert.ToInt32(drv["ItemID"]), Convert.ToInt32(drv["UnitID"]), Convert.ToInt32(drv["ManufacturerID"]), Convert.ToInt32(drv["NoOfPack"]));
                    drv["PricePerPack"] = PricePerPack = GetPricePerPack(Convert.ToInt32(drv["ItemID"]), Convert.ToInt32(drv["UnitID"]), Convert.ToInt32(drv["ManufacturerID"]), Convert.ToInt32(drv["NoOfPack"]));
                    drv["TotalReceived"] = PricePerPack * Convert.ToInt32(drv["NoOfPack"]);
                    drv["UnitCost"] = UnitCost = GetUnitCost(Convert.ToInt32(drv["ItemID"]), Convert.ToInt32(drv["UnitID"]), Convert.ToInt32(drv["ManufacturerID"]), Convert.ToInt32(drv["NoOfPack"]));
                    drv["TotalCost"] = UnitCost * Convert.ToInt32(drv["NoOfPack"]);

                }
                return ClaimSupplier;
            }
            catch
            { }
            return 0.0;
        }
        /// <summary>
        /// Gets the insured coeff.
        /// </summary>
        /// <value>
        /// The insured coeff.
        /// </value>
        public double InsuredCoeff
        {
            get
            {
                return ReceiptInvoice.PO.OtherExpense / ReceiptInvoice.PO.TotalValue;
            }
        }
        /// <summary>
        /// Gets the insurance claim per item.
        /// </summary>
        /// <param name="ItemID">The item ID.</param>
        /// <param name="UnitID">The unit ID.</param>
        /// <param name="ManufacturerID">The manufacturer ID.</param>
        /// <param name="DamagedQty">The damaged qty.</param>
        /// <returns></returns>
        private double GetInsuranceClaimPerItem(int ItemID, int UnitID, int ManufacturerID, int DamagedQty)
        {
            double insuredSum = 0;
            double totalQty = 0;

            try
            {
                foreach (DataRowView drv in _pGRV)
                {
                    if ((drv["PricePerPack"] != DBNull.Value && Convert.ToInt32(drv["ItemID"]) == ItemID && Convert.ToInt32(drv["UnitID"]) == UnitID && Convert.ToInt32(drv["ManufacturerID"]) == ManufacturerID))
                    {
                        insuredSum = insuredSum + Math.Round(Convert.ToDouble(drv["PricePerPack"]) * InsuredCoeff * DamagedQty, BLL.Settings.NoOfDigitsAfterTheDecimalPoint);
                        totalQty = Math.Round(Convert.ToDouble(drv["NoOfPack"]), BLL.Settings.NoOfDigitsAfterTheDecimalPoint);
                    }
                }
                return insuredSum;
            }
            catch
            {
                return 0;
            }
        }
        /// <summary>
        /// Gets the price per pack.
        /// </summary>
        /// <param name="ItemID">The item ID.</param>
        /// <param name="UnitID">The unit ID.</param>
        /// <param name="ManufacturerID">The manufacturer ID.</param>
        /// <param name="DamagedQty">The damaged qty.</param>
        /// <returns></returns>
        private double GetPricePerPack(int ItemID, int UnitID, int ManufacturerID, int DamagedQty)
        {
            double PricePerPack = 0;


            try
            {
                foreach (DataRowView drv in _pGRV)
                {
                    if ((drv["PricePerPack"] != DBNull.Value && Convert.ToInt32(drv["ItemID"]) == ItemID && Convert.ToInt32(drv["UnitID"]) == UnitID && Convert.ToInt32(drv["ManufacturerID"]) == ManufacturerID))
                        PricePerPack = Convert.ToDouble(drv["PricePerPack"]);
                }

                return PricePerPack;
            }
            catch
            {
                return 0;
            }
        }
        /// <summary>
        /// Gets the unit cost.
        /// </summary>
        /// <param name="ItemID">The item ID.</param>
        /// <param name="UnitID">The unit ID.</param>
        /// <param name="ManufacturerID">The manufacturer ID.</param>
        /// <param name="DamagedQty">The damaged qty.</param>
        /// <returns></returns>
        private double GetUnitCost(int ItemID, int UnitID, int ManufacturerID, int DamagedQty)
        {

            double UnitCost = 0;


            try
            {
                foreach (DataRowView drv in _pGRVSound)
                {
                    if ((drv["PricePerPack"] != DBNull.Value && Convert.ToInt32(drv["ItemID"]) == ItemID && Convert.ToInt32(drv["UnitID"]) == UnitID && Convert.ToInt32(drv["ManufacturerID"]) == ManufacturerID))
                        UnitCost = Convert.ToDouble(drv["UnitCost"]);
                }

                return UnitCost;
            }
            catch
            {
                return 0;
            }
        }


        /// <summary>
        /// Gets the data table.
        /// </summary>
        /// <returns></returns>
        public System.Data.DataTable GetDataTable()
        {
            var query = HCMIS.Repository.Queries.Receipt.SelectGetDataTable();
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

        /// <summary>
        /// Gets the receipt information for GRN.
        /// </summary>
        /// <param name="receiptID">The receipt ID.</param>
        /// <returns></returns>
        public DataTable GetReceiptInformationForGRN(int receiptID)
        {
           
            var query = HCMIS.Repository.Queries.Receipt.SelectGetReceiptInformationForGRN(receiptID);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

        /// <summary>
        /// Gets the inventory list by accountand warehouse.
        /// </summary>
        /// <param name="AccountID">The account ID.</param>
        /// <param name="WarehouseID">The warehouse ID.</param>
        /// <param name="TypeID">The type ID.</param>
        /// <returns></returns>
        public static DataView GetInventoryListByAccountandWarehouse(int AccountID, int WarehouseID, int TypeID)
        {

            Receipt receiptInventory = new Receipt();
            var query = HCMIS.Repository.Queries.Receipt.SelectGetInventoryListByAccountandWarehouse(AccountID, WarehouseID, TypeID, ReceiptConfirmationStatus.Constants.RECEIVE_QUANTITY_CONFIRMED, ReceiptConfirmationStatus.Constants.GRNF_PRINTED, ReceiptConfirmationStatus.Constants.PRICE_CALCULATED);

            receiptInventory.LoadFromRawSql(query);
            return receiptInventory.DefaultView;

        }


        /// <summary>
        /// Gets the margin by account.
        /// </summary>
        /// <param name="AccountID">The account ID.</param>
        /// <param name="TypeID">The type ID.</param>
        /// <returns></returns>
        public static DataView GetMarginByAccount(int AccountID, int TypeID)
        {
            if (TypeID != 0)
            {
                Receipt receiptInventory = new Receipt();
                var query = HCMIS.Repository.Queries.Receipt.SelectGetMarginByAccount(AccountID, TypeID);
                receiptInventory.LoadFromRawSql(query);
                return receiptInventory.DefaultView;
            }
            else
            {
                Receipt receiptInventory = new Receipt();
                var query = HCMIS.Repository.Queries.Receipt.SelectGetMarginByAccount(AccountID);
                receiptInventory.LoadFromRawSql(query);
                return receiptInventory.DefaultView;
            }
        }

        public static void Confirm(int StoreID, int WarehouseID)
        {
            Receipt receiptInventory = new Receipt();
            string query = "";
            query =
                    HCMIS.Repository.Queries.Receipt.SelectConfirm(StoreID, WarehouseID, ReceiptConfirmationStatus.Constants.RECEIVE_ENTERED, Settings.HandleGRV, ReceiptConfirmationStatus.Constants.RECEIVE_QUANTITY_CONFIRMED, ReceiptConfirmationStatus.Constants.GRV_PRINTED);

            receiptInventory.LoadFromRawSql(query);

        }

        /// <summary>
        /// Confirmbies the store.
        /// </summary>
        /// <param name="StoreID">The store ID.</param>
        /// <param name="WarehouseID">The warehouse ID.</param>
        public static void ConfirmbyStore(int StoreID, int WarehouseID)
        {
            Receipt receiptInventory = new Receipt();
            string query = "";
            query =
                    HCMIS.Repository.Queries.Receipt.SelectConfirmbyStore(StoreID, WarehouseID);

            receiptInventory.LoadFromRawSql(query);

        }

        /// <summary>
        /// Gets the total sounded item.
        /// </summary>
        /// <returns></returns>
        public double GetTotalSoundedItem()
        {
            double TotalSoundedItem = 0;
            LoadSoundpGRV();
            try
            {
                foreach (DataRowView drv in _pGRVSound)
                {
                    TotalSoundedItem += Convert.ToDouble(drv["PricePerPack"]) * Convert.ToInt32(drv["NoOfPack"]);
                }

                return TotalSoundedItem + ReceiptInvoice.GetFreight(TotalSoundedItem);
            }
            catch
            {
                return 0;
            }
        }
        /// <summary>
        /// return Inventory count sheet
        /// </summary>
        /// <param name="AccountID">The account ID.</param>
        /// <param name="WarehouseID">The warehouse ID.</param>
        /// <param name="TypeID">The type ID.</param>
        /// <returns></returns>
        public static DataView GetInventoryCountbyAccountandWarehouse(int AccountID, int WarehouseID, int TypeID,int ReceiptConfirmationStatusID)
        {
            Receipt receiptInventory = new Receipt();
            //string query = String.Format("Select  rd.ItemID,rd.UnitID,rd.ManufacturerID,iu.text Unit, vw.FullItemName , sum(rd.NoOfPack) NoOfPack,rd.PricePerPack PricePerPack,Sum(rd.NoOfPack * rd.PricePerPack)as TotalReceived, m.Name as Manufacturer,pst.Name Warehouse,cl.Name Cluster,sg.Name Account,s.StoreName SubSubAccount,sgDiv.Name SubAccount,t.Name commodityType, vw.StockCode  from ReceivePallet rp join ReceiveDoc rd on rp.ReceiveID = rd.ID  join receipt r on r.ID = rd.ReceiptID Join Stores s on s.ID = rd.StoreID join Manufacturers m on m.ID = rd.ManufacturerID join vwGetAllItems vw  on vw.ID = rd.ItemID join PalletLocation pl on rp.PalletLocationID = pl.ID left join Supplier su on su.ID = rd.SupplierID join Receipt rt on rt.ID = rd.ReceiptID join itemUnit iu on rd.unitID = iu.ID Join Shelf sh on pl.ShelfID = sh.ID  join PhysicalStore ps on Ps.ID = sh.StoreID Join PhysicalStoreType pst on pst.ID = ps.PhysicalStoreTypeID join Cluster cl on cl.ID = pst.ClusterID join StoreGroupDivision sgDiv on sgDiv.ID=s.StoreGroupDivisionID join StoreGroup sg on sg.ID = sgDiv.StoreGroupID join [type] t on t.ID = vw.TypeId where s.ID = {0} and ps.PhysicalStoreTypeID = {1} group by  rd.ItemID,rd.UnitID,rd.ManufacturerId,sg.Name,sgDiv.Name, vw.FullItemName,m.Name,iu.Text,pst.Name,cl.Name,s.StoreName,t.Name, vw.StockCode,rd.PricePerPack", AccountID, WarehouseID);
            var query = HCMIS.Repository.Queries.Receipt.SelectGetInventoryCountbyAccountandWarehouse(AccountID, WarehouseID, TypeID, ReceiptConfirmationStatusID);
            receiptInventory.LoadFromRawSql(query);
            return receiptInventory.DefaultView;
        }


        public static DataView GetInventoryCountbyInventoryPeriodID(int inventoryPeriodId,int physicalStoreId, int activityId)
        {
            Receipt receiptInventory = new Receipt();
         
            var query = HCMIS.Repository.Queries.Receipt.SelectGetInventoryCountbyInventoryPeriodID(inventoryPeriodId, physicalStoreId, activityId);
            receiptInventory.LoadFromRawSql(query);
            return receiptInventory.DefaultView;
        }

        /// <summary>
        /// Gets the inventory countby accountand physical store.
        /// </summary>
        /// <param name="AccountID">The account ID.</param>
        /// <param name="PhysicalStoreID">The physical store ID.</param>
        /// <param name="TypeID">The type ID.</param>
        /// <returns></returns>
        public static DataView GetInventoryCountbyAccountandPhysicalStore(int AccountID, int PhysicalStoreID, int TypeID)
        {
            Receipt receiptInventory = new Receipt();
            //string query = String.Format("Select  rd.ItemID,rd.UnitID,rd.ManufacturerID,iu.text Unit, vw.FullItemName , sum(rd.NoOfPack) NoOfPack,rd.PricePerPack PricePerPack,Sum(rd.NoOfPack * rd.PricePerPack)as TotalReceived, m.Name as Manufacturer,pst.Name Warehouse,cl.Name Cluster,sg.Name Account,s.StoreName SubSubAccount,sgDiv.Name SubAccount,t.Name commodityType, vw.StockCode  from ReceivePallet rp join ReceiveDoc rd on rp.ReceiveID = rd.ID  join receipt r on r.ID = rd.ReceiptID Join Stores s on s.ID = rd.StoreID join Manufacturers m on m.ID = rd.ManufacturerID join vwGetAllItems vw  on vw.ID = rd.ItemID join PalletLocation pl on rp.PalletLocationID = pl.ID left join Supplier su on su.ID = rd.SupplierID join Receipt rt on rt.ID = rd.ReceiptID join itemUnit iu on rd.unitID = iu.ID Join Shelf sh on pl.ShelfID = sh.ID  join PhysicalStore ps on Ps.ID = sh.StoreID Join PhysicalStoreType pst on pst.ID = ps.PhysicalStoreTypeID join Cluster cl on cl.ID = pst.ClusterID join StoreGroupDivision sgDiv on sgDiv.ID=s.StoreGroupDivisionID join StoreGroup sg on sg.ID = sgDiv.StoreGroupID join [type] t on t.ID = vw.TypeId where s.ID = {0} and ps.PhysicalStoreTypeID = {1} group by  rd.ItemID,rd.UnitID,rd.ManufacturerId,sg.Name,sgDiv.Name, vw.FullItemName,m.Name,iu.Text,pst.Name,cl.Name,s.StoreName,t.Name, vw.StockCode,rd.PricePerPack", AccountID, WarehouseID);
            var query = HCMIS.Repository.Queries.Receipt.SelectGetInventoryCountbyAccountandPhysicalStore(AccountID, PhysicalStoreID, TypeID);
            receiptInventory.LoadFromRawSql(query);
            return receiptInventory.DefaultView;
        }

        /// <summary>
        /// return Inventory count sheet
        /// </summary>
        /// <param name="AccountID">The account ID.</param>
        /// <param name="PhysicalStoreID">The physical store ID.</param>
        /// <param name="ItemID">The item ID.</param>
        /// <param name="UnitID">The unit ID.</param>
        /// <returns></returns>
        public static DataView GetRawInventoryCountbyAccountandPhysicalStoreItem(int AccountID, int PhysicalStoreID, int ItemID, int UnitID)
        {
            Receipt receiptInventory = new Receipt();
            //string query = String.Format("Select  rd.ItemID,rd.UnitID,rd.ManufacturerID,iu.text Unit, vw.FullItemName , sum(rd.NoOfPack) NoOfPack,rd.PricePerPack PricePerPack,Sum(rd.NoOfPack * rd.PricePerPack)as TotalReceived, m.Name as Manufacturer,pst.Name Warehouse,cl.Name Cluster,sg.Name Account,s.StoreName SubSubAccount,sgDiv.Name SubAccount,t.Name commodityType, vw.StockCode  from ReceivePallet rp join ReceiveDoc rd on rp.ReceiveID = rd.ID  join receipt r on r.ID = rd.ReceiptID Join Stores s on s.ID = rd.StoreID join Manufacturers m on m.ID = rd.ManufacturerID join vwGetAllItems vw  on vw.ID = rd.ItemID join PalletLocation pl on rp.PalletLocationID = pl.ID left join Supplier su on su.ID = rd.SupplierID join Receipt rt on rt.ID = rd.ReceiptID join itemUnit iu on rd.unitID = iu.ID Join Shelf sh on pl.ShelfID = sh.ID  join PhysicalStore ps on Ps.ID = sh.StoreID Join PhysicalStoreType pst on pst.ID = ps.PhysicalStoreTypeID join Cluster cl on cl.ID = pst.ClusterID join StoreGroupDivision sgDiv on sgDiv.ID=s.StoreGroupDivisionID join StoreGroup sg on sg.ID = sgDiv.StoreGroupID join [type] t on t.ID = vw.TypeId where s.ID = {0} and ps.PhysicalStoreTypeID = {1} group by  rd.ItemID,rd.UnitID,rd.ManufacturerId,sg.Name,sgDiv.Name, vw.FullItemName,m.Name,iu.Text,pst.Name,cl.Name,s.StoreName,t.Name, vw.StockCode,rd.PricePerPack", AccountID, WarehouseID);
            var query = HCMIS.Repository.Queries.Receipt.SelectGetRawInventoryCountbyAccountandPhysicalStoreItem(AccountID, PhysicalStoreID, ItemID, UnitID);
            receiptInventory.LoadFromRawSql(query);
            return receiptInventory.DefaultView;
        }

        /// <summary>
        /// Gets the raw inventory countby accountand warehouse item.
        /// </summary>
        /// <param name="AccountID">The account ID.</param>
        /// <param name="WarehouseID">The warehouse ID.</param>
        /// <param name="ItemID">The item ID.</param>
        /// <param name="UnitID">The unit ID.</param>
        /// <returns></returns>
        public static DataView GetRawInventoryCountbyAccountandWarehouseItem(int AccountID, int WarehouseID, int ItemID, int UnitID)
        {
            Receipt receiptInventory = new Receipt();
            //string query = String.Format("Select  rd.ItemID,rd.UnitID,rd.ManufacturerID,iu.text Unit, vw.FullItemName , sum(rd.NoOfPack) NoOfPack,rd.PricePerPack PricePerPack,Sum(rd.NoOfPack * rd.PricePerPack)as TotalReceived, m.Name as Manufacturer,pst.Name Warehouse,cl.Name Cluster,sg.Name Account,s.StoreName SubSubAccount,sgDiv.Name SubAccount,t.Name commodityType, vw.StockCode  from ReceivePallet rp join ReceiveDoc rd on rp.ReceiveID = rd.ID  join receipt r on r.ID = rd.ReceiptID Join Stores s on s.ID = rd.StoreID join Manufacturers m on m.ID = rd.ManufacturerID join vwGetAllItems vw  on vw.ID = rd.ItemID join PalletLocation pl on rp.PalletLocationID = pl.ID left join Supplier su on su.ID = rd.SupplierID join Receipt rt on rt.ID = rd.ReceiptID join itemUnit iu on rd.unitID = iu.ID Join Shelf sh on pl.ShelfID = sh.ID  join PhysicalStore ps on Ps.ID = sh.StoreID Join PhysicalStoreType pst on pst.ID = ps.PhysicalStoreTypeID join Cluster cl on cl.ID = pst.ClusterID join StoreGroupDivision sgDiv on sgDiv.ID=s.StoreGroupDivisionID join StoreGroup sg on sg.ID = sgDiv.StoreGroupID join [type] t on t.ID = vw.TypeId where s.ID = {0} and ps.PhysicalStoreTypeID = {1} group by  rd.ItemID,rd.UnitID,rd.ManufacturerId,sg.Name,sgDiv.Name, vw.FullItemName,m.Name,iu.Text,pst.Name,cl.Name,s.StoreName,t.Name, vw.StockCode,rd.PricePerPack", AccountID, WarehouseID);
            var query = HCMIS.Repository.Queries.Receipt.SelectGetRawInventoryCountbyAccountandWarehouseItem(AccountID, WarehouseID, ItemID, UnitID);
            receiptInventory.LoadFromRawSql(query);
            return receiptInventory.DefaultView;
        }

        public static DataTable GetReceiptStatusList()
        {
            string query =
                HCMIS.Repository.Queries.Receipt.SelectGetReceiptStatusList();
            Receipt receipt = new Receipt();
            receipt.LoadFromRawSql(query);
            System.Data.DataTable tbl = receipt.DataTable;
            query = HCMIS.Repository.Queries.Receipt.SelectGetReceiptStatusList2();
            receipt.FlushData();
            receipt.LoadFromRawSql(query);

            tbl.Merge(receipt.DataTable);
            return tbl;
        }


        public static DataView GetListOfGRVByUserIDForCostConfirmation(int userID)
        {
            Receipt receipt = new Receipt();
            string query;
            query = HCMIS.Repository.Queries.Receipt.SelectGetListOfGRVByUserIDForCostConfirmation(userID, BLL.ReceiptConfirmationStatus.Constants.PRICE_CALCULATED);
            receipt.LoadFromRawSql(query);
            return receipt.DefaultView;
        }

        public static DataView GetListOfGRVByUserIDForCosting(int userID)
        {
            Receipt receipt = new Receipt();
            string query;
            query = HCMIS.Repository.Queries.Receipt.SelectGetListOfGRVByUserIDForCosting(userID, BLL.ReceiptConfirmationStatus.Constants.GRNF_PRINTED);
            receipt.LoadFromRawSql(query);
            return receipt.DefaultView;
        }

        public static DataView GetListOfReceipt(int receiptTypeID,int receiptStatusID,int userID)
        {
            Receipt receipt = new Receipt();
            string query;
            query = HCMIS.Repository.Queries.Receipt.GetListOfReceipt(receiptTypeID, receiptStatusID, userID);
            receipt.LoadFromRawSql(query);
            return receipt.DefaultView;
        }

        #region Cost Calculation

        public DataTable GetGRVDetailsforCosting()
        {
            var receipt = new Receipt();
            string query = string.Empty;

            if (ReceiptTypeID == ReceiptType.CONSTANTS.DELIVERY_NOTE)
            {
                bool isElectronicDeliveryNote = new Receipt(ID)._receiptInvoice.PO.IsElectronic;
                query = isElectronicDeliveryNote
                    ? HCMIS.Repository.Queries.Receipt.SelectGetGRVDetailsforCostingDeliveryNoteElectronic(ID)
                    : HCMIS.Repository.Queries.Receipt.SelectGetGRVDetailsforCostingDeliveryNoteManual(ID);
            }
            else
            {
                query = HCMIS.Repository.Queries.Receipt.SelectGetGRVDetailsforCosting(ID);
            }

            receipt.LoadFromRawSql(query);
            return receipt.DataTable;

        }

        public DataTable GetGRVDetailsforCostAnalysis(int ID)
        {
            Receipt receipt = new Receipt();
            string query = HCMIS.Repository.Queries.Receipt.SelectGetGRVDetailsforCostAnalysis(ID, BLL.Settings.NoOfDigitsAfterTheDecimalPoint);
            receipt.LoadFromRawSql(query);
            return receipt.DataTable;

        }

        public static DataTable GetPreviousStockforMovingCosting(int ReceiptID)
        {
            Receipt receipt = new Receipt();
            string query = HCMIS.Repository.Queries.Receipt.SelectGetPreviousStockforMovingCosting(ReceiptID);
            receipt.LoadFromRawSql(query);
            
            if(BLL.Settings.UseCostTier)
            {
                query = HCMIS.Repository.Queries.Receipt.SelectGetPreviousStockforMovingCostingUseCostTier(ReceiptID);
                receipt.LoadFromRawSql(query);
                return CostingService.SetPrice(receipt.DataTable);
             
            }
            return receipt.DataTable;
        }

        public static DataTable GetPreviousStockforCostAnalysisPrintout(int ReceiptID)
        {
            Receipt receipt = new Receipt();
            string query = HCMIS.Repository.Queries.Receipt.SelectGetPreviousStockforCostAnalysisPrintout(ReceiptID);
            receipt.LoadFromRawSql(query);
            if(BLL.Settings.UseCostTier)
            {
                query = HCMIS.Repository.Queries.Receipt.SelectGetPreviousStockforCostAnalysisPrintoutUseCostTier(ReceiptID);
                receipt.LoadFromRawSql(query);
                return CostingService.SetPrice(receipt.DataTable);
            }
           return receipt.DataTable;
           
        }


        public static DataTable GetDiscrepancyGRVDetailsforCosting(int ReceiptID)
        {
            Receipt receipt = new Receipt();
            string query = HCMIS.Repository.Queries.Receipt.SelectGetDiscrepancyGRVDetailsforCosting(ReceiptID, StorageType.Quaranteen, ShortageReasons.Constants.SHORT_LANDED, ShortageReasons.Constants.DAMAGED);
            receipt.LoadFromRawSql(query);
         return receipt.DataTable;
           
        }

        public DataTable GetDetailsForGRNF()
        {
            string query;
            Receipt Receipt = new Receipt();
               query = HCMIS.Repository.Queries.Receipt.SelectGetDetailsForReceipt(ID);
            Receipt.LoadFromRawSql(query);
            return Receipt.DataTable;
        }

        public DataTable GetDiscrepancyForGRNF()
        {
            string query;
            Receipt Receipt = new Receipt();
            query = HCMIS.Repository.Queries.Receipt.SelectGetDiscrepancyForGRNF(ID);
            Receipt.LoadFromRawSql(query);
            return Receipt.DataTable;
        }

        #endregion

        public static bool AreThereIssues(int receiptID)
        {
            BLL.ReceiveDoc rd = new ReceiveDoc();
            rd.LoadByReceiptID(receiptID);
            return rd.AreThereIssues;
        }

        public void LoadSearchDetailsForReceipt(int receiptID)
        {
            string query =
                HCMIS.Repository.Queries.Receipt.SelectLoadSearchDetailsForReceipt(receiptID);
            this.LoadFromRawSql(query);
        }

        public static DataTable GetlistOfPrints(int ID)
        {
            string query;
            Receipt Receipt = new Receipt();
            query = HCMIS.Repository.Queries.Receipt.SelectGetlistOfPrints(ID);
            Receipt.LoadFromRawSql(query);
            return Receipt.DataTable;
        }

        public string FacilityName(int receiptID)
        {
            string query;
            Receipt Receipt = new Receipt();
            query = HCMIS.Repository.Queries.Receipt.SelectFacilityName(receiptID);
            Receipt.LoadFromRawSql(query);
            if(Receipt.RowCount==0)
                return "";
            
            return   Receipt.DataRow["FacilityName"].ToString();
        }

        public void UpdateInvoiceRelatedHeaders(BLL.ReceiptInvoice rctInvoice)
        {
            this.LoadByReceiptInvoiceID(rctInvoice.ID);
            if (this.RowCount > 0)
            {
                while (!this.EOF)
                {
                    this.STVOrInvoiceNo = rctInvoice.STVOrInvoiceNo;
                    this.WayBillNo = rctInvoice.WayBillNo;
                    this.InsurancePolicyNo = rctInvoice.InsurancePolicyNo;
                    this.MoveNext();
                }
                this.Save();
            }
        }

        public void ChangeStatus(int toStatusId,int? printoutId,string url,int userId,string description)
        {
            LogReceiptStatus logReceiptStatus = new LogReceiptStatus();
            logReceiptStatus.AddNew();
            logReceiptStatus.StatusChangedDate = DateTimeHelper.ServerDateTime;
            logReceiptStatus.ReceiptID =this.ID;
            if (!IsColumnNull("ReceiptStatusID"))
            {
                
            
            logReceiptStatus.FromStatusID = this.ReceiptStatusID;
            }
            logReceiptStatus.ToStatusID = toStatusId;

            if(printoutId.HasValue)
            {
                logReceiptStatus.ReceiptConfirmationPrintoutID = printoutId.Value;
            }

            logReceiptStatus.URL = url;

            logReceiptStatus.UserID = userId;

            logReceiptStatus.Description = description;

            logReceiptStatus.Save();

            this.ReceiptStatusID = toStatusId;
            this.Save();
            

        }

        public static DataTable GetPriceListFromCostTier(int MovingAverageGroupID,bool ShowAll = false)
        {
            string query;
            Receipt Receipt = new Receipt();
            if (!ShowAll)
            {
                query =
                    HCMIS.Repository.Queries.Receipt.SelectGetPriceListFromCostTier(MovingAverageGroupID);
            }
            else
            {
                query =
                    HCMIS.Repository.Queries.Receipt.SelectGetPriceListFromCostTierShowAll(MovingAverageGroupID);
            }
            Receipt.LoadFromRawSql(query);
            Receipt.DataTable.TableName = "PriceList";
            return Receipt.DataTable;
        }

        public static DataTable GetItemPriceHistoryCostTierByDate( DateTime date, int userID)
        {
            var query = HCMIS.Repository.Queries.Receipt.SelectGetItemPriceHistoryByDate(date,userID);
            var receipt = new Receipt();
            receipt.LoadFromRawSql(query);
            receipt.DataTable.TableName = "PriceListHistory";
            return receipt.DataTable;
        }

        public static DataTable GetItemPriceHistoryCostTierByDate(DateTime Startdate,DateTime Enddate, int userID)
        {
            var query = HCMIS.Repository.Queries.Receipt.SelectGetItemPriceHistoryByDate(Startdate, Enddate, userID);
            var receipt = new Receipt();
            receipt.LoadFromRawSql(query);
            receipt.DataTable.TableName = "PriceListHistory";
            return receipt.DataTable;
        }
        public static DataTable GetPriceConfirmationListFromCostTier(int MovingAverageGroupID)
        {
            string query;
            Receipt Receipt = new Receipt();
            query = HCMIS.Repository.Queries.Receipt.SelectGetPriceConfirmationListFromCostTier(MovingAverageGroupID, ChangeMode.PriceOverride.Id);
            Receipt.LoadFromRawSql(query);
            return Receipt.DataTable;
        }

        public static DataView GetInventoryListByAccount(int movingAverageID, int statusID)
        {

            Receipt receiptInventory = new Receipt();
            string query = HCMIS.Repository.Queries.Receipt.SelectGetInventoryListByAccount(movingAverageID, statusID);

            receiptInventory.LoadFromRawSql(query);
            return receiptInventory.DefaultView;

        }

        public static DataRow GetReceiptStatusDetail(int receiptID, int receiptStatusID)
        {
            var receipt = new Receipt();
            string query = HCMIS.Repository.Queries.Receipt.SelectGetReceiptStatusDetails(receiptID, receiptStatusID);
            receipt.LoadFromRawSql(query);
            return receipt.DataTable != null && receipt.DataTable.Rows.Count > 0 ? receipt.DataTable.Rows[0] : null;
        }

        public string GetNewInvoiceNoForConvertedDeliveryNote()
        {
            var receiptInvoice = new ReceiptInvoice(ReceiptInvoiceID);
            if (!receiptInvoice.IsConvertedFromDeliveryNote)
            {
                return null;
            }
            var receipt = new Receipt();
            string query = HCMIS.Repository.Queries.ReceiptInvoice.SelectGetReprintedInvoice(ReceiptInvoiceID);
            receipt.LoadFromRawSql(query);

            return receipt.STVOrInvoiceNo;

        }
    }
}