
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Linq;
using DAL;
using System.Data;

namespace BLL
{
    public class PO : _PO
    {

        private ReceiptInvoice _Invoices = new ReceiptInvoice();
        public PurchaseOrderDetail _purchaseOrderDetail = new PurchaseOrderDetail();

        public PO()
        {


        }

        /// <summary>
        ///Loads PO by ID
        /// </summary>
        /// <param name="ID"></param>
        public PurchaseOrderDetail PurchaseOrderDetail
        {
            get { return _purchaseOrderDetail; }
            set { _purchaseOrderDetail = value; }
        }


        public void LoadPurchaseOrderDetail()
        {
            _purchaseOrderDetail.LoadByPo(this.ID);
        }

        public bool DoesPONumberExists(string poNumber)
        {
            var po = new PO();
            var query = HCMIS.Repository.Queries.PO.DoesPONumberExists(poNumber);
            po.LoadFromRawSql(query);

            return po.RowCount != 0;
        }

        public bool DoesPOHasDuplicateInvoiceNumbers(int poid,string invoiceNo)
        {
            var po = new PO();
            var query = HCMIS.Repository.Queries.PO.DoesPOHasDuplicateInvoiceNumbers(poid,invoiceNo);
            po.LoadFromRawSql(query);

            return po.RowCount != 0;
        }

        public static PO CreatePOforStandard(int orderType, int StoreID, int? SupplierID, string Remark,int userID)
        {
            BLL.PO po = new PO();
            po.AddNew();


            po.StoreID = StoreID;

            po.ExhangeRate = 1;
            po.Insurance = 0;
            po.Description = Remark;
            if (SupplierID != null)
                po.SupplierID = Convert.ToInt32(SupplierID);

            //po.PurchaseType = 
            po.SavedbyUserID = userID;
            po.IsElectronic = false;
            po.POFinalized = false;
            po.Rowguid = Guid.NewGuid();
            po.Identifier = "00000";
            po.DateOfEntry = DateTimeHelper.ServerDateTime;
            UpdatePoNumberAndPOType(orderType, po);
             po.Save();  
            //~ Update PONumber for Transfers and Error Correction ~//
            UpdatePoNumberAndPOType(orderType, po);
            po.Save();

            return po;
        }

        private static void UpdatePoNumberAndPOType(int orderType, PO po)
        {
            bool IsJustNewEntry = po.IsColumnNull("ID");
            if (orderType == OrderType.CONSTANTS.ACCOUNT_TO_ACCOUNT_TRANSFER)
            {                
                if (IsJustNewEntry) { po.PurchaseType = POType.ACCOUNT_TO_ACCOUNT_TRANSFER; }
                else { po.PONumber = string.Format("A2A-{0}", po.ID); }
            }
            else if (orderType == OrderType.CONSTANTS.STORE_TO_STORE_TRANSFER)
            {
                if (IsJustNewEntry) {po.PurchaseType = POType.STORE_TO_STORE_TRANSFER; }
                else { po.PONumber = string.Format("S2S-{0}", po.ID);}
            }
            else if (orderType == OrderType.CONSTANTS.ERROR_CORRECTION_TRANSFER)
            {
                if (IsJustNewEntry) {po.PurchaseType = POType.ERROR_CORRECTION_TRANSFER; } 
                else {po.PONumber = string.Format("EC-{0}", po.ID); }
            }
            else if (orderType == OrderType.CONSTANTS.INVENTORY)
            {
                if (IsJustNewEntry) { po.PurchaseType = POType.INVENTORY;} 
                else { po.PONumber = string.Format("INV-{0}", po.ID); }
            }
        }

        public PO(int ID)
        {
            this.LoadByPrimaryKey(ID);
            _Invoices.LoadForPO(this.ID);
            _purchaseOrderDetail.LoadByPo(this.ID);
            ConvertNull();
        }

        /// <summary>
        /// Gets Or Sets The Invoices associated with POID
        /// </summary>
        public ReceiptInvoice Invoices
        {
            get { return _Invoices; }
            set { value.SetPOID(this.ID); }
        }


        /// <summary>
        /// Get or Set Supplier
        /// </summary>
        public Supplier Supplier
        {
            get
            {
                Supplier Supplier = new Supplier();
                Supplier.LoadByPrimaryKey(SupplierID);
                return Supplier;
            }
            set { SupplierID = value.ID; }
        }

        
        public double Remaining
        {
            get
            {
                if (!IsColumnNull("TotalValue"))
                    return TotalValue - Invoices.TotalFOBValue;
                else
                    return -1;
            }
           

        }

        /// <summary>
        /// Gets the uncomplete purchase order.
        /// </summary>
        /// <returns></returns>
        public static DataView GetUncompletePurchaseOrder()
        {
            PO purchaseOrder = new PO();
            var query = HCMIS.Repository.Queries.PO.SelectGetUncompletePurchaseOrder();
            purchaseOrder.LoadFromRawSql(query);
            return purchaseOrder.DefaultView;
        }

        /// <summary>
        /// Gets the invoice for PO.
        /// </summary>
        /// <param name="ID">The ID.</param>
        /// <returns></returns>
        public static DataView GetInvoiceForPO(int ID)
        {
            PO purchaseOrder = new PO();
            var query = HCMIS.Repository.Queries.PO.SelectGetInvoiceForPO(ID);
            purchaseOrder.LoadFromRawSql(query);
            return purchaseOrder.DefaultView;
        }
        ///// <summary>
        ///// Gets PO details for PO.
        ///// </summary>
        ///// <param name="ID">The ID.</param>
        ///// <returns></returns>
        //public static DataView GetPurchaseOrderDetailForPO(int ID)
        //{
        //    PO purchaseOrder = new PO();
        //    var query = HCMIS.Repository.Queries.PurchaseOrderDetail.SelectPurchaseOrderDetailForPO(ID);
        //    purchaseOrder.LoadFromRawSql(query);
        //    return purchaseOrder.DefaultView;
        //}

        /// <summary>
        /// Gets the uncomplete invoice ID.
        /// </summary>
        /// <returns></returns>
        public static DataView GetUncompleteInvoiceID()
        {
            PO purchaseOrder = new PO();
            var query = HCMIS.Repository.Queries.PO.SelectGetUncompleteInvoiceID();
            purchaseOrder.LoadFromRawSql(query);
            return purchaseOrder.DefaultView;
        }


        /// <summary>
        /// Get Receiving Order Information
        /// </summary>
        /// <param name="userID">The user ID.</param>
        /// <param name="purchaseOrderTypeID">Type of the purchase.</param>
        /// <returns>
        /// DataView: ID OrderNumber CompanyName
        /// </returns>
        public static DataView GetOrderForSelection(int userID,int? purchaseOrderTypeID)
        {
            var purchaseOrder = new PO();
            var query = HCMIS.Repository.Queries.PO.SelectGetOrderForSelection(userID,purchaseOrderTypeID);
            purchaseOrder.LoadFromRawSql(query);
            return purchaseOrder.DefaultView;
        }

        public static DataView GetOrderAll(int userID)
        {
            PO purchaseOrder = new PO();
            var query = HCMIS.Repository.Queries.PO.SelectGetOrderAll(userID);
            purchaseOrder.LoadFromRawSql(query);
            return purchaseOrder.DefaultView;
        }

        /// <summary>
        /// Get Receiving Order Information
        /// </summary>
        /// <param name="purchaseType">Type of the purchase.</param>
        /// <param name="userID">The user ID.</param>
        /// <returns>
        /// DataView: ID OrderNumber CompanyName
        /// </returns>


        /// <summary>
        /// Converts the null.
        /// </summary>
        public void ConvertNull()
        {
            if (IsColumnNull("TotalValue"))
                TotalValue = 0.0;
            if (IsColumnNull("Insurance"))
                Insurance = 0.0;
            if (IsColumnNull("AirFreight"))
                AirFreight = 0.0;
            if (IsColumnNull("SeaFreight"))
                SeaFreight = 0.0;
            if (IsColumnNull("InlandFreight"))
                InlandFreight = 0.0;
            if (IsColumnNull("NBE"))
                NBE = 0.0;
            if (IsColumnNull("CBE"))
                CBE = 0.0;
            if (IsColumnNull("CustomDutyTax"))
                CustomDutyTax = 0.0;
            if (IsColumnNull("Provision"))
                Provision = 0.0;
            if (IsColumnNull("TransitServiceCharge"))
                TransitServiceCharge = 0.0;
            if (IsColumnNull("ExhangeRate"))
                ExhangeRate = 1.0;
            if (IsColumnNull("LCID"))
                LCID = 0x045e;
            if (IsColumnNull("ModifiedDate"))
                ModifiedDate = DateTime.MinValue;
            if (IsColumnNull("PODate"))
                ModifiedDate = DateTime.MinValue;

        }

        /// <summary>
        /// Alls the order for report.
        /// </summary>
        /// <returns></returns>
        public DataTable AllOrderForReport()
        {
            PO purchaseOrder = new PO();
            var query = HCMIS.Repository.Queries.PO.SelectAllOrderForReport();
            purchaseOrder.LoadFromRawSql(query);
            return purchaseOrder.DataTable;
        }

        /// <summary>
        /// Gets the data table.
        /// </summary>
        /// <returns></returns>
        public System.Data.DataTable GetDataTable()
        {

            PO purchaseOrder = new PO();
            var query = HCMIS.Repository.Queries.PO.SelectGetDataTable();
            purchaseOrder.LoadFromRawSql(query);

            return purchaseOrder.DataTable;
        }

        public void LoadByReceiptID(int receiptID)
        {
            BLL.Receipt rct = new Receipt();
            rct.LoadByPrimaryKey(receiptID);
            BLL.ReceiptInvoice rctInvoice = new ReceiptInvoice();
            rctInvoice.LoadByPrimaryKey(rct.ReceiptInvoiceID);
            this.LoadByPrimaryKey(rctInvoice.POID);
        }

        public static bool IsPOEditable(int ID)
        {

            PO PurchaseOrder = new PO();

            var query = HCMIS.Repository.Queries.PO.SelectIsPOEditable(ID, Settings.DisableInvoiceEditAfterStepNo);
            PurchaseOrder.LoadFromRawSql(query);
            return PurchaseOrder.RowCount == 0;
        }

        public static DataTable GetOrderSummary(int invoiceId)
        {
            var purchaseOrder = new PO();

            var query = HCMIS.Repository.Queries.PO.SelectGetOrderSummary(invoiceId);
            purchaseOrder.LoadFromRawSql(query);
            return purchaseOrder.DataTable;
        }

        public static bool IsPOElectronic(int ID)
        {
            var purchaseOrder = new PO();
            var query = HCMIS.Repository.Queries.PO.SelectIsPOElectronic(ID);
            purchaseOrder.LoadFromRawSql(query);

            if (purchaseOrder.RowCount == 0) return false;
            return (bool)purchaseOrder.GetColumn("IsElectronic");
        }

        public bool ReceiveStarted
        {
            get
            {
                var query = HCMIS.Repository.Queries.PO.GetSelectPOReceives(this.ID);
                var po = new PO();
                po.LoadFromRawSql(query);
                if (po.DataTable == null || po.DataTable.Rows.Count == 0)
                    return false;

                return true;
            }
        }
    }
}

