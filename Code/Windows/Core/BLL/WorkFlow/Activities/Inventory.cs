
// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.ComponentModel;
using BLL.Services;
using DAL;
using MyGeneration.dOOdads;
using System.Data;

namespace BLL
{
    public class Inventory : _Inventory
    {
        public class InventoryCommitMembers
        {
            // member variables for the inventory commiting activity. 

            public Order Order;
            public PickList PickList;
            public Issue Issue;
            public Receipt Receipt;
            public User User;

            public TransactionMgr Transaction;
        }

        public enum QuantityType
        {
            Sound = 1, Damaged = 2, Expired = 3
        }

        private InventoryCommitMembers InventoryCommitMemberInstance = new InventoryCommitMembers();

        public static DataView GetOverageShortageReport(int activityId, int warehouseId, string periodIds)
        {
            var query = HCMIS.Repository.Queries.Inventory.SelectGetOverageShortageReport(activityId, warehouseId, periodIds);
            BLL.Inventory inventory = new Inventory();
            inventory.FlushData();
            inventory.LoadFromRawSql(query);
            return inventory.DefaultView;
        }

        public static DataView GetOverageShortageAggregateReport(int activityId, int warehouseId, string periodIds)
        {
            var query = HCMIS.Repository.Queries.Inventory.SelectGetOverageShortageAggregateReport(activityId, warehouseId, periodIds);
            BLL.Inventory inventory = new Inventory();
            inventory.FlushData();
            inventory.LoadFromRawSql(query);
            return inventory.DefaultView;
        }

        public static DataView SOHForFinance(int activityId, int periodId)
        {
            var query = HCMIS.Repository.Queries.Inventory.SelectSOHForFinance(activityId, periodId);
            BLL.Inventory inventory = new Inventory();
            inventory.FlushData();
            inventory.LoadFromRawSql(query);
            return inventory.DefaultView;
        }

        public DataTable LoadByStoreAndActivity(int activityId, int physicalStoreId, int periodId, bool includeStockedout = false)
        {
            string query;
            if (includeStockedout)
            {
                query = HCMIS.Repository.Queries.Inventory.SelectLoadByStoreAndActivityIncludeStockedout(activityId, physicalStoreId, periodId);

            }
            else
            {
                query = HCMIS.Repository.Queries.Inventory.SelectLoadByStoreAndActivityExcludeStockedout(activityId, physicalStoreId, periodId);


            }
            LoadFromRawSql(query);
            return DataTable;
        }

        public static bool CanInventoryBeStarted(int physicalStoreID)
        {
            BLL.PhysicalStore ps = new PhysicalStore();
            ps.LoadByPrimaryKey(physicalStoreID);
            int warehouseID = ps.PhysicalStoreTypeID;
            if (!ReceiveDoc.checkOutstandingReceives(warehouseID))
            {
                return false;
            }
            if (!IssueDoc.CheckOutStandingIssues(warehouseID))
            {
                return false;
            }
            return true;
        }

        internal void Commit(DateTime ethiopianDate, BackgroundWorker backgroundWorker = null)
        {
 
            InventoryCommitMemberInstance.Transaction.BeginTransaction();
            //TODO: Create the order detail, pass the order id above this inventory object
            int count = 0;

            if (backgroundWorker != null)
            {
                backgroundWorker.ReportProgress(0, "Detail");
            }
            //Add the System Damaged quantity, System Sound Quantity and System Expired Quantity to generate this.
            decimal endingSoundBalance, endingDamagedBalance, endExpiredBalance;
            endingSoundBalance = !IsColumnNull("SystemSoundQuantity") ? SystemSoundQuantity : 0;
            endingDamagedBalance = !IsColumnNull("SystemDamagedQuantity") ? SystemDamagedQuantity : 0;
            endExpiredBalance = !IsColumnNull("SystemExpiredQuantity") ? SystemExpiredQuantity : 0;

            decimal endingTotalBalance = endingSoundBalance + endingDamagedBalance + endExpiredBalance;

            ItemUnit itemUnit = new ItemUnit();
            itemUnit.LoadByPrimaryKey(UnitID);
            if (IsColumnNull("ReceiveDocID") && IsColumnNull("DamagedReceiveDocID")) // This has been recently added to 
            {


                if (endingTotalBalance > 0)
                {

                    OrderDetail.GenerateOrderDetail(UnitID, ActivityID, endingTotalBalance,
                                                    InventoryCommitMemberInstance.Order.ID, itemUnit.QtyPerUnit, ItemID);

                    //TODO: Get the receive doc details for this inventory object
                    ReceivePallet receivePallet = new ReceivePallet();
                    receivePallet.LoadForInventory(this);
                    receivePallet.Rewind();

                    while (!receivePallet.EOF)
                    {

                        //Review: New Code 
                        PickListDetail pickListDetail = PickListDetail.GeneratePickListDetail(receivePallet,
                                                                                              InventoryCommitMemberInstance
                                                                                                  .PickList.ID,
                                                                                              Convert.ToDecimal(
                                                                                                  receivePallet.Balance));

                        //TODO: Create the issueDoc, pass the picklistdetail, orderid and picklist above
                        IssueService issueService = new IssueService();

                        IssueDoc issueDoc = issueService.CreateIssueFromPicklist(pickListDetail,
                                                                                 InventoryCommitMemberInstance.Order,
                                                                                 ethiopianDate,
                                                                                 InventoryCommitMemberInstance.Issue,
                                                                                 InventoryCommitMemberInstance.User);

                        //Link IssueDoc to InventoryTable
                        // Could have put it on the issueService method but it would have decrease the useablity 
                        IssueDocInventory issueDocInventory = new IssueDocInventory();
                        issueDocInventory.AddNew();
                        issueDocInventory.InventoryID = ID;
                        issueDocInventory.IssueDocID = issueDoc.ID;
                        issueDocInventory.Save();

                        receivePallet.MoveNext();
                        count++;
                        if (backgroundWorker != null)
                        {
                            backgroundWorker.ReportProgress(
                                Convert.ToInt32((Convert.ToDecimal(count) / Convert.ToDecimal(receivePallet.RowCount)) * 100),
                                "Detail");
                        }
                    }

                }
                //TODO: Create the receive (use the inventory object itself)
                ReceiveService receiveService = new ReceiveService();
                if (!IsColumnNull("InventorySoundQuantity") && InventorySoundQuantity > 0)
                {
                    ReceiveDoc receiveDoc = receiveService.CreateInventoryReceive(this,
                                                                                  InventoryCommitMemberInstance.Receipt.
                                                                                      ID, QuantityType.Sound,
                                                                                  ethiopianDate,
                                                                                  InventoryCommitMemberInstance.User);
                    ReceiveDocID = receiveDoc.ID;
                }

                if (!IsColumnNull("InventoryExpiredQuantity") && InventoryExpiredQuantity > 0)
                {
                    ReceiveDoc receiveDoc = receiveService.CreateInventoryReceive(this,
                                                                                  InventoryCommitMemberInstance.Receipt.
                                                                                      ID, QuantityType.Expired,
                                                                                  ethiopianDate,
                                                                                  InventoryCommitMemberInstance.User);
                    ReceiveDocID = receiveDoc.ID;
                }

                if (!IsColumnNull("InventoryDamagedQuantity") && InventoryDamagedQuantity > 0)
                {
                    ReceiveDoc receiveDoc = receiveService.CreateInventoryReceive(this,
                                                                                  InventoryCommitMemberInstance.Receipt.
                                                                                      ID, QuantityType.Damaged,
                                                                                  ethiopianDate,
                                                                                  InventoryCommitMemberInstance.User);
                    DamagedReceiveDocID = receiveDoc.ID;
                }

                if (backgroundWorker != null)
                {
                    backgroundWorker.ReportProgress(100, "Detail");
                }


            }
            else
            {

                if (!IsColumnNull("ReceiveDocID"))
                {

                    ReceiveDoc receiveDoc = new ReceiveDoc();
                    receiveDoc.LoadByPrimaryKey(ReceiveDocID);
                    receiveDoc.ChangeQuantity(!IsColumnNull("InventorySoundQuantity") ? InventorySoundQuantity
                                                            : !IsColumnNull("InventoryExpiredQuantity") ? InventoryExpiredQuantity
                                                                                        : 0);

                }

                if (!IsColumnNull("DamagedReceiveDocID"))
                {
                    ReceiveDoc receiveDoc = new ReceiveDoc();
                    receiveDoc.LoadByPrimaryKey(DamagedReceiveDocID);
                    receiveDoc.ChangeQuantity(InventoryDamagedQuantity);
                }
            }
            IsDraft = false;
            Save();
            InventoryCommitMemberInstance.Transaction.CommitTransaction();
        }

        public void InitializeCommit(int userId,int warehouseID)
        {
            var user = new User();
            user.LoadByPrimaryKey(userId);
            InventoryCommitMemberInstance.User = user;

            // open transaction
            InventoryCommitMemberInstance.Transaction = TransactionMgr.ThreadTransactionMgr();
            

            // create the order here
            InventoryCommitMemberInstance.Order = Order.GenerateOrder(null, OrderType.CONSTANTS.INVENTORY,
                                                                        OrderStatus.Constant.ISSUED, ActivityID,
                                                                        PaymentType.Constants.INVENTORY, user.FullName,
                                                                        GeneralInfo.Current.InstitutionID, user.ID,0);
            

            // create the picklist here
            InventoryCommitMemberInstance.PickList = PickList.GeneratePickList(InventoryCommitMemberInstance.Order.ID);


            // create the issue header
            IssueService issueService = new IssueService();
            InventoryCommitMemberInstance.Issue = issueService.CreateSTVLog(null, false
                                                                                , InventoryCommitMemberInstance.PickList
                                                                                , InventoryCommitMemberInstance.Order
                                                                                , null, ActivityID, false, user.ID);


            // create the reciept header
            ReceiveService receiveService = new ReceiveService();
            InventoryCommitMemberInstance.Receipt = receiveService.CreateFakeReceiptWithInvoicePO(OrderType.CONSTANTS.INVENTORY
                                                                                    , ActivityID,GeneralInfo.Current.SupplierID, "Inventory"
                                                                                    , InventoryCommitMemberInstance.Issue.IDPrinted
                                                                                    , ReceiptType.CONSTANTS.BEGINNING_BALANCE, user.ID, ReceiptConfirmationStatus.Constants.RECEIVE_QUANTITY_CONFIRMED, warehouseID);

        }

        public void FinishCommit()
        {

        }

        public void CancelCommit(Exception exception)
        {
            InventoryCommitMemberInstance.Transaction.RollbackTransaction();
            throw exception;
        }
    }
}
