
// Generated by MyGeneration Version # (1.2.0.7)

using System;
using DAL;
using System.Data;

namespace BLL
{
	public class InventoryPeriod : _InventoryPeriod
	{

        public class Constants
        {
            public static int BEGIN_INVENTORY;
            public static int PRINT_INVENTORY_SHEET;
            public static int DRAFT_INVENTORY_SAVED;
        }


        /// <summary>
        /// This piece of a static constructor was made available as a migration step,
        /// Once all the Hubs are up to speed on this, we need to clear out this code.
        /// </summary>
		public InventoryPeriod()
		{
		    // check if the current enventory period is null, if it is .. set it to last years' period
		   this.FlushData();

            // Insert the Inventory Status Codes if those don't exist.
            InventoryStatus status = new InventoryStatus();
		    status.LoadAll();
            if(status.RowCount == 0)
            {
                status.AddNew();
                status.Name = "Begin Inventory";

                status.AddNew();
                status.Name = "Print Count Sheet";

                status.AddNew();
                status.Name = "Draft Inventory Saved";

                status.Save();
            }

		}

        public static DataTable GetInvetoryPeriods()
        {
            string query =
                HCMIS.Repository.Queries.InventoryPeriod.SelectGetInvetoryPeriods();
            InventoryPeriod period = new InventoryPeriod();
            period.LoadFromRawSql(query);
            return period.DataTable;
        }

	  

	    public static DataTable GetInvetoryPeriods(int physicalStoreId,int? Status=null)
        {
            if (Status == null)
            {

                string query = HCMIS.Repository.Queries.InventoryPeriod.GetInvetoryPeriods(physicalStoreId);
                InventoryPeriod period = new InventoryPeriod();
                period.LoadFromRawSql(query);
                return period.DataTable;
            }
            else 
            {
                string query = HCMIS.Repository.Queries.InventoryPeriod.SelectGetInvetoryPeriods(physicalStoreId, Status);
                InventoryPeriod period = new InventoryPeriod();
                period.LoadFromRawSql(query);
                return period.DataTable;
                
            }
        }

	   


	    public static DataTable GetInvetoryPeriodByWarehouse(int warehouseId)
        {
           
                string query = HCMIS.Repository.Queries.InventoryPeriod.SelectGetInvetoryPeriodByWarehouse(warehouseId);
                InventoryPeriod period = new InventoryPeriod();
                period.LoadFromRawSql(query);
                return period.DataTable;
           
        }

	

	    public static DataTable GetInventoryPeriodDatesByWareHouse(int WarehouseID)
        {
            string query = HCMIS.Repository.Queries.InventoryPeriod.SelectGetInventoryPeriodDatesByWareHouse(WarehouseID);
            InventoryPeriod period = new InventoryPeriod();
            period.LoadFromRawSql(query);
            return period.DataTable;
        }

	    

	    public static bool HasUnCommited(int periodID, int activityID)
        {
            InventoryPeriod period = new InventoryPeriod();
            string query = HCMIS.Repository.Queries.InventoryPeriod.SelectHasUnCommited(periodID, activityID);
            period.LoadFromRawSql(query);
            return period.Getint("Count") > 0;
        }

	

	    internal static bool HasCommited(int periodID)
        {
            InventoryPeriod period = new InventoryPeriod();
            string query = HCMIS.Repository.Queries.InventoryPeriod.SelectHasCommited(periodID);
            period.LoadFromRawSql(query);
            return period.Getint("Count") > 0;
        }

	  

	    internal static bool HasInCompleteReceives(int activityID,int physicalStoreID)
        {
            InventoryPeriod period = new InventoryPeriod();
            string query = HCMIS.Repository.Queries.InventoryPeriod.SelectHasInCompleteReceives(activityID, physicalStoreID, ReceiptConfirmationStatus.Constants.GRV_PRINTED);
            period.LoadFromRawSql(query);
            return period.Getint("Count") > 0;
        }
	}
}
