
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using DAL;
using MyGeneration.dOOdads;

namespace BLL
{
    ///<summary>
    /// Order details logic
    ///</summary>
    public class OrderDetail : _OrderDetail
    {
        /// <summary>
        ///  loads all order details for an order id
        /// </summary>
        /// <param name="orderId"></param>
        public void LoadAllByOrderID(int orderId)
        {
            this.LoadFromRawSql(HCMIS.Repository.Queries.OrderDetail.SelectLoadAllByOrderId(orderId));
        }

        /// <summary>
        /// Load Order Details by ItemID
        /// </summary>
        /// <param name="itemID"></param>
        public void LoadByItemID(int itemID)
        {
            this.FlushData();
            this.Where.ItemID.Value = itemID;
            this.Query.Load();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="itemID"></param>
        /// <param name="unitID"></param>
        public void LoadByItemUnit(int orderID, int itemID, int unitID)
        {
            this.FlushData();
            this.Where.ItemID.Value = itemID;
            this.Where.OrderID.Value = orderID;
            this.Where.OrderID.Conjuction = WhereParameter.Conj.And;
            this.Where.UnitID.Value = unitID;
            this.Where.UnitID.Conjuction = WhereParameter.Conj.And;
            this.Query.Load();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="itemID"></param>
        /// <param name="unitID"></param>
        public void LoadByItemUnit(int orderID, int itemID, int unitID,int activityID)
        {
            this.FlushData();
            this.Where.ItemID.Value = itemID;
            this.Where.OrderID.Value = orderID;
            this.Where.OrderID.Conjuction = WhereParameter.Conj.And;
            this.Where.UnitID.Value = unitID;
            this.Where.UnitID.Conjuction = WhereParameter.Conj.And;
            this.Where.StoreID.Value = activityID;
            this.Where.StoreID.Conjuction = WhereParameter.Conj.And;
            this.Query.Load();
        }


        /// <summary>
        /// Loads details of order by including additional information including the item name
        /// </summary>
        /// <param name="orderId"></param>
        public void LoadOrderDetailsAndItemName(int orderId)
        {
            var query = HCMIS.Repository.Queries.OrderDetail.SelectLoadOrderDetailsAndItemName(orderId);
            this.LoadFromRawSql(query);
        }

        public static DataView GetStockOutReport(int orderId)
        {
            var query = HCMIS.Repository.Queries.OrderDetail.SelectStockOutDetail(orderId);
            var orderDetail = new OrderDetail();
            orderDetail.LoadFromRawSql(query);
            return orderDetail.DefaultView;
        }

        public int Split()
        {
            OrderDetail ordDetail = new OrderDetail();
            ordDetail.AddNew();

            foreach (DataRow dr in this.DataTable.Rows)
            {
                foreach (DataColumn col in ordDetail.DataTable.Columns)
                {
                    if (col.ColumnName != "ID" && col.ColumnName != "JTransactionGroupID" && col.ColumnName != "cMin" && col.ColumnName != "cAMC" && col.ColumnName != "cDaysOutofStock" && col.ColumnName != "cDamagedStock" && col.ColumnName != "cMin" && col.ColumnName != "cExpiredStock" && col.ColumnName != "cStockOnHand" && col.ColumnName != "cMOS" && col.ColumnName != "cMax" && col.ColumnName != "rowguid")
                        ordDetail.SetColumn(col.ColumnName, this.GetColumn(col.ColumnName));
                }
            }
            ordDetail.Save();
            return ordDetail.ID;
        }

        /// <summary>
        /// Validates the order detail for identical preference.
        /// </summary>
        /// <param name="orderID">The order ID.</param>
        /// <returns>
        /// The name of an item that needs validation
        /// </returns>
        public string ValidateOrderDetailForIdenticalPreference(int orderID)
        {
            string query =
                HCMIS.Repository.Queries.OrderDetail.SelectValidateOrderDetailForIdenticalPreference(orderID);

            this.LoadFromRawSql(query);
            if (this.RowCount > 0)
            {
                return this.GetColumn("FullItemName").ToString();
            }
            return "";
        }


        /// <summary>
        /// Loads for batch confirmation.
        /// </summary>
        /// <param name="orderId">The order id.</param>
        /// <param name="userId">The user id.</param>
        internal void LoadForBatchConfirmation(int orderId, int userId)
        {
            this.LoadFromRawSql(HCMIS.Repository.Queries.OrderDetail.SelectLoadForBatchConfirmation(orderId, userId));
        }

        public static OrderDetail GenerateOrderDetail(int unitId, int activityId, decimal pack, int orderId,
                                                        int qtyPerPack, int itemId)
        {
            var ord = new OrderDetail();
            ord.LoadByItemUnit(orderId,itemId,unitId,activityId);
            if (ord.RowCount == 0)
            {
                ord.AddNew();
                ord.OrderID = orderId;
                ord.ItemID = itemId;
                ord.UnitID = unitId;
                ord.StoreID = activityId;

                ord.Pack = pack;
                ord.QtyPerPack = qtyPerPack;
                ord.Quantity = pack*qtyPerPack;
                ord.ApprovedQuantity = pack*qtyPerPack;
            }
            else
            {
                ord.Pack += pack;
                ord.Quantity += pack;
                ord.ApprovedQuantity += pack*qtyPerPack;
            }
            ord.Save();
            return ord;
        }

        public OrderDetail LoadOrderDetailsWithIssueAndPicklistForPLITS(int hcmisOrderID)
        {
            string query =
                HCMIS.Repository.Queries.OrderDetail.SelectLoadOrderDetailsWithIssueAndPicklistForPLITS(hcmisOrderID, OrderType.CONSTANTS.PLITS);

            this.FlushData();
            this.LoadFromRawSql(query);

            return this;
        }

        /// <summary>
        /// This function gives the previous order from the one specified in the parameter
        /// </summary>
        /// <param name="orderId">The order that gets returned is going to be the one just previous to this order.</param>
        /// <param name="facilityId">The facility ID</param>
        /// <returns></returns>
        public DataTable GetLastOrderDetailByFacility(int orderId, int facilityId)
        {
            var query = HCMIS.Repository.Queries.OrderDetail.SelectLastOrderDetailByFacility(orderId, facilityId);
            this.LoadFromRawSql(query);
            this.AddColumn("LastApprovedQuantity", typeof(decimal));
            this.AddColumn("LastRequestedQuantity", typeof(decimal));
            this.AddColumn("LastRequestedDate", typeof(DateTime));
            while (!this.EOF)
            {
                var oDetail = new OrderDetail();
                var querylastdetails = HCMIS.Repository.Queries.OrderDetail.SelectQueryLastDetails(this.ItemID, this.UnitID, (int)this.GetColumn("RequestedBy"));
                oDetail.LoadFromRawSql(querylastdetails);
                if (oDetail.RowCount > 0)
                {
                    this.SetColumn("LastApprovedQuantity", oDetail.GetColumn("LastApprovedQuantity"));
                    this.SetColumn("LastRequestedQuantity", oDetail.GetColumn("LastRequestedQuantity"));
                    this.SetColumn("LastRequestedDate", oDetail.GetColumn("LastRequestedDate"));
                }
                this.MoveNext();

            }
            return this.DataTable;
        }

        public DataTable GetFacilityItemHistory(int itemID, int unitID, int requestedby)
        {
            string query = string.Format(@"select * From OrderDetail od 
                                            join [order] o on od.OrderID =o.ID  
                                            join vwGetAllItems vw on od.ItemID =vw.ID 
                                            join ItemUnit iu on od.UnitID =iu.ID 
                                            left Join IssueDoc id on od.OrderID = id.OrderID and od.ItemID = id.ItemID and od.UnitID = id.UnitID
                                            where od.ItemID ={0} and od.UnitID ={1} and o.RequestedBy ={2} order by o.EurDate desc",
                                         itemID, unitID, requestedby);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

        public void GetStoockStatusDetailInfo()
        {

        }

        public DataTable GetStockStatusDetailInfo(int itemid, int unitid)
        {
            var query = string.Format(@" select t.*,  [Status] = case 
	                                    when MOS =0 then 'Stock Out'  
	                                    when MOS < 1 and MOS > 0 then 'Below EOP'  
	                                    when MOS < 2 and MOS > 1 then 'Near EOP'
	                                    when MOS > 4  then 'Over Stocked'
	                                    when MOS > 2 and MOS <4  then 'Over Stocked' 
                                        when SOH =0 then 'Stock Out'  
	                                    else 'None' 
	                                    end
                                    from (
                                    select it.ID ItemID, un.ID UnitOfIssueID,un.[Text] UnitName ,isnull(so.DOS,0) DOS ,it.FullItemName FullItemName ,it.StockCode StockCode ,
                                    isnull(ci.TotalIssued ,0) TotalIssued , isnull(cr.TotalReceived ,0) TotalReceived , ISNULL(cre.Expired ,0) Expired ,
                                    isnull((TotalReceived - TotalIssued) ,0) SOH , isnull(((TotalIssued / (FiscalYearDays - DOS)) * 30) ,0) AMC, isnull((2 * (TotalIssued / (FiscalYearDays - DOS)) * 30) ,0) [MIN] ,
                                    isnull((4 * ((TotalIssued / (FiscalYearDays - DOS)) * 30)) ,0) [MAX] , 
                                    isnull((TotalReceived - TotalIssued) / ((TotalIssued / (FiscalYearDays - DOS)) * 30) ,0) MOS , 
                                    isnull((TotalReceived - TotalIssued) -  (4 * ((TotalIssued / (FiscalYearDays - DOS)) * 30)) ,0) QtyToRefill ,
                                    isnull(fy.FiscalYearDays,0) FiscalYearDays
                                    FROM vwGetAllItems it
                                    JOIN ItemUnitBase itb on it.ID = itb.ItemID
                                    JOIN UnitOfIssue un ON itb.UnitOfIssueID =un.ID
                                    LEFT JOIN (SELECT ItemID, UnitID, SUM(NumberOfDays) DOS FROM Stockout GROUP BY ItemID, UnitID) so on it.ID = so.ItemID and itb.ID =so.UnitID
                                    LEFT JOIN (SELECT ItemID ,UnitID ,SUM(Quantity) TotalIssued From CurrentIssueDoc GROUP BY ItemID, UnitID) ci on it.ID = ci.ItemID and itb.ID =ci.UnitID
                                    LEFT JOIN (SELECT ItemID ,UnitID ,SUM(Quantity) TotalReceived From CurrentReceiveDoc GROUP BY ItemID, UnitID) cr on it.ID = cr.ItemID and itb.ID =cr.UnitID
                                    LEFT JOIN (SELECT ItemID ,UnitID ,SUM(Quantity) Expired From CurrentReceiveDoc where ExpDate < GETDATE() GROUP BY ItemID, UnitID) cre on it.ID = cre.ItemID and itb.ID =cre.UnitID
                                    LEFT JOIN (SELECT DateDiff(Day,StartDate,GetDate()) FiscalYearDays,StartDate ,EndDate , IsCurrent FROM Fiscalyear) fy on fy.IsCurrent =1
                                    where it.ID ={0} and itb.ID ={1}) t Order by t.FullItemName", itemid, unitid);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }


        public DataTable LoadForcastingByOrderID(int orderId)
        {
           var query = HCMIS.Repository.Queries.OrderDetail.SelectForcastingByOrderID(orderId);
            this.LoadFromRawSql(query);
            return this.DataTable;

	    }
	  }

   }

