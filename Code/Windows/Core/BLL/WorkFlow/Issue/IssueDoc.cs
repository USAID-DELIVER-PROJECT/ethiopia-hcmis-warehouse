
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Collections.Generic;
using System.Data;
using DAL;
using HCMIS.Concrete.Models;

namespace BLL
{
    /// <summary>
    /// Logic about the issue process
    /// </summary>
    public class IssueDoc : _IssueDoc
    {
        /// <summary>
        /// Saves the whole transaction for
        /// </summary>
        /// <param name="orderID">The order ID.</param>
        /// <param name="dvOutstandingPickList">The dv outstanding pick list.</param>
        /// <param name="remark">The remark.</param>
        /// <param name="issuedBy">The issued by.</param>
        /// <param name="etCurrentDate">The et current date.</param>
        /// <returns></returns>
        /// <exception cref="System.Exception"></exception>
        public static Order SaveIssueTransaction(int orderID, ref DataView dvOutstandingPickList, string remark, string issuedBy, DateTime etCurrentDate)
        {

            // Add the IssueDocID field
            dvOutstandingPickList.Table.Columns.Add("IssueDocID");
            PickList plst = new PickList();
            IssueDoc issDoc = new IssueDoc();
            ReceiveDoc recDoc = new ReceiveDoc();
            BLL.Order ord = new BLL.Order();
            ord.LoadByPrimaryKey(orderID);
            plst.LoadByOrderID(ord.ID);

            foreach (DataRowView drv in dvOutstandingPickList)
            {
                // Pseudo:
                // for each row in the picklist
                // undate the issue document 
                // subtract the issued quantity from the receive doc
                // subtract the issued quantity from recieve pallet
                // subtract the issued the reserved quantity irregardless of the quantity issued.


                //Saving the new Issue issue
                if (Convert.ToDecimal(drv["BUPICKED"]) == 0)
                {
                    continue;

                }

                if (Convert.ToDecimal(drv["SKUPicked"]) != Convert.ToDecimal(drv["SKUTOPICK"]))
                {
                    drv["Cost"] = Convert.ToDecimal(drv["SKUPicked"]) * Convert.ToDecimal(drv["UnitPrice"]);
                }

                // Select the receive doc that is associated with this issue.
                recDoc.LoadByPrimaryKey(Convert.ToInt32(drv["ReceiveDocID"]));


                issDoc.AddNew();
                issDoc.StoreId = Convert.ToInt32(drv["StoreID"]);
                issDoc.RefNo = ord.RefNo;
                if (!ord.IsColumnNull("RequestedBy"))
                    issDoc.ReceivingUnitID = ord.RequestedBy;
                // TOFIX: 
                // TODO:
                // Lord have mercy kind of hack to avoid the feb date problem
                // this needs to be fixed for pagume also
                issDoc.Date = etCurrentDate;
                issDoc.EurDate = DateTimeHelper.ServerDateTime;
                issDoc.RecievDocID = Convert.ToInt32(drv["ReceiveDocID"]);
                issDoc.IsApproved = true;
                issDoc.IsTransfer = false;
                issDoc.Remark = remark;
                issDoc.ItemID = Convert.ToInt32(drv["ItemID"]);
                issDoc.Quantity = Convert.ToDecimal(drv["BUPICKED"]);
                issDoc.NoOfPack = Convert.ToDecimal(drv["SKUPICKED"]);
                issDoc.QtyPerPack = Convert.ToInt32(drv["SKUBU"]);
                issDoc.BatchNo = drv["BatchNumber"].ToString();
                issDoc.UnitID = recDoc.UnitID;
                issDoc.ManufacturerID = recDoc.ManufacturerId;
                if (drv["Cost"] != DBNull.Value)
                {
                    issDoc.Cost = Convert.ToDouble(drv["Cost"]);

                    issDoc.SellingPrice = Convert.ToDecimal(drv["UnitPrice"]);
                    if (!recDoc.IsColumnNull("Cost"))
                    {
                        issDoc.UnitCost = Convert.ToDecimal(recDoc.Cost);
                    }
                }
                issDoc.OrderID = orderID;
                issDoc.IssuedBy = issuedBy;
                // TODO: is this the right place where we need to pick the physical store ID from?
                // check it against the receipt pallet physical store.
                if (!recDoc.IsColumnNull("PhysicalStoreID"))
                {
                    issDoc.PhysicalStoreID = recDoc.PhysicalStoreID;
                }
                if (!recDoc.IsColumnNull("InventoryPeriodID"))
                {
                    //Todo: Remove for Inventory
                    issDoc.InventoryPeriodID = recDoc.InventoryPeriodID;
                }
                if (!recDoc.IsColumnNull("Margin"))
                {
                    issDoc.Margin = (decimal)recDoc.Margin;
                }
                //Replaced by
                issDoc.PLDetailID = Convert.ToInt32(drv["PLDetailID"]);
                BLL.Balance bal = new Balance();
                BLL.ReceiveDoc rd = new ReceiveDoc();
                rd.LoadByPrimaryKey(issDoc.RecievDocID);
                decimal currentBalance = bal.GetSoh(issDoc.ItemID, rd.UnitID, issDoc.StoreId, issDoc.Date.Month, issDoc.Date.Year);
                if (currentBalance < issDoc.NoOfPack)
                {
                    throw new Exception(string.Format("The item {0} is not available in {1} Qty.", drv["FullItemName"].ToString(), issDoc.NoOfPack));
                }

                // This is a field that is not applicable on the hub edition 
                // It is about the dispensing unit quantity and there is no such thing as Dispensing unit
                // in the hub edition
                issDoc.DUSOH = 0;
                issDoc.RecomendedQty = 0;// ((recQty > 0) ? Convert.ToInt64(recQty) : 0);
                // End DU
                issDoc.DispatchConfirmed = false;
                issDoc.Save();
                drv["IssueDocID"] = issDoc.ID;
                // updating the receiving doc

                //long prevQuantityLeft = recDoc.QuantityLeft;

                recDoc.QuantityLeft = recDoc.QuantityLeft - issDoc.Quantity;

                if (recDoc.QuantityLeft < 0)
                {
                    //Possibly the wrong ReceiveDoc Entry chosen
                    BLL.Item itm = new Item();
                    itm.LoadByPrimaryKey(recDoc.ItemID);
                    throw new Exception(string.Format("Quantity problem detected for the item {0}", itm.FullItemName));
                }
                //long 
                recDoc.Out = (recDoc.QuantityLeft == 0) ? true : false;
                recDoc.Save();

                ReceivePallet rp = new ReceivePallet();
                int id = Convert.ToInt32(drv["ReceivePalletID"]);
                rp.LoadByPrimaryKey(id);
                if (rp.IsColumnNull("Balance"))
                {
                    rp.Balance = rp.ReceivedQuantity;
                }
                rp.Balance -= issDoc.Quantity;

                if (rp.Balance < 0)
                {
                    BLL.Item itm = new Item();
                    itm.LoadByPrimaryKey(recDoc.ItemID);
                    throw new Exception(string.Format("Quantity problem detected for the item {0}", itm.FullItemName));
                }

                decimal totReservedQty = Convert.ToDecimal(drv["QuantityInBU"]);

                if (rp.IsColumnNull("ReservedStock")) 
                    rp.ReservedStock = 0;

                rp.ReservedStock -= totReservedQty;
                if (rp.ReservedStock < 0) //If there has been a quantity problem somewhere
                    rp.ReservedStock = 0;
                rp.Save();
            }
            plst.IsConfirmed = true;
            ord.ChangeStatus(OrderStatus.Constant.ISSUED, CurrentContext.UserId);
            plst.Save();
            ord.Save();
            return ord;
        }



        /// <summary>
        /// Gets quanity issued from a single logical store in a Period, till Month
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="storeId">The store id.</param>
        /// <param name="month">The month.</param>
        /// <param name="year">The year.</param>
        /// <returns></returns>
        public Int64 GetIssuedQuantityTillMonth(int itemId, int storeId, int month, int year)
        {
            //There should be a date range for the last month or some thing
            this.FlushData();
            int yr = (month < 11) ? year - 1 : year;
            DateTime dt1 = new DateTime(yr, 11, 1);
            DateTime dt2 = new DateTime(year, month, DateTime.DaysInMonth(year, month));
            var query = HCMIS.Repository.Queries.IssueDoc.SelectGetIssuedQuantityTillMonth(itemId, storeId, dt1, dt2);
            this.LoadFromRawSql(query);
            Int64 quant = 0;
            quant = (this.DataTable.Rows[0]["IssuedQuantity"].ToString() != "") ? Convert.ToInt64(this.DataTable.Rows[0]["IssuedQuantity"]) : 0;
            return quant;
        }


        /// <summary>
        /// Gets the issue by STV.
        /// </summary>
        /// <param name="stvID">The STV ID.</param>
        /// <returns></returns>
        public DataTable GetIssueBySTV(int stvID)
        {
            //TODO: This filter needs to work based on the printed invoice ID
            this.FlushData();
            var query = HCMIS.Repository.Queries.IssueDoc.SelectGetIssueBySTV(stvID);
            this.LoadFromRawSql(query);
            //this.LoadFromRawSql(String.Format("select * from IssueDoc id join (SELECT distinct IssueDoc.ID,rus.Name as IssueLocation, v.FullItemName FROM IssueDoc join ReceiveDoc rd on rd.ID = IssueDoc.RecievDocID join vwGetAllItems v on IssueDoc.ItemID = v.ID join Institution rus on IssueDoc.ReceivingUnitID = rus.ID join STVLog sl on IssueDoc.RefNo = sl.RefNo WHERE (IssueDoc.RefNo = '{0}') AND IssueDoc.StoreId = {1} and sl.SupplierID = rd.SupplierID) e on e.ID = id.ID ORDER BY id.Date DESC", refNo, storeId));))
            DataTable dtbl = this.DataTable;
            // also merge the deleted entries
            query = HCMIS.Repository.Queries.IssueDoc.SelectGetIssueBySTVIncludingDeletedEntries(stvID);
            this.LoadFromRawSql(query);
            dtbl.Merge(this.DataTable);
            return dtbl;
        }


        /// <summary>
        /// Gets the distinct issue docments for account.
        /// </summary>
        /// <param name="accountID">The account ID.</param>
        /// <param name="deliveryNote">The delivery note.</param>
        /// <returns></returns>
        public DataTable GetDistinctIssueDocmentsForAccount(int accountID, Boolean deliveryNote)
        {
            this.FlushData();
            var query = HCMIS.Repository.Queries.IssueDoc.SelectGetDistinctIssueDocmentsForAccount(accountID);
            if (deliveryNote)
            {
                query = HCMIS.Repository.Queries.IssueDoc.SelectGetDistinctIssueDocmentsForAccountWithDeliveryNote(accountID);
            }
            this.LoadFromRawSql(query);
            return this.DataTable;
        }


        /// <summary>
        /// Gets the distinct issue docments for account and route.
        /// </summary>
        /// <param name="accountID">The account ID.</param>
        /// <param name="routeID">The route ID.</param>
        /// <param name="deliveryNote">The delivery note.</param>
        /// <returns></returns>
        public DataTable GetDistinctIssueDocmentsForAccountAndRoute(int accountID, int routeID, Boolean deliveryNote)
        {
            this.FlushData();
            var query = HCMIS.Repository.Queries.IssueDoc.SelectGetDistinctIssueDocmentsForAccountAndRoute(accountID, routeID);
            if (deliveryNote)
            {
                query = HCMIS.Repository.Queries.IssueDoc.SelectGetDistinctIssueDocmentsForAccountAndRouteWithDeliverNote(accountID, routeID);
            }
            this.LoadFromRawSql(query);
            return this.DataTable;
        }


        /// <summary>
        /// Loads an issue by reference number,
        /// this can be used to edit a specific issue transaction
        /// </summary>
        /// <param name="refNo">The ref no.</param>
        public void LoadByRefenceNumber(string refNo)
        {
            var query = HCMIS.Repository.Queries.IssueDoc.SelectLoadByRefenceNumber(refNo);
            this.LoadFromRawSql(query);
        }


        /// <summary>
        /// Loads the by item ID.
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        public void LoadByItemID(int itemID)
        {
            this.FlushData();
            this.Where.ItemID.Value = itemID;
            this.Query.Load();
        }


        /// <summary>
        /// Loads the by receive doc ID.
        /// </summary>
        /// <param name="receiveDocID">The receive doc ID.</param>
        public void LoadByReceiveDocID(int receiveDocID)
        {
            this.FlushData();
            this.Where.RecievDocID.Value = receiveDocID;
            this.Query.Load();
        }

        /// <summary>
        /// Gets Receive And issue transaction/activity dataset
        /// this is an experimental reporting functionality.
        /// </summary>
        /// <returns></returns>
        public DataSet GetActivityDataSet()
        {
            DataSet dataset = new DataSet();
            var query = HCMIS.Repository.Queries.IssueDoc.SelectGetActivityDataSetReceiveDoc();
            this.LoadFromRawSql(query);
            this.DataTable.TableName = "ReceivedItems";
            dataset.Tables.Add(this.DataTable);

            query = HCMIS.Repository.Queries.IssueDoc.SelectGetActivityDataSetIssueDoc();
            this.LoadFromRawSql(query);
            this.DataTable.TableName = "IssueItems";
            dataset.Tables.Add(this.DataTable);
            return dataset;
        }

        /// <summary>
        /// Gets receive and issue activity dataset
        /// This is an experimental reporting
        /// </summary>
        /// <returns></returns>
        public DataSet GetActivityDataSetByPack()
        {
            DataSet dataset = new DataSet();
            var query = HCMIS.Repository.Queries.IssueDoc.SelectGetActivityDataSetByPackReceiveDoc();
            this.LoadFromRawSql(query);
            this.DataTable.TableName = "ReceivedItems";
            dataset.Tables.Add(this.DataTable);

            query = HCMIS.Repository.Queries.IssueDoc.SelectGetActivityDataSetByPackIssueDoc();
            this.LoadFromRawSql(query);
            this.DataTable.TableName = "IssueItems";
            dataset.Tables.Add(this.DataTable);
            return dataset;
        }

        /// <summary>
        /// Gets Receive and Issue transaction by type
        /// An Experimental Reporting
        /// </summary>
        /// <returns></returns>
        public DataSet GetActivityDataSetByItemType()
        {
            DataSet dataset = new DataSet();
            var query = HCMIS.Repository.Queries.IssueDoc.SelectGetActivityDataSetByItemTypeReceiveDoc();
            this.LoadFromRawSql(query);
            this.DataTable.TableName = "ReceivedItems";
            dataset.Tables.Add(this.DataTable);

            query = HCMIS.Repository.Queries.IssueDoc.SelectGetActivityDataSetByItemTypeIssueDoc();
            this.LoadFromRawSql(query);
            this.DataTable.TableName = "IssueItems";
            dataset.Tables.Add(this.DataTable);
            return dataset;
        }

        /// <summary>
        /// Loads if a receipt has the a corresponding issue transactions
        /// </summary>
        /// <param name="receiveId">The receive id.</param>
        internal void LoadByReceiveId(int receiveId)
        {
            var query = HCMIS.Repository.Queries.IssueDoc.SelectLoadByReceiveId(receiveId);
            this.LoadFromRawSql(query);
        }

        /// <summary>
        /// Gets the issue summary in the date ranges specified,
        /// </summary>
        /// <param name="dtFrom">The dt from.</param>
        /// <param name="dtTo">The dt to.</param>
        /// <param name="storeTypeID">The store type ID.</param>
        /// <returns></returns>
        public static DataTable GetIssueSummaryBySupplier(DateTime dtFrom, DateTime dtTo, int storeTypeID)
        {
            var query = HCMIS.Repository.Queries.IssueDoc.SelectGetIssueSummaryBySupplier(dtFrom, dtTo, storeTypeID);
            IssueDoc id = new IssueDoc();
            id.LoadFromRawSql(query);
            return id.DataTable;
        }

        /// <summary>
        /// Returns the Issue summary by item by supplier.
        /// </summary>
        /// <param name="dtFrom">The dt from.</param>
        /// <param name="dtTo">The dt to.</param>
        /// <param name="storeTypeID">The store type ID.</param>
        /// <returns></returns>
        public static DataTable GetIssueBreakdownBySupplier(DateTime dtFrom, DateTime dtTo, int storeTypeID)
        {
            var query = HCMIS.Repository.Queries.IssueDoc.SelectGetIssueBreakdownBySupplier(dtFrom, dtTo, storeTypeID);
            IssueDoc id = new IssueDoc();
            id.LoadFromRawSql(query);
            return id.DataTable;
        }


        /// <summary>
        /// Tops the item receivers.
        /// </summary>
        /// <param name="itemID">The item ID.</param>
        /// <returns></returns>
        public static DataTable TopItemReceivers(int itemID)
        {
            IssueDoc issueDoc = new IssueDoc();
            var query = HCMIS.Repository.Queries.IssueDoc.SelectTopItemReceivers(itemID);

            issueDoc.LoadFromRawSql(query);
            return issueDoc.DataTable;
        }

        /// <summary>
        /// Gets the weekly transaction summary.
        /// </summary>
        /// <param name="days">-1 for all</param>
        /// <returns></returns>
        public static DataView GetWeeklyTransactionSummary(int days)
        {
            string query;
            if (days == -1)
                query = HCMIS.Repository.Queries.IssueDoc.SelectGetWeeklyTransactionSummary();
            else
                query = HCMIS.Repository.Queries.IssueDoc.SelectGetWeeklyTransactionSummary(days);

            IssueDoc issueDoc = new IssueDoc();
            issueDoc.LoadFromRawSql(query);
            return issueDoc.DefaultView;
        }

        /// <summary>
        /// Returns issue summary Date against value
        /// </summary>
        /// <param name="days">For the past how many days (Enter -1 for all)</param>
        /// <returns></returns>
        public static object GetIssueSummary(int days)
        {
            //For use in the dashboard primarily
            string query;
            if (days == -1)
                query = HCMIS.Repository.Queries.IssueDoc.SelectGetIssueSummary();
            else
                query = HCMIS.Repository.Queries.IssueDoc.SelectGetIssueSummary(days);
            IssueDoc iss = new IssueDoc();
            iss.LoadFromRawSql(query);
            return iss.DefaultView;
        }

        /// <summary>
        /// Returns IssueDoc history for a receiving unit
        /// Columns: ID,Date(Converted to Ethiopian),Quantity,FullItemName
        /// </summary>
        /// <param name="receivingUnitID">The receiving unit ID.</param>
        /// <param name="startDate">In European Calendar</param>
        /// <param name="endDate">In European Calendar</param>
        /// <returns></returns>
        public static object GetIssueHistoryForFacility(int receivingUnitID, DateTime startDate, DateTime endDate)
        {
            var query = HCMIS.Repository.Queries.IssueDoc.SelectGetIssueHistoryForFacility(receivingUnitID, startDate, endDate);
            IssueDoc issD = new IssueDoc();
            issD.LoadFromRawSql(query);
            return DateTimeHelper.AddEthiopianDateField(issD).DefaultView;
        }

        /// <summary>
        /// Loads the by STVID.
        /// </summary>
        /// <param name="_stvID">The _STV ID.</param>
        public void LoadBySTVID(int _stvID)
        {
            this.Where.STVID.Value = _stvID;
            this.Query.Load();
        }

        /// <summary>
        /// Gets the cost of good sold.
        /// </summary>
        /// <param name="AccountID">The account ID.</param>
        /// <returns></returns>
        public static DataView GetCostOfGoodSold(int AccountID, DateTime aDate, DateTime bDate)
        {
            IssueDoc report = new IssueDoc();
            var query = HCMIS.Repository.Queries.IssueDoc.SelectGetCostOfGoodSold(AccountID, aDate, bDate);
            report.LoadFromRawSql(query);
            return report.DefaultView;
        }


        /// <summary>
        /// Loads the by pick list details.
        /// </summary>
        /// <param name="plDetailIDs">The pl detail I ds.</param>
        public void LoadByPickListDetails(string plDetailIDs)
        {
            var query = HCMIS.Repository.Queries.IssueDoc.SelectLoadByPickListDetails(plDetailIDs);
            this.LoadFromRawSql(query);
        }

        /// <summary>
        /// Loads the by pick list Ids.
        /// </summary>
        /// <param name="plDetailIDs">The pl detail I ds.</param>
        internal void LoadByIDs(string plDetailIDs)
        {
            if (!string.IsNullOrWhiteSpace(plDetailIDs))
            {
                var query = HCMIS.Repository.Queries.IssueDoc.SelectLoadByIDs(plDetailIDs);
                this.LoadFromRawSql(query);
            }
        }

        public bool IsThereSRM
        {
            get
            {
                BLL.ReceiveDoc rd = new ReceiveDoc();
                rd.Where.ReturnedFromIssueDocID.Value = this.ID;
                rd.Query.Load();
                return rd.RowCount > 0;
            }
        }

        public DataView GetPossibleUnconfirmedIssues(int stvID)
        {
            Issue stvLog = new Issue();
            stvLog.LoadByPrimaryKey(stvID);
            var query = HCMIS.Repository.Queries.IssueDoc.SelectGetPossibleUnconfirmedIssues(stvLog.RefNo, stvLog.StoreID);
            this.LoadFromRawSql(query);
            return this.DefaultView;
        }

        public static DataView IssueAmountByPaymentType(int ethiopianMonth, int ethiopianYear, int accountID, bool showBySellingPrice)
        {
            IssueDoc issueDoc = new IssueDoc();
            string query;

            if (showBySellingPrice)
            {
                query =
                HCMIS.Repository.Queries.IssueDoc.SelectIssueAmountByPaymentTypeShowBySellingPrice(ethiopianMonth, ethiopianYear, accountID);
            }
            else
            {
                query =
               HCMIS.Repository.Queries.IssueDoc.SelectIssueAmountByPaymentType(ethiopianMonth, ethiopianYear, accountID);
            }

            issueDoc.LoadFromRawSql(query);
            return issueDoc.DefaultView;
        }

        public static DataView CostOfSales(int ethiopianMonth, int ethiopianYear, int modeID)
        {
            IssueDoc issueDoc = new IssueDoc();
            string query =
                HCMIS.Repository.Queries.IssueDoc.SelectCostOfSales(ethiopianMonth, ethiopianYear, modeID);
            issueDoc.LoadFromRawSql(query);
            return issueDoc.DefaultView;
        }

        public static DataView IssuedAmoutByYear(int ethiopianYear, int accountID, bool showBySellingPrice)
        {
            IssueDoc issueDoc = new IssueDoc();
            string query;
            if (showBySellingPrice)
            {
                query =
               HCMIS.Repository.Queries.IssueDoc.SelectIssuedAmoutByYearShowBySellingPrice(ethiopianYear, accountID);
            }
            else
            {
                query =
               HCMIS.Repository.Queries.IssueDoc.SelectIssuedAmoutByYear(ethiopianYear, accountID);
            }

            issueDoc.LoadFromRawSql(query);
            return issueDoc.DefaultView;
        }

        public static DataTable GetOutstandingIssues(int warehouseID = 0)
        {
            string query =
                HCMIS.Repository.Queries.IssueDoc.SelectGetOutstandingIssues(warehouseID, OrderStatus.Constant.ORDER_APPROVED, OrderStatus.Constant.ISSUED);
            IssueDoc issueDoc = new IssueDoc();
            issueDoc.LoadFromRawSql(query);
            return issueDoc.DataTable;
        }

        public static DataTable OutstandingIssuedDeliveryNote(int warehouseID = 0)
        {
            string query =
                HCMIS.Repository.Queries.IssueDoc.SelectOutstandingIssuedDeliveryNote(warehouseID, OrderStatus.Constant.ORDER_APPROVED, OrderStatus.Constant.ISSUED);
            IssueDoc issueDoc = new IssueDoc();
            issueDoc.LoadFromRawSql(query);
            return issueDoc.DataTable;
        }

        public static DataTable GetOutstandingRequestedVoidForInvoice(int warehouseID = 0)
        {
            string query =
                HCMIS.Repository.Queries.IssueDoc.SelectGetOutstandingRequestedVoidForInvoice(warehouseID, OrderStatus.Constant.ORDER_APPROVED, OrderStatus.Constant.ISSUED);
            IssueDoc issueDoc = new IssueDoc();
            issueDoc.LoadFromRawSql(query);
            return issueDoc.DataTable;
        }


        public static bool CheckOutStandingIssues(int warehouseID = 0)
        {

            Warehouse warehouse = new Warehouse();
            warehouse.LoadAll();

            string query =
                HCMIS.Repository.Queries.IssueDoc.SelectCheckOutStandingIssues(warehouseID, warehouse.RowCount,
                                                                               OrderStatus.Constant.ORDER_APPROVED,
                                                                               OrderStatus.Constant.ISSUED);
            IssueDoc issueDoc = new IssueDoc();
            issueDoc.LoadFromRawSql(query);
            return issueDoc.Getint("count") == 0;
        }

        public void LoadMissingByOrderID(int orderID)
        {
            string query = HCMIS.Repository.Queries.IssueDoc.SelectLoadMissingByOrderId(orderID);
            this.LoadFromRawSql(query);

        }

        public static void RecordDiscrepancy(Dictionary<int, decimal> _discrepancyIssueDoc)
        {
            foreach(int issueDocID in _discrepancyIssueDoc.Keys)
            {
                BLL.IssueDoc issueDoc = new IssueDoc();
                issueDoc.LoadByPrimaryKey(issueDocID);
                issueDoc.NoOfPackIssued = _discrepancyIssueDoc[issueDocID];
                issueDoc.Save();
            }
        }
       
        public void LoadAnnualIssuedAmountForInstitutionsByDateRange(DateTime from,DateTime to)
        {
            var query = HCMIS.Repository.Queries.IssueDoc.SelectIssuedAmountForInstitutionsByDate(from, to);
            LoadFromRawSql(query);
        }
    }
}