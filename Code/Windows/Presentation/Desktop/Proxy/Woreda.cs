
// Generated by MyGeneration Version # (1.3.0.9)

using System;
using System.Collections.Generic;

namespace Proxy
{
    public class Woreda
    {

        #region Properties

        private int? _ID;
        public int? ID
        {
            get
            {
                return _ID;
            }
            set
            {
                _ID = value;
            }
        }

        private string _WoredaName;
        public string WoredaName
        {
            get
            {
                return _WoredaName;
            }
            set
            {
                _WoredaName = value;
            }
        }

        private int? _ZoneID;
        public int? ZoneID
        {
            get
            {
                return _ZoneID;
            }
            set
            {
                _ZoneID = value;
            }
        }

        private string _WoredaCode;
        public string WoredaCode
        {
            get
            {
                return _WoredaCode;
            }
            set
            {
                _WoredaCode = value;
            }
        }

        private bool? _IsDeleted;
        public bool? IsDeleted
        {
            get
            {
                return _IsDeleted;
            }
            set
            {
                _IsDeleted = value;
            }
        }

        private DateTime? _UpdateTime;
        public DateTime? UpdateTime
        {
            get
            {
                return _UpdateTime;
            }
            set
            {
                _UpdateTime = value;
            }
        }


        #endregion

        #region Web Service Getters

        public static List<Woreda> GetAll()
        {
            BLL.Woreda v = new BLL.Woreda();
            v.LoadAll();
            return ToList(v);
        }

        public static List<Woreda> GetUpdatesAfter(long? lastVersion, DateTime? lastUpdateTime)
        {
            BLL.Woreda v = new BLL.Woreda();
            if (lastVersion.HasValue && lastVersion.Value != 0)
            {
                v.LoadUpdatesAfter(Convert.ToInt32(lastVersion.Value));
            }
            else if (lastUpdateTime.HasValue)
            {
                //v.LoadUpdatesAfterByTime(lastUpdateTime.Value);
            }
            else
            {
                v.LoadAll();
            }
            return ToList(v);
        }

        public static List<int> GetDeletedIDsAfter(long LastVersion)
        {
            BLL.Woreda v = new BLL.Woreda();
            //v.LoadDeletedIDs(LastVersion);
            List<int> list = new List<int>();
            while (!v.EOF)
            {
                list.Add((int)v.GetColumn("ID"));
                v.MoveNext();
            }
            return list;
        }

        #endregion



        #region Utilities

        public static List<Woreda> ToList(BLL.Woreda v)
        {
            List<Woreda> list = new List<Woreda>();
            while (!v.EOF)
            {
                Woreda t = new Woreda();
                if (!v.IsColumnNull("ID"))
                    t.ID = v.ID;
                if (!v.IsColumnNull("WoredaName"))
                    t.WoredaName = v.WoredaName;
                if (!v.IsColumnNull("ZoneID"))
                    t.ZoneID = v.ZoneID;
                if (!v.IsColumnNull("WoredaCode"))
                    t.WoredaCode = v.WoredaCode;
                //if(!v.IsColumnNull("IsDeleted"))
                //      t.IsDeleted = v.IsDeleted;
                //if(!v.IsColumnNull("UpdateTime"))
                //      t.UpdateTime = v.UpdateTime;

                list.Add(t);
                v.MoveNext();
            }
            return list;
        }

        #endregion


        #region Web service Saving

        public static void SaveList(List<HCMIS.Desktop.GeneralLookups.Woreda> list)
        {
            BLL.Woreda bv = new BLL.Woreda();
            foreach (HCMIS.Desktop.GeneralLookups.Woreda v in list)
            {
                // try to load by primary key
                bv.LoadByPrimaryKey(v.ID.Value);

                // if the entry doesn't exist, create it
                if (bv.RowCount == 0)
                {
                    bv.AddNew();
                }
                // populate the contents of v on the to the database list
                if (v.ID.HasValue)
                    bv.ID = v.ID.Value;
                if (v.WoredaName != "" && v.WoredaName != null)
                    bv.WoredaName = v.WoredaName;
                if (v.ZoneID.HasValue)
                    bv.ZoneID = v.ZoneID.Value;
                if (v.WoredaCode != "" && v.WoredaCode != null)
                    bv.WoredaCode = v.WoredaCode;
                //if( v.IsDeleted.HasValue )
                //     bv.IsDeleted = v.IsDeleted.Value;
                //if( v.UpdateTime.HasValue )
                //     bv.UpdateTime = v.UpdateTime.Value;

                bv.Save();
            }


        }

        public static void DeleteList(List<int> list)
        {
            BLL.Woreda bv = new BLL.Woreda();
            foreach (int v in list)
            {
                // try to load by primary key
                bv.LoadByPrimaryKey(v);
                // if the entry doesn't exist, create it
                if (bv.RowCount > 0)
                {
                    bv.MarkAsDeleted();
                    bv.Save();
                }
                // populate the contents of v on the to the database list

            }


        }


        #endregion
    }
}
