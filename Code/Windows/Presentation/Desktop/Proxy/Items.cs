
// Generated by MyGeneration Version # (1.3.0.9)

using System;
using System.Collections.Generic;

namespace Proxy
{
    public class Items
    {

        #region Properties

        private int? _ID;
        public int? ID
        {
            get
            {
                return _ID;
            }
            set
            {
                _ID = value;
            }
        }

        private string _StockCode;
        public string StockCode
        {
            get
            {
                return _StockCode;
            }
            set
            {
                _StockCode = value;
            }
        }

        private string _Strength;
        public string Strength
        {
            get
            {
                return _Strength;
            }
            set
            {
                _Strength = value;
            }
        }

        private int? _DosageFormID;
        public int? DosageFormID
        {
            get
            {
                return _DosageFormID;
            }
            set
            {
                _DosageFormID = value;
            }
        }

        private int? _UnitID;
        public int? UnitID
        {
            get
            {
                return _UnitID;
            }
            set
            {
                _UnitID = value;
            }
        }

        private int? _VEN;
        public int? VEN
        {
            get
            {
                return _VEN;
            }
            set
            {
                _VEN = value;
            }
        }

        private int? _ABC;
        public int? ABC
        {
            get
            {
                return _ABC;
            }
            set
            {
                _ABC = value;
            }
        }

        private decimal? _Cost;
        public decimal? Cost
        {
            get
            {
                return _Cost;
            }
            set
            {
                _Cost = value;
            }
        }

        private bool? _EDL;
        public bool? EDL
        {
            get
            {
                return _EDL;
            }
            set
            {
                _EDL = value;
            }
        }

        private bool? _Pediatric;
        public bool? Pediatric
        {
            get
            {
                return _Pediatric;
            }
            set
            {
                _Pediatric = value;
            }
        }

        private int? _IINID;
        public int? IINID
        {
            get
            {
                return _IINID;
            }
            set
            {
                _IINID = value;
            }
        }

        private bool? _NeedExpiryBatch;
        public bool? NeedExpiryBatch
        {
            get
            {
                return _NeedExpiryBatch;
            }
            set
            {
                _NeedExpiryBatch = value;
            }
        }

        private string _Code;
        public string Code
        {
            get
            {
                return _Code;
            }
            set
            {
                _Code = value;
            }
        }

        private string _StockCodeDACA;
        public string StockCodeDACA
        {
            get
            {
                return _StockCodeDACA;
            }
            set
            {
                _StockCodeDACA = value;
            }
        }

        private double? _NearExpiryTrigger;
        public double? NearExpiryTrigger
        {
            get
            {
                return _NearExpiryTrigger;
            }
            set
            {
                _NearExpiryTrigger = value;
            }
        }

        private int? _StorageTypeID;
        public int? StorageTypeID
        {
            get
            {
                return _StorageTypeID;
            }
            set
            {
                _StorageTypeID = value;
            }
        }

        private bool? _IsStackStored;
        public bool? IsStackStored
        {
            get
            {
                return _IsStackStored;
            }
            set
            {
                _IsStackStored = value;
            }
        }

        private bool? _IsDeleted;
        public bool? IsDeleted
        {
            get
            {
                return _IsDeleted;
            }
            set
            {
                _IsDeleted = value;
            }
        }

        private DateTime? _UpdateTime;
        public DateTime? UpdateTime
        {
            get
            {
                return _UpdateTime;
            }
            set
            {
                _UpdateTime = value;
            }
        }


        #endregion

        #region Web Service Getters

        public static List<Items> GetAll()
        {
            BLL.Items v = new BLL.Items();
            v.LoadAll();
            return ToList(v);
        }


        #endregion

        #region Utilities

        public static List<Items> ToList(BLL.Items v)
        {
            List<Items> list = new List<Items>();
            while (!v.EOF)
            {
                Items t = new Items();
                if (!v.IsColumnNull("ID"))
                    t.ID = v.ID;
                if (!v.IsColumnNull("StockCode"))
                    t.StockCode = v.StockCode;
                if (!v.IsColumnNull("Strength"))
                    t.Strength = v.Strength;
                if (!v.IsColumnNull("DosageFormID"))
                    t.DosageFormID = v.DosageFormID;
                if (!v.IsColumnNull("UnitID"))
                    t.UnitID = v.UnitID;
                if (!v.IsColumnNull("VEN"))
                    t.VEN = v.VEN;
                if (!v.IsColumnNull("ABC"))
                    t.ABC = v.ABC;
                if (!v.IsColumnNull("Cost"))
                    t.Cost = v.Cost;
                if (!v.IsColumnNull("EDL"))
                    t.EDL = v.EDL;
                if (!v.IsColumnNull("Pediatric"))
                    t.Pediatric = v.Pediatric;
                if (!v.IsColumnNull("IINID"))
                    t.IINID = v.IINID;
                if (!v.IsColumnNull("NeedExpiryBatch"))
                    t.NeedExpiryBatch = v.NeedExpiryBatch;
                if (!v.IsColumnNull("Code"))
                    t.Code = v.Code;
                if (!v.IsColumnNull("StockCodeDACA"))
                    t.StockCodeDACA = v.StockCodeDACA;
                if (!v.IsColumnNull("NearExpiryTrigger"))
                    t.NearExpiryTrigger = v.NearExpiryTrigger;
                if (!v.IsColumnNull("StorageTypeID"))
                    t.StorageTypeID = v.StorageTypeID;
                if (!v.IsColumnNull("IsStackStored"))
                    t.IsStackStored = v.IsStackStored;


                list.Add(t);
                v.MoveNext();
            }
            return list;
        }

        #endregion


        #region Web service Saving

        public static void SaveList(List<HCMIS.Desktop.DirectoryServices.Items> list)
        {
            bool isNew = false;
            BLL.Items bv = new BLL.Items();
            foreach (HCMIS.Desktop.DirectoryServices.Items v in list)
            {
                // try to load by primary key
                bv.LoadByPrimaryKey(v.ID.Value);

                // if the entry doesn't exist, create it
                if (bv.RowCount == 0)
                {
                    isNew = true;
                    bv.AddNew();
                    bv.IsFree = true;
                }
                // populate the contents of v on the to the database list
                if (v.ID.HasValue)
                    bv.ID = v.ID.Value;
                if (v.StockCode != "" && v.StockCode != null)
                    bv.StockCode = v.StockCode;

                if (v.Strength != "" && v.Strength != null)
                    bv.Strength = v.Strength;
                else
                    bv.SetColumnNull("Strength");

                if (v.DosageFormID.HasValue)
                    bv.DosageFormID = v.DosageFormID.Value;
                else
                    bv.SetColumnNull("DosageFormID");

                if (v.UnitID.HasValue)
                    bv.UnitID = v.UnitID.Value;

                if (v.VEN.HasValue)
                    bv.VEN = v.VEN.Value;
                else
                    bv.VEN = 1;

                if (v.ABC.HasValue)
                    bv.ABC = v.ABC.Value;
                else
                    bv.ABC = 1;
                if (v.QtyPerPack.HasValue)
                    bv.Cost = v.QtyPerPack.Value;
                if (v.EDL.HasValue)
                    bv.EDL = v.EDL.Value;
                if (v.Pediatric.HasValue)
                    bv.Pediatric = v.Pediatric.Value;
                if (v.IINID.HasValue)
                    bv.IINID = v.IINID.Value;
                if (v.NeedExpiryBatch.HasValue)
                {
                    bv.NeedExpiryBatch = v.NeedExpiryBatch.Value;
                }
                else
                {
                    bv.NeedExpiryBatch = false;
                }

                if (v.Code != "" && v.Code != null)
                    bv.Code = v.Code;

                if (v.StockCodeDACA != "" && v.StockCodeDACA != null)
                    bv.StockCodeDACA = v.StockCodeDACA;

                if (v.NearExpiryTrigger.HasValue)
                    bv.NearExpiryTrigger = v.NearExpiryTrigger.Value;
                if (v.StorageTypeID.HasValue && isNew)
                    bv.StorageTypeID = v.StorageTypeID.Value;
                if (v.IsStackStored.HasValue && isNew)
                    bv.IsStackStored = v.IsStackStored.Value;

                bv.Save();
            }


        }

        public static void DeleteList(List<int> list)
        {
            BLL.Items bv = new BLL.Items();
            foreach (int v in list)
            {
                // try to load by primary key
                bv.LoadByPrimaryKey(v);
                // if the entry doesn't exist, create it
                if (bv.RowCount > 0)
                {
                    bv.MarkAsDeleted();
                    bv.Save();
                }
                // populate the contents of v on the to the database list

            }


        }


        #endregion
    }
}
