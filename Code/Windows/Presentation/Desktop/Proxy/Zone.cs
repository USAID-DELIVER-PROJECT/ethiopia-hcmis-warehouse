
// Generated by MyGeneration Version # (1.3.0.9)

using System;
using System.Collections.Generic;

namespace Proxy
{
    public class Zone
    {

        #region Properties

        private int? _ID;
        public int? ID
        {
            get
            {
                return _ID;
            }
            set
            {
                _ID = value;
            }
        }

        private string _ZoneName;
        public string ZoneName
        {
            get
            {
                return _ZoneName;
            }
            set
            {
                _ZoneName = value;
            }
        }

        private int? _RegionId;
        public int? RegionId
        {
            get
            {
                return _RegionId;
            }
            set
            {
                _RegionId = value;
            }
        }

        private string _ZoneCode;
        public string ZoneCode
        {
            get
            {
                return _ZoneCode;
            }
            set
            {
                _ZoneCode = value;
            }
        }

        private bool? _IsDeleted;
        public bool? IsDeleted
        {
            get
            {
                return _IsDeleted;
            }
            set
            {
                _IsDeleted = value;
            }
        }

        private DateTime? _UpdateTime;
        public DateTime? UpdateTime
        {
            get
            {
                return _UpdateTime;
            }
            set
            {
                _UpdateTime = value;
            }
        }


        #endregion

        #region Web Service Getters

        public static List<Zone> GetAll()
        {
            BLL.Zone v = new BLL.Zone();
            v.LoadAll();
            return ToList(v);
        }

        public static List<Zone> GetUpdatesAfter(long? lastVersion, DateTime? lastUpdateTime)
        {
            BLL.Zone v = new BLL.Zone();
            if (lastVersion.HasValue && lastVersion.Value != 0)
            {
                v.LoadUpdatesAfter(Convert.ToInt32(lastVersion.Value));
            }
            else if (lastUpdateTime.HasValue)
            {
                //v.LoadUpdatesAfterByTime(lastUpdateTime.Value);
            }
            else
            {
                v.LoadAll();
            }
            return ToList(v);
        }

        public static List<int> GetDeletedIDsAfter(long LastVersion)
        {
            BLL.Zone v = new BLL.Zone();
            //v.LoadDeletedIDs(LastVersion);
            List<int> list = new List<int>();
            while (!v.EOF)
            {
                list.Add((int)v.GetColumn("ID"));
                v.MoveNext();
            }
            return list;
        }

        #endregion



        #region Utilities

        public static List<Zone> ToList(BLL.Zone v)
        {
            List<Zone> list = new List<Zone>();
            while (!v.EOF)
            {
                Zone t = new Zone();
                if (!v.IsColumnNull("ID"))
                    t.ID = v.ID;
                if (!v.IsColumnNull("ZoneName"))
                    t.ZoneName = v.ZoneName;
                if (!v.IsColumnNull("RegionId"))
                    t.RegionId = v.RegionId;
                if (!v.IsColumnNull("ZoneCode"))
                    t.ZoneCode = v.ZoneCode;
                //if(!v.IsColumnNull("IsDeleted"))
                //      t.IsDeleted = v.IsDeleted;
                //if(!v.IsColumnNull("UpdateTime"))
                //      t.UpdateTime = v.UpdateTime;

                list.Add(t);
                v.MoveNext();
            }
            return list;
        }

        #endregion


        #region Web service Saving

        public static void SaveList(List<HCMIS.Desktop.GeneralLookups.zone> list)
        {
            BLL.Zone bv = new BLL.Zone();
            foreach (HCMIS.Desktop.GeneralLookups.zone v in list)
            {
                // try to load by primary key
                bv.LoadByPrimaryKey(v.ID.Value);

                // if the entry doesn't exist, create it
                if (bv.RowCount == 0)
                {
                    bv.AddNew();
                }
                // populate the contents of v on the to the database list
                if (v.ID.HasValue)
                    bv.ID = v.ID.Value;
                if (v.ZoneName != "" && v.ZoneName != null)
                    bv.ZoneName = v.ZoneName;
                if (v.RegionId.HasValue)
                    bv.RegionId = v.RegionId.Value;
                if (v.ZoneCode != "" && v.ZoneCode != null)
                    bv.ZoneCode = v.ZoneCode;
                //if( v.IsDeleted.HasValue )
                //     bv.IsDeleted = v.IsDeleted.Value;
                //if( v.UpdateTime.HasValue )
                //     bv.UpdateTime = v.UpdateTime.Value;

                bv.Save();
            }


        }

        public static void DeleteList(List<int> list)
        {
            BLL.Zone bv = new BLL.Zone();
            foreach (int v in list)
            {
                // try to load by primary key
                bv.LoadByPrimaryKey(v);
                // if the entry doesn't exist, create it
                if (bv.RowCount > 0)
                {
                    bv.MarkAsDeleted();
                    bv.Save();
                }
                // populate the contents of v on the to the database list

            }


        }


        #endregion
    }
}
