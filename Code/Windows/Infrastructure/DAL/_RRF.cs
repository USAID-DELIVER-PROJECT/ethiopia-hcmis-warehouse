
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _RRF : SqlClientEntity
	{
		public _RRF()
		{
			this.QuerySource = "RRF";
			this.MappingName = "RRF";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_RRFLoadAll]", parameters);
		}
	
		
		public bool LoadUpdatesAfter( long LastVersion ){
			this.FlushData();
			string q = string.Format(@"SELECT T.* FROM RRF AS T Where T.ID in (SELECT CT.ID FROM CHANGETABLE(CHANGES RRF, {0}) AS CT)", LastVersion);
			return base.LoadFromRawSql(q);
		}
		
		
		public bool LoadUpdatesAfterByTime( DateTime LastUpdateTime ){
			this.FlushData();
			string q = string.Format(@"SELECT T.* FROM RRF AS T Where T.UpdateTime > {0} AS CT)", LastUpdateTime);
			return base.LoadFromRawSql(q);
		}
		
		public  bool LoadDeletedIDs( long LastVersion) {
			this.FlushData();
			string q = string.Format(@"SELECT ID FROM CHANGETABLE (CHANGES RRF,{0}) as CT where SYS_CHANGE_OPERATION = 'D' ORDER BY SYS_CHANGE_VERSION" , LastVersion);
			return base.LoadFromRawSql(q);
		}
		
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_RRFLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FromMonth
			{
				get
				{
					return new SqlParameter("@FromMonth", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FromYear
			{
				get
				{
					return new SqlParameter("@FromYear", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ToMonth
			{
				get
				{
					return new SqlParameter("@ToMonth", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ToYear
			{
				get
				{
					return new SqlParameter("@ToYear", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DateOfSubmission
			{
				get
				{
					return new SqlParameter("@DateOfSubmission", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter LastRRFStatus
			{
				get
				{
					return new SqlParameter("@LastRRFStatus", SqlDbType.VarChar, 100);
				}
			}
			
			public static SqlParameter RRFType
			{
				get
				{
					return new SqlParameter("@RRFType", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string FromMonth = "FromMonth";
            public const string FromYear = "FromYear";
            public const string ToMonth = "ToMonth";
            public const string ToYear = "ToYear";
            public const string DateOfSubmission = "DateOfSubmission";
            public const string LastRRFStatus = "LastRRFStatus";
            public const string RRFType = "RRFType";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _RRF.PropertyNames.ID;
					ht[FromMonth] = _RRF.PropertyNames.FromMonth;
					ht[FromYear] = _RRF.PropertyNames.FromYear;
					ht[ToMonth] = _RRF.PropertyNames.ToMonth;
					ht[ToYear] = _RRF.PropertyNames.ToYear;
					ht[DateOfSubmission] = _RRF.PropertyNames.DateOfSubmission;
					ht[LastRRFStatus] = _RRF.PropertyNames.LastRRFStatus;
					ht[RRFType] = _RRF.PropertyNames.RRFType;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string FromMonth = "FromMonth";
            public const string FromYear = "FromYear";
            public const string ToMonth = "ToMonth";
            public const string ToYear = "ToYear";
            public const string DateOfSubmission = "DateOfSubmission";
            public const string LastRRFStatus = "LastRRFStatus";
            public const string RRFType = "RRFType";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _RRF.ColumnNames.ID;
					ht[FromMonth] = _RRF.ColumnNames.FromMonth;
					ht[FromYear] = _RRF.ColumnNames.FromYear;
					ht[ToMonth] = _RRF.ColumnNames.ToMonth;
					ht[ToYear] = _RRF.ColumnNames.ToYear;
					ht[DateOfSubmission] = _RRF.ColumnNames.DateOfSubmission;
					ht[LastRRFStatus] = _RRF.ColumnNames.LastRRFStatus;
					ht[RRFType] = _RRF.ColumnNames.RRFType;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string FromMonth = "s_FromMonth";
            public const string FromYear = "s_FromYear";
            public const string ToMonth = "s_ToMonth";
            public const string ToYear = "s_ToYear";
            public const string DateOfSubmission = "s_DateOfSubmission";
            public const string LastRRFStatus = "s_LastRRFStatus";
            public const string RRFType = "s_RRFType";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual int FromMonth
	    {
			get
	        {
				return base.Getint(ColumnNames.FromMonth);
			}
			set
	        {
				base.Setint(ColumnNames.FromMonth, value);
			}
		}

		public virtual int FromYear
	    {
			get
	        {
				return base.Getint(ColumnNames.FromYear);
			}
			set
	        {
				base.Setint(ColumnNames.FromYear, value);
			}
		}

		public virtual int ToMonth
	    {
			get
	        {
				return base.Getint(ColumnNames.ToMonth);
			}
			set
	        {
				base.Setint(ColumnNames.ToMonth, value);
			}
		}

		public virtual int ToYear
	    {
			get
	        {
				return base.Getint(ColumnNames.ToYear);
			}
			set
	        {
				base.Setint(ColumnNames.ToYear, value);
			}
		}

		public virtual DateTime DateOfSubmission
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DateOfSubmission);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DateOfSubmission, value);
			}
		}

		public virtual string LastRRFStatus
	    {
			get
	        {
				return base.Getstring(ColumnNames.LastRRFStatus);
			}
			set
	        {
				base.Setstring(ColumnNames.LastRRFStatus, value);
			}
		}

		public virtual int RRFType
	    {
			get
	        {
				return base.Getint(ColumnNames.RRFType);
			}
			set
	        {
				base.Setint(ColumnNames.RRFType, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_FromMonth
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FromMonth) ? string.Empty : base.GetintAsString(ColumnNames.FromMonth);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FromMonth);
				else
					this.FromMonth = base.SetintAsString(ColumnNames.FromMonth, value);
			}
		}

		public virtual string s_FromYear
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FromYear) ? string.Empty : base.GetintAsString(ColumnNames.FromYear);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FromYear);
				else
					this.FromYear = base.SetintAsString(ColumnNames.FromYear, value);
			}
		}

		public virtual string s_ToMonth
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ToMonth) ? string.Empty : base.GetintAsString(ColumnNames.ToMonth);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ToMonth);
				else
					this.ToMonth = base.SetintAsString(ColumnNames.ToMonth, value);
			}
		}

		public virtual string s_ToYear
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ToYear) ? string.Empty : base.GetintAsString(ColumnNames.ToYear);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ToYear);
				else
					this.ToYear = base.SetintAsString(ColumnNames.ToYear, value);
			}
		}

		public virtual string s_DateOfSubmission
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DateOfSubmission) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateOfSubmission);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DateOfSubmission);
				else
					this.DateOfSubmission = base.SetDateTimeAsString(ColumnNames.DateOfSubmission, value);
			}
		}

		public virtual string s_LastRRFStatus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastRRFStatus) ? string.Empty : base.GetstringAsString(ColumnNames.LastRRFStatus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastRRFStatus);
				else
					this.LastRRFStatus = base.SetstringAsString(ColumnNames.LastRRFStatus, value);
			}
		}

		public virtual string s_RRFType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RRFType) ? string.Empty : base.GetintAsString(ColumnNames.RRFType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RRFType);
				else
					this.RRFType = base.SetintAsString(ColumnNames.RRFType, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FromMonth
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FromMonth, Parameters.FromMonth);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FromYear
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FromYear, Parameters.FromYear);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ToMonth
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ToMonth, Parameters.ToMonth);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ToYear
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ToYear, Parameters.ToYear);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DateOfSubmission
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DateOfSubmission, Parameters.DateOfSubmission);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastRRFStatus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastRRFStatus, Parameters.LastRRFStatus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RRFType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RRFType, Parameters.RRFType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter FromMonth
		    {
				get
		        {
					if(_FromMonth_W == null)
	        	    {
						_FromMonth_W = TearOff.FromMonth;
					}
					return _FromMonth_W;
				}
			}

			public WhereParameter FromYear
		    {
				get
		        {
					if(_FromYear_W == null)
	        	    {
						_FromYear_W = TearOff.FromYear;
					}
					return _FromYear_W;
				}
			}

			public WhereParameter ToMonth
		    {
				get
		        {
					if(_ToMonth_W == null)
	        	    {
						_ToMonth_W = TearOff.ToMonth;
					}
					return _ToMonth_W;
				}
			}

			public WhereParameter ToYear
		    {
				get
		        {
					if(_ToYear_W == null)
	        	    {
						_ToYear_W = TearOff.ToYear;
					}
					return _ToYear_W;
				}
			}

			public WhereParameter DateOfSubmission
		    {
				get
		        {
					if(_DateOfSubmission_W == null)
	        	    {
						_DateOfSubmission_W = TearOff.DateOfSubmission;
					}
					return _DateOfSubmission_W;
				}
			}

			public WhereParameter LastRRFStatus
		    {
				get
		        {
					if(_LastRRFStatus_W == null)
	        	    {
						_LastRRFStatus_W = TearOff.LastRRFStatus;
					}
					return _LastRRFStatus_W;
				}
			}

			public WhereParameter RRFType
		    {
				get
		        {
					if(_RRFType_W == null)
	        	    {
						_RRFType_W = TearOff.RRFType;
					}
					return _RRFType_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _FromMonth_W = null;
			private WhereParameter _FromYear_W = null;
			private WhereParameter _ToMonth_W = null;
			private WhereParameter _ToYear_W = null;
			private WhereParameter _DateOfSubmission_W = null;
			private WhereParameter _LastRRFStatus_W = null;
			private WhereParameter _RRFType_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_FromMonth_W = null;
				_FromYear_W = null;
				_ToMonth_W = null;
				_ToYear_W = null;
				_DateOfSubmission_W = null;
				_LastRRFStatus_W = null;
				_RRFType_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FromMonth
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FromMonth, Parameters.FromMonth);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FromYear
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FromYear, Parameters.FromYear);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ToMonth
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ToMonth, Parameters.ToMonth);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ToYear
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ToYear, Parameters.ToYear);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DateOfSubmission
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateOfSubmission, Parameters.DateOfSubmission);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastRRFStatus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastRRFStatus, Parameters.LastRRFStatus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RRFType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RRFType, Parameters.RRFType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter FromMonth
		    {
				get
		        {
					if(_FromMonth_W == null)
	        	    {
						_FromMonth_W = TearOff.FromMonth;
					}
					return _FromMonth_W;
				}
			}

			public AggregateParameter FromYear
		    {
				get
		        {
					if(_FromYear_W == null)
	        	    {
						_FromYear_W = TearOff.FromYear;
					}
					return _FromYear_W;
				}
			}

			public AggregateParameter ToMonth
		    {
				get
		        {
					if(_ToMonth_W == null)
	        	    {
						_ToMonth_W = TearOff.ToMonth;
					}
					return _ToMonth_W;
				}
			}

			public AggregateParameter ToYear
		    {
				get
		        {
					if(_ToYear_W == null)
	        	    {
						_ToYear_W = TearOff.ToYear;
					}
					return _ToYear_W;
				}
			}

			public AggregateParameter DateOfSubmission
		    {
				get
		        {
					if(_DateOfSubmission_W == null)
	        	    {
						_DateOfSubmission_W = TearOff.DateOfSubmission;
					}
					return _DateOfSubmission_W;
				}
			}

			public AggregateParameter LastRRFStatus
		    {
				get
		        {
					if(_LastRRFStatus_W == null)
	        	    {
						_LastRRFStatus_W = TearOff.LastRRFStatus;
					}
					return _LastRRFStatus_W;
				}
			}

			public AggregateParameter RRFType
		    {
				get
		        {
					if(_RRFType_W == null)
	        	    {
						_RRFType_W = TearOff.RRFType;
					}
					return _RRFType_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _FromMonth_W = null;
			private AggregateParameter _FromYear_W = null;
			private AggregateParameter _ToMonth_W = null;
			private AggregateParameter _ToYear_W = null;
			private AggregateParameter _DateOfSubmission_W = null;
			private AggregateParameter _LastRRFStatus_W = null;
			private AggregateParameter _RRFType_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_FromMonth_W = null;
				_FromYear_W = null;
				_ToMonth_W = null;
				_ToYear_W = null;
				_DateOfSubmission_W = null;
				_LastRRFStatus_W = null;
				_RRFType_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RRFInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RRFUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RRFDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FromMonth);
			p.SourceColumn = ColumnNames.FromMonth;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FromYear);
			p.SourceColumn = ColumnNames.FromYear;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ToMonth);
			p.SourceColumn = ColumnNames.ToMonth;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ToYear);
			p.SourceColumn = ColumnNames.ToYear;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DateOfSubmission);
			p.SourceColumn = ColumnNames.DateOfSubmission;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastRRFStatus);
			p.SourceColumn = ColumnNames.LastRRFStatus;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RRFType);
			p.SourceColumn = ColumnNames.RRFType;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
