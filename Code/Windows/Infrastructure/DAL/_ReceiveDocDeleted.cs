
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
    public abstract class _ReceiveDocDeleted : SqlClientEntity
    {
        public _ReceiveDocDeleted()
        {
            this.QuerySource = "ReceiveDocDeleted";
            this.MappingName = "ReceiveDocDeleted";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ReceiveDocDeletedLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int ID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.ID, ID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ReceiveDocDeletedLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter ID
            {
                get
                {
                    return new SqlParameter("@ID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter BatchNo
            {
                get
                {
                    return new SqlParameter("@BatchNo", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter ItemID
            {
                get
                {
                    return new SqlParameter("@ItemID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter SupplierID
            {
                get
                {
                    return new SqlParameter("@SupplierID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Quantity
            {
                get
                {
                    return new SqlParameter("@Quantity", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter Date
            {
                get
                {
                    return new SqlParameter("@Date", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter ExpDate
            {
                get
                {
                    return new SqlParameter("@ExpDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter Out
            {
                get
                {
                    return new SqlParameter("@Out", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter ReceivedStatus
            {
                get
                {
                    return new SqlParameter("@ReceivedStatus", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ReceivedBy
            {
                get
                {
                    return new SqlParameter("@ReceivedBy", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter Remark
            {
                get
                {
                    return new SqlParameter("@Remark", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter StoreID
            {
                get
                {
                    return new SqlParameter("@StoreID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter LocalBatchNo
            {
                get
                {
                    return new SqlParameter("@LocalBatchNo", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter RefNo
            {
                get
                {
                    return new SqlParameter("@RefNo", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter Cost
            {
                get
                {
                    return new SqlParameter("@Cost", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter IsApproved
            {
                get
                {
                    return new SqlParameter("@IsApproved", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter ManufacturerId
            {
                get
                {
                    return new SqlParameter("@ManufacturerId", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter QuantityLeft
            {
                get
                {
                    return new SqlParameter("@QuantityLeft", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter NoOfPack
            {
                get
                {
                    return new SqlParameter("@NoOfPack", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter QtyPerPack
            {
                get
                {
                    return new SqlParameter("@QtyPerPack", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter EurDate
            {
                get
                {
                    return new SqlParameter("@EurDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter BoxLevel
            {
                get
                {
                    return new SqlParameter("@BoxLevel", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter SellingPrice
            {
                get
                {
                    return new SqlParameter("@SellingPrice", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter PricePerPack
            {
                get
                {
                    return new SqlParameter("@PricePerPack", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter UnitID
            {
                get
                {
                    return new SqlParameter("@UnitID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter DeletedBy
            {
                get
                {
                    return new SqlParameter("@DeletedBy", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter DateDeleted
            {
                get
                {
                    return new SqlParameter("@DateDeleted", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter DeliveryNote
            {
                get
                {
                    return new SqlParameter("@DeliveryNote", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter Confirmed
            {
                get
                {
                    return new SqlParameter("@Confirmed", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter ConfirmedByUserID
            {
                get
                {
                    return new SqlParameter("@ConfirmedByUserID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ConfirmedDateTime
            {
                get
                {
                    return new SqlParameter("@ConfirmedDateTime", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter ReturnedStock
            {
                get
                {
                    return new SqlParameter("@ReturnedStock", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter ReturnedFromIssueDocID
            {
                get
                {
                    return new SqlParameter("@ReturnedFromIssueDocID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ReceiptID
            {
                get
                {
                    return new SqlParameter("@ReceiptID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Margin
            {
                get
                {
                    return new SqlParameter("@Margin", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter Insurance
            {
                get
                {
                    return new SqlParameter("@Insurance", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter InvoicedNoOfPack
            {
                get
                {
                    return new SqlParameter("@InvoicedNoOfPack", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter ShortageReasonID
            {
                get
                {
                    return new SqlParameter("@ShortageReasonID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter UnitCost
            {
                get
                {
                    return new SqlParameter("@UnitCost", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter PhysicalStoreID
            {
                get
                {
                    return new SqlParameter("@PhysicalStoreID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter InventoryPeriodID
            {
                get
                {
                    return new SqlParameter("@InventoryPeriodID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter IsDamaged
            {
                get
                {
                    return new SqlParameter("@IsDamaged", SqlDbType.Bit, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string ID = "ID";
            public const string BatchNo = "BatchNo";
            public const string ItemID = "ItemID";
            public const string SupplierID = "SupplierID";
            public const string Quantity = "Quantity";
            public const string Date = "Date";
            public const string ExpDate = "ExpDate";
            public const string Out = "Out";
            public const string ReceivedStatus = "ReceivedStatus";
            public const string ReceivedBy = "ReceivedBy";
            public const string Remark = "Remark";
            public const string StoreID = "StoreID";
            public const string LocalBatchNo = "LocalBatchNo";
            public const string RefNo = "RefNo";
            public const string Cost = "Cost";
            public const string IsApproved = "IsApproved";
            public const string ManufacturerId = "ManufacturerId";
            public const string QuantityLeft = "QuantityLeft";
            public const string NoOfPack = "NoOfPack";
            public const string QtyPerPack = "QtyPerPack";
            public const string EurDate = "EurDate";
            public const string BoxLevel = "BoxLevel";
            public const string SellingPrice = "SellingPrice";
            public const string PricePerPack = "PricePerPack";
            public const string UnitID = "UnitID";
            public const string DeletedBy = "DeletedBy";
            public const string DateDeleted = "DateDeleted";
            public const string DeliveryNote = "DeliveryNote";
            public const string Confirmed = "Confirmed";
            public const string ConfirmedByUserID = "ConfirmedByUserID";
            public const string ConfirmedDateTime = "ConfirmedDateTime";
            public const string ReturnedStock = "ReturnedStock";
            public const string ReturnedFromIssueDocID = "ReturnedFromIssueDocID";
            public const string ReceiptID = "ReceiptID";
            public const string Margin = "Margin";
            public const string Insurance = "Insurance";
            public const string InvoicedNoOfPack = "InvoicedNoOfPack";
            public const string ShortageReasonID = "ShortageReasonID";
            public const string UnitCost = "UnitCost";
            public const string PhysicalStoreID = "PhysicalStoreID";
            public const string InventoryPeriodID = "InventoryPeriodID";
            public const string IsDamaged = "IsDamaged";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _ReceiveDocDeleted.PropertyNames.ID;
                    ht[BatchNo] = _ReceiveDocDeleted.PropertyNames.BatchNo;
                    ht[ItemID] = _ReceiveDocDeleted.PropertyNames.ItemID;
                    ht[SupplierID] = _ReceiveDocDeleted.PropertyNames.SupplierID;
                    ht[Quantity] = _ReceiveDocDeleted.PropertyNames.Quantity;
                    ht[Date] = _ReceiveDocDeleted.PropertyNames.Date;
                    ht[ExpDate] = _ReceiveDocDeleted.PropertyNames.ExpDate;
                    ht[Out] = _ReceiveDocDeleted.PropertyNames.Out;
                    ht[ReceivedStatus] = _ReceiveDocDeleted.PropertyNames.ReceivedStatus;
                    ht[ReceivedBy] = _ReceiveDocDeleted.PropertyNames.ReceivedBy;
                    ht[Remark] = _ReceiveDocDeleted.PropertyNames.Remark;
                    ht[StoreID] = _ReceiveDocDeleted.PropertyNames.StoreID;
                    ht[LocalBatchNo] = _ReceiveDocDeleted.PropertyNames.LocalBatchNo;
                    ht[RefNo] = _ReceiveDocDeleted.PropertyNames.RefNo;
                    ht[Cost] = _ReceiveDocDeleted.PropertyNames.Cost;
                    ht[IsApproved] = _ReceiveDocDeleted.PropertyNames.IsApproved;
                    ht[ManufacturerId] = _ReceiveDocDeleted.PropertyNames.ManufacturerId;
                    ht[QuantityLeft] = _ReceiveDocDeleted.PropertyNames.QuantityLeft;
                    ht[NoOfPack] = _ReceiveDocDeleted.PropertyNames.NoOfPack;
                    ht[QtyPerPack] = _ReceiveDocDeleted.PropertyNames.QtyPerPack;
                    ht[EurDate] = _ReceiveDocDeleted.PropertyNames.EurDate;
                    ht[BoxLevel] = _ReceiveDocDeleted.PropertyNames.BoxLevel;
                    ht[SellingPrice] = _ReceiveDocDeleted.PropertyNames.SellingPrice;
                    ht[PricePerPack] = _ReceiveDocDeleted.PropertyNames.PricePerPack;
                    ht[UnitID] = _ReceiveDocDeleted.PropertyNames.UnitID;
                    ht[DeletedBy] = _ReceiveDocDeleted.PropertyNames.DeletedBy;
                    ht[DateDeleted] = _ReceiveDocDeleted.PropertyNames.DateDeleted;
                    ht[DeliveryNote] = _ReceiveDocDeleted.PropertyNames.DeliveryNote;
                    ht[Confirmed] = _ReceiveDocDeleted.PropertyNames.Confirmed;
                    ht[ConfirmedByUserID] = _ReceiveDocDeleted.PropertyNames.ConfirmedByUserID;
                    ht[ConfirmedDateTime] = _ReceiveDocDeleted.PropertyNames.ConfirmedDateTime;
                    ht[ReturnedStock] = _ReceiveDocDeleted.PropertyNames.ReturnedStock;
                    ht[ReturnedFromIssueDocID] = _ReceiveDocDeleted.PropertyNames.ReturnedFromIssueDocID;
                    ht[ReceiptID] = _ReceiveDocDeleted.PropertyNames.ReceiptID;
                    ht[Margin] = _ReceiveDocDeleted.PropertyNames.Margin;
                    ht[Insurance] = _ReceiveDocDeleted.PropertyNames.Insurance;
                    ht[InvoicedNoOfPack] = _ReceiveDocDeleted.PropertyNames.InvoicedNoOfPack;
                    ht[ShortageReasonID] = _ReceiveDocDeleted.PropertyNames.ShortageReasonID;
                    ht[UnitCost] = _ReceiveDocDeleted.PropertyNames.UnitCost;
                    ht[PhysicalStoreID] = _ReceiveDocDeleted.PropertyNames.PhysicalStoreID;
                    ht[InventoryPeriodID] = _ReceiveDocDeleted.PropertyNames.InventoryPeriodID;
                    ht[IsDamaged] = _ReceiveDocDeleted.PropertyNames.IsDamaged;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string ID = "ID";
            public const string BatchNo = "BatchNo";
            public const string ItemID = "ItemID";
            public const string SupplierID = "SupplierID";
            public const string Quantity = "Quantity";
            public const string Date = "Date";
            public const string ExpDate = "ExpDate";
            public const string Out = "Out";
            public const string ReceivedStatus = "ReceivedStatus";
            public const string ReceivedBy = "ReceivedBy";
            public const string Remark = "Remark";
            public const string StoreID = "StoreID";
            public const string LocalBatchNo = "LocalBatchNo";
            public const string RefNo = "RefNo";
            public const string Cost = "Cost";
            public const string IsApproved = "IsApproved";
            public const string ManufacturerId = "ManufacturerId";
            public const string QuantityLeft = "QuantityLeft";
            public const string NoOfPack = "NoOfPack";
            public const string QtyPerPack = "QtyPerPack";
            public const string EurDate = "EurDate";
            public const string BoxLevel = "BoxLevel";
            public const string SellingPrice = "SellingPrice";
            public const string PricePerPack = "PricePerPack";
            public const string UnitID = "UnitID";
            public const string DeletedBy = "DeletedBy";
            public const string DateDeleted = "DateDeleted";
            public const string DeliveryNote = "DeliveryNote";
            public const string Confirmed = "Confirmed";
            public const string ConfirmedByUserID = "ConfirmedByUserID";
            public const string ConfirmedDateTime = "ConfirmedDateTime";
            public const string ReturnedStock = "ReturnedStock";
            public const string ReturnedFromIssueDocID = "ReturnedFromIssueDocID";
            public const string ReceiptID = "ReceiptID";
            public const string Margin = "Margin";
            public const string Insurance = "Insurance";
            public const string InvoicedNoOfPack = "InvoicedNoOfPack";
            public const string ShortageReasonID = "ShortageReasonID";
            public const string UnitCost = "UnitCost";
            public const string PhysicalStoreID = "PhysicalStoreID";
            public const string InventoryPeriodID = "InventoryPeriodID";
            public const string IsDamaged = "IsDamaged";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _ReceiveDocDeleted.ColumnNames.ID;
                    ht[BatchNo] = _ReceiveDocDeleted.ColumnNames.BatchNo;
                    ht[ItemID] = _ReceiveDocDeleted.ColumnNames.ItemID;
                    ht[SupplierID] = _ReceiveDocDeleted.ColumnNames.SupplierID;
                    ht[Quantity] = _ReceiveDocDeleted.ColumnNames.Quantity;
                    ht[Date] = _ReceiveDocDeleted.ColumnNames.Date;
                    ht[ExpDate] = _ReceiveDocDeleted.ColumnNames.ExpDate;
                    ht[Out] = _ReceiveDocDeleted.ColumnNames.Out;
                    ht[ReceivedStatus] = _ReceiveDocDeleted.ColumnNames.ReceivedStatus;
                    ht[ReceivedBy] = _ReceiveDocDeleted.ColumnNames.ReceivedBy;
                    ht[Remark] = _ReceiveDocDeleted.ColumnNames.Remark;
                    ht[StoreID] = _ReceiveDocDeleted.ColumnNames.StoreID;
                    ht[LocalBatchNo] = _ReceiveDocDeleted.ColumnNames.LocalBatchNo;
                    ht[RefNo] = _ReceiveDocDeleted.ColumnNames.RefNo;
                    ht[Cost] = _ReceiveDocDeleted.ColumnNames.Cost;
                    ht[IsApproved] = _ReceiveDocDeleted.ColumnNames.IsApproved;
                    ht[ManufacturerId] = _ReceiveDocDeleted.ColumnNames.ManufacturerId;
                    ht[QuantityLeft] = _ReceiveDocDeleted.ColumnNames.QuantityLeft;
                    ht[NoOfPack] = _ReceiveDocDeleted.ColumnNames.NoOfPack;
                    ht[QtyPerPack] = _ReceiveDocDeleted.ColumnNames.QtyPerPack;
                    ht[EurDate] = _ReceiveDocDeleted.ColumnNames.EurDate;
                    ht[BoxLevel] = _ReceiveDocDeleted.ColumnNames.BoxLevel;
                    ht[SellingPrice] = _ReceiveDocDeleted.ColumnNames.SellingPrice;
                    ht[PricePerPack] = _ReceiveDocDeleted.ColumnNames.PricePerPack;
                    ht[UnitID] = _ReceiveDocDeleted.ColumnNames.UnitID;
                    ht[DeletedBy] = _ReceiveDocDeleted.ColumnNames.DeletedBy;
                    ht[DateDeleted] = _ReceiveDocDeleted.ColumnNames.DateDeleted;
                    ht[DeliveryNote] = _ReceiveDocDeleted.ColumnNames.DeliveryNote;
                    ht[Confirmed] = _ReceiveDocDeleted.ColumnNames.Confirmed;
                    ht[ConfirmedByUserID] = _ReceiveDocDeleted.ColumnNames.ConfirmedByUserID;
                    ht[ConfirmedDateTime] = _ReceiveDocDeleted.ColumnNames.ConfirmedDateTime;
                    ht[ReturnedStock] = _ReceiveDocDeleted.ColumnNames.ReturnedStock;
                    ht[ReturnedFromIssueDocID] = _ReceiveDocDeleted.ColumnNames.ReturnedFromIssueDocID;
                    ht[ReceiptID] = _ReceiveDocDeleted.ColumnNames.ReceiptID;
                    ht[Margin] = _ReceiveDocDeleted.ColumnNames.Margin;
                    ht[Insurance] = _ReceiveDocDeleted.ColumnNames.Insurance;
                    ht[InvoicedNoOfPack] = _ReceiveDocDeleted.ColumnNames.InvoicedNoOfPack;
                    ht[ShortageReasonID] = _ReceiveDocDeleted.ColumnNames.ShortageReasonID;
                    ht[UnitCost] = _ReceiveDocDeleted.ColumnNames.UnitCost;
                    ht[PhysicalStoreID] = _ReceiveDocDeleted.ColumnNames.PhysicalStoreID;
                    ht[InventoryPeriodID] = _ReceiveDocDeleted.ColumnNames.InventoryPeriodID;
                    ht[IsDamaged] = _ReceiveDocDeleted.ColumnNames.IsDamaged;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string ID = "s_ID";
            public const string BatchNo = "s_BatchNo";
            public const string ItemID = "s_ItemID";
            public const string SupplierID = "s_SupplierID";
            public const string Quantity = "s_Quantity";
            public const string Date = "s_Date";
            public const string ExpDate = "s_ExpDate";
            public const string Out = "s_Out";
            public const string ReceivedStatus = "s_ReceivedStatus";
            public const string ReceivedBy = "s_ReceivedBy";
            public const string Remark = "s_Remark";
            public const string StoreID = "s_StoreID";
            public const string LocalBatchNo = "s_LocalBatchNo";
            public const string RefNo = "s_RefNo";
            public const string Cost = "s_Cost";
            public const string IsApproved = "s_IsApproved";
            public const string ManufacturerId = "s_ManufacturerId";
            public const string QuantityLeft = "s_QuantityLeft";
            public const string NoOfPack = "s_NoOfPack";
            public const string QtyPerPack = "s_QtyPerPack";
            public const string EurDate = "s_EurDate";
            public const string BoxLevel = "s_BoxLevel";
            public const string SellingPrice = "s_SellingPrice";
            public const string PricePerPack = "s_PricePerPack";
            public const string UnitID = "s_UnitID";
            public const string DeletedBy = "s_DeletedBy";
            public const string DateDeleted = "s_DateDeleted";
            public const string DeliveryNote = "s_DeliveryNote";
            public const string Confirmed = "s_Confirmed";
            public const string ConfirmedByUserID = "s_ConfirmedByUserID";
            public const string ConfirmedDateTime = "s_ConfirmedDateTime";
            public const string ReturnedStock = "s_ReturnedStock";
            public const string ReturnedFromIssueDocID = "s_ReturnedFromIssueDocID";
            public const string ReceiptID = "s_ReceiptID";
            public const string Margin = "s_Margin";
            public const string Insurance = "s_Insurance";
            public const string InvoicedNoOfPack = "s_InvoicedNoOfPack";
            public const string ShortageReasonID = "s_ShortageReasonID";
            public const string UnitCost = "s_UnitCost";
            public const string PhysicalStoreID = "s_PhysicalStoreID";
            public const string InventoryPeriodID = "s_InventoryPeriodID";
            public const string IsDamaged = "s_IsDamaged";

        }
        #endregion

        #region Properties

        public virtual int ID
        {
            get
            {
                return base.Getint(ColumnNames.ID);
            }
            set
            {
                base.Setint(ColumnNames.ID, value);
            }
        }

        public virtual string BatchNo
        {
            get
            {
                return base.Getstring(ColumnNames.BatchNo);
            }
            set
            {
                base.Setstring(ColumnNames.BatchNo, value);
            }
        }

        public virtual int ItemID
        {
            get
            {
                return base.Getint(ColumnNames.ItemID);
            }
            set
            {
                base.Setint(ColumnNames.ItemID, value);
            }
        }

        public virtual int SupplierID
        {
            get
            {
                return base.Getint(ColumnNames.SupplierID);
            }
            set
            {
                base.Setint(ColumnNames.SupplierID, value);
            }
        }

        public virtual decimal Quantity
        {
            get
            {
                return base.Getdecimal(ColumnNames.Quantity);
            }
            set
            {
                base.Setdecimal(ColumnNames.Quantity, value);
            }
        }

        public virtual DateTime Date
        {
            get
            {
                return base.GetDateTime(ColumnNames.Date);
            }
            set
            {
                base.SetDateTime(ColumnNames.Date, value);
            }
        }

        public virtual DateTime ExpDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.ExpDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.ExpDate, value);
            }
        }

        public virtual bool Out
        {
            get
            {
                return base.Getbool(ColumnNames.Out);
            }
            set
            {
                base.Setbool(ColumnNames.Out, value);
            }
        }

        public virtual int ReceivedStatus
        {
            get
            {
                return base.Getint(ColumnNames.ReceivedStatus);
            }
            set
            {
                base.Setint(ColumnNames.ReceivedStatus, value);
            }
        }

        public virtual string ReceivedBy
        {
            get
            {
                return base.Getstring(ColumnNames.ReceivedBy);
            }
            set
            {
                base.Setstring(ColumnNames.ReceivedBy, value);
            }
        }

        public virtual string Remark
        {
            get
            {
                return base.Getstring(ColumnNames.Remark);
            }
            set
            {
                base.Setstring(ColumnNames.Remark, value);
            }
        }

        public virtual int StoreID
        {
            get
            {
                return base.Getint(ColumnNames.StoreID);
            }
            set
            {
                base.Setint(ColumnNames.StoreID, value);
            }
        }

        public virtual string LocalBatchNo
        {
            get
            {
                return base.Getstring(ColumnNames.LocalBatchNo);
            }
            set
            {
                base.Setstring(ColumnNames.LocalBatchNo, value);
            }
        }

        public virtual string RefNo
        {
            get
            {
                return base.Getstring(ColumnNames.RefNo);
            }
            set
            {
                base.Setstring(ColumnNames.RefNo, value);
            }
        }

        public virtual double Cost
        {
            get
            {
                return base.Getdouble(ColumnNames.Cost);
            }
            set
            {
                base.Setdouble(ColumnNames.Cost, value);
            }
        }

        public virtual bool IsApproved
        {
            get
            {
                return base.Getbool(ColumnNames.IsApproved);
            }
            set
            {
                base.Setbool(ColumnNames.IsApproved, value);
            }
        }

        public virtual int ManufacturerId
        {
            get
            {
                return base.Getint(ColumnNames.ManufacturerId);
            }
            set
            {
                base.Setint(ColumnNames.ManufacturerId, value);
            }
        }

        public virtual decimal QuantityLeft
        {
            get
            {
                return base.Getdecimal(ColumnNames.QuantityLeft);
            }
            set
            {
                base.Setdecimal(ColumnNames.QuantityLeft, value);
            }
        }

        public virtual decimal NoOfPack
        {
            get
            {
                return base.Getdecimal(ColumnNames.NoOfPack);
            }
            set
            {
                base.Setdecimal(ColumnNames.NoOfPack, value);
            }
        }

        public virtual int QtyPerPack
        {
            get
            {
                return base.Getint(ColumnNames.QtyPerPack);
            }
            set
            {
                base.Setint(ColumnNames.QtyPerPack, value);
            }
        }

        public virtual DateTime EurDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.EurDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.EurDate, value);
            }
        }

        public virtual int BoxLevel
        {
            get
            {
                return base.Getint(ColumnNames.BoxLevel);
            }
            set
            {
                base.Setint(ColumnNames.BoxLevel, value);
            }
        }

        public virtual double SellingPrice
        {
            get
            {
                return base.Getdouble(ColumnNames.SellingPrice);
            }
            set
            {
                base.Setdouble(ColumnNames.SellingPrice, value);
            }
        }

        public virtual double PricePerPack
        {
            get
            {
                return base.Getdouble(ColumnNames.PricePerPack);
            }
            set
            {
                base.Setdouble(ColumnNames.PricePerPack, value);
            }
        }

        public virtual int UnitID
        {
            get
            {
                return base.Getint(ColumnNames.UnitID);
            }
            set
            {
                base.Setint(ColumnNames.UnitID, value);
            }
        }

        public virtual int DeletedBy
        {
            get
            {
                return base.Getint(ColumnNames.DeletedBy);
            }
            set
            {
                base.Setint(ColumnNames.DeletedBy, value);
            }
        }

        public virtual DateTime DateDeleted
        {
            get
            {
                return base.GetDateTime(ColumnNames.DateDeleted);
            }
            set
            {
                base.SetDateTime(ColumnNames.DateDeleted, value);
            }
        }

        public virtual bool DeliveryNote
        {
            get
            {
                return base.Getbool(ColumnNames.DeliveryNote);
            }
            set
            {
                base.Setbool(ColumnNames.DeliveryNote, value);
            }
        }

        public virtual bool Confirmed
        {
            get
            {
                return base.Getbool(ColumnNames.Confirmed);
            }
            set
            {
                base.Setbool(ColumnNames.Confirmed, value);
            }
        }

        public virtual int ConfirmedByUserID
        {
            get
            {
                return base.Getint(ColumnNames.ConfirmedByUserID);
            }
            set
            {
                base.Setint(ColumnNames.ConfirmedByUserID, value);
            }
        }

        public virtual DateTime ConfirmedDateTime
        {
            get
            {
                return base.GetDateTime(ColumnNames.ConfirmedDateTime);
            }
            set
            {
                base.SetDateTime(ColumnNames.ConfirmedDateTime, value);
            }
        }

        public virtual bool ReturnedStock
        {
            get
            {
                return base.Getbool(ColumnNames.ReturnedStock);
            }
            set
            {
                base.Setbool(ColumnNames.ReturnedStock, value);
            }
        }

        public virtual int ReturnedFromIssueDocID
        {
            get
            {
                return base.Getint(ColumnNames.ReturnedFromIssueDocID);
            }
            set
            {
                base.Setint(ColumnNames.ReturnedFromIssueDocID, value);
            }
        }

        public virtual int ReceiptID
        {
            get
            {
                return base.Getint(ColumnNames.ReceiptID);
            }
            set
            {
                base.Setint(ColumnNames.ReceiptID, value);
            }
        }

        public virtual double Margin
        {
            get
            {
                return base.Getdouble(ColumnNames.Margin);
            }
            set
            {
                base.Setdouble(ColumnNames.Margin, value);
            }
        }

        public virtual double Insurance
        {
            get
            {
                return base.Getdouble(ColumnNames.Insurance);
            }
            set
            {
                base.Setdouble(ColumnNames.Insurance, value);
            }
        }

        public virtual decimal InvoicedNoOfPack
        {
            get
            {
                return base.Getdecimal(ColumnNames.InvoicedNoOfPack);
            }
            set
            {
                base.Setdecimal(ColumnNames.InvoicedNoOfPack, value);
            }
        }

        public virtual int ShortageReasonID
        {
            get
            {
                return base.Getint(ColumnNames.ShortageReasonID);
            }
            set
            {
                base.Setint(ColumnNames.ShortageReasonID, value);
            }
        }

        public virtual decimal UnitCost
        {
            get
            {
                return base.Getdecimal(ColumnNames.UnitCost);
            }
            set
            {
                base.Setdecimal(ColumnNames.UnitCost, value);
            }
        }

        public virtual int PhysicalStoreID
        {
            get
            {
                return base.Getint(ColumnNames.PhysicalStoreID);
            }
            set
            {
                base.Setint(ColumnNames.PhysicalStoreID, value);
            }
        }

        public virtual int InventoryPeriodID
        {
            get
            {
                return base.Getint(ColumnNames.InventoryPeriodID);
            }
            set
            {
                base.Setint(ColumnNames.InventoryPeriodID, value);
            }
        }

        public virtual bool IsDamaged
        {
            get
            {
                return base.Getbool(ColumnNames.IsDamaged);
            }
            set
            {
                base.Setbool(ColumnNames.IsDamaged, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_ID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ID);
                else
                    this.ID = base.SetintAsString(ColumnNames.ID, value);
            }
        }

        public virtual string s_BatchNo
        {
            get
            {
                return this.IsColumnNull(ColumnNames.BatchNo) ? string.Empty : base.GetstringAsString(ColumnNames.BatchNo);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.BatchNo);
                else
                    this.BatchNo = base.SetstringAsString(ColumnNames.BatchNo, value);
            }
        }

        public virtual string s_ItemID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ItemID) ? string.Empty : base.GetintAsString(ColumnNames.ItemID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ItemID);
                else
                    this.ItemID = base.SetintAsString(ColumnNames.ItemID, value);
            }
        }

        public virtual string s_SupplierID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SupplierID) ? string.Empty : base.GetintAsString(ColumnNames.SupplierID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SupplierID);
                else
                    this.SupplierID = base.SetintAsString(ColumnNames.SupplierID, value);
            }
        }

        public virtual string s_Quantity
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Quantity) ? string.Empty : base.GetdecimalAsString(ColumnNames.Quantity);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Quantity);
                else
                    this.Quantity = base.SetdecimalAsString(ColumnNames.Quantity, value);
            }
        }

        public virtual string s_Date
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Date) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Date);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Date);
                else
                    this.Date = base.SetDateTimeAsString(ColumnNames.Date, value);
            }
        }

        public virtual string s_ExpDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ExpDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ExpDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ExpDate);
                else
                    this.ExpDate = base.SetDateTimeAsString(ColumnNames.ExpDate, value);
            }
        }

        public virtual string s_Out
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Out) ? string.Empty : base.GetboolAsString(ColumnNames.Out);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Out);
                else
                    this.Out = base.SetboolAsString(ColumnNames.Out, value);
            }
        }

        public virtual string s_ReceivedStatus
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ReceivedStatus) ? string.Empty : base.GetintAsString(ColumnNames.ReceivedStatus);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ReceivedStatus);
                else
                    this.ReceivedStatus = base.SetintAsString(ColumnNames.ReceivedStatus, value);
            }
        }

        public virtual string s_ReceivedBy
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ReceivedBy) ? string.Empty : base.GetstringAsString(ColumnNames.ReceivedBy);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ReceivedBy);
                else
                    this.ReceivedBy = base.SetstringAsString(ColumnNames.ReceivedBy, value);
            }
        }

        public virtual string s_Remark
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Remark) ? string.Empty : base.GetstringAsString(ColumnNames.Remark);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Remark);
                else
                    this.Remark = base.SetstringAsString(ColumnNames.Remark, value);
            }
        }

        public virtual string s_StoreID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.StoreID) ? string.Empty : base.GetintAsString(ColumnNames.StoreID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.StoreID);
                else
                    this.StoreID = base.SetintAsString(ColumnNames.StoreID, value);
            }
        }

        public virtual string s_LocalBatchNo
        {
            get
            {
                return this.IsColumnNull(ColumnNames.LocalBatchNo) ? string.Empty : base.GetstringAsString(ColumnNames.LocalBatchNo);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.LocalBatchNo);
                else
                    this.LocalBatchNo = base.SetstringAsString(ColumnNames.LocalBatchNo, value);
            }
        }

        public virtual string s_RefNo
        {
            get
            {
                return this.IsColumnNull(ColumnNames.RefNo) ? string.Empty : base.GetstringAsString(ColumnNames.RefNo);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.RefNo);
                else
                    this.RefNo = base.SetstringAsString(ColumnNames.RefNo, value);
            }
        }

        public virtual string s_Cost
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Cost) ? string.Empty : base.GetdoubleAsString(ColumnNames.Cost);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Cost);
                else
                    this.Cost = base.SetdoubleAsString(ColumnNames.Cost, value);
            }
        }

        public virtual string s_IsApproved
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IsApproved) ? string.Empty : base.GetboolAsString(ColumnNames.IsApproved);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IsApproved);
                else
                    this.IsApproved = base.SetboolAsString(ColumnNames.IsApproved, value);
            }
        }

        public virtual string s_ManufacturerId
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ManufacturerId) ? string.Empty : base.GetintAsString(ColumnNames.ManufacturerId);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ManufacturerId);
                else
                    this.ManufacturerId = base.SetintAsString(ColumnNames.ManufacturerId, value);
            }
        }

        public virtual string s_QuantityLeft
        {
            get
            {
                return this.IsColumnNull(ColumnNames.QuantityLeft) ? string.Empty : base.GetdecimalAsString(ColumnNames.QuantityLeft);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.QuantityLeft);
                else
                    this.QuantityLeft = base.SetdecimalAsString(ColumnNames.QuantityLeft, value);
            }
        }

        public virtual string s_NoOfPack
        {
            get
            {
                return this.IsColumnNull(ColumnNames.NoOfPack) ? string.Empty : base.GetdecimalAsString(ColumnNames.NoOfPack);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.NoOfPack);
                else
                    this.NoOfPack = base.SetdecimalAsString(ColumnNames.NoOfPack, value);
            }
        }

        public virtual string s_QtyPerPack
        {
            get
            {
                return this.IsColumnNull(ColumnNames.QtyPerPack) ? string.Empty : base.GetintAsString(ColumnNames.QtyPerPack);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.QtyPerPack);
                else
                    this.QtyPerPack = base.SetintAsString(ColumnNames.QtyPerPack, value);
            }
        }

        public virtual string s_EurDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.EurDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.EurDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.EurDate);
                else
                    this.EurDate = base.SetDateTimeAsString(ColumnNames.EurDate, value);
            }
        }

        public virtual string s_BoxLevel
        {
            get
            {
                return this.IsColumnNull(ColumnNames.BoxLevel) ? string.Empty : base.GetintAsString(ColumnNames.BoxLevel);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.BoxLevel);
                else
                    this.BoxLevel = base.SetintAsString(ColumnNames.BoxLevel, value);
            }
        }

        public virtual string s_SellingPrice
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SellingPrice) ? string.Empty : base.GetdoubleAsString(ColumnNames.SellingPrice);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SellingPrice);
                else
                    this.SellingPrice = base.SetdoubleAsString(ColumnNames.SellingPrice, value);
            }
        }

        public virtual string s_PricePerPack
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PricePerPack) ? string.Empty : base.GetdoubleAsString(ColumnNames.PricePerPack);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PricePerPack);
                else
                    this.PricePerPack = base.SetdoubleAsString(ColumnNames.PricePerPack, value);
            }
        }

        public virtual string s_UnitID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.UnitID) ? string.Empty : base.GetintAsString(ColumnNames.UnitID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.UnitID);
                else
                    this.UnitID = base.SetintAsString(ColumnNames.UnitID, value);
            }
        }

        public virtual string s_DeletedBy
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DeletedBy) ? string.Empty : base.GetintAsString(ColumnNames.DeletedBy);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DeletedBy);
                else
                    this.DeletedBy = base.SetintAsString(ColumnNames.DeletedBy, value);
            }
        }

        public virtual string s_DateDeleted
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DateDeleted) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateDeleted);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DateDeleted);
                else
                    this.DateDeleted = base.SetDateTimeAsString(ColumnNames.DateDeleted, value);
            }
        }

        public virtual string s_DeliveryNote
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DeliveryNote) ? string.Empty : base.GetboolAsString(ColumnNames.DeliveryNote);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DeliveryNote);
                else
                    this.DeliveryNote = base.SetboolAsString(ColumnNames.DeliveryNote, value);
            }
        }

        public virtual string s_Confirmed
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Confirmed) ? string.Empty : base.GetboolAsString(ColumnNames.Confirmed);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Confirmed);
                else
                    this.Confirmed = base.SetboolAsString(ColumnNames.Confirmed, value);
            }
        }

        public virtual string s_ConfirmedByUserID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ConfirmedByUserID) ? string.Empty : base.GetintAsString(ColumnNames.ConfirmedByUserID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ConfirmedByUserID);
                else
                    this.ConfirmedByUserID = base.SetintAsString(ColumnNames.ConfirmedByUserID, value);
            }
        }

        public virtual string s_ConfirmedDateTime
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ConfirmedDateTime) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ConfirmedDateTime);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ConfirmedDateTime);
                else
                    this.ConfirmedDateTime = base.SetDateTimeAsString(ColumnNames.ConfirmedDateTime, value);
            }
        }

        public virtual string s_ReturnedStock
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ReturnedStock) ? string.Empty : base.GetboolAsString(ColumnNames.ReturnedStock);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ReturnedStock);
                else
                    this.ReturnedStock = base.SetboolAsString(ColumnNames.ReturnedStock, value);
            }
        }

        public virtual string s_ReturnedFromIssueDocID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ReturnedFromIssueDocID) ? string.Empty : base.GetintAsString(ColumnNames.ReturnedFromIssueDocID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ReturnedFromIssueDocID);
                else
                    this.ReturnedFromIssueDocID = base.SetintAsString(ColumnNames.ReturnedFromIssueDocID, value);
            }
        }

        public virtual string s_ReceiptID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ReceiptID) ? string.Empty : base.GetintAsString(ColumnNames.ReceiptID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ReceiptID);
                else
                    this.ReceiptID = base.SetintAsString(ColumnNames.ReceiptID, value);
            }
        }

        public virtual string s_Margin
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Margin) ? string.Empty : base.GetdoubleAsString(ColumnNames.Margin);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Margin);
                else
                    this.Margin = base.SetdoubleAsString(ColumnNames.Margin, value);
            }
        }

        public virtual string s_Insurance
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Insurance) ? string.Empty : base.GetdoubleAsString(ColumnNames.Insurance);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Insurance);
                else
                    this.Insurance = base.SetdoubleAsString(ColumnNames.Insurance, value);
            }
        }

        public virtual string s_InvoicedNoOfPack
        {
            get
            {
                return this.IsColumnNull(ColumnNames.InvoicedNoOfPack) ? string.Empty : base.GetdecimalAsString(ColumnNames.InvoicedNoOfPack);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.InvoicedNoOfPack);
                else
                    this.InvoicedNoOfPack = base.SetdecimalAsString(ColumnNames.InvoicedNoOfPack, value);
            }
        }

        public virtual string s_ShortageReasonID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ShortageReasonID) ? string.Empty : base.GetintAsString(ColumnNames.ShortageReasonID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ShortageReasonID);
                else
                    this.ShortageReasonID = base.SetintAsString(ColumnNames.ShortageReasonID, value);
            }
        }

        public virtual string s_UnitCost
        {
            get
            {
                return this.IsColumnNull(ColumnNames.UnitCost) ? string.Empty : base.GetdecimalAsString(ColumnNames.UnitCost);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.UnitCost);
                else
                    this.UnitCost = base.SetdecimalAsString(ColumnNames.UnitCost, value);
            }
        }

        public virtual string s_PhysicalStoreID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PhysicalStoreID) ? string.Empty : base.GetintAsString(ColumnNames.PhysicalStoreID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PhysicalStoreID);
                else
                    this.PhysicalStoreID = base.SetintAsString(ColumnNames.PhysicalStoreID, value);
            }
        }

        public virtual string s_InventoryPeriodID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.InventoryPeriodID) ? string.Empty : base.GetintAsString(ColumnNames.InventoryPeriodID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.InventoryPeriodID);
                else
                    this.InventoryPeriodID = base.SetintAsString(ColumnNames.InventoryPeriodID, value);
            }
        }

        public virtual string s_IsDamaged
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IsDamaged) ? string.Empty : base.GetboolAsString(ColumnNames.IsDamaged);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IsDamaged);
                else
                    this.IsDamaged = base.SetboolAsString(ColumnNames.IsDamaged, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter ID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter BatchNo
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.BatchNo, Parameters.BatchNo);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ItemID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ItemID, Parameters.ItemID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SupplierID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SupplierID, Parameters.SupplierID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Quantity
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Quantity, Parameters.Quantity);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Date
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Date, Parameters.Date);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ExpDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ExpDate, Parameters.ExpDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Out
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Out, Parameters.Out);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ReceivedStatus
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ReceivedStatus, Parameters.ReceivedStatus);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ReceivedBy
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ReceivedBy, Parameters.ReceivedBy);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Remark
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Remark, Parameters.Remark);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter StoreID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.StoreID, Parameters.StoreID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter LocalBatchNo
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.LocalBatchNo, Parameters.LocalBatchNo);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter RefNo
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.RefNo, Parameters.RefNo);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Cost
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Cost, Parameters.Cost);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IsApproved
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IsApproved, Parameters.IsApproved);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ManufacturerId
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ManufacturerId, Parameters.ManufacturerId);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter QuantityLeft
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.QuantityLeft, Parameters.QuantityLeft);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter NoOfPack
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.NoOfPack, Parameters.NoOfPack);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter QtyPerPack
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.QtyPerPack, Parameters.QtyPerPack);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter EurDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.EurDate, Parameters.EurDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter BoxLevel
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.BoxLevel, Parameters.BoxLevel);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SellingPrice
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SellingPrice, Parameters.SellingPrice);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PricePerPack
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PricePerPack, Parameters.PricePerPack);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter UnitID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.UnitID, Parameters.UnitID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DeletedBy
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DeletedBy, Parameters.DeletedBy);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DateDeleted
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DateDeleted, Parameters.DateDeleted);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DeliveryNote
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DeliveryNote, Parameters.DeliveryNote);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Confirmed
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Confirmed, Parameters.Confirmed);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ConfirmedByUserID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ConfirmedByUserID, Parameters.ConfirmedByUserID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ConfirmedDateTime
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ConfirmedDateTime, Parameters.ConfirmedDateTime);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ReturnedStock
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ReturnedStock, Parameters.ReturnedStock);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ReturnedFromIssueDocID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ReturnedFromIssueDocID, Parameters.ReturnedFromIssueDocID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ReceiptID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ReceiptID, Parameters.ReceiptID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Margin
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Margin, Parameters.Margin);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Insurance
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Insurance, Parameters.Insurance);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter InvoicedNoOfPack
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.InvoicedNoOfPack, Parameters.InvoicedNoOfPack);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ShortageReasonID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ShortageReasonID, Parameters.ShortageReasonID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter UnitCost
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.UnitCost, Parameters.UnitCost);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PhysicalStoreID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PhysicalStoreID, Parameters.PhysicalStoreID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter InventoryPeriodID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.InventoryPeriodID, Parameters.InventoryPeriodID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IsDamaged
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IsDamaged, Parameters.IsDamaged);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public WhereParameter BatchNo
            {
                get
                {
                    if (_BatchNo_W == null)
                    {
                        _BatchNo_W = TearOff.BatchNo;
                    }
                    return _BatchNo_W;
                }
            }

            public WhereParameter ItemID
            {
                get
                {
                    if (_ItemID_W == null)
                    {
                        _ItemID_W = TearOff.ItemID;
                    }
                    return _ItemID_W;
                }
            }

            public WhereParameter SupplierID
            {
                get
                {
                    if (_SupplierID_W == null)
                    {
                        _SupplierID_W = TearOff.SupplierID;
                    }
                    return _SupplierID_W;
                }
            }

            public WhereParameter Quantity
            {
                get
                {
                    if (_Quantity_W == null)
                    {
                        _Quantity_W = TearOff.Quantity;
                    }
                    return _Quantity_W;
                }
            }

            public WhereParameter Date
            {
                get
                {
                    if (_Date_W == null)
                    {
                        _Date_W = TearOff.Date;
                    }
                    return _Date_W;
                }
            }

            public WhereParameter ExpDate
            {
                get
                {
                    if (_ExpDate_W == null)
                    {
                        _ExpDate_W = TearOff.ExpDate;
                    }
                    return _ExpDate_W;
                }
            }

            public WhereParameter Out
            {
                get
                {
                    if (_Out_W == null)
                    {
                        _Out_W = TearOff.Out;
                    }
                    return _Out_W;
                }
            }

            public WhereParameter ReceivedStatus
            {
                get
                {
                    if (_ReceivedStatus_W == null)
                    {
                        _ReceivedStatus_W = TearOff.ReceivedStatus;
                    }
                    return _ReceivedStatus_W;
                }
            }

            public WhereParameter ReceivedBy
            {
                get
                {
                    if (_ReceivedBy_W == null)
                    {
                        _ReceivedBy_W = TearOff.ReceivedBy;
                    }
                    return _ReceivedBy_W;
                }
            }

            public WhereParameter Remark
            {
                get
                {
                    if (_Remark_W == null)
                    {
                        _Remark_W = TearOff.Remark;
                    }
                    return _Remark_W;
                }
            }

            public WhereParameter StoreID
            {
                get
                {
                    if (_StoreID_W == null)
                    {
                        _StoreID_W = TearOff.StoreID;
                    }
                    return _StoreID_W;
                }
            }

            public WhereParameter LocalBatchNo
            {
                get
                {
                    if (_LocalBatchNo_W == null)
                    {
                        _LocalBatchNo_W = TearOff.LocalBatchNo;
                    }
                    return _LocalBatchNo_W;
                }
            }

            public WhereParameter RefNo
            {
                get
                {
                    if (_RefNo_W == null)
                    {
                        _RefNo_W = TearOff.RefNo;
                    }
                    return _RefNo_W;
                }
            }

            public WhereParameter Cost
            {
                get
                {
                    if (_Cost_W == null)
                    {
                        _Cost_W = TearOff.Cost;
                    }
                    return _Cost_W;
                }
            }

            public WhereParameter IsApproved
            {
                get
                {
                    if (_IsApproved_W == null)
                    {
                        _IsApproved_W = TearOff.IsApproved;
                    }
                    return _IsApproved_W;
                }
            }

            public WhereParameter ManufacturerId
            {
                get
                {
                    if (_ManufacturerId_W == null)
                    {
                        _ManufacturerId_W = TearOff.ManufacturerId;
                    }
                    return _ManufacturerId_W;
                }
            }

            public WhereParameter QuantityLeft
            {
                get
                {
                    if (_QuantityLeft_W == null)
                    {
                        _QuantityLeft_W = TearOff.QuantityLeft;
                    }
                    return _QuantityLeft_W;
                }
            }

            public WhereParameter NoOfPack
            {
                get
                {
                    if (_NoOfPack_W == null)
                    {
                        _NoOfPack_W = TearOff.NoOfPack;
                    }
                    return _NoOfPack_W;
                }
            }

            public WhereParameter QtyPerPack
            {
                get
                {
                    if (_QtyPerPack_W == null)
                    {
                        _QtyPerPack_W = TearOff.QtyPerPack;
                    }
                    return _QtyPerPack_W;
                }
            }

            public WhereParameter EurDate
            {
                get
                {
                    if (_EurDate_W == null)
                    {
                        _EurDate_W = TearOff.EurDate;
                    }
                    return _EurDate_W;
                }
            }

            public WhereParameter BoxLevel
            {
                get
                {
                    if (_BoxLevel_W == null)
                    {
                        _BoxLevel_W = TearOff.BoxLevel;
                    }
                    return _BoxLevel_W;
                }
            }

            public WhereParameter SellingPrice
            {
                get
                {
                    if (_SellingPrice_W == null)
                    {
                        _SellingPrice_W = TearOff.SellingPrice;
                    }
                    return _SellingPrice_W;
                }
            }

            public WhereParameter PricePerPack
            {
                get
                {
                    if (_PricePerPack_W == null)
                    {
                        _PricePerPack_W = TearOff.PricePerPack;
                    }
                    return _PricePerPack_W;
                }
            }

            public WhereParameter UnitID
            {
                get
                {
                    if (_UnitID_W == null)
                    {
                        _UnitID_W = TearOff.UnitID;
                    }
                    return _UnitID_W;
                }
            }

            public WhereParameter DeletedBy
            {
                get
                {
                    if (_DeletedBy_W == null)
                    {
                        _DeletedBy_W = TearOff.DeletedBy;
                    }
                    return _DeletedBy_W;
                }
            }

            public WhereParameter DateDeleted
            {
                get
                {
                    if (_DateDeleted_W == null)
                    {
                        _DateDeleted_W = TearOff.DateDeleted;
                    }
                    return _DateDeleted_W;
                }
            }

            public WhereParameter DeliveryNote
            {
                get
                {
                    if (_DeliveryNote_W == null)
                    {
                        _DeliveryNote_W = TearOff.DeliveryNote;
                    }
                    return _DeliveryNote_W;
                }
            }

            public WhereParameter Confirmed
            {
                get
                {
                    if (_Confirmed_W == null)
                    {
                        _Confirmed_W = TearOff.Confirmed;
                    }
                    return _Confirmed_W;
                }
            }

            public WhereParameter ConfirmedByUserID
            {
                get
                {
                    if (_ConfirmedByUserID_W == null)
                    {
                        _ConfirmedByUserID_W = TearOff.ConfirmedByUserID;
                    }
                    return _ConfirmedByUserID_W;
                }
            }

            public WhereParameter ConfirmedDateTime
            {
                get
                {
                    if (_ConfirmedDateTime_W == null)
                    {
                        _ConfirmedDateTime_W = TearOff.ConfirmedDateTime;
                    }
                    return _ConfirmedDateTime_W;
                }
            }

            public WhereParameter ReturnedStock
            {
                get
                {
                    if (_ReturnedStock_W == null)
                    {
                        _ReturnedStock_W = TearOff.ReturnedStock;
                    }
                    return _ReturnedStock_W;
                }
            }

            public WhereParameter ReturnedFromIssueDocID
            {
                get
                {
                    if (_ReturnedFromIssueDocID_W == null)
                    {
                        _ReturnedFromIssueDocID_W = TearOff.ReturnedFromIssueDocID;
                    }
                    return _ReturnedFromIssueDocID_W;
                }
            }

            public WhereParameter ReceiptID
            {
                get
                {
                    if (_ReceiptID_W == null)
                    {
                        _ReceiptID_W = TearOff.ReceiptID;
                    }
                    return _ReceiptID_W;
                }
            }

            public WhereParameter Margin
            {
                get
                {
                    if (_Margin_W == null)
                    {
                        _Margin_W = TearOff.Margin;
                    }
                    return _Margin_W;
                }
            }

            public WhereParameter Insurance
            {
                get
                {
                    if (_Insurance_W == null)
                    {
                        _Insurance_W = TearOff.Insurance;
                    }
                    return _Insurance_W;
                }
            }

            public WhereParameter InvoicedNoOfPack
            {
                get
                {
                    if (_InvoicedNoOfPack_W == null)
                    {
                        _InvoicedNoOfPack_W = TearOff.InvoicedNoOfPack;
                    }
                    return _InvoicedNoOfPack_W;
                }
            }

            public WhereParameter ShortageReasonID
            {
                get
                {
                    if (_ShortageReasonID_W == null)
                    {
                        _ShortageReasonID_W = TearOff.ShortageReasonID;
                    }
                    return _ShortageReasonID_W;
                }
            }

            public WhereParameter UnitCost
            {
                get
                {
                    if (_UnitCost_W == null)
                    {
                        _UnitCost_W = TearOff.UnitCost;
                    }
                    return _UnitCost_W;
                }
            }

            public WhereParameter PhysicalStoreID
            {
                get
                {
                    if (_PhysicalStoreID_W == null)
                    {
                        _PhysicalStoreID_W = TearOff.PhysicalStoreID;
                    }
                    return _PhysicalStoreID_W;
                }
            }

            public WhereParameter InventoryPeriodID
            {
                get
                {
                    if (_InventoryPeriodID_W == null)
                    {
                        _InventoryPeriodID_W = TearOff.InventoryPeriodID;
                    }
                    return _InventoryPeriodID_W;
                }
            }

            public WhereParameter IsDamaged
            {
                get
                {
                    if (_IsDamaged_W == null)
                    {
                        _IsDamaged_W = TearOff.IsDamaged;
                    }
                    return _IsDamaged_W;
                }
            }

            private WhereParameter _ID_W = null;
            private WhereParameter _BatchNo_W = null;
            private WhereParameter _ItemID_W = null;
            private WhereParameter _SupplierID_W = null;
            private WhereParameter _Quantity_W = null;
            private WhereParameter _Date_W = null;
            private WhereParameter _ExpDate_W = null;
            private WhereParameter _Out_W = null;
            private WhereParameter _ReceivedStatus_W = null;
            private WhereParameter _ReceivedBy_W = null;
            private WhereParameter _Remark_W = null;
            private WhereParameter _StoreID_W = null;
            private WhereParameter _LocalBatchNo_W = null;
            private WhereParameter _RefNo_W = null;
            private WhereParameter _Cost_W = null;
            private WhereParameter _IsApproved_W = null;
            private WhereParameter _ManufacturerId_W = null;
            private WhereParameter _QuantityLeft_W = null;
            private WhereParameter _NoOfPack_W = null;
            private WhereParameter _QtyPerPack_W = null;
            private WhereParameter _EurDate_W = null;
            private WhereParameter _BoxLevel_W = null;
            private WhereParameter _SellingPrice_W = null;
            private WhereParameter _PricePerPack_W = null;
            private WhereParameter _UnitID_W = null;
            private WhereParameter _DeletedBy_W = null;
            private WhereParameter _DateDeleted_W = null;
            private WhereParameter _DeliveryNote_W = null;
            private WhereParameter _Confirmed_W = null;
            private WhereParameter _ConfirmedByUserID_W = null;
            private WhereParameter _ConfirmedDateTime_W = null;
            private WhereParameter _ReturnedStock_W = null;
            private WhereParameter _ReturnedFromIssueDocID_W = null;
            private WhereParameter _ReceiptID_W = null;
            private WhereParameter _Margin_W = null;
            private WhereParameter _Insurance_W = null;
            private WhereParameter _InvoicedNoOfPack_W = null;
            private WhereParameter _ShortageReasonID_W = null;
            private WhereParameter _UnitCost_W = null;
            private WhereParameter _PhysicalStoreID_W = null;
            private WhereParameter _InventoryPeriodID_W = null;
            private WhereParameter _IsDamaged_W = null;

            public void WhereClauseReset()
            {
                _ID_W = null;
                _BatchNo_W = null;
                _ItemID_W = null;
                _SupplierID_W = null;
                _Quantity_W = null;
                _Date_W = null;
                _ExpDate_W = null;
                _Out_W = null;
                _ReceivedStatus_W = null;
                _ReceivedBy_W = null;
                _Remark_W = null;
                _StoreID_W = null;
                _LocalBatchNo_W = null;
                _RefNo_W = null;
                _Cost_W = null;
                _IsApproved_W = null;
                _ManufacturerId_W = null;
                _QuantityLeft_W = null;
                _NoOfPack_W = null;
                _QtyPerPack_W = null;
                _EurDate_W = null;
                _BoxLevel_W = null;
                _SellingPrice_W = null;
                _PricePerPack_W = null;
                _UnitID_W = null;
                _DeletedBy_W = null;
                _DateDeleted_W = null;
                _DeliveryNote_W = null;
                _Confirmed_W = null;
                _ConfirmedByUserID_W = null;
                _ConfirmedDateTime_W = null;
                _ReturnedStock_W = null;
                _ReturnedFromIssueDocID_W = null;
                _ReceiptID_W = null;
                _Margin_W = null;
                _Insurance_W = null;
                _InvoicedNoOfPack_W = null;
                _ShortageReasonID_W = null;
                _UnitCost_W = null;
                _PhysicalStoreID_W = null;
                _InventoryPeriodID_W = null;
                _IsDamaged_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter ID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter BatchNo
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.BatchNo, Parameters.BatchNo);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ItemID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ItemID, Parameters.ItemID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SupplierID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SupplierID, Parameters.SupplierID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Quantity
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Quantity, Parameters.Quantity);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Date
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Date, Parameters.Date);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ExpDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExpDate, Parameters.ExpDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Out
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Out, Parameters.Out);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ReceivedStatus
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceivedStatus, Parameters.ReceivedStatus);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ReceivedBy
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceivedBy, Parameters.ReceivedBy);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Remark
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Remark, Parameters.Remark);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter StoreID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.StoreID, Parameters.StoreID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter LocalBatchNo
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.LocalBatchNo, Parameters.LocalBatchNo);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter RefNo
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.RefNo, Parameters.RefNo);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Cost
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Cost, Parameters.Cost);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IsApproved
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsApproved, Parameters.IsApproved);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ManufacturerId
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ManufacturerId, Parameters.ManufacturerId);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter QuantityLeft
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.QuantityLeft, Parameters.QuantityLeft);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter NoOfPack
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.NoOfPack, Parameters.NoOfPack);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter QtyPerPack
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.QtyPerPack, Parameters.QtyPerPack);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter EurDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.EurDate, Parameters.EurDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter BoxLevel
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.BoxLevel, Parameters.BoxLevel);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SellingPrice
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SellingPrice, Parameters.SellingPrice);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PricePerPack
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PricePerPack, Parameters.PricePerPack);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter UnitID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitID, Parameters.UnitID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DeletedBy
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeletedBy, Parameters.DeletedBy);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DateDeleted
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateDeleted, Parameters.DateDeleted);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DeliveryNote
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryNote, Parameters.DeliveryNote);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Confirmed
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Confirmed, Parameters.Confirmed);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ConfirmedByUserID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ConfirmedByUserID, Parameters.ConfirmedByUserID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ConfirmedDateTime
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ConfirmedDateTime, Parameters.ConfirmedDateTime);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ReturnedStock
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReturnedStock, Parameters.ReturnedStock);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ReturnedFromIssueDocID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReturnedFromIssueDocID, Parameters.ReturnedFromIssueDocID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ReceiptID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceiptID, Parameters.ReceiptID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Margin
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Margin, Parameters.Margin);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Insurance
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Insurance, Parameters.Insurance);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter InvoicedNoOfPack
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.InvoicedNoOfPack, Parameters.InvoicedNoOfPack);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ShortageReasonID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShortageReasonID, Parameters.ShortageReasonID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter UnitCost
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitCost, Parameters.UnitCost);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PhysicalStoreID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PhysicalStoreID, Parameters.PhysicalStoreID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter InventoryPeriodID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.InventoryPeriodID, Parameters.InventoryPeriodID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IsDamaged
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsDamaged, Parameters.IsDamaged);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public AggregateParameter BatchNo
            {
                get
                {
                    if (_BatchNo_W == null)
                    {
                        _BatchNo_W = TearOff.BatchNo;
                    }
                    return _BatchNo_W;
                }
            }

            public AggregateParameter ItemID
            {
                get
                {
                    if (_ItemID_W == null)
                    {
                        _ItemID_W = TearOff.ItemID;
                    }
                    return _ItemID_W;
                }
            }

            public AggregateParameter SupplierID
            {
                get
                {
                    if (_SupplierID_W == null)
                    {
                        _SupplierID_W = TearOff.SupplierID;
                    }
                    return _SupplierID_W;
                }
            }

            public AggregateParameter Quantity
            {
                get
                {
                    if (_Quantity_W == null)
                    {
                        _Quantity_W = TearOff.Quantity;
                    }
                    return _Quantity_W;
                }
            }

            public AggregateParameter Date
            {
                get
                {
                    if (_Date_W == null)
                    {
                        _Date_W = TearOff.Date;
                    }
                    return _Date_W;
                }
            }

            public AggregateParameter ExpDate
            {
                get
                {
                    if (_ExpDate_W == null)
                    {
                        _ExpDate_W = TearOff.ExpDate;
                    }
                    return _ExpDate_W;
                }
            }

            public AggregateParameter Out
            {
                get
                {
                    if (_Out_W == null)
                    {
                        _Out_W = TearOff.Out;
                    }
                    return _Out_W;
                }
            }

            public AggregateParameter ReceivedStatus
            {
                get
                {
                    if (_ReceivedStatus_W == null)
                    {
                        _ReceivedStatus_W = TearOff.ReceivedStatus;
                    }
                    return _ReceivedStatus_W;
                }
            }

            public AggregateParameter ReceivedBy
            {
                get
                {
                    if (_ReceivedBy_W == null)
                    {
                        _ReceivedBy_W = TearOff.ReceivedBy;
                    }
                    return _ReceivedBy_W;
                }
            }

            public AggregateParameter Remark
            {
                get
                {
                    if (_Remark_W == null)
                    {
                        _Remark_W = TearOff.Remark;
                    }
                    return _Remark_W;
                }
            }

            public AggregateParameter StoreID
            {
                get
                {
                    if (_StoreID_W == null)
                    {
                        _StoreID_W = TearOff.StoreID;
                    }
                    return _StoreID_W;
                }
            }

            public AggregateParameter LocalBatchNo
            {
                get
                {
                    if (_LocalBatchNo_W == null)
                    {
                        _LocalBatchNo_W = TearOff.LocalBatchNo;
                    }
                    return _LocalBatchNo_W;
                }
            }

            public AggregateParameter RefNo
            {
                get
                {
                    if (_RefNo_W == null)
                    {
                        _RefNo_W = TearOff.RefNo;
                    }
                    return _RefNo_W;
                }
            }

            public AggregateParameter Cost
            {
                get
                {
                    if (_Cost_W == null)
                    {
                        _Cost_W = TearOff.Cost;
                    }
                    return _Cost_W;
                }
            }

            public AggregateParameter IsApproved
            {
                get
                {
                    if (_IsApproved_W == null)
                    {
                        _IsApproved_W = TearOff.IsApproved;
                    }
                    return _IsApproved_W;
                }
            }

            public AggregateParameter ManufacturerId
            {
                get
                {
                    if (_ManufacturerId_W == null)
                    {
                        _ManufacturerId_W = TearOff.ManufacturerId;
                    }
                    return _ManufacturerId_W;
                }
            }

            public AggregateParameter QuantityLeft
            {
                get
                {
                    if (_QuantityLeft_W == null)
                    {
                        _QuantityLeft_W = TearOff.QuantityLeft;
                    }
                    return _QuantityLeft_W;
                }
            }

            public AggregateParameter NoOfPack
            {
                get
                {
                    if (_NoOfPack_W == null)
                    {
                        _NoOfPack_W = TearOff.NoOfPack;
                    }
                    return _NoOfPack_W;
                }
            }

            public AggregateParameter QtyPerPack
            {
                get
                {
                    if (_QtyPerPack_W == null)
                    {
                        _QtyPerPack_W = TearOff.QtyPerPack;
                    }
                    return _QtyPerPack_W;
                }
            }

            public AggregateParameter EurDate
            {
                get
                {
                    if (_EurDate_W == null)
                    {
                        _EurDate_W = TearOff.EurDate;
                    }
                    return _EurDate_W;
                }
            }

            public AggregateParameter BoxLevel
            {
                get
                {
                    if (_BoxLevel_W == null)
                    {
                        _BoxLevel_W = TearOff.BoxLevel;
                    }
                    return _BoxLevel_W;
                }
            }

            public AggregateParameter SellingPrice
            {
                get
                {
                    if (_SellingPrice_W == null)
                    {
                        _SellingPrice_W = TearOff.SellingPrice;
                    }
                    return _SellingPrice_W;
                }
            }

            public AggregateParameter PricePerPack
            {
                get
                {
                    if (_PricePerPack_W == null)
                    {
                        _PricePerPack_W = TearOff.PricePerPack;
                    }
                    return _PricePerPack_W;
                }
            }

            public AggregateParameter UnitID
            {
                get
                {
                    if (_UnitID_W == null)
                    {
                        _UnitID_W = TearOff.UnitID;
                    }
                    return _UnitID_W;
                }
            }

            public AggregateParameter DeletedBy
            {
                get
                {
                    if (_DeletedBy_W == null)
                    {
                        _DeletedBy_W = TearOff.DeletedBy;
                    }
                    return _DeletedBy_W;
                }
            }

            public AggregateParameter DateDeleted
            {
                get
                {
                    if (_DateDeleted_W == null)
                    {
                        _DateDeleted_W = TearOff.DateDeleted;
                    }
                    return _DateDeleted_W;
                }
            }

            public AggregateParameter DeliveryNote
            {
                get
                {
                    if (_DeliveryNote_W == null)
                    {
                        _DeliveryNote_W = TearOff.DeliveryNote;
                    }
                    return _DeliveryNote_W;
                }
            }

            public AggregateParameter Confirmed
            {
                get
                {
                    if (_Confirmed_W == null)
                    {
                        _Confirmed_W = TearOff.Confirmed;
                    }
                    return _Confirmed_W;
                }
            }

            public AggregateParameter ConfirmedByUserID
            {
                get
                {
                    if (_ConfirmedByUserID_W == null)
                    {
                        _ConfirmedByUserID_W = TearOff.ConfirmedByUserID;
                    }
                    return _ConfirmedByUserID_W;
                }
            }

            public AggregateParameter ConfirmedDateTime
            {
                get
                {
                    if (_ConfirmedDateTime_W == null)
                    {
                        _ConfirmedDateTime_W = TearOff.ConfirmedDateTime;
                    }
                    return _ConfirmedDateTime_W;
                }
            }

            public AggregateParameter ReturnedStock
            {
                get
                {
                    if (_ReturnedStock_W == null)
                    {
                        _ReturnedStock_W = TearOff.ReturnedStock;
                    }
                    return _ReturnedStock_W;
                }
            }

            public AggregateParameter ReturnedFromIssueDocID
            {
                get
                {
                    if (_ReturnedFromIssueDocID_W == null)
                    {
                        _ReturnedFromIssueDocID_W = TearOff.ReturnedFromIssueDocID;
                    }
                    return _ReturnedFromIssueDocID_W;
                }
            }

            public AggregateParameter ReceiptID
            {
                get
                {
                    if (_ReceiptID_W == null)
                    {
                        _ReceiptID_W = TearOff.ReceiptID;
                    }
                    return _ReceiptID_W;
                }
            }

            public AggregateParameter Margin
            {
                get
                {
                    if (_Margin_W == null)
                    {
                        _Margin_W = TearOff.Margin;
                    }
                    return _Margin_W;
                }
            }

            public AggregateParameter Insurance
            {
                get
                {
                    if (_Insurance_W == null)
                    {
                        _Insurance_W = TearOff.Insurance;
                    }
                    return _Insurance_W;
                }
            }

            public AggregateParameter InvoicedNoOfPack
            {
                get
                {
                    if (_InvoicedNoOfPack_W == null)
                    {
                        _InvoicedNoOfPack_W = TearOff.InvoicedNoOfPack;
                    }
                    return _InvoicedNoOfPack_W;
                }
            }

            public AggregateParameter ShortageReasonID
            {
                get
                {
                    if (_ShortageReasonID_W == null)
                    {
                        _ShortageReasonID_W = TearOff.ShortageReasonID;
                    }
                    return _ShortageReasonID_W;
                }
            }

            public AggregateParameter UnitCost
            {
                get
                {
                    if (_UnitCost_W == null)
                    {
                        _UnitCost_W = TearOff.UnitCost;
                    }
                    return _UnitCost_W;
                }
            }

            public AggregateParameter PhysicalStoreID
            {
                get
                {
                    if (_PhysicalStoreID_W == null)
                    {
                        _PhysicalStoreID_W = TearOff.PhysicalStoreID;
                    }
                    return _PhysicalStoreID_W;
                }
            }

            public AggregateParameter InventoryPeriodID
            {
                get
                {
                    if (_InventoryPeriodID_W == null)
                    {
                        _InventoryPeriodID_W = TearOff.InventoryPeriodID;
                    }
                    return _InventoryPeriodID_W;
                }
            }

            public AggregateParameter IsDamaged
            {
                get
                {
                    if (_IsDamaged_W == null)
                    {
                        _IsDamaged_W = TearOff.IsDamaged;
                    }
                    return _IsDamaged_W;
                }
            }

            private AggregateParameter _ID_W = null;
            private AggregateParameter _BatchNo_W = null;
            private AggregateParameter _ItemID_W = null;
            private AggregateParameter _SupplierID_W = null;
            private AggregateParameter _Quantity_W = null;
            private AggregateParameter _Date_W = null;
            private AggregateParameter _ExpDate_W = null;
            private AggregateParameter _Out_W = null;
            private AggregateParameter _ReceivedStatus_W = null;
            private AggregateParameter _ReceivedBy_W = null;
            private AggregateParameter _Remark_W = null;
            private AggregateParameter _StoreID_W = null;
            private AggregateParameter _LocalBatchNo_W = null;
            private AggregateParameter _RefNo_W = null;
            private AggregateParameter _Cost_W = null;
            private AggregateParameter _IsApproved_W = null;
            private AggregateParameter _ManufacturerId_W = null;
            private AggregateParameter _QuantityLeft_W = null;
            private AggregateParameter _NoOfPack_W = null;
            private AggregateParameter _QtyPerPack_W = null;
            private AggregateParameter _EurDate_W = null;
            private AggregateParameter _BoxLevel_W = null;
            private AggregateParameter _SellingPrice_W = null;
            private AggregateParameter _PricePerPack_W = null;
            private AggregateParameter _UnitID_W = null;
            private AggregateParameter _DeletedBy_W = null;
            private AggregateParameter _DateDeleted_W = null;
            private AggregateParameter _DeliveryNote_W = null;
            private AggregateParameter _Confirmed_W = null;
            private AggregateParameter _ConfirmedByUserID_W = null;
            private AggregateParameter _ConfirmedDateTime_W = null;
            private AggregateParameter _ReturnedStock_W = null;
            private AggregateParameter _ReturnedFromIssueDocID_W = null;
            private AggregateParameter _ReceiptID_W = null;
            private AggregateParameter _Margin_W = null;
            private AggregateParameter _Insurance_W = null;
            private AggregateParameter _InvoicedNoOfPack_W = null;
            private AggregateParameter _ShortageReasonID_W = null;
            private AggregateParameter _UnitCost_W = null;
            private AggregateParameter _PhysicalStoreID_W = null;
            private AggregateParameter _InventoryPeriodID_W = null;
            private AggregateParameter _IsDamaged_W = null;

            public void AggregateClauseReset()
            {
                _ID_W = null;
                _BatchNo_W = null;
                _ItemID_W = null;
                _SupplierID_W = null;
                _Quantity_W = null;
                _Date_W = null;
                _ExpDate_W = null;
                _Out_W = null;
                _ReceivedStatus_W = null;
                _ReceivedBy_W = null;
                _Remark_W = null;
                _StoreID_W = null;
                _LocalBatchNo_W = null;
                _RefNo_W = null;
                _Cost_W = null;
                _IsApproved_W = null;
                _ManufacturerId_W = null;
                _QuantityLeft_W = null;
                _NoOfPack_W = null;
                _QtyPerPack_W = null;
                _EurDate_W = null;
                _BoxLevel_W = null;
                _SellingPrice_W = null;
                _PricePerPack_W = null;
                _UnitID_W = null;
                _DeletedBy_W = null;
                _DateDeleted_W = null;
                _DeliveryNote_W = null;
                _Confirmed_W = null;
                _ConfirmedByUserID_W = null;
                _ConfirmedDateTime_W = null;
                _ReturnedStock_W = null;
                _ReturnedFromIssueDocID_W = null;
                _ReceiptID_W = null;
                _Margin_W = null;
                _Insurance_W = null;
                _InvoicedNoOfPack_W = null;
                _ShortageReasonID_W = null;
                _UnitCost_W = null;
                _PhysicalStoreID_W = null;
                _InventoryPeriodID_W = null;
                _IsDamaged_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ReceiveDocDeletedInsert]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ReceiveDocDeletedUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ReceiveDocDeletedDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.BatchNo);
            p.SourceColumn = ColumnNames.BatchNo;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ItemID);
            p.SourceColumn = ColumnNames.ItemID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SupplierID);
            p.SourceColumn = ColumnNames.SupplierID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Quantity);
            p.SourceColumn = ColumnNames.Quantity;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Date);
            p.SourceColumn = ColumnNames.Date;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ExpDate);
            p.SourceColumn = ColumnNames.ExpDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Out);
            p.SourceColumn = ColumnNames.Out;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ReceivedStatus);
            p.SourceColumn = ColumnNames.ReceivedStatus;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ReceivedBy);
            p.SourceColumn = ColumnNames.ReceivedBy;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Remark);
            p.SourceColumn = ColumnNames.Remark;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.StoreID);
            p.SourceColumn = ColumnNames.StoreID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.LocalBatchNo);
            p.SourceColumn = ColumnNames.LocalBatchNo;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.RefNo);
            p.SourceColumn = ColumnNames.RefNo;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Cost);
            p.SourceColumn = ColumnNames.Cost;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IsApproved);
            p.SourceColumn = ColumnNames.IsApproved;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ManufacturerId);
            p.SourceColumn = ColumnNames.ManufacturerId;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.QuantityLeft);
            p.SourceColumn = ColumnNames.QuantityLeft;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.NoOfPack);
            p.SourceColumn = ColumnNames.NoOfPack;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.QtyPerPack);
            p.SourceColumn = ColumnNames.QtyPerPack;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.EurDate);
            p.SourceColumn = ColumnNames.EurDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.BoxLevel);
            p.SourceColumn = ColumnNames.BoxLevel;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SellingPrice);
            p.SourceColumn = ColumnNames.SellingPrice;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PricePerPack);
            p.SourceColumn = ColumnNames.PricePerPack;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.UnitID);
            p.SourceColumn = ColumnNames.UnitID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DeletedBy);
            p.SourceColumn = ColumnNames.DeletedBy;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DateDeleted);
            p.SourceColumn = ColumnNames.DateDeleted;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DeliveryNote);
            p.SourceColumn = ColumnNames.DeliveryNote;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Confirmed);
            p.SourceColumn = ColumnNames.Confirmed;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ConfirmedByUserID);
            p.SourceColumn = ColumnNames.ConfirmedByUserID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ConfirmedDateTime);
            p.SourceColumn = ColumnNames.ConfirmedDateTime;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ReturnedStock);
            p.SourceColumn = ColumnNames.ReturnedStock;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ReturnedFromIssueDocID);
            p.SourceColumn = ColumnNames.ReturnedFromIssueDocID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ReceiptID);
            p.SourceColumn = ColumnNames.ReceiptID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Margin);
            p.SourceColumn = ColumnNames.Margin;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Insurance);
            p.SourceColumn = ColumnNames.Insurance;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.InvoicedNoOfPack);
            p.SourceColumn = ColumnNames.InvoicedNoOfPack;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ShortageReasonID);
            p.SourceColumn = ColumnNames.ShortageReasonID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.UnitCost);
            p.SourceColumn = ColumnNames.UnitCost;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PhysicalStoreID);
            p.SourceColumn = ColumnNames.PhysicalStoreID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.InventoryPeriodID);
            p.SourceColumn = ColumnNames.InventoryPeriodID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IsDamaged);
            p.SourceColumn = ColumnNames.IsDamaged;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}
