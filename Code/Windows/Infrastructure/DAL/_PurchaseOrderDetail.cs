
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
    public abstract class _PurchaseOrderDetail : SqlClientEntity
    {
        public _PurchaseOrderDetail()
        {
            this.QuerySource = "PurchaseOrderDetail";
            this.MappingName = "PurchaseOrderDetail";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PurchaseOrderDetailLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int PurchaseOrderDetailID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.PurchaseOrderDetailID, PurchaseOrderDetailID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PurchaseOrderDetailLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter PurchaseOrderDetailID
            {
                get
                {
                    return new SqlParameter("@PurchaseOrderDetailID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter PurchaseOrderID
            {
                get
                {
                    return new SqlParameter("@PurchaseOrderID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ItemID
            {
                get
                {
                    return new SqlParameter("@ItemID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Quantity
            {
                get
                {
                    return new SqlParameter("@Quantity", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter Remark
            {
                get
                {
                    return new SqlParameter("@Remark", SqlDbType.NVarChar, 400);
                }
            }

            public static SqlParameter UnitOfIssueID
            {
                get
                {
                    return new SqlParameter("@UnitOfIssueID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter PreferredManufacturerID
            {
                get
                {
                    return new SqlParameter("@PreferredManufacturerID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Rowguid
            {
                get
                {
                    return new SqlParameter("@Rowguid", SqlDbType.UniqueIdentifier, 0);
                }
            }

            public static SqlParameter ApprovedQuantity
            {
                get
                {
                    return new SqlParameter("@ApprovedQuantity", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter Amount
            {
                get
                {
                    return new SqlParameter("@Amount", SqlDbType.Decimal, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string PurchaseOrderDetailID = "PurchaseOrderDetailID";
            public const string PurchaseOrderID = "PurchaseOrderID";
            public const string ItemID = "ItemID";
            public const string Quantity = "Quantity";
            public const string Remark = "Remark";
            public const string UnitOfIssueID = "UnitOfIssueID";
            public const string PreferredManufacturerID = "PreferredManufacturerID";
            public const string Rowguid = "rowguid";
            public const string ApprovedQuantity = "ApprovedQuantity";
            public const string Amount = "Amount";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[PurchaseOrderDetailID] = _PurchaseOrderDetail.PropertyNames.PurchaseOrderDetailID;
                    ht[PurchaseOrderID] = _PurchaseOrderDetail.PropertyNames.PurchaseOrderID;
                    ht[ItemID] = _PurchaseOrderDetail.PropertyNames.ItemID;
                    ht[Quantity] = _PurchaseOrderDetail.PropertyNames.Quantity;
                    ht[Remark] = _PurchaseOrderDetail.PropertyNames.Remark;
                    ht[UnitOfIssueID] = _PurchaseOrderDetail.PropertyNames.UnitOfIssueID;
                    ht[PreferredManufacturerID] = _PurchaseOrderDetail.PropertyNames.PreferredManufacturerID;
                    ht[Rowguid] = _PurchaseOrderDetail.PropertyNames.Rowguid;
                    ht[ApprovedQuantity] = _PurchaseOrderDetail.PropertyNames.ApprovedQuantity;
                    ht[Amount] = _PurchaseOrderDetail.PropertyNames.Amount;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string PurchaseOrderDetailID = "PurchaseOrderDetailID";
            public const string PurchaseOrderID = "PurchaseOrderID";
            public const string ItemID = "ItemID";
            public const string Quantity = "Quantity";
            public const string Remark = "Remark";
            public const string UnitOfIssueID = "UnitOfIssueID";
            public const string PreferredManufacturerID = "PreferredManufacturerID";
            public const string Rowguid = "Rowguid";
            public const string ApprovedQuantity = "ApprovedQuantity";
            public const string Amount = "Amount";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[PurchaseOrderDetailID] = _PurchaseOrderDetail.ColumnNames.PurchaseOrderDetailID;
                    ht[PurchaseOrderID] = _PurchaseOrderDetail.ColumnNames.PurchaseOrderID;
                    ht[ItemID] = _PurchaseOrderDetail.ColumnNames.ItemID;
                    ht[Quantity] = _PurchaseOrderDetail.ColumnNames.Quantity;
                    ht[Remark] = _PurchaseOrderDetail.ColumnNames.Remark;
                    ht[UnitOfIssueID] = _PurchaseOrderDetail.ColumnNames.UnitOfIssueID;
                    ht[PreferredManufacturerID] = _PurchaseOrderDetail.ColumnNames.PreferredManufacturerID;
                    ht[Rowguid] = _PurchaseOrderDetail.ColumnNames.Rowguid;
                    ht[ApprovedQuantity] = _PurchaseOrderDetail.ColumnNames.ApprovedQuantity;
                    ht[Amount] = _PurchaseOrderDetail.ColumnNames.Amount;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string PurchaseOrderDetailID = "s_PurchaseOrderDetailID";
            public const string PurchaseOrderID = "s_PurchaseOrderID";
            public const string ItemID = "s_ItemID";
            public const string Quantity = "s_Quantity";
            public const string Remark = "s_Remark";
            public const string UnitOfIssueID = "s_UnitOfIssueID";
            public const string PreferredManufacturerID = "s_PreferredManufacturerID";
            public const string Rowguid = "s_Rowguid";
            public const string ApprovedQuantity = "s_ApprovedQuantity";
            public const string Amount = "s_Amount";

        }
        #endregion

        #region Properties

        public virtual int PurchaseOrderDetailID
        {
            get
            {
                return base.Getint(ColumnNames.PurchaseOrderDetailID);
            }
            set
            {
                base.Setint(ColumnNames.PurchaseOrderDetailID, value);
            }
        }

        public virtual int PurchaseOrderID
        {
            get
            {
                return base.Getint(ColumnNames.PurchaseOrderID);
            }
            set
            {
                base.Setint(ColumnNames.PurchaseOrderID, value);
            }
        }

        public virtual int ItemID
        {
            get
            {
                return base.Getint(ColumnNames.ItemID);
            }
            set
            {
                base.Setint(ColumnNames.ItemID, value);
            }
        }

        public virtual decimal Quantity
        {
            get
            {
                return base.Getdecimal(ColumnNames.Quantity);
            }
            set
            {
                base.Setdecimal(ColumnNames.Quantity, value);
            }
        }

        public virtual string Remark
        {
            get
            {
                return base.Getstring(ColumnNames.Remark);
            }
            set
            {
                base.Setstring(ColumnNames.Remark, value);
            }
        }

        public virtual int UnitOfIssueID
        {
            get
            {
                return base.Getint(ColumnNames.UnitOfIssueID);
            }
            set
            {
                base.Setint(ColumnNames.UnitOfIssueID, value);
            }
        }

        public virtual int PreferredManufacturerID
        {
            get
            {
                return base.Getint(ColumnNames.PreferredManufacturerID);
            }
            set
            {
                base.Setint(ColumnNames.PreferredManufacturerID, value);
            }
        }

        public virtual Guid Rowguid
        {
            get
            {
                return base.GetGuid(ColumnNames.Rowguid);
            }
            set
            {
                base.SetGuid(ColumnNames.Rowguid, value);
            }
        }

        public virtual decimal ApprovedQuantity
        {
            get
            {
                return base.Getdecimal(ColumnNames.ApprovedQuantity);
            }
            set
            {
                base.Setdecimal(ColumnNames.ApprovedQuantity, value);
            }
        }

        public virtual decimal Amount
        {
            get
            {
                return base.Getdecimal(ColumnNames.Amount);
            }
            set
            {
                base.Setdecimal(ColumnNames.Amount, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_PurchaseOrderDetailID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PurchaseOrderDetailID) ? string.Empty : base.GetintAsString(ColumnNames.PurchaseOrderDetailID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PurchaseOrderDetailID);
                else
                    this.PurchaseOrderDetailID = base.SetintAsString(ColumnNames.PurchaseOrderDetailID, value);
            }
        }

        public virtual string s_PurchaseOrderID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PurchaseOrderID) ? string.Empty : base.GetintAsString(ColumnNames.PurchaseOrderID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PurchaseOrderID);
                else
                    this.PurchaseOrderID = base.SetintAsString(ColumnNames.PurchaseOrderID, value);
            }
        }

        public virtual string s_ItemID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ItemID) ? string.Empty : base.GetintAsString(ColumnNames.ItemID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ItemID);
                else
                    this.ItemID = base.SetintAsString(ColumnNames.ItemID, value);
            }
        }

        public virtual string s_Quantity
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Quantity) ? string.Empty : base.GetdecimalAsString(ColumnNames.Quantity);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Quantity);
                else
                    this.Quantity = base.SetdecimalAsString(ColumnNames.Quantity, value);
            }
        }

        public virtual string s_Remark
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Remark) ? string.Empty : base.GetstringAsString(ColumnNames.Remark);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Remark);
                else
                    this.Remark = base.SetstringAsString(ColumnNames.Remark, value);
            }
        }

        public virtual string s_UnitOfIssueID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.UnitOfIssueID) ? string.Empty : base.GetintAsString(ColumnNames.UnitOfIssueID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.UnitOfIssueID);
                else
                    this.UnitOfIssueID = base.SetintAsString(ColumnNames.UnitOfIssueID, value);
            }
        }

        public virtual string s_PreferredManufacturerID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PreferredManufacturerID) ? string.Empty : base.GetintAsString(ColumnNames.PreferredManufacturerID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PreferredManufacturerID);
                else
                    this.PreferredManufacturerID = base.SetintAsString(ColumnNames.PreferredManufacturerID, value);
            }
        }

        public virtual string s_Rowguid
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Rowguid) ? string.Empty : base.GetGuidAsString(ColumnNames.Rowguid);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Rowguid);
                else
                    this.Rowguid = base.SetGuidAsString(ColumnNames.Rowguid, value);
            }
        }

        public virtual string s_ApprovedQuantity
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ApprovedQuantity) ? string.Empty : base.GetdecimalAsString(ColumnNames.ApprovedQuantity);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ApprovedQuantity);
                else
                    this.ApprovedQuantity = base.SetdecimalAsString(ColumnNames.ApprovedQuantity, value);
            }
        }

        public virtual string s_Amount
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Amount) ? string.Empty : base.GetdecimalAsString(ColumnNames.Amount);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Amount);
                else
                    this.Amount = base.SetdecimalAsString(ColumnNames.Amount, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter PurchaseOrderDetailID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PurchaseOrderDetailID, Parameters.PurchaseOrderDetailID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PurchaseOrderID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PurchaseOrderID, Parameters.PurchaseOrderID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ItemID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ItemID, Parameters.ItemID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Quantity
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Quantity, Parameters.Quantity);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Remark
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Remark, Parameters.Remark);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter UnitOfIssueID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.UnitOfIssueID, Parameters.UnitOfIssueID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PreferredManufacturerID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PreferredManufacturerID, Parameters.PreferredManufacturerID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Rowguid
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Rowguid, Parameters.Rowguid);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ApprovedQuantity
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ApprovedQuantity, Parameters.ApprovedQuantity);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Amount
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Amount, Parameters.Amount);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter PurchaseOrderDetailID
            {
                get
                {
                    if (_PurchaseOrderDetailID_W == null)
                    {
                        _PurchaseOrderDetailID_W = TearOff.PurchaseOrderDetailID;
                    }
                    return _PurchaseOrderDetailID_W;
                }
            }

            public WhereParameter PurchaseOrderID
            {
                get
                {
                    if (_PurchaseOrderID_W == null)
                    {
                        _PurchaseOrderID_W = TearOff.PurchaseOrderID;
                    }
                    return _PurchaseOrderID_W;
                }
            }

            public WhereParameter ItemID
            {
                get
                {
                    if (_ItemID_W == null)
                    {
                        _ItemID_W = TearOff.ItemID;
                    }
                    return _ItemID_W;
                }
            }

            public WhereParameter Quantity
            {
                get
                {
                    if (_Quantity_W == null)
                    {
                        _Quantity_W = TearOff.Quantity;
                    }
                    return _Quantity_W;
                }
            }

            public WhereParameter Remark
            {
                get
                {
                    if (_Remark_W == null)
                    {
                        _Remark_W = TearOff.Remark;
                    }
                    return _Remark_W;
                }
            }

            public WhereParameter UnitOfIssueID
            {
                get
                {
                    if (_UnitOfIssueID_W == null)
                    {
                        _UnitOfIssueID_W = TearOff.UnitOfIssueID;
                    }
                    return _UnitOfIssueID_W;
                }
            }

            public WhereParameter PreferredManufacturerID
            {
                get
                {
                    if (_PreferredManufacturerID_W == null)
                    {
                        _PreferredManufacturerID_W = TearOff.PreferredManufacturerID;
                    }
                    return _PreferredManufacturerID_W;
                }
            }

            public WhereParameter Rowguid
            {
                get
                {
                    if (_Rowguid_W == null)
                    {
                        _Rowguid_W = TearOff.Rowguid;
                    }
                    return _Rowguid_W;
                }
            }

            public WhereParameter ApprovedQuantity
            {
                get
                {
                    if (_ApprovedQuantity_W == null)
                    {
                        _ApprovedQuantity_W = TearOff.ApprovedQuantity;
                    }
                    return _ApprovedQuantity_W;
                }
            }

            public WhereParameter Amount
            {
                get
                {
                    if (_Amount_W == null)
                    {
                        _Amount_W = TearOff.Amount;
                    }
                    return _Amount_W;
                }
            }

            private WhereParameter _PurchaseOrderDetailID_W = null;
            private WhereParameter _PurchaseOrderID_W = null;
            private WhereParameter _ItemID_W = null;
            private WhereParameter _Quantity_W = null;
            private WhereParameter _Remark_W = null;
            private WhereParameter _UnitOfIssueID_W = null;
            private WhereParameter _PreferredManufacturerID_W = null;
            private WhereParameter _Rowguid_W = null;
            private WhereParameter _ApprovedQuantity_W = null;
            private WhereParameter _Amount_W = null;

            public void WhereClauseReset()
            {
                _PurchaseOrderDetailID_W = null;
                _PurchaseOrderID_W = null;
                _ItemID_W = null;
                _Quantity_W = null;
                _Remark_W = null;
                _UnitOfIssueID_W = null;
                _PreferredManufacturerID_W = null;
                _Rowguid_W = null;
                _ApprovedQuantity_W = null;
                _Amount_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter PurchaseOrderDetailID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PurchaseOrderDetailID, Parameters.PurchaseOrderDetailID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PurchaseOrderID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PurchaseOrderID, Parameters.PurchaseOrderID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ItemID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ItemID, Parameters.ItemID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Quantity
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Quantity, Parameters.Quantity);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Remark
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Remark, Parameters.Remark);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter UnitOfIssueID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitOfIssueID, Parameters.UnitOfIssueID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PreferredManufacturerID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PreferredManufacturerID, Parameters.PreferredManufacturerID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Rowguid
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rowguid, Parameters.Rowguid);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ApprovedQuantity
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ApprovedQuantity, Parameters.ApprovedQuantity);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Amount
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Amount, Parameters.Amount);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter PurchaseOrderDetailID
            {
                get
                {
                    if (_PurchaseOrderDetailID_W == null)
                    {
                        _PurchaseOrderDetailID_W = TearOff.PurchaseOrderDetailID;
                    }
                    return _PurchaseOrderDetailID_W;
                }
            }

            public AggregateParameter PurchaseOrderID
            {
                get
                {
                    if (_PurchaseOrderID_W == null)
                    {
                        _PurchaseOrderID_W = TearOff.PurchaseOrderID;
                    }
                    return _PurchaseOrderID_W;
                }
            }

            public AggregateParameter ItemID
            {
                get
                {
                    if (_ItemID_W == null)
                    {
                        _ItemID_W = TearOff.ItemID;
                    }
                    return _ItemID_W;
                }
            }

            public AggregateParameter Quantity
            {
                get
                {
                    if (_Quantity_W == null)
                    {
                        _Quantity_W = TearOff.Quantity;
                    }
                    return _Quantity_W;
                }
            }

            public AggregateParameter Remark
            {
                get
                {
                    if (_Remark_W == null)
                    {
                        _Remark_W = TearOff.Remark;
                    }
                    return _Remark_W;
                }
            }

            public AggregateParameter UnitOfIssueID
            {
                get
                {
                    if (_UnitOfIssueID_W == null)
                    {
                        _UnitOfIssueID_W = TearOff.UnitOfIssueID;
                    }
                    return _UnitOfIssueID_W;
                }
            }

            public AggregateParameter PreferredManufacturerID
            {
                get
                {
                    if (_PreferredManufacturerID_W == null)
                    {
                        _PreferredManufacturerID_W = TearOff.PreferredManufacturerID;
                    }
                    return _PreferredManufacturerID_W;
                }
            }

            public AggregateParameter Rowguid
            {
                get
                {
                    if (_Rowguid_W == null)
                    {
                        _Rowguid_W = TearOff.Rowguid;
                    }
                    return _Rowguid_W;
                }
            }

            public AggregateParameter ApprovedQuantity
            {
                get
                {
                    if (_ApprovedQuantity_W == null)
                    {
                        _ApprovedQuantity_W = TearOff.ApprovedQuantity;
                    }
                    return _ApprovedQuantity_W;
                }
            }

            public AggregateParameter Amount
            {
                get
                {
                    if (_Amount_W == null)
                    {
                        _Amount_W = TearOff.Amount;
                    }
                    return _Amount_W;
                }
            }

            private AggregateParameter _PurchaseOrderDetailID_W = null;
            private AggregateParameter _PurchaseOrderID_W = null;
            private AggregateParameter _ItemID_W = null;
            private AggregateParameter _Quantity_W = null;
            private AggregateParameter _Remark_W = null;
            private AggregateParameter _UnitOfIssueID_W = null;
            private AggregateParameter _PreferredManufacturerID_W = null;
            private AggregateParameter _Rowguid_W = null;
            private AggregateParameter _ApprovedQuantity_W = null;
            private AggregateParameter _Amount_W = null;

            public void AggregateClauseReset()
            {
                _PurchaseOrderDetailID_W = null;
                _PurchaseOrderID_W = null;
                _ItemID_W = null;
                _Quantity_W = null;
                _Remark_W = null;
                _UnitOfIssueID_W = null;
                _PreferredManufacturerID_W = null;
                _Rowguid_W = null;
                _ApprovedQuantity_W = null;
                _Amount_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PurchaseOrderDetailInsert]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.PurchaseOrderDetailID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PurchaseOrderDetailUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PurchaseOrderDetailDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.PurchaseOrderDetailID);
            p.SourceColumn = ColumnNames.PurchaseOrderDetailID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.PurchaseOrderDetailID);
            p.SourceColumn = ColumnNames.PurchaseOrderDetailID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PurchaseOrderID);
            p.SourceColumn = ColumnNames.PurchaseOrderID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ItemID);
            p.SourceColumn = ColumnNames.ItemID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Quantity);
            p.SourceColumn = ColumnNames.Quantity;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Remark);
            p.SourceColumn = ColumnNames.Remark;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.UnitOfIssueID);
            p.SourceColumn = ColumnNames.UnitOfIssueID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PreferredManufacturerID);
            p.SourceColumn = ColumnNames.PreferredManufacturerID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Rowguid);
            p.SourceColumn = ColumnNames.Rowguid;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ApprovedQuantity);
            p.SourceColumn = ColumnNames.ApprovedQuantity;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Amount);
            p.SourceColumn = ColumnNames.Amount;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}
