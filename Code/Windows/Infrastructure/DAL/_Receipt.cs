
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _Receipt : SqlClientEntity
	{
		public _Receipt()
		{
			this.QuerySource = "Receipt";
			this.MappingName = "Receipt";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ReceiptLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ReceiptLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DateOfEntry
			{
				get
				{
					return new SqlParameter("@DateOfEntry", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ReceiptTypeID
			{
				get
				{
					return new SqlParameter("@ReceiptTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SavedByUserID
			{
				get
				{
					return new SqlParameter("@SavedByUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TotalValue
			{
				get
				{
					return new SqlParameter("@TotalValue", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Insurance
			{
				get
				{
					return new SqlParameter("@Insurance", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter AirFreight
			{
				get
				{
					return new SqlParameter("@AirFreight", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter SeaFreight
			{
				get
				{
					return new SqlParameter("@SeaFreight", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter InlandFreight
			{
				get
				{
					return new SqlParameter("@InlandFreight", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter NBE
			{
				get
				{
					return new SqlParameter("@NBE", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter CBE
			{
				get
				{
					return new SqlParameter("@CBE", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter CustomDutyTax
			{
				get
				{
					return new SqlParameter("@CustomDutyTax", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter TransitServiceCharge
			{
				get
				{
					return new SqlParameter("@TransitServiceCharge", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Provision
			{
				get
				{
					return new SqlParameter("@Provision", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter POID
			{
				get
				{
					return new SqlParameter("@POID", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter WayBillNo
			{
				get
				{
					return new SqlParameter("@WayBillNo", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter TransitTransferNo
			{
				get
				{
					return new SqlParameter("@TransitTransferNo", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter InsurancePolicyNo
			{
				get
				{
					return new SqlParameter("@InsurancePolicyNo", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter STVOrInvoiceNo
			{
				get
				{
					return new SqlParameter("@STVOrInvoiceNo", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter ReceiptInvoiceID
			{
				get
				{
					return new SqlParameter("@ReceiptInvoiceID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter WarehouseID
			{
				get
				{
					return new SqlParameter("@WarehouseID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ReceiptStatusID
			{
				get
				{
					return new SqlParameter("@ReceiptStatusID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string DateOfEntry = "DateOfEntry";
            public const string ReceiptTypeID = "ReceiptTypeID";
            public const string SavedByUserID = "SavedByUserID";
            public const string TotalValue = "TotalValue";
            public const string Insurance = "Insurance";
            public const string AirFreight = "AirFreight";
            public const string SeaFreight = "SeaFreight";
            public const string InlandFreight = "InlandFreight";
            public const string NBE = "NBE";
            public const string CBE = "CBE";
            public const string CustomDutyTax = "CustomDutyTax";
            public const string TransitServiceCharge = "TransitServiceCharge";
            public const string Provision = "Provision";
            public const string POID = "POID";
            public const string WayBillNo = "WayBillNo";
            public const string TransitTransferNo = "TransitTransferNo";
            public const string InsurancePolicyNo = "InsurancePolicyNo";
            public const string STVOrInvoiceNo = "STVOrInvoiceNo";
            public const string ReceiptInvoiceID = "ReceiptInvoiceID";
            public const string WarehouseID = "WarehouseID";
            public const string ReceiptStatusID = "ReceiptStatusID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _Receipt.PropertyNames.ID;
					ht[DateOfEntry] = _Receipt.PropertyNames.DateOfEntry;
					ht[ReceiptTypeID] = _Receipt.PropertyNames.ReceiptTypeID;
					ht[SavedByUserID] = _Receipt.PropertyNames.SavedByUserID;
					ht[TotalValue] = _Receipt.PropertyNames.TotalValue;
					ht[Insurance] = _Receipt.PropertyNames.Insurance;
					ht[AirFreight] = _Receipt.PropertyNames.AirFreight;
					ht[SeaFreight] = _Receipt.PropertyNames.SeaFreight;
					ht[InlandFreight] = _Receipt.PropertyNames.InlandFreight;
					ht[NBE] = _Receipt.PropertyNames.NBE;
					ht[CBE] = _Receipt.PropertyNames.CBE;
					ht[CustomDutyTax] = _Receipt.PropertyNames.CustomDutyTax;
					ht[TransitServiceCharge] = _Receipt.PropertyNames.TransitServiceCharge;
					ht[Provision] = _Receipt.PropertyNames.Provision;
					ht[POID] = _Receipt.PropertyNames.POID;
					ht[WayBillNo] = _Receipt.PropertyNames.WayBillNo;
					ht[TransitTransferNo] = _Receipt.PropertyNames.TransitTransferNo;
					ht[InsurancePolicyNo] = _Receipt.PropertyNames.InsurancePolicyNo;
					ht[STVOrInvoiceNo] = _Receipt.PropertyNames.STVOrInvoiceNo;
					ht[ReceiptInvoiceID] = _Receipt.PropertyNames.ReceiptInvoiceID;
					ht[WarehouseID] = _Receipt.PropertyNames.WarehouseID;
					ht[ReceiptStatusID] = _Receipt.PropertyNames.ReceiptStatusID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string DateOfEntry = "DateOfEntry";
            public const string ReceiptTypeID = "ReceiptTypeID";
            public const string SavedByUserID = "SavedByUserID";
            public const string TotalValue = "TotalValue";
            public const string Insurance = "Insurance";
            public const string AirFreight = "AirFreight";
            public const string SeaFreight = "SeaFreight";
            public const string InlandFreight = "InlandFreight";
            public const string NBE = "NBE";
            public const string CBE = "CBE";
            public const string CustomDutyTax = "CustomDutyTax";
            public const string TransitServiceCharge = "TransitServiceCharge";
            public const string Provision = "Provision";
            public const string POID = "POID";
            public const string WayBillNo = "WayBillNo";
            public const string TransitTransferNo = "TransitTransferNo";
            public const string InsurancePolicyNo = "InsurancePolicyNo";
            public const string STVOrInvoiceNo = "STVOrInvoiceNo";
            public const string ReceiptInvoiceID = "ReceiptInvoiceID";
            public const string WarehouseID = "WarehouseID";
            public const string ReceiptStatusID = "ReceiptStatusID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _Receipt.ColumnNames.ID;
					ht[DateOfEntry] = _Receipt.ColumnNames.DateOfEntry;
					ht[ReceiptTypeID] = _Receipt.ColumnNames.ReceiptTypeID;
					ht[SavedByUserID] = _Receipt.ColumnNames.SavedByUserID;
					ht[TotalValue] = _Receipt.ColumnNames.TotalValue;
					ht[Insurance] = _Receipt.ColumnNames.Insurance;
					ht[AirFreight] = _Receipt.ColumnNames.AirFreight;
					ht[SeaFreight] = _Receipt.ColumnNames.SeaFreight;
					ht[InlandFreight] = _Receipt.ColumnNames.InlandFreight;
					ht[NBE] = _Receipt.ColumnNames.NBE;
					ht[CBE] = _Receipt.ColumnNames.CBE;
					ht[CustomDutyTax] = _Receipt.ColumnNames.CustomDutyTax;
					ht[TransitServiceCharge] = _Receipt.ColumnNames.TransitServiceCharge;
					ht[Provision] = _Receipt.ColumnNames.Provision;
					ht[POID] = _Receipt.ColumnNames.POID;
					ht[WayBillNo] = _Receipt.ColumnNames.WayBillNo;
					ht[TransitTransferNo] = _Receipt.ColumnNames.TransitTransferNo;
					ht[InsurancePolicyNo] = _Receipt.ColumnNames.InsurancePolicyNo;
					ht[STVOrInvoiceNo] = _Receipt.ColumnNames.STVOrInvoiceNo;
					ht[ReceiptInvoiceID] = _Receipt.ColumnNames.ReceiptInvoiceID;
					ht[WarehouseID] = _Receipt.ColumnNames.WarehouseID;
					ht[ReceiptStatusID] = _Receipt.ColumnNames.ReceiptStatusID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string DateOfEntry = "s_DateOfEntry";
            public const string ReceiptTypeID = "s_ReceiptTypeID";
            public const string SavedByUserID = "s_SavedByUserID";
            public const string TotalValue = "s_TotalValue";
            public const string Insurance = "s_Insurance";
            public const string AirFreight = "s_AirFreight";
            public const string SeaFreight = "s_SeaFreight";
            public const string InlandFreight = "s_InlandFreight";
            public const string NBE = "s_NBE";
            public const string CBE = "s_CBE";
            public const string CustomDutyTax = "s_CustomDutyTax";
            public const string TransitServiceCharge = "s_TransitServiceCharge";
            public const string Provision = "s_Provision";
            public const string POID = "s_POID";
            public const string WayBillNo = "s_WayBillNo";
            public const string TransitTransferNo = "s_TransitTransferNo";
            public const string InsurancePolicyNo = "s_InsurancePolicyNo";
            public const string STVOrInvoiceNo = "s_STVOrInvoiceNo";
            public const string ReceiptInvoiceID = "s_ReceiptInvoiceID";
            public const string WarehouseID = "s_WarehouseID";
            public const string ReceiptStatusID = "s_ReceiptStatusID";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual DateTime DateOfEntry
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DateOfEntry);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DateOfEntry, value);
			}
		}

		public virtual int ReceiptTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.ReceiptTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.ReceiptTypeID, value);
			}
		}

		public virtual int SavedByUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.SavedByUserID);
			}
			set
	        {
				base.Setint(ColumnNames.SavedByUserID, value);
			}
		}

		public virtual double TotalValue
	    {
			get
	        {
				return base.Getdouble(ColumnNames.TotalValue);
			}
			set
	        {
				base.Setdouble(ColumnNames.TotalValue, value);
			}
		}

		public virtual double Insurance
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Insurance);
			}
			set
	        {
				base.Setdouble(ColumnNames.Insurance, value);
			}
		}

		public virtual double AirFreight
	    {
			get
	        {
				return base.Getdouble(ColumnNames.AirFreight);
			}
			set
	        {
				base.Setdouble(ColumnNames.AirFreight, value);
			}
		}

		public virtual double SeaFreight
	    {
			get
	        {
				return base.Getdouble(ColumnNames.SeaFreight);
			}
			set
	        {
				base.Setdouble(ColumnNames.SeaFreight, value);
			}
		}

		public virtual double InlandFreight
	    {
			get
	        {
				return base.Getdouble(ColumnNames.InlandFreight);
			}
			set
	        {
				base.Setdouble(ColumnNames.InlandFreight, value);
			}
		}

		public virtual double NBE
	    {
			get
	        {
				return base.Getdouble(ColumnNames.NBE);
			}
			set
	        {
				base.Setdouble(ColumnNames.NBE, value);
			}
		}

		public virtual double CBE
	    {
			get
	        {
				return base.Getdouble(ColumnNames.CBE);
			}
			set
	        {
				base.Setdouble(ColumnNames.CBE, value);
			}
		}

		public virtual double CustomDutyTax
	    {
			get
	        {
				return base.Getdouble(ColumnNames.CustomDutyTax);
			}
			set
	        {
				base.Setdouble(ColumnNames.CustomDutyTax, value);
			}
		}

		public virtual double TransitServiceCharge
	    {
			get
	        {
				return base.Getdouble(ColumnNames.TransitServiceCharge);
			}
			set
	        {
				base.Setdouble(ColumnNames.TransitServiceCharge, value);
			}
		}

		public virtual double Provision
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Provision);
			}
			set
	        {
				base.Setdouble(ColumnNames.Provision, value);
			}
		}

		public virtual double POID
	    {
			get
	        {
				return base.Getdouble(ColumnNames.POID);
			}
			set
	        {
				base.Setdouble(ColumnNames.POID, value);
			}
		}

		public virtual string WayBillNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.WayBillNo);
			}
			set
	        {
				base.Setstring(ColumnNames.WayBillNo, value);
			}
		}

		public virtual string TransitTransferNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.TransitTransferNo);
			}
			set
	        {
				base.Setstring(ColumnNames.TransitTransferNo, value);
			}
		}

		public virtual string InsurancePolicyNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.InsurancePolicyNo);
			}
			set
	        {
				base.Setstring(ColumnNames.InsurancePolicyNo, value);
			}
		}

		public virtual string STVOrInvoiceNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.STVOrInvoiceNo);
			}
			set
	        {
				base.Setstring(ColumnNames.STVOrInvoiceNo, value);
			}
		}

		public virtual int ReceiptInvoiceID
	    {
			get
	        {
				return base.Getint(ColumnNames.ReceiptInvoiceID);
			}
			set
	        {
				base.Setint(ColumnNames.ReceiptInvoiceID, value);
			}
		}

		public virtual int WarehouseID
	    {
			get
	        {
				return base.Getint(ColumnNames.WarehouseID);
			}
			set
	        {
				base.Setint(ColumnNames.WarehouseID, value);
			}
		}

		public virtual int ReceiptStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.ReceiptStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.ReceiptStatusID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_DateOfEntry
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DateOfEntry) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateOfEntry);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DateOfEntry);
				else
					this.DateOfEntry = base.SetDateTimeAsString(ColumnNames.DateOfEntry, value);
			}
		}

		public virtual string s_ReceiptTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceiptTypeID) ? string.Empty : base.GetintAsString(ColumnNames.ReceiptTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceiptTypeID);
				else
					this.ReceiptTypeID = base.SetintAsString(ColumnNames.ReceiptTypeID, value);
			}
		}

		public virtual string s_SavedByUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SavedByUserID) ? string.Empty : base.GetintAsString(ColumnNames.SavedByUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SavedByUserID);
				else
					this.SavedByUserID = base.SetintAsString(ColumnNames.SavedByUserID, value);
			}
		}

		public virtual string s_TotalValue
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TotalValue) ? string.Empty : base.GetdoubleAsString(ColumnNames.TotalValue);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TotalValue);
				else
					this.TotalValue = base.SetdoubleAsString(ColumnNames.TotalValue, value);
			}
		}

		public virtual string s_Insurance
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Insurance) ? string.Empty : base.GetdoubleAsString(ColumnNames.Insurance);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Insurance);
				else
					this.Insurance = base.SetdoubleAsString(ColumnNames.Insurance, value);
			}
		}

		public virtual string s_AirFreight
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AirFreight) ? string.Empty : base.GetdoubleAsString(ColumnNames.AirFreight);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AirFreight);
				else
					this.AirFreight = base.SetdoubleAsString(ColumnNames.AirFreight, value);
			}
		}

		public virtual string s_SeaFreight
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SeaFreight) ? string.Empty : base.GetdoubleAsString(ColumnNames.SeaFreight);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SeaFreight);
				else
					this.SeaFreight = base.SetdoubleAsString(ColumnNames.SeaFreight, value);
			}
		}

		public virtual string s_InlandFreight
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InlandFreight) ? string.Empty : base.GetdoubleAsString(ColumnNames.InlandFreight);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InlandFreight);
				else
					this.InlandFreight = base.SetdoubleAsString(ColumnNames.InlandFreight, value);
			}
		}

		public virtual string s_NBE
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NBE) ? string.Empty : base.GetdoubleAsString(ColumnNames.NBE);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NBE);
				else
					this.NBE = base.SetdoubleAsString(ColumnNames.NBE, value);
			}
		}

		public virtual string s_CBE
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CBE) ? string.Empty : base.GetdoubleAsString(ColumnNames.CBE);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CBE);
				else
					this.CBE = base.SetdoubleAsString(ColumnNames.CBE, value);
			}
		}

		public virtual string s_CustomDutyTax
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CustomDutyTax) ? string.Empty : base.GetdoubleAsString(ColumnNames.CustomDutyTax);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CustomDutyTax);
				else
					this.CustomDutyTax = base.SetdoubleAsString(ColumnNames.CustomDutyTax, value);
			}
		}

		public virtual string s_TransitServiceCharge
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TransitServiceCharge) ? string.Empty : base.GetdoubleAsString(ColumnNames.TransitServiceCharge);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TransitServiceCharge);
				else
					this.TransitServiceCharge = base.SetdoubleAsString(ColumnNames.TransitServiceCharge, value);
			}
		}

		public virtual string s_Provision
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Provision) ? string.Empty : base.GetdoubleAsString(ColumnNames.Provision);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Provision);
				else
					this.Provision = base.SetdoubleAsString(ColumnNames.Provision, value);
			}
		}

		public virtual string s_POID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.POID) ? string.Empty : base.GetdoubleAsString(ColumnNames.POID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.POID);
				else
					this.POID = base.SetdoubleAsString(ColumnNames.POID, value);
			}
		}

		public virtual string s_WayBillNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WayBillNo) ? string.Empty : base.GetstringAsString(ColumnNames.WayBillNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WayBillNo);
				else
					this.WayBillNo = base.SetstringAsString(ColumnNames.WayBillNo, value);
			}
		}

		public virtual string s_TransitTransferNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TransitTransferNo) ? string.Empty : base.GetstringAsString(ColumnNames.TransitTransferNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TransitTransferNo);
				else
					this.TransitTransferNo = base.SetstringAsString(ColumnNames.TransitTransferNo, value);
			}
		}

		public virtual string s_InsurancePolicyNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InsurancePolicyNo) ? string.Empty : base.GetstringAsString(ColumnNames.InsurancePolicyNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InsurancePolicyNo);
				else
					this.InsurancePolicyNo = base.SetstringAsString(ColumnNames.InsurancePolicyNo, value);
			}
		}

		public virtual string s_STVOrInvoiceNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.STVOrInvoiceNo) ? string.Empty : base.GetstringAsString(ColumnNames.STVOrInvoiceNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.STVOrInvoiceNo);
				else
					this.STVOrInvoiceNo = base.SetstringAsString(ColumnNames.STVOrInvoiceNo, value);
			}
		}

		public virtual string s_ReceiptInvoiceID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceiptInvoiceID) ? string.Empty : base.GetintAsString(ColumnNames.ReceiptInvoiceID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceiptInvoiceID);
				else
					this.ReceiptInvoiceID = base.SetintAsString(ColumnNames.ReceiptInvoiceID, value);
			}
		}

		public virtual string s_WarehouseID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WarehouseID) ? string.Empty : base.GetintAsString(ColumnNames.WarehouseID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WarehouseID);
				else
					this.WarehouseID = base.SetintAsString(ColumnNames.WarehouseID, value);
			}
		}

		public virtual string s_ReceiptStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceiptStatusID) ? string.Empty : base.GetintAsString(ColumnNames.ReceiptStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceiptStatusID);
				else
					this.ReceiptStatusID = base.SetintAsString(ColumnNames.ReceiptStatusID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DateOfEntry
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DateOfEntry, Parameters.DateOfEntry);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReceiptTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceiptTypeID, Parameters.ReceiptTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SavedByUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SavedByUserID, Parameters.SavedByUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TotalValue
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TotalValue, Parameters.TotalValue);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Insurance
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Insurance, Parameters.Insurance);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AirFreight
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AirFreight, Parameters.AirFreight);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SeaFreight
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SeaFreight, Parameters.SeaFreight);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InlandFreight
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InlandFreight, Parameters.InlandFreight);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NBE
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NBE, Parameters.NBE);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CBE
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CBE, Parameters.CBE);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CustomDutyTax
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CustomDutyTax, Parameters.CustomDutyTax);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TransitServiceCharge
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TransitServiceCharge, Parameters.TransitServiceCharge);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Provision
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Provision, Parameters.Provision);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter POID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.POID, Parameters.POID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WayBillNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WayBillNo, Parameters.WayBillNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TransitTransferNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TransitTransferNo, Parameters.TransitTransferNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InsurancePolicyNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InsurancePolicyNo, Parameters.InsurancePolicyNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter STVOrInvoiceNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.STVOrInvoiceNo, Parameters.STVOrInvoiceNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReceiptInvoiceID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceiptInvoiceID, Parameters.ReceiptInvoiceID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WarehouseID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WarehouseID, Parameters.WarehouseID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReceiptStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceiptStatusID, Parameters.ReceiptStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter DateOfEntry
		    {
				get
		        {
					if(_DateOfEntry_W == null)
	        	    {
						_DateOfEntry_W = TearOff.DateOfEntry;
					}
					return _DateOfEntry_W;
				}
			}

			public WhereParameter ReceiptTypeID
		    {
				get
		        {
					if(_ReceiptTypeID_W == null)
	        	    {
						_ReceiptTypeID_W = TearOff.ReceiptTypeID;
					}
					return _ReceiptTypeID_W;
				}
			}

			public WhereParameter SavedByUserID
		    {
				get
		        {
					if(_SavedByUserID_W == null)
	        	    {
						_SavedByUserID_W = TearOff.SavedByUserID;
					}
					return _SavedByUserID_W;
				}
			}

			public WhereParameter TotalValue
		    {
				get
		        {
					if(_TotalValue_W == null)
	        	    {
						_TotalValue_W = TearOff.TotalValue;
					}
					return _TotalValue_W;
				}
			}

			public WhereParameter Insurance
		    {
				get
		        {
					if(_Insurance_W == null)
	        	    {
						_Insurance_W = TearOff.Insurance;
					}
					return _Insurance_W;
				}
			}

			public WhereParameter AirFreight
		    {
				get
		        {
					if(_AirFreight_W == null)
	        	    {
						_AirFreight_W = TearOff.AirFreight;
					}
					return _AirFreight_W;
				}
			}

			public WhereParameter SeaFreight
		    {
				get
		        {
					if(_SeaFreight_W == null)
	        	    {
						_SeaFreight_W = TearOff.SeaFreight;
					}
					return _SeaFreight_W;
				}
			}

			public WhereParameter InlandFreight
		    {
				get
		        {
					if(_InlandFreight_W == null)
	        	    {
						_InlandFreight_W = TearOff.InlandFreight;
					}
					return _InlandFreight_W;
				}
			}

			public WhereParameter NBE
		    {
				get
		        {
					if(_NBE_W == null)
	        	    {
						_NBE_W = TearOff.NBE;
					}
					return _NBE_W;
				}
			}

			public WhereParameter CBE
		    {
				get
		        {
					if(_CBE_W == null)
	        	    {
						_CBE_W = TearOff.CBE;
					}
					return _CBE_W;
				}
			}

			public WhereParameter CustomDutyTax
		    {
				get
		        {
					if(_CustomDutyTax_W == null)
	        	    {
						_CustomDutyTax_W = TearOff.CustomDutyTax;
					}
					return _CustomDutyTax_W;
				}
			}

			public WhereParameter TransitServiceCharge
		    {
				get
		        {
					if(_TransitServiceCharge_W == null)
	        	    {
						_TransitServiceCharge_W = TearOff.TransitServiceCharge;
					}
					return _TransitServiceCharge_W;
				}
			}

			public WhereParameter Provision
		    {
				get
		        {
					if(_Provision_W == null)
	        	    {
						_Provision_W = TearOff.Provision;
					}
					return _Provision_W;
				}
			}

			public WhereParameter POID
		    {
				get
		        {
					if(_POID_W == null)
	        	    {
						_POID_W = TearOff.POID;
					}
					return _POID_W;
				}
			}

			public WhereParameter WayBillNo
		    {
				get
		        {
					if(_WayBillNo_W == null)
	        	    {
						_WayBillNo_W = TearOff.WayBillNo;
					}
					return _WayBillNo_W;
				}
			}

			public WhereParameter TransitTransferNo
		    {
				get
		        {
					if(_TransitTransferNo_W == null)
	        	    {
						_TransitTransferNo_W = TearOff.TransitTransferNo;
					}
					return _TransitTransferNo_W;
				}
			}

			public WhereParameter InsurancePolicyNo
		    {
				get
		        {
					if(_InsurancePolicyNo_W == null)
	        	    {
						_InsurancePolicyNo_W = TearOff.InsurancePolicyNo;
					}
					return _InsurancePolicyNo_W;
				}
			}

			public WhereParameter STVOrInvoiceNo
		    {
				get
		        {
					if(_STVOrInvoiceNo_W == null)
	        	    {
						_STVOrInvoiceNo_W = TearOff.STVOrInvoiceNo;
					}
					return _STVOrInvoiceNo_W;
				}
			}

			public WhereParameter ReceiptInvoiceID
		    {
				get
		        {
					if(_ReceiptInvoiceID_W == null)
	        	    {
						_ReceiptInvoiceID_W = TearOff.ReceiptInvoiceID;
					}
					return _ReceiptInvoiceID_W;
				}
			}

			public WhereParameter WarehouseID
		    {
				get
		        {
					if(_WarehouseID_W == null)
	        	    {
						_WarehouseID_W = TearOff.WarehouseID;
					}
					return _WarehouseID_W;
				}
			}

			public WhereParameter ReceiptStatusID
		    {
				get
		        {
					if(_ReceiptStatusID_W == null)
	        	    {
						_ReceiptStatusID_W = TearOff.ReceiptStatusID;
					}
					return _ReceiptStatusID_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _DateOfEntry_W = null;
			private WhereParameter _ReceiptTypeID_W = null;
			private WhereParameter _SavedByUserID_W = null;
			private WhereParameter _TotalValue_W = null;
			private WhereParameter _Insurance_W = null;
			private WhereParameter _AirFreight_W = null;
			private WhereParameter _SeaFreight_W = null;
			private WhereParameter _InlandFreight_W = null;
			private WhereParameter _NBE_W = null;
			private WhereParameter _CBE_W = null;
			private WhereParameter _CustomDutyTax_W = null;
			private WhereParameter _TransitServiceCharge_W = null;
			private WhereParameter _Provision_W = null;
			private WhereParameter _POID_W = null;
			private WhereParameter _WayBillNo_W = null;
			private WhereParameter _TransitTransferNo_W = null;
			private WhereParameter _InsurancePolicyNo_W = null;
			private WhereParameter _STVOrInvoiceNo_W = null;
			private WhereParameter _ReceiptInvoiceID_W = null;
			private WhereParameter _WarehouseID_W = null;
			private WhereParameter _ReceiptStatusID_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_DateOfEntry_W = null;
				_ReceiptTypeID_W = null;
				_SavedByUserID_W = null;
				_TotalValue_W = null;
				_Insurance_W = null;
				_AirFreight_W = null;
				_SeaFreight_W = null;
				_InlandFreight_W = null;
				_NBE_W = null;
				_CBE_W = null;
				_CustomDutyTax_W = null;
				_TransitServiceCharge_W = null;
				_Provision_W = null;
				_POID_W = null;
				_WayBillNo_W = null;
				_TransitTransferNo_W = null;
				_InsurancePolicyNo_W = null;
				_STVOrInvoiceNo_W = null;
				_ReceiptInvoiceID_W = null;
				_WarehouseID_W = null;
				_ReceiptStatusID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DateOfEntry
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateOfEntry, Parameters.DateOfEntry);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReceiptTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceiptTypeID, Parameters.ReceiptTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SavedByUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SavedByUserID, Parameters.SavedByUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TotalValue
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TotalValue, Parameters.TotalValue);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Insurance
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Insurance, Parameters.Insurance);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AirFreight
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AirFreight, Parameters.AirFreight);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SeaFreight
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SeaFreight, Parameters.SeaFreight);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InlandFreight
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InlandFreight, Parameters.InlandFreight);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NBE
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NBE, Parameters.NBE);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CBE
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CBE, Parameters.CBE);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CustomDutyTax
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CustomDutyTax, Parameters.CustomDutyTax);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TransitServiceCharge
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TransitServiceCharge, Parameters.TransitServiceCharge);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Provision
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Provision, Parameters.Provision);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter POID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.POID, Parameters.POID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WayBillNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WayBillNo, Parameters.WayBillNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TransitTransferNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TransitTransferNo, Parameters.TransitTransferNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InsurancePolicyNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InsurancePolicyNo, Parameters.InsurancePolicyNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter STVOrInvoiceNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.STVOrInvoiceNo, Parameters.STVOrInvoiceNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReceiptInvoiceID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceiptInvoiceID, Parameters.ReceiptInvoiceID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WarehouseID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WarehouseID, Parameters.WarehouseID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReceiptStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceiptStatusID, Parameters.ReceiptStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter DateOfEntry
		    {
				get
		        {
					if(_DateOfEntry_W == null)
	        	    {
						_DateOfEntry_W = TearOff.DateOfEntry;
					}
					return _DateOfEntry_W;
				}
			}

			public AggregateParameter ReceiptTypeID
		    {
				get
		        {
					if(_ReceiptTypeID_W == null)
	        	    {
						_ReceiptTypeID_W = TearOff.ReceiptTypeID;
					}
					return _ReceiptTypeID_W;
				}
			}

			public AggregateParameter SavedByUserID
		    {
				get
		        {
					if(_SavedByUserID_W == null)
	        	    {
						_SavedByUserID_W = TearOff.SavedByUserID;
					}
					return _SavedByUserID_W;
				}
			}

			public AggregateParameter TotalValue
		    {
				get
		        {
					if(_TotalValue_W == null)
	        	    {
						_TotalValue_W = TearOff.TotalValue;
					}
					return _TotalValue_W;
				}
			}

			public AggregateParameter Insurance
		    {
				get
		        {
					if(_Insurance_W == null)
	        	    {
						_Insurance_W = TearOff.Insurance;
					}
					return _Insurance_W;
				}
			}

			public AggregateParameter AirFreight
		    {
				get
		        {
					if(_AirFreight_W == null)
	        	    {
						_AirFreight_W = TearOff.AirFreight;
					}
					return _AirFreight_W;
				}
			}

			public AggregateParameter SeaFreight
		    {
				get
		        {
					if(_SeaFreight_W == null)
	        	    {
						_SeaFreight_W = TearOff.SeaFreight;
					}
					return _SeaFreight_W;
				}
			}

			public AggregateParameter InlandFreight
		    {
				get
		        {
					if(_InlandFreight_W == null)
	        	    {
						_InlandFreight_W = TearOff.InlandFreight;
					}
					return _InlandFreight_W;
				}
			}

			public AggregateParameter NBE
		    {
				get
		        {
					if(_NBE_W == null)
	        	    {
						_NBE_W = TearOff.NBE;
					}
					return _NBE_W;
				}
			}

			public AggregateParameter CBE
		    {
				get
		        {
					if(_CBE_W == null)
	        	    {
						_CBE_W = TearOff.CBE;
					}
					return _CBE_W;
				}
			}

			public AggregateParameter CustomDutyTax
		    {
				get
		        {
					if(_CustomDutyTax_W == null)
	        	    {
						_CustomDutyTax_W = TearOff.CustomDutyTax;
					}
					return _CustomDutyTax_W;
				}
			}

			public AggregateParameter TransitServiceCharge
		    {
				get
		        {
					if(_TransitServiceCharge_W == null)
	        	    {
						_TransitServiceCharge_W = TearOff.TransitServiceCharge;
					}
					return _TransitServiceCharge_W;
				}
			}

			public AggregateParameter Provision
		    {
				get
		        {
					if(_Provision_W == null)
	        	    {
						_Provision_W = TearOff.Provision;
					}
					return _Provision_W;
				}
			}

			public AggregateParameter POID
		    {
				get
		        {
					if(_POID_W == null)
	        	    {
						_POID_W = TearOff.POID;
					}
					return _POID_W;
				}
			}

			public AggregateParameter WayBillNo
		    {
				get
		        {
					if(_WayBillNo_W == null)
	        	    {
						_WayBillNo_W = TearOff.WayBillNo;
					}
					return _WayBillNo_W;
				}
			}

			public AggregateParameter TransitTransferNo
		    {
				get
		        {
					if(_TransitTransferNo_W == null)
	        	    {
						_TransitTransferNo_W = TearOff.TransitTransferNo;
					}
					return _TransitTransferNo_W;
				}
			}

			public AggregateParameter InsurancePolicyNo
		    {
				get
		        {
					if(_InsurancePolicyNo_W == null)
	        	    {
						_InsurancePolicyNo_W = TearOff.InsurancePolicyNo;
					}
					return _InsurancePolicyNo_W;
				}
			}

			public AggregateParameter STVOrInvoiceNo
		    {
				get
		        {
					if(_STVOrInvoiceNo_W == null)
	        	    {
						_STVOrInvoiceNo_W = TearOff.STVOrInvoiceNo;
					}
					return _STVOrInvoiceNo_W;
				}
			}

			public AggregateParameter ReceiptInvoiceID
		    {
				get
		        {
					if(_ReceiptInvoiceID_W == null)
	        	    {
						_ReceiptInvoiceID_W = TearOff.ReceiptInvoiceID;
					}
					return _ReceiptInvoiceID_W;
				}
			}

			public AggregateParameter WarehouseID
		    {
				get
		        {
					if(_WarehouseID_W == null)
	        	    {
						_WarehouseID_W = TearOff.WarehouseID;
					}
					return _WarehouseID_W;
				}
			}

			public AggregateParameter ReceiptStatusID
		    {
				get
		        {
					if(_ReceiptStatusID_W == null)
	        	    {
						_ReceiptStatusID_W = TearOff.ReceiptStatusID;
					}
					return _ReceiptStatusID_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _DateOfEntry_W = null;
			private AggregateParameter _ReceiptTypeID_W = null;
			private AggregateParameter _SavedByUserID_W = null;
			private AggregateParameter _TotalValue_W = null;
			private AggregateParameter _Insurance_W = null;
			private AggregateParameter _AirFreight_W = null;
			private AggregateParameter _SeaFreight_W = null;
			private AggregateParameter _InlandFreight_W = null;
			private AggregateParameter _NBE_W = null;
			private AggregateParameter _CBE_W = null;
			private AggregateParameter _CustomDutyTax_W = null;
			private AggregateParameter _TransitServiceCharge_W = null;
			private AggregateParameter _Provision_W = null;
			private AggregateParameter _POID_W = null;
			private AggregateParameter _WayBillNo_W = null;
			private AggregateParameter _TransitTransferNo_W = null;
			private AggregateParameter _InsurancePolicyNo_W = null;
			private AggregateParameter _STVOrInvoiceNo_W = null;
			private AggregateParameter _ReceiptInvoiceID_W = null;
			private AggregateParameter _WarehouseID_W = null;
			private AggregateParameter _ReceiptStatusID_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_DateOfEntry_W = null;
				_ReceiptTypeID_W = null;
				_SavedByUserID_W = null;
				_TotalValue_W = null;
				_Insurance_W = null;
				_AirFreight_W = null;
				_SeaFreight_W = null;
				_InlandFreight_W = null;
				_NBE_W = null;
				_CBE_W = null;
				_CustomDutyTax_W = null;
				_TransitServiceCharge_W = null;
				_Provision_W = null;
				_POID_W = null;
				_WayBillNo_W = null;
				_TransitTransferNo_W = null;
				_InsurancePolicyNo_W = null;
				_STVOrInvoiceNo_W = null;
				_ReceiptInvoiceID_W = null;
				_WarehouseID_W = null;
				_ReceiptStatusID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ReceiptInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ReceiptUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ReceiptDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DateOfEntry);
			p.SourceColumn = ColumnNames.DateOfEntry;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReceiptTypeID);
			p.SourceColumn = ColumnNames.ReceiptTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SavedByUserID);
			p.SourceColumn = ColumnNames.SavedByUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TotalValue);
			p.SourceColumn = ColumnNames.TotalValue;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Insurance);
			p.SourceColumn = ColumnNames.Insurance;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AirFreight);
			p.SourceColumn = ColumnNames.AirFreight;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SeaFreight);
			p.SourceColumn = ColumnNames.SeaFreight;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InlandFreight);
			p.SourceColumn = ColumnNames.InlandFreight;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NBE);
			p.SourceColumn = ColumnNames.NBE;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CBE);
			p.SourceColumn = ColumnNames.CBE;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CustomDutyTax);
			p.SourceColumn = ColumnNames.CustomDutyTax;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TransitServiceCharge);
			p.SourceColumn = ColumnNames.TransitServiceCharge;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Provision);
			p.SourceColumn = ColumnNames.Provision;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.POID);
			p.SourceColumn = ColumnNames.POID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WayBillNo);
			p.SourceColumn = ColumnNames.WayBillNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TransitTransferNo);
			p.SourceColumn = ColumnNames.TransitTransferNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InsurancePolicyNo);
			p.SourceColumn = ColumnNames.InsurancePolicyNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.STVOrInvoiceNo);
			p.SourceColumn = ColumnNames.STVOrInvoiceNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReceiptInvoiceID);
			p.SourceColumn = ColumnNames.ReceiptInvoiceID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WarehouseID);
			p.SourceColumn = ColumnNames.WarehouseID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReceiptStatusID);
			p.SourceColumn = ColumnNames.ReceiptStatusID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
