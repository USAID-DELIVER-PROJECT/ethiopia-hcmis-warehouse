
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _ShippingContainerType : SqlClientEntity
	{
		public _ShippingContainerType()
		{
			this.QuerySource = "ShippingContainerType";
			this.MappingName = "ShippingContainerType";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ShippingContainerTypeLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ShippingContainerTypeID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ShippingContainerTypeID, ShippingContainerTypeID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ShippingContainerTypeLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ShippingContainerTypeID
			{
				get
				{
					return new SqlParameter("@ShippingContainerTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Name
			{
				get
				{
					return new SqlParameter("@Name", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter Description
			{
				get
				{
					return new SqlParameter("@Description", SqlDbType.NVarChar, 400);
				}
			}
			
			public static SqlParameter HeightMM
			{
				get
				{
					return new SqlParameter("@HeightMM", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter WidthMM
			{
				get
				{
					return new SqlParameter("@WidthMM", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter LengthMM
			{
				get
				{
					return new SqlParameter("@LengthMM", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter WeightG
			{
				get
				{
					return new SqlParameter("@WeightG", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsActive
			{
				get
				{
					return new SqlParameter("@IsActive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ShippingContainerTypeCode
			{
				get
				{
					return new SqlParameter("@ShippingContainerTypeCode", SqlDbType.NVarChar, 5);
				}
			}
			
			public static SqlParameter SN
			{
				get
				{
					return new SqlParameter("@SN", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Rowguid
			{
				get
				{
					return new SqlParameter("@Rowguid", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ShippingContainerTypeID = "ShippingContainerTypeID";
            public const string Name = "Name";
            public const string Description = "Description";
            public const string HeightMM = "HeightMM";
            public const string WidthMM = "WidthMM";
            public const string LengthMM = "LengthMM";
            public const string WeightG = "WeightG";
            public const string IsActive = "IsActive";
            public const string ShippingContainerTypeCode = "ShippingContainerTypeCode";
            public const string SN = "SN";
            public const string Rowguid = "rowguid";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ShippingContainerTypeID] = _ShippingContainerType.PropertyNames.ShippingContainerTypeID;
					ht[Name] = _ShippingContainerType.PropertyNames.Name;
					ht[Description] = _ShippingContainerType.PropertyNames.Description;
					ht[HeightMM] = _ShippingContainerType.PropertyNames.HeightMM;
					ht[WidthMM] = _ShippingContainerType.PropertyNames.WidthMM;
					ht[LengthMM] = _ShippingContainerType.PropertyNames.LengthMM;
					ht[WeightG] = _ShippingContainerType.PropertyNames.WeightG;
					ht[IsActive] = _ShippingContainerType.PropertyNames.IsActive;
					ht[ShippingContainerTypeCode] = _ShippingContainerType.PropertyNames.ShippingContainerTypeCode;
					ht[SN] = _ShippingContainerType.PropertyNames.SN;
					ht[Rowguid] = _ShippingContainerType.PropertyNames.Rowguid;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ShippingContainerTypeID = "ShippingContainerTypeID";
            public const string Name = "Name";
            public const string Description = "Description";
            public const string HeightMM = "HeightMM";
            public const string WidthMM = "WidthMM";
            public const string LengthMM = "LengthMM";
            public const string WeightG = "WeightG";
            public const string IsActive = "IsActive";
            public const string ShippingContainerTypeCode = "ShippingContainerTypeCode";
            public const string SN = "SN";
            public const string Rowguid = "Rowguid";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ShippingContainerTypeID] = _ShippingContainerType.ColumnNames.ShippingContainerTypeID;
					ht[Name] = _ShippingContainerType.ColumnNames.Name;
					ht[Description] = _ShippingContainerType.ColumnNames.Description;
					ht[HeightMM] = _ShippingContainerType.ColumnNames.HeightMM;
					ht[WidthMM] = _ShippingContainerType.ColumnNames.WidthMM;
					ht[LengthMM] = _ShippingContainerType.ColumnNames.LengthMM;
					ht[WeightG] = _ShippingContainerType.ColumnNames.WeightG;
					ht[IsActive] = _ShippingContainerType.ColumnNames.IsActive;
					ht[ShippingContainerTypeCode] = _ShippingContainerType.ColumnNames.ShippingContainerTypeCode;
					ht[SN] = _ShippingContainerType.ColumnNames.SN;
					ht[Rowguid] = _ShippingContainerType.ColumnNames.Rowguid;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ShippingContainerTypeID = "s_ShippingContainerTypeID";
            public const string Name = "s_Name";
            public const string Description = "s_Description";
            public const string HeightMM = "s_HeightMM";
            public const string WidthMM = "s_WidthMM";
            public const string LengthMM = "s_LengthMM";
            public const string WeightG = "s_WeightG";
            public const string IsActive = "s_IsActive";
            public const string ShippingContainerTypeCode = "s_ShippingContainerTypeCode";
            public const string SN = "s_SN";
            public const string Rowguid = "s_Rowguid";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ShippingContainerTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.ShippingContainerTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.ShippingContainerTypeID, value);
			}
		}

		public virtual string Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Name, value);
			}
		}

		public virtual string Description
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description);
			}
			set
	        {
				base.Setstring(ColumnNames.Description, value);
			}
		}

		public virtual int HeightMM
	    {
			get
	        {
				return base.Getint(ColumnNames.HeightMM);
			}
			set
	        {
				base.Setint(ColumnNames.HeightMM, value);
			}
		}

		public virtual int WidthMM
	    {
			get
	        {
				return base.Getint(ColumnNames.WidthMM);
			}
			set
	        {
				base.Setint(ColumnNames.WidthMM, value);
			}
		}

		public virtual int LengthMM
	    {
			get
	        {
				return base.Getint(ColumnNames.LengthMM);
			}
			set
	        {
				base.Setint(ColumnNames.LengthMM, value);
			}
		}

		public virtual int WeightG
	    {
			get
	        {
				return base.Getint(ColumnNames.WeightG);
			}
			set
	        {
				base.Setint(ColumnNames.WeightG, value);
			}
		}

		public virtual bool IsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.IsActive, value);
			}
		}

		public virtual string ShippingContainerTypeCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.ShippingContainerTypeCode);
			}
			set
	        {
				base.Setstring(ColumnNames.ShippingContainerTypeCode, value);
			}
		}

		public virtual int SN
	    {
			get
	        {
				return base.Getint(ColumnNames.SN);
			}
			set
	        {
				base.Setint(ColumnNames.SN, value);
			}
		}

		public virtual Guid Rowguid
	    {
			get
	        {
				return base.GetGuid(ColumnNames.Rowguid);
			}
			set
	        {
				base.SetGuid(ColumnNames.Rowguid, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ShippingContainerTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShippingContainerTypeID) ? string.Empty : base.GetintAsString(ColumnNames.ShippingContainerTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShippingContainerTypeID);
				else
					this.ShippingContainerTypeID = base.SetintAsString(ColumnNames.ShippingContainerTypeID, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name);
				else
					this.Name = base.SetstringAsString(ColumnNames.Name, value);
			}
		}

		public virtual string s_Description
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description) ? string.Empty : base.GetstringAsString(ColumnNames.Description);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description);
				else
					this.Description = base.SetstringAsString(ColumnNames.Description, value);
			}
		}

		public virtual string s_HeightMM
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HeightMM) ? string.Empty : base.GetintAsString(ColumnNames.HeightMM);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HeightMM);
				else
					this.HeightMM = base.SetintAsString(ColumnNames.HeightMM, value);
			}
		}

		public virtual string s_WidthMM
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WidthMM) ? string.Empty : base.GetintAsString(ColumnNames.WidthMM);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WidthMM);
				else
					this.WidthMM = base.SetintAsString(ColumnNames.WidthMM, value);
			}
		}

		public virtual string s_LengthMM
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LengthMM) ? string.Empty : base.GetintAsString(ColumnNames.LengthMM);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LengthMM);
				else
					this.LengthMM = base.SetintAsString(ColumnNames.LengthMM, value);
			}
		}

		public virtual string s_WeightG
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WeightG) ? string.Empty : base.GetintAsString(ColumnNames.WeightG);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WeightG);
				else
					this.WeightG = base.SetintAsString(ColumnNames.WeightG, value);
			}
		}

		public virtual string s_IsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsActive) ? string.Empty : base.GetboolAsString(ColumnNames.IsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsActive);
				else
					this.IsActive = base.SetboolAsString(ColumnNames.IsActive, value);
			}
		}

		public virtual string s_ShippingContainerTypeCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShippingContainerTypeCode) ? string.Empty : base.GetstringAsString(ColumnNames.ShippingContainerTypeCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShippingContainerTypeCode);
				else
					this.ShippingContainerTypeCode = base.SetstringAsString(ColumnNames.ShippingContainerTypeCode, value);
			}
		}

		public virtual string s_SN
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SN) ? string.Empty : base.GetintAsString(ColumnNames.SN);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SN);
				else
					this.SN = base.SetintAsString(ColumnNames.SN, value);
			}
		}

		public virtual string s_Rowguid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rowguid) ? string.Empty : base.GetGuidAsString(ColumnNames.Rowguid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rowguid);
				else
					this.Rowguid = base.SetGuidAsString(ColumnNames.Rowguid, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ShippingContainerTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShippingContainerTypeID, Parameters.ShippingContainerTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HeightMM
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HeightMM, Parameters.HeightMM);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WidthMM
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WidthMM, Parameters.WidthMM);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LengthMM
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LengthMM, Parameters.LengthMM);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WeightG
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WeightG, Parameters.WeightG);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShippingContainerTypeCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShippingContainerTypeCode, Parameters.ShippingContainerTypeCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SN
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SN, Parameters.SN);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rowguid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rowguid, Parameters.Rowguid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ShippingContainerTypeID
		    {
				get
		        {
					if(_ShippingContainerTypeID_W == null)
	        	    {
						_ShippingContainerTypeID_W = TearOff.ShippingContainerTypeID;
					}
					return _ShippingContainerTypeID_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public WhereParameter HeightMM
		    {
				get
		        {
					if(_HeightMM_W == null)
	        	    {
						_HeightMM_W = TearOff.HeightMM;
					}
					return _HeightMM_W;
				}
			}

			public WhereParameter WidthMM
		    {
				get
		        {
					if(_WidthMM_W == null)
	        	    {
						_WidthMM_W = TearOff.WidthMM;
					}
					return _WidthMM_W;
				}
			}

			public WhereParameter LengthMM
		    {
				get
		        {
					if(_LengthMM_W == null)
	        	    {
						_LengthMM_W = TearOff.LengthMM;
					}
					return _LengthMM_W;
				}
			}

			public WhereParameter WeightG
		    {
				get
		        {
					if(_WeightG_W == null)
	        	    {
						_WeightG_W = TearOff.WeightG;
					}
					return _WeightG_W;
				}
			}

			public WhereParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public WhereParameter ShippingContainerTypeCode
		    {
				get
		        {
					if(_ShippingContainerTypeCode_W == null)
	        	    {
						_ShippingContainerTypeCode_W = TearOff.ShippingContainerTypeCode;
					}
					return _ShippingContainerTypeCode_W;
				}
			}

			public WhereParameter SN
		    {
				get
		        {
					if(_SN_W == null)
	        	    {
						_SN_W = TearOff.SN;
					}
					return _SN_W;
				}
			}

			public WhereParameter Rowguid
		    {
				get
		        {
					if(_Rowguid_W == null)
	        	    {
						_Rowguid_W = TearOff.Rowguid;
					}
					return _Rowguid_W;
				}
			}

			private WhereParameter _ShippingContainerTypeID_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _Description_W = null;
			private WhereParameter _HeightMM_W = null;
			private WhereParameter _WidthMM_W = null;
			private WhereParameter _LengthMM_W = null;
			private WhereParameter _WeightG_W = null;
			private WhereParameter _IsActive_W = null;
			private WhereParameter _ShippingContainerTypeCode_W = null;
			private WhereParameter _SN_W = null;
			private WhereParameter _Rowguid_W = null;

			public void WhereClauseReset()
			{
				_ShippingContainerTypeID_W = null;
				_Name_W = null;
				_Description_W = null;
				_HeightMM_W = null;
				_WidthMM_W = null;
				_LengthMM_W = null;
				_WeightG_W = null;
				_IsActive_W = null;
				_ShippingContainerTypeCode_W = null;
				_SN_W = null;
				_Rowguid_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ShippingContainerTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShippingContainerTypeID, Parameters.ShippingContainerTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HeightMM
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HeightMM, Parameters.HeightMM);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WidthMM
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WidthMM, Parameters.WidthMM);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LengthMM
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LengthMM, Parameters.LengthMM);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WeightG
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WeightG, Parameters.WeightG);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShippingContainerTypeCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShippingContainerTypeCode, Parameters.ShippingContainerTypeCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SN
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SN, Parameters.SN);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rowguid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rowguid, Parameters.Rowguid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ShippingContainerTypeID
		    {
				get
		        {
					if(_ShippingContainerTypeID_W == null)
	        	    {
						_ShippingContainerTypeID_W = TearOff.ShippingContainerTypeID;
					}
					return _ShippingContainerTypeID_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public AggregateParameter HeightMM
		    {
				get
		        {
					if(_HeightMM_W == null)
	        	    {
						_HeightMM_W = TearOff.HeightMM;
					}
					return _HeightMM_W;
				}
			}

			public AggregateParameter WidthMM
		    {
				get
		        {
					if(_WidthMM_W == null)
	        	    {
						_WidthMM_W = TearOff.WidthMM;
					}
					return _WidthMM_W;
				}
			}

			public AggregateParameter LengthMM
		    {
				get
		        {
					if(_LengthMM_W == null)
	        	    {
						_LengthMM_W = TearOff.LengthMM;
					}
					return _LengthMM_W;
				}
			}

			public AggregateParameter WeightG
		    {
				get
		        {
					if(_WeightG_W == null)
	        	    {
						_WeightG_W = TearOff.WeightG;
					}
					return _WeightG_W;
				}
			}

			public AggregateParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public AggregateParameter ShippingContainerTypeCode
		    {
				get
		        {
					if(_ShippingContainerTypeCode_W == null)
	        	    {
						_ShippingContainerTypeCode_W = TearOff.ShippingContainerTypeCode;
					}
					return _ShippingContainerTypeCode_W;
				}
			}

			public AggregateParameter SN
		    {
				get
		        {
					if(_SN_W == null)
	        	    {
						_SN_W = TearOff.SN;
					}
					return _SN_W;
				}
			}

			public AggregateParameter Rowguid
		    {
				get
		        {
					if(_Rowguid_W == null)
	        	    {
						_Rowguid_W = TearOff.Rowguid;
					}
					return _Rowguid_W;
				}
			}

			private AggregateParameter _ShippingContainerTypeID_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _Description_W = null;
			private AggregateParameter _HeightMM_W = null;
			private AggregateParameter _WidthMM_W = null;
			private AggregateParameter _LengthMM_W = null;
			private AggregateParameter _WeightG_W = null;
			private AggregateParameter _IsActive_W = null;
			private AggregateParameter _ShippingContainerTypeCode_W = null;
			private AggregateParameter _SN_W = null;
			private AggregateParameter _Rowguid_W = null;

			public void AggregateClauseReset()
			{
				_ShippingContainerTypeID_W = null;
				_Name_W = null;
				_Description_W = null;
				_HeightMM_W = null;
				_WidthMM_W = null;
				_LengthMM_W = null;
				_WeightG_W = null;
				_IsActive_W = null;
				_ShippingContainerTypeCode_W = null;
				_SN_W = null;
				_Rowguid_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ShippingContainerTypeInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ShippingContainerTypeID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ShippingContainerTypeUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ShippingContainerTypeDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ShippingContainerTypeID);
			p.SourceColumn = ColumnNames.ShippingContainerTypeID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ShippingContainerTypeID);
			p.SourceColumn = ColumnNames.ShippingContainerTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name);
			p.SourceColumn = ColumnNames.Name;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Description);
			p.SourceColumn = ColumnNames.Description;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HeightMM);
			p.SourceColumn = ColumnNames.HeightMM;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WidthMM);
			p.SourceColumn = ColumnNames.WidthMM;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LengthMM);
			p.SourceColumn = ColumnNames.LengthMM;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WeightG);
			p.SourceColumn = ColumnNames.WeightG;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsActive);
			p.SourceColumn = ColumnNames.IsActive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShippingContainerTypeCode);
			p.SourceColumn = ColumnNames.ShippingContainerTypeCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SN);
			p.SourceColumn = ColumnNames.SN;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rowguid);
			p.SourceColumn = ColumnNames.Rowguid;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
