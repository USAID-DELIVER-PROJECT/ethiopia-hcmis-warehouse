
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _PalletLocation : SqlClientEntity
	{
		public _PalletLocation()
		{
			this.QuerySource = "PalletLocation";
			this.MappingName = "PalletLocation";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PalletLocationLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PalletLocationLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Label
			{
				get
				{
					return new SqlParameter("@Label", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter ShelfID
			{
				get
				{
					return new SqlParameter("@ShelfID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Row
			{
				get
				{
					return new SqlParameter("@Row", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Column
			{
				get
				{
					return new SqlParameter("@Column", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StorageTypeID
			{
				get
				{
					return new SqlParameter("@StorageTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsFullSize
			{
				get
				{
					return new SqlParameter("@IsFullSize", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsEnabled
			{
				get
				{
					return new SqlParameter("@IsEnabled", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter RackStatusID
			{
				get
				{
					return new SqlParameter("@RackStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PalletID
			{
				get
				{
					return new SqlParameter("@PalletID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PercentUsed
			{
				get
				{
					return new SqlParameter("@PercentUsed", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Width
			{
				get
				{
					return new SqlParameter("@Width", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Height
			{
				get
				{
					return new SqlParameter("@Height", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Length
			{
				get
				{
					return new SqlParameter("@Length", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Confirmed
			{
				get
				{
					return new SqlParameter("@Confirmed", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsExtended
			{
				get
				{
					return new SqlParameter("@IsExtended", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ExtendedRows
			{
				get
				{
					return new SqlParameter("@ExtendedRows", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AvailableVolume
			{
				get
				{
					return new SqlParameter("@AvailableVolume", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter UsedVolume
			{
				get
				{
					return new SqlParameter("@UsedVolume", SqlDbType.Float, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string Label = "Label";
            public const string ShelfID = "ShelfID";
            public const string Row = "Row";
            public const string Column = "Column";
            public const string StorageTypeID = "StorageTypeID";
            public const string IsFullSize = "IsFullSize";
            public const string IsEnabled = "IsEnabled";
            public const string RackStatusID = "RackStatusID";
            public const string PalletID = "PalletID";
            public const string PercentUsed = "PercentUsed";
            public const string Width = "Width";
            public const string Height = "Height";
            public const string Length = "Length";
            public const string Confirmed = "Confirmed";
            public const string IsExtended = "IsExtended";
            public const string ExtendedRows = "ExtendedRows";
            public const string AvailableVolume = "AvailableVolume";
            public const string UsedVolume = "UsedVolume";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _PalletLocation.PropertyNames.ID;
					ht[Label] = _PalletLocation.PropertyNames.Label;
					ht[ShelfID] = _PalletLocation.PropertyNames.ShelfID;
					ht[Row] = _PalletLocation.PropertyNames.Row;
					ht[Column] = _PalletLocation.PropertyNames.Column;
					ht[StorageTypeID] = _PalletLocation.PropertyNames.StorageTypeID;
					ht[IsFullSize] = _PalletLocation.PropertyNames.IsFullSize;
					ht[IsEnabled] = _PalletLocation.PropertyNames.IsEnabled;
					ht[RackStatusID] = _PalletLocation.PropertyNames.RackStatusID;
					ht[PalletID] = _PalletLocation.PropertyNames.PalletID;
					ht[PercentUsed] = _PalletLocation.PropertyNames.PercentUsed;
					ht[Width] = _PalletLocation.PropertyNames.Width;
					ht[Height] = _PalletLocation.PropertyNames.Height;
					ht[Length] = _PalletLocation.PropertyNames.Length;
					ht[Confirmed] = _PalletLocation.PropertyNames.Confirmed;
					ht[IsExtended] = _PalletLocation.PropertyNames.IsExtended;
					ht[ExtendedRows] = _PalletLocation.PropertyNames.ExtendedRows;
					ht[AvailableVolume] = _PalletLocation.PropertyNames.AvailableVolume;
					ht[UsedVolume] = _PalletLocation.PropertyNames.UsedVolume;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string Label = "Label";
            public const string ShelfID = "ShelfID";
            public const string Row = "Row";
            public const string Column = "Column";
            public const string StorageTypeID = "StorageTypeID";
            public const string IsFullSize = "IsFullSize";
            public const string IsEnabled = "IsEnabled";
            public const string RackStatusID = "RackStatusID";
            public const string PalletID = "PalletID";
            public const string PercentUsed = "PercentUsed";
            public const string Width = "Width";
            public const string Height = "Height";
            public const string Length = "Length";
            public const string Confirmed = "Confirmed";
            public const string IsExtended = "IsExtended";
            public const string ExtendedRows = "ExtendedRows";
            public const string AvailableVolume = "AvailableVolume";
            public const string UsedVolume = "UsedVolume";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _PalletLocation.ColumnNames.ID;
					ht[Label] = _PalletLocation.ColumnNames.Label;
					ht[ShelfID] = _PalletLocation.ColumnNames.ShelfID;
					ht[Row] = _PalletLocation.ColumnNames.Row;
					ht[Column] = _PalletLocation.ColumnNames.Column;
					ht[StorageTypeID] = _PalletLocation.ColumnNames.StorageTypeID;
					ht[IsFullSize] = _PalletLocation.ColumnNames.IsFullSize;
					ht[IsEnabled] = _PalletLocation.ColumnNames.IsEnabled;
					ht[RackStatusID] = _PalletLocation.ColumnNames.RackStatusID;
					ht[PalletID] = _PalletLocation.ColumnNames.PalletID;
					ht[PercentUsed] = _PalletLocation.ColumnNames.PercentUsed;
					ht[Width] = _PalletLocation.ColumnNames.Width;
					ht[Height] = _PalletLocation.ColumnNames.Height;
					ht[Length] = _PalletLocation.ColumnNames.Length;
					ht[Confirmed] = _PalletLocation.ColumnNames.Confirmed;
					ht[IsExtended] = _PalletLocation.ColumnNames.IsExtended;
					ht[ExtendedRows] = _PalletLocation.ColumnNames.ExtendedRows;
					ht[AvailableVolume] = _PalletLocation.ColumnNames.AvailableVolume;
					ht[UsedVolume] = _PalletLocation.ColumnNames.UsedVolume;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string Label = "s_Label";
            public const string ShelfID = "s_ShelfID";
            public const string Row = "s_Row";
            public const string Column = "s_Column";
            public const string StorageTypeID = "s_StorageTypeID";
            public const string IsFullSize = "s_IsFullSize";
            public const string IsEnabled = "s_IsEnabled";
            public const string RackStatusID = "s_RackStatusID";
            public const string PalletID = "s_PalletID";
            public const string PercentUsed = "s_PercentUsed";
            public const string Width = "s_Width";
            public const string Height = "s_Height";
            public const string Length = "s_Length";
            public const string Confirmed = "s_Confirmed";
            public const string IsExtended = "s_IsExtended";
            public const string ExtendedRows = "s_ExtendedRows";
            public const string AvailableVolume = "s_AvailableVolume";
            public const string UsedVolume = "s_UsedVolume";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual string Label
	    {
			get
	        {
				return base.Getstring(ColumnNames.Label);
			}
			set
	        {
				base.Setstring(ColumnNames.Label, value);
			}
		}

		public virtual int ShelfID
	    {
			get
	        {
				return base.Getint(ColumnNames.ShelfID);
			}
			set
	        {
				base.Setint(ColumnNames.ShelfID, value);
			}
		}

		public virtual int Row
	    {
			get
	        {
				return base.Getint(ColumnNames.Row);
			}
			set
	        {
				base.Setint(ColumnNames.Row, value);
			}
		}

		public virtual int Column
	    {
			get
	        {
				return base.Getint(ColumnNames.Column);
			}
			set
	        {
				base.Setint(ColumnNames.Column, value);
			}
		}

		public virtual int StorageTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.StorageTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.StorageTypeID, value);
			}
		}

		public virtual bool IsFullSize
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsFullSize);
			}
			set
	        {
				base.Setbool(ColumnNames.IsFullSize, value);
			}
		}

		public virtual bool IsEnabled
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsEnabled);
			}
			set
	        {
				base.Setbool(ColumnNames.IsEnabled, value);
			}
		}

		public virtual int RackStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.RackStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.RackStatusID, value);
			}
		}

		public virtual int PalletID
	    {
			get
	        {
				return base.Getint(ColumnNames.PalletID);
			}
			set
	        {
				base.Setint(ColumnNames.PalletID, value);
			}
		}

		public virtual double PercentUsed
	    {
			get
	        {
				return base.Getdouble(ColumnNames.PercentUsed);
			}
			set
	        {
				base.Setdouble(ColumnNames.PercentUsed, value);
			}
		}

		public virtual double Width
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Width);
			}
			set
	        {
				base.Setdouble(ColumnNames.Width, value);
			}
		}

		public virtual double Height
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Height);
			}
			set
	        {
				base.Setdouble(ColumnNames.Height, value);
			}
		}

		public virtual double Length
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Length);
			}
			set
	        {
				base.Setdouble(ColumnNames.Length, value);
			}
		}

		public virtual bool Confirmed
	    {
			get
	        {
				return base.Getbool(ColumnNames.Confirmed);
			}
			set
	        {
				base.Setbool(ColumnNames.Confirmed, value);
			}
		}

		public virtual bool IsExtended
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsExtended);
			}
			set
	        {
				base.Setbool(ColumnNames.IsExtended, value);
			}
		}

		public virtual int ExtendedRows
	    {
			get
	        {
				return base.Getint(ColumnNames.ExtendedRows);
			}
			set
	        {
				base.Setint(ColumnNames.ExtendedRows, value);
			}
		}

		public virtual double AvailableVolume
	    {
			get
	        {
				return base.Getdouble(ColumnNames.AvailableVolume);
			}
			set
	        {
				base.Setdouble(ColumnNames.AvailableVolume, value);
			}
		}

		public virtual double UsedVolume
	    {
			get
	        {
				return base.Getdouble(ColumnNames.UsedVolume);
			}
			set
	        {
				base.Setdouble(ColumnNames.UsedVolume, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_Label
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Label) ? string.Empty : base.GetstringAsString(ColumnNames.Label);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Label);
				else
					this.Label = base.SetstringAsString(ColumnNames.Label, value);
			}
		}

		public virtual string s_ShelfID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShelfID) ? string.Empty : base.GetintAsString(ColumnNames.ShelfID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShelfID);
				else
					this.ShelfID = base.SetintAsString(ColumnNames.ShelfID, value);
			}
		}

		public virtual string s_Row
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Row) ? string.Empty : base.GetintAsString(ColumnNames.Row);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Row);
				else
					this.Row = base.SetintAsString(ColumnNames.Row, value);
			}
		}

		public virtual string s_Column
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Column) ? string.Empty : base.GetintAsString(ColumnNames.Column);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Column);
				else
					this.Column = base.SetintAsString(ColumnNames.Column, value);
			}
		}

		public virtual string s_StorageTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StorageTypeID) ? string.Empty : base.GetintAsString(ColumnNames.StorageTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StorageTypeID);
				else
					this.StorageTypeID = base.SetintAsString(ColumnNames.StorageTypeID, value);
			}
		}

		public virtual string s_IsFullSize
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsFullSize) ? string.Empty : base.GetboolAsString(ColumnNames.IsFullSize);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsFullSize);
				else
					this.IsFullSize = base.SetboolAsString(ColumnNames.IsFullSize, value);
			}
		}

		public virtual string s_IsEnabled
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsEnabled) ? string.Empty : base.GetboolAsString(ColumnNames.IsEnabled);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsEnabled);
				else
					this.IsEnabled = base.SetboolAsString(ColumnNames.IsEnabled, value);
			}
		}

		public virtual string s_RackStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RackStatusID) ? string.Empty : base.GetintAsString(ColumnNames.RackStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RackStatusID);
				else
					this.RackStatusID = base.SetintAsString(ColumnNames.RackStatusID, value);
			}
		}

		public virtual string s_PalletID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PalletID) ? string.Empty : base.GetintAsString(ColumnNames.PalletID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PalletID);
				else
					this.PalletID = base.SetintAsString(ColumnNames.PalletID, value);
			}
		}

		public virtual string s_PercentUsed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PercentUsed) ? string.Empty : base.GetdoubleAsString(ColumnNames.PercentUsed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PercentUsed);
				else
					this.PercentUsed = base.SetdoubleAsString(ColumnNames.PercentUsed, value);
			}
		}

		public virtual string s_Width
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Width) ? string.Empty : base.GetdoubleAsString(ColumnNames.Width);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Width);
				else
					this.Width = base.SetdoubleAsString(ColumnNames.Width, value);
			}
		}

		public virtual string s_Height
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Height) ? string.Empty : base.GetdoubleAsString(ColumnNames.Height);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Height);
				else
					this.Height = base.SetdoubleAsString(ColumnNames.Height, value);
			}
		}

		public virtual string s_Length
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Length) ? string.Empty : base.GetdoubleAsString(ColumnNames.Length);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Length);
				else
					this.Length = base.SetdoubleAsString(ColumnNames.Length, value);
			}
		}

		public virtual string s_Confirmed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Confirmed) ? string.Empty : base.GetboolAsString(ColumnNames.Confirmed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Confirmed);
				else
					this.Confirmed = base.SetboolAsString(ColumnNames.Confirmed, value);
			}
		}

		public virtual string s_IsExtended
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsExtended) ? string.Empty : base.GetboolAsString(ColumnNames.IsExtended);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsExtended);
				else
					this.IsExtended = base.SetboolAsString(ColumnNames.IsExtended, value);
			}
		}

		public virtual string s_ExtendedRows
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ExtendedRows) ? string.Empty : base.GetintAsString(ColumnNames.ExtendedRows);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ExtendedRows);
				else
					this.ExtendedRows = base.SetintAsString(ColumnNames.ExtendedRows, value);
			}
		}

		public virtual string s_AvailableVolume
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AvailableVolume) ? string.Empty : base.GetdoubleAsString(ColumnNames.AvailableVolume);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AvailableVolume);
				else
					this.AvailableVolume = base.SetdoubleAsString(ColumnNames.AvailableVolume, value);
			}
		}

		public virtual string s_UsedVolume
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UsedVolume) ? string.Empty : base.GetdoubleAsString(ColumnNames.UsedVolume);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UsedVolume);
				else
					this.UsedVolume = base.SetdoubleAsString(ColumnNames.UsedVolume, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Label
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Label, Parameters.Label);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShelfID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShelfID, Parameters.ShelfID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Row
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Row, Parameters.Row);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Column
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Column, Parameters.Column);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StorageTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StorageTypeID, Parameters.StorageTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsFullSize
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsFullSize, Parameters.IsFullSize);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsEnabled
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsEnabled, Parameters.IsEnabled);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RackStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RackStatusID, Parameters.RackStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PalletID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PalletID, Parameters.PalletID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PercentUsed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PercentUsed, Parameters.PercentUsed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Width
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Width, Parameters.Width);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Height
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Height, Parameters.Height);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Length
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Length, Parameters.Length);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Confirmed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Confirmed, Parameters.Confirmed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsExtended
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsExtended, Parameters.IsExtended);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ExtendedRows
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ExtendedRows, Parameters.ExtendedRows);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AvailableVolume
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AvailableVolume, Parameters.AvailableVolume);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UsedVolume
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UsedVolume, Parameters.UsedVolume);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter Label
		    {
				get
		        {
					if(_Label_W == null)
	        	    {
						_Label_W = TearOff.Label;
					}
					return _Label_W;
				}
			}

			public WhereParameter ShelfID
		    {
				get
		        {
					if(_ShelfID_W == null)
	        	    {
						_ShelfID_W = TearOff.ShelfID;
					}
					return _ShelfID_W;
				}
			}

			public WhereParameter Row
		    {
				get
		        {
					if(_Row_W == null)
	        	    {
						_Row_W = TearOff.Row;
					}
					return _Row_W;
				}
			}

			public WhereParameter Column
		    {
				get
		        {
					if(_Column_W == null)
	        	    {
						_Column_W = TearOff.Column;
					}
					return _Column_W;
				}
			}

			public WhereParameter StorageTypeID
		    {
				get
		        {
					if(_StorageTypeID_W == null)
	        	    {
						_StorageTypeID_W = TearOff.StorageTypeID;
					}
					return _StorageTypeID_W;
				}
			}

			public WhereParameter IsFullSize
		    {
				get
		        {
					if(_IsFullSize_W == null)
	        	    {
						_IsFullSize_W = TearOff.IsFullSize;
					}
					return _IsFullSize_W;
				}
			}

			public WhereParameter IsEnabled
		    {
				get
		        {
					if(_IsEnabled_W == null)
	        	    {
						_IsEnabled_W = TearOff.IsEnabled;
					}
					return _IsEnabled_W;
				}
			}

			public WhereParameter RackStatusID
		    {
				get
		        {
					if(_RackStatusID_W == null)
	        	    {
						_RackStatusID_W = TearOff.RackStatusID;
					}
					return _RackStatusID_W;
				}
			}

			public WhereParameter PalletID
		    {
				get
		        {
					if(_PalletID_W == null)
	        	    {
						_PalletID_W = TearOff.PalletID;
					}
					return _PalletID_W;
				}
			}

			public WhereParameter PercentUsed
		    {
				get
		        {
					if(_PercentUsed_W == null)
	        	    {
						_PercentUsed_W = TearOff.PercentUsed;
					}
					return _PercentUsed_W;
				}
			}

			public WhereParameter Width
		    {
				get
		        {
					if(_Width_W == null)
	        	    {
						_Width_W = TearOff.Width;
					}
					return _Width_W;
				}
			}

			public WhereParameter Height
		    {
				get
		        {
					if(_Height_W == null)
	        	    {
						_Height_W = TearOff.Height;
					}
					return _Height_W;
				}
			}

			public WhereParameter Length
		    {
				get
		        {
					if(_Length_W == null)
	        	    {
						_Length_W = TearOff.Length;
					}
					return _Length_W;
				}
			}

			public WhereParameter Confirmed
		    {
				get
		        {
					if(_Confirmed_W == null)
	        	    {
						_Confirmed_W = TearOff.Confirmed;
					}
					return _Confirmed_W;
				}
			}

			public WhereParameter IsExtended
		    {
				get
		        {
					if(_IsExtended_W == null)
	        	    {
						_IsExtended_W = TearOff.IsExtended;
					}
					return _IsExtended_W;
				}
			}

			public WhereParameter ExtendedRows
		    {
				get
		        {
					if(_ExtendedRows_W == null)
	        	    {
						_ExtendedRows_W = TearOff.ExtendedRows;
					}
					return _ExtendedRows_W;
				}
			}

			public WhereParameter AvailableVolume
		    {
				get
		        {
					if(_AvailableVolume_W == null)
	        	    {
						_AvailableVolume_W = TearOff.AvailableVolume;
					}
					return _AvailableVolume_W;
				}
			}

			public WhereParameter UsedVolume
		    {
				get
		        {
					if(_UsedVolume_W == null)
	        	    {
						_UsedVolume_W = TearOff.UsedVolume;
					}
					return _UsedVolume_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _Label_W = null;
			private WhereParameter _ShelfID_W = null;
			private WhereParameter _Row_W = null;
			private WhereParameter _Column_W = null;
			private WhereParameter _StorageTypeID_W = null;
			private WhereParameter _IsFullSize_W = null;
			private WhereParameter _IsEnabled_W = null;
			private WhereParameter _RackStatusID_W = null;
			private WhereParameter _PalletID_W = null;
			private WhereParameter _PercentUsed_W = null;
			private WhereParameter _Width_W = null;
			private WhereParameter _Height_W = null;
			private WhereParameter _Length_W = null;
			private WhereParameter _Confirmed_W = null;
			private WhereParameter _IsExtended_W = null;
			private WhereParameter _ExtendedRows_W = null;
			private WhereParameter _AvailableVolume_W = null;
			private WhereParameter _UsedVolume_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_Label_W = null;
				_ShelfID_W = null;
				_Row_W = null;
				_Column_W = null;
				_StorageTypeID_W = null;
				_IsFullSize_W = null;
				_IsEnabled_W = null;
				_RackStatusID_W = null;
				_PalletID_W = null;
				_PercentUsed_W = null;
				_Width_W = null;
				_Height_W = null;
				_Length_W = null;
				_Confirmed_W = null;
				_IsExtended_W = null;
				_ExtendedRows_W = null;
				_AvailableVolume_W = null;
				_UsedVolume_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Label
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Label, Parameters.Label);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShelfID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShelfID, Parameters.ShelfID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Row
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Row, Parameters.Row);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Column
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Column, Parameters.Column);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StorageTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StorageTypeID, Parameters.StorageTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsFullSize
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsFullSize, Parameters.IsFullSize);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsEnabled
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsEnabled, Parameters.IsEnabled);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RackStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RackStatusID, Parameters.RackStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PalletID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PalletID, Parameters.PalletID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PercentUsed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PercentUsed, Parameters.PercentUsed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Width
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Width, Parameters.Width);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Height
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Height, Parameters.Height);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Length
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Length, Parameters.Length);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Confirmed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Confirmed, Parameters.Confirmed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsExtended
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsExtended, Parameters.IsExtended);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ExtendedRows
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExtendedRows, Parameters.ExtendedRows);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AvailableVolume
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AvailableVolume, Parameters.AvailableVolume);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UsedVolume
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UsedVolume, Parameters.UsedVolume);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter Label
		    {
				get
		        {
					if(_Label_W == null)
	        	    {
						_Label_W = TearOff.Label;
					}
					return _Label_W;
				}
			}

			public AggregateParameter ShelfID
		    {
				get
		        {
					if(_ShelfID_W == null)
	        	    {
						_ShelfID_W = TearOff.ShelfID;
					}
					return _ShelfID_W;
				}
			}

			public AggregateParameter Row
		    {
				get
		        {
					if(_Row_W == null)
	        	    {
						_Row_W = TearOff.Row;
					}
					return _Row_W;
				}
			}

			public AggregateParameter Column
		    {
				get
		        {
					if(_Column_W == null)
	        	    {
						_Column_W = TearOff.Column;
					}
					return _Column_W;
				}
			}

			public AggregateParameter StorageTypeID
		    {
				get
		        {
					if(_StorageTypeID_W == null)
	        	    {
						_StorageTypeID_W = TearOff.StorageTypeID;
					}
					return _StorageTypeID_W;
				}
			}

			public AggregateParameter IsFullSize
		    {
				get
		        {
					if(_IsFullSize_W == null)
	        	    {
						_IsFullSize_W = TearOff.IsFullSize;
					}
					return _IsFullSize_W;
				}
			}

			public AggregateParameter IsEnabled
		    {
				get
		        {
					if(_IsEnabled_W == null)
	        	    {
						_IsEnabled_W = TearOff.IsEnabled;
					}
					return _IsEnabled_W;
				}
			}

			public AggregateParameter RackStatusID
		    {
				get
		        {
					if(_RackStatusID_W == null)
	        	    {
						_RackStatusID_W = TearOff.RackStatusID;
					}
					return _RackStatusID_W;
				}
			}

			public AggregateParameter PalletID
		    {
				get
		        {
					if(_PalletID_W == null)
	        	    {
						_PalletID_W = TearOff.PalletID;
					}
					return _PalletID_W;
				}
			}

			public AggregateParameter PercentUsed
		    {
				get
		        {
					if(_PercentUsed_W == null)
	        	    {
						_PercentUsed_W = TearOff.PercentUsed;
					}
					return _PercentUsed_W;
				}
			}

			public AggregateParameter Width
		    {
				get
		        {
					if(_Width_W == null)
	        	    {
						_Width_W = TearOff.Width;
					}
					return _Width_W;
				}
			}

			public AggregateParameter Height
		    {
				get
		        {
					if(_Height_W == null)
	        	    {
						_Height_W = TearOff.Height;
					}
					return _Height_W;
				}
			}

			public AggregateParameter Length
		    {
				get
		        {
					if(_Length_W == null)
	        	    {
						_Length_W = TearOff.Length;
					}
					return _Length_W;
				}
			}

			public AggregateParameter Confirmed
		    {
				get
		        {
					if(_Confirmed_W == null)
	        	    {
						_Confirmed_W = TearOff.Confirmed;
					}
					return _Confirmed_W;
				}
			}

			public AggregateParameter IsExtended
		    {
				get
		        {
					if(_IsExtended_W == null)
	        	    {
						_IsExtended_W = TearOff.IsExtended;
					}
					return _IsExtended_W;
				}
			}

			public AggregateParameter ExtendedRows
		    {
				get
		        {
					if(_ExtendedRows_W == null)
	        	    {
						_ExtendedRows_W = TearOff.ExtendedRows;
					}
					return _ExtendedRows_W;
				}
			}

			public AggregateParameter AvailableVolume
		    {
				get
		        {
					if(_AvailableVolume_W == null)
	        	    {
						_AvailableVolume_W = TearOff.AvailableVolume;
					}
					return _AvailableVolume_W;
				}
			}

			public AggregateParameter UsedVolume
		    {
				get
		        {
					if(_UsedVolume_W == null)
	        	    {
						_UsedVolume_W = TearOff.UsedVolume;
					}
					return _UsedVolume_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _Label_W = null;
			private AggregateParameter _ShelfID_W = null;
			private AggregateParameter _Row_W = null;
			private AggregateParameter _Column_W = null;
			private AggregateParameter _StorageTypeID_W = null;
			private AggregateParameter _IsFullSize_W = null;
			private AggregateParameter _IsEnabled_W = null;
			private AggregateParameter _RackStatusID_W = null;
			private AggregateParameter _PalletID_W = null;
			private AggregateParameter _PercentUsed_W = null;
			private AggregateParameter _Width_W = null;
			private AggregateParameter _Height_W = null;
			private AggregateParameter _Length_W = null;
			private AggregateParameter _Confirmed_W = null;
			private AggregateParameter _IsExtended_W = null;
			private AggregateParameter _ExtendedRows_W = null;
			private AggregateParameter _AvailableVolume_W = null;
			private AggregateParameter _UsedVolume_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_Label_W = null;
				_ShelfID_W = null;
				_Row_W = null;
				_Column_W = null;
				_StorageTypeID_W = null;
				_IsFullSize_W = null;
				_IsEnabled_W = null;
				_RackStatusID_W = null;
				_PalletID_W = null;
				_PercentUsed_W = null;
				_Width_W = null;
				_Height_W = null;
				_Length_W = null;
				_Confirmed_W = null;
				_IsExtended_W = null;
				_ExtendedRows_W = null;
				_AvailableVolume_W = null;
				_UsedVolume_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PalletLocationInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PalletLocationUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PalletLocationDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Label);
			p.SourceColumn = ColumnNames.Label;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShelfID);
			p.SourceColumn = ColumnNames.ShelfID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Row);
			p.SourceColumn = ColumnNames.Row;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Column);
			p.SourceColumn = ColumnNames.Column;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StorageTypeID);
			p.SourceColumn = ColumnNames.StorageTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsFullSize);
			p.SourceColumn = ColumnNames.IsFullSize;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsEnabled);
			p.SourceColumn = ColumnNames.IsEnabled;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RackStatusID);
			p.SourceColumn = ColumnNames.RackStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PalletID);
			p.SourceColumn = ColumnNames.PalletID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PercentUsed);
			p.SourceColumn = ColumnNames.PercentUsed;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Width);
			p.SourceColumn = ColumnNames.Width;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Height);
			p.SourceColumn = ColumnNames.Height;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Length);
			p.SourceColumn = ColumnNames.Length;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Confirmed);
			p.SourceColumn = ColumnNames.Confirmed;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsExtended);
			p.SourceColumn = ColumnNames.IsExtended;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ExtendedRows);
			p.SourceColumn = ColumnNames.ExtendedRows;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AvailableVolume);
			p.SourceColumn = ColumnNames.AvailableVolume;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UsedVolume);
			p.SourceColumn = ColumnNames.UsedVolume;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
