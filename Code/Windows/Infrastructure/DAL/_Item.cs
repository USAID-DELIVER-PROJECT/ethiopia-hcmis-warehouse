
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _Item : SqlClientEntity
	{
		public _Item()
		{
			this.QuerySource = "Item";
			this.MappingName = "Item";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ItemLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ItemLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StockCode
			{
				get
				{
					return new SqlParameter("@StockCode", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Strength
			{
				get
				{
					return new SqlParameter("@Strength", SqlDbType.VarChar, 1500);
				}
			}
			
			public static SqlParameter DosageFormID
			{
				get
				{
					return new SqlParameter("@DosageFormID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter VEN
			{
				get
				{
					return new SqlParameter("@VEN", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ABC
			{
				get
				{
					return new SqlParameter("@ABC", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsFree
			{
				get
				{
					return new SqlParameter("@IsFree", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsDiscontinued
			{
				get
				{
					return new SqlParameter("@IsDiscontinued", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter Cost
			{
				get
				{
					return new SqlParameter("@Cost", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter EDL
			{
				get
				{
					return new SqlParameter("@EDL", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter Refrigeratored
			{
				get
				{
					return new SqlParameter("@Refrigeratored", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter Pediatric
			{
				get
				{
					return new SqlParameter("@Pediatric", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IINID
			{
				get
				{
					return new SqlParameter("@IINID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsInHospitalList
			{
				get
				{
					return new SqlParameter("@IsInHospitalList", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter Code
			{
				get
				{
					return new SqlParameter("@Code", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter StockCodeDACA
			{
				get
				{
					return new SqlParameter("@StockCodeDACA", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter NearExpiryTrigger
			{
				get
				{
					return new SqlParameter("@NearExpiryTrigger", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter StorageTypeID
			{
				get
				{
					return new SqlParameter("@StorageTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsStackStored
			{
				get
				{
					return new SqlParameter("@IsStackStored", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ProcessInDecimal
			{
				get
				{
					return new SqlParameter("@ProcessInDecimal", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsActive
			{
				get
				{
					return new SqlParameter("@IsActive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter NeedExpiry
			{
				get
				{
					return new SqlParameter("@NeedExpiry", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter NeedBatch
			{
				get
				{
					return new SqlParameter("@NeedBatch", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter Rowguid
			{
				get
				{
					return new SqlParameter("@Rowguid", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter StorageLocationTypeGuid
			{
				get
				{
					return new SqlParameter("@StorageLocationTypeGuid", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter VENGuid
			{
				get
				{
					return new SqlParameter("@VENGuid", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter ABCGuid
			{
				get
				{
					return new SqlParameter("@ABCGuid", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter ProductGuid
			{
				get
				{
					return new SqlParameter("@ProductGuid", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter DosageFormGuid
			{
				get
				{
					return new SqlParameter("@DosageFormGuid", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter UnitGuid
			{
				get
				{
					return new SqlParameter("@UnitGuid", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter CreatedDate
			{
				get
				{
					return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ModifiedDate
			{
				get
				{
					return new SqlParameter("@ModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ModifiedBy
			{
				get
				{
					return new SqlParameter("@ModifiedBy", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter SN
			{
				get
				{
					return new SqlParameter("@SN", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter NeedExpiryBatch
			{
				get
				{
					return new SqlParameter("@NeedExpiryBatch", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter RRGroupID
			{
				get
				{
					return new SqlParameter("@RRGroupID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsVariableMargin
			{
				get
				{
					return new SqlParameter("@IsVariableMargin", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string StockCode = "StockCode";
            public const string Strength = "Strength";
            public const string DosageFormID = "DosageFormID";
            public const string VEN = "VEN";
            public const string ABC = "ABC";
            public const string IsFree = "IsFree";
            public const string IsDiscontinued = "IsDiscontinued";
            public const string Cost = "Cost";
            public const string EDL = "EDL";
            public const string Refrigeratored = "Refrigeratored";
            public const string Pediatric = "Pediatric";
            public const string IINID = "IINID";
            public const string IsInHospitalList = "IsInHospitalList";
            public const string Code = "Code";
            public const string StockCodeDACA = "StockCodeDACA";
            public const string NearExpiryTrigger = "NearExpiryTrigger";
            public const string StorageTypeID = "StorageTypeID";
            public const string IsStackStored = "IsStackStored";
            public const string ProcessInDecimal = "ProcessInDecimal";
            public const string IsActive = "IsActive";
            public const string NeedExpiry = "NeedExpiry";
            public const string NeedBatch = "NeedBatch";
            public const string Rowguid = "rowguid";
            public const string StorageLocationTypeGuid = "StorageLocationTypeGuid";
            public const string VENGuid = "VENGuid";
            public const string ABCGuid = "ABCGuid";
            public const string ProductGuid = "ProductGuid";
            public const string DosageFormGuid = "DosageFormGuid";
            public const string UnitGuid = "UnitGuid";
            public const string CreatedDate = "CreatedDate";
            public const string ModifiedDate = "ModifiedDate";
            public const string ModifiedBy = "ModifiedBy";
            public const string SN = "SN";
            public const string NeedExpiryBatch = "NeedExpiryBatch";
            public const string RRGroupID = "RRGroupID";
            public const string IsVariableMargin = "IsVariableMargin";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _Item.PropertyNames.ID;
					ht[StockCode] = _Item.PropertyNames.StockCode;
					ht[Strength] = _Item.PropertyNames.Strength;
					ht[DosageFormID] = _Item.PropertyNames.DosageFormID;
					ht[VEN] = _Item.PropertyNames.VEN;
					ht[ABC] = _Item.PropertyNames.ABC;
					ht[IsFree] = _Item.PropertyNames.IsFree;
					ht[IsDiscontinued] = _Item.PropertyNames.IsDiscontinued;
					ht[Cost] = _Item.PropertyNames.Cost;
					ht[EDL] = _Item.PropertyNames.EDL;
					ht[Refrigeratored] = _Item.PropertyNames.Refrigeratored;
					ht[Pediatric] = _Item.PropertyNames.Pediatric;
					ht[IINID] = _Item.PropertyNames.IINID;
					ht[IsInHospitalList] = _Item.PropertyNames.IsInHospitalList;
					ht[Code] = _Item.PropertyNames.Code;
					ht[StockCodeDACA] = _Item.PropertyNames.StockCodeDACA;
					ht[NearExpiryTrigger] = _Item.PropertyNames.NearExpiryTrigger;
					ht[StorageTypeID] = _Item.PropertyNames.StorageTypeID;
					ht[IsStackStored] = _Item.PropertyNames.IsStackStored;
					ht[ProcessInDecimal] = _Item.PropertyNames.ProcessInDecimal;
					ht[IsActive] = _Item.PropertyNames.IsActive;
					ht[NeedExpiry] = _Item.PropertyNames.NeedExpiry;
					ht[NeedBatch] = _Item.PropertyNames.NeedBatch;
					ht[Rowguid] = _Item.PropertyNames.Rowguid;
					ht[StorageLocationTypeGuid] = _Item.PropertyNames.StorageLocationTypeGuid;
					ht[VENGuid] = _Item.PropertyNames.VENGuid;
					ht[ABCGuid] = _Item.PropertyNames.ABCGuid;
					ht[ProductGuid] = _Item.PropertyNames.ProductGuid;
					ht[DosageFormGuid] = _Item.PropertyNames.DosageFormGuid;
					ht[UnitGuid] = _Item.PropertyNames.UnitGuid;
					ht[CreatedDate] = _Item.PropertyNames.CreatedDate;
					ht[ModifiedDate] = _Item.PropertyNames.ModifiedDate;
					ht[ModifiedBy] = _Item.PropertyNames.ModifiedBy;
					ht[SN] = _Item.PropertyNames.SN;
					ht[NeedExpiryBatch] = _Item.PropertyNames.NeedExpiryBatch;
					ht[RRGroupID] = _Item.PropertyNames.RRGroupID;
					ht[IsVariableMargin] = _Item.PropertyNames.IsVariableMargin;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string StockCode = "StockCode";
            public const string Strength = "Strength";
            public const string DosageFormID = "DosageFormID";
            public const string VEN = "VEN";
            public const string ABC = "ABC";
            public const string IsFree = "IsFree";
            public const string IsDiscontinued = "IsDiscontinued";
            public const string Cost = "Cost";
            public const string EDL = "EDL";
            public const string Refrigeratored = "Refrigeratored";
            public const string Pediatric = "Pediatric";
            public const string IINID = "IINID";
            public const string IsInHospitalList = "IsInHospitalList";
            public const string Code = "Code";
            public const string StockCodeDACA = "StockCodeDACA";
            public const string NearExpiryTrigger = "NearExpiryTrigger";
            public const string StorageTypeID = "StorageTypeID";
            public const string IsStackStored = "IsStackStored";
            public const string ProcessInDecimal = "ProcessInDecimal";
            public const string IsActive = "IsActive";
            public const string NeedExpiry = "NeedExpiry";
            public const string NeedBatch = "NeedBatch";
            public const string Rowguid = "Rowguid";
            public const string StorageLocationTypeGuid = "StorageLocationTypeGuid";
            public const string VENGuid = "VENGuid";
            public const string ABCGuid = "ABCGuid";
            public const string ProductGuid = "ProductGuid";
            public const string DosageFormGuid = "DosageFormGuid";
            public const string UnitGuid = "UnitGuid";
            public const string CreatedDate = "CreatedDate";
            public const string ModifiedDate = "ModifiedDate";
            public const string ModifiedBy = "ModifiedBy";
            public const string SN = "SN";
            public const string NeedExpiryBatch = "NeedExpiryBatch";
            public const string RRGroupID = "RRGroupID";
            public const string IsVariableMargin = "IsVariableMargin";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _Item.ColumnNames.ID;
					ht[StockCode] = _Item.ColumnNames.StockCode;
					ht[Strength] = _Item.ColumnNames.Strength;
					ht[DosageFormID] = _Item.ColumnNames.DosageFormID;
					ht[VEN] = _Item.ColumnNames.VEN;
					ht[ABC] = _Item.ColumnNames.ABC;
					ht[IsFree] = _Item.ColumnNames.IsFree;
					ht[IsDiscontinued] = _Item.ColumnNames.IsDiscontinued;
					ht[Cost] = _Item.ColumnNames.Cost;
					ht[EDL] = _Item.ColumnNames.EDL;
					ht[Refrigeratored] = _Item.ColumnNames.Refrigeratored;
					ht[Pediatric] = _Item.ColumnNames.Pediatric;
					ht[IINID] = _Item.ColumnNames.IINID;
					ht[IsInHospitalList] = _Item.ColumnNames.IsInHospitalList;
					ht[Code] = _Item.ColumnNames.Code;
					ht[StockCodeDACA] = _Item.ColumnNames.StockCodeDACA;
					ht[NearExpiryTrigger] = _Item.ColumnNames.NearExpiryTrigger;
					ht[StorageTypeID] = _Item.ColumnNames.StorageTypeID;
					ht[IsStackStored] = _Item.ColumnNames.IsStackStored;
					ht[ProcessInDecimal] = _Item.ColumnNames.ProcessInDecimal;
					ht[IsActive] = _Item.ColumnNames.IsActive;
					ht[NeedExpiry] = _Item.ColumnNames.NeedExpiry;
					ht[NeedBatch] = _Item.ColumnNames.NeedBatch;
					ht[Rowguid] = _Item.ColumnNames.Rowguid;
					ht[StorageLocationTypeGuid] = _Item.ColumnNames.StorageLocationTypeGuid;
					ht[VENGuid] = _Item.ColumnNames.VENGuid;
					ht[ABCGuid] = _Item.ColumnNames.ABCGuid;
					ht[ProductGuid] = _Item.ColumnNames.ProductGuid;
					ht[DosageFormGuid] = _Item.ColumnNames.DosageFormGuid;
					ht[UnitGuid] = _Item.ColumnNames.UnitGuid;
					ht[CreatedDate] = _Item.ColumnNames.CreatedDate;
					ht[ModifiedDate] = _Item.ColumnNames.ModifiedDate;
					ht[ModifiedBy] = _Item.ColumnNames.ModifiedBy;
					ht[SN] = _Item.ColumnNames.SN;
					ht[NeedExpiryBatch] = _Item.ColumnNames.NeedExpiryBatch;
					ht[RRGroupID] = _Item.ColumnNames.RRGroupID;
					ht[IsVariableMargin] = _Item.ColumnNames.IsVariableMargin;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string StockCode = "s_StockCode";
            public const string Strength = "s_Strength";
            public const string DosageFormID = "s_DosageFormID";
            public const string VEN = "s_VEN";
            public const string ABC = "s_ABC";
            public const string IsFree = "s_IsFree";
            public const string IsDiscontinued = "s_IsDiscontinued";
            public const string Cost = "s_Cost";
            public const string EDL = "s_EDL";
            public const string Refrigeratored = "s_Refrigeratored";
            public const string Pediatric = "s_Pediatric";
            public const string IINID = "s_IINID";
            public const string IsInHospitalList = "s_IsInHospitalList";
            public const string Code = "s_Code";
            public const string StockCodeDACA = "s_StockCodeDACA";
            public const string NearExpiryTrigger = "s_NearExpiryTrigger";
            public const string StorageTypeID = "s_StorageTypeID";
            public const string IsStackStored = "s_IsStackStored";
            public const string ProcessInDecimal = "s_ProcessInDecimal";
            public const string IsActive = "s_IsActive";
            public const string NeedExpiry = "s_NeedExpiry";
            public const string NeedBatch = "s_NeedBatch";
            public const string Rowguid = "s_Rowguid";
            public const string StorageLocationTypeGuid = "s_StorageLocationTypeGuid";
            public const string VENGuid = "s_VENGuid";
            public const string ABCGuid = "s_ABCGuid";
            public const string ProductGuid = "s_ProductGuid";
            public const string DosageFormGuid = "s_DosageFormGuid";
            public const string UnitGuid = "s_UnitGuid";
            public const string CreatedDate = "s_CreatedDate";
            public const string ModifiedDate = "s_ModifiedDate";
            public const string ModifiedBy = "s_ModifiedBy";
            public const string SN = "s_SN";
            public const string NeedExpiryBatch = "s_NeedExpiryBatch";
            public const string RRGroupID = "s_RRGroupID";
            public const string IsVariableMargin = "s_IsVariableMargin";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual string StockCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.StockCode);
			}
			set
	        {
				base.Setstring(ColumnNames.StockCode, value);
			}
		}

		public virtual string Strength
	    {
			get
	        {
				return base.Getstring(ColumnNames.Strength);
			}
			set
	        {
				base.Setstring(ColumnNames.Strength, value);
			}
		}

		public virtual int DosageFormID
	    {
			get
	        {
				return base.Getint(ColumnNames.DosageFormID);
			}
			set
	        {
				base.Setint(ColumnNames.DosageFormID, value);
			}
		}

		public virtual int VEN
	    {
			get
	        {
				return base.Getint(ColumnNames.VEN);
			}
			set
	        {
				base.Setint(ColumnNames.VEN, value);
			}
		}

		public virtual int ABC
	    {
			get
	        {
				return base.Getint(ColumnNames.ABC);
			}
			set
	        {
				base.Setint(ColumnNames.ABC, value);
			}
		}

		public virtual bool IsFree
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsFree);
			}
			set
	        {
				base.Setbool(ColumnNames.IsFree, value);
			}
		}

		public virtual bool IsDiscontinued
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsDiscontinued);
			}
			set
	        {
				base.Setbool(ColumnNames.IsDiscontinued, value);
			}
		}

		public virtual decimal Cost
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Cost);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Cost, value);
			}
		}

		public virtual bool EDL
	    {
			get
	        {
				return base.Getbool(ColumnNames.EDL);
			}
			set
	        {
				base.Setbool(ColumnNames.EDL, value);
			}
		}

		public virtual bool Refrigeratored
	    {
			get
	        {
				return base.Getbool(ColumnNames.Refrigeratored);
			}
			set
	        {
				base.Setbool(ColumnNames.Refrigeratored, value);
			}
		}

		public virtual bool Pediatric
	    {
			get
	        {
				return base.Getbool(ColumnNames.Pediatric);
			}
			set
	        {
				base.Setbool(ColumnNames.Pediatric, value);
			}
		}

		public virtual int IINID
	    {
			get
	        {
				return base.Getint(ColumnNames.IINID);
			}
			set
	        {
				base.Setint(ColumnNames.IINID, value);
			}
		}

		public virtual bool IsInHospitalList
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsInHospitalList);
			}
			set
	        {
				base.Setbool(ColumnNames.IsInHospitalList, value);
			}
		}

		public virtual string Code
	    {
			get
	        {
				return base.Getstring(ColumnNames.Code);
			}
			set
	        {
				base.Setstring(ColumnNames.Code, value);
			}
		}

		public virtual string StockCodeDACA
	    {
			get
	        {
				return base.Getstring(ColumnNames.StockCodeDACA);
			}
			set
	        {
				base.Setstring(ColumnNames.StockCodeDACA, value);
			}
		}

		public virtual double NearExpiryTrigger
	    {
			get
	        {
				return base.Getdouble(ColumnNames.NearExpiryTrigger);
			}
			set
	        {
				base.Setdouble(ColumnNames.NearExpiryTrigger, value);
			}
		}

		public virtual int StorageTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.StorageTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.StorageTypeID, value);
			}
		}

		public virtual bool IsStackStored
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsStackStored);
			}
			set
	        {
				base.Setbool(ColumnNames.IsStackStored, value);
			}
		}

		public virtual bool ProcessInDecimal
	    {
			get
	        {
				return base.Getbool(ColumnNames.ProcessInDecimal);
			}
			set
	        {
				base.Setbool(ColumnNames.ProcessInDecimal, value);
			}
		}

		public virtual bool IsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.IsActive, value);
			}
		}

		public virtual bool NeedExpiry
	    {
			get
	        {
				return base.Getbool(ColumnNames.NeedExpiry);
			}
			set
	        {
				base.Setbool(ColumnNames.NeedExpiry, value);
			}
		}

		public virtual bool NeedBatch
	    {
			get
	        {
				return base.Getbool(ColumnNames.NeedBatch);
			}
			set
	        {
				base.Setbool(ColumnNames.NeedBatch, value);
			}
		}

		public virtual Guid Rowguid
	    {
			get
	        {
				return base.GetGuid(ColumnNames.Rowguid);
			}
			set
	        {
				base.SetGuid(ColumnNames.Rowguid, value);
			}
		}

		public virtual Guid StorageLocationTypeGuid
	    {
			get
	        {
				return base.GetGuid(ColumnNames.StorageLocationTypeGuid);
			}
			set
	        {
				base.SetGuid(ColumnNames.StorageLocationTypeGuid, value);
			}
		}

		public virtual Guid VENGuid
	    {
			get
	        {
				return base.GetGuid(ColumnNames.VENGuid);
			}
			set
	        {
				base.SetGuid(ColumnNames.VENGuid, value);
			}
		}

		public virtual Guid ABCGuid
	    {
			get
	        {
				return base.GetGuid(ColumnNames.ABCGuid);
			}
			set
	        {
				base.SetGuid(ColumnNames.ABCGuid, value);
			}
		}

		public virtual Guid ProductGuid
	    {
			get
	        {
				return base.GetGuid(ColumnNames.ProductGuid);
			}
			set
	        {
				base.SetGuid(ColumnNames.ProductGuid, value);
			}
		}

		public virtual Guid DosageFormGuid
	    {
			get
	        {
				return base.GetGuid(ColumnNames.DosageFormGuid);
			}
			set
	        {
				base.SetGuid(ColumnNames.DosageFormGuid, value);
			}
		}

		public virtual Guid UnitGuid
	    {
			get
	        {
				return base.GetGuid(ColumnNames.UnitGuid);
			}
			set
	        {
				base.SetGuid(ColumnNames.UnitGuid, value);
			}
		}

		public virtual DateTime CreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreatedDate, value);
			}
		}

		public virtual DateTime ModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ModifiedDate, value);
			}
		}

		public virtual string ModifiedBy
	    {
			get
	        {
				return base.Getstring(ColumnNames.ModifiedBy);
			}
			set
	        {
				base.Setstring(ColumnNames.ModifiedBy, value);
			}
		}

		public virtual int SN
	    {
			get
	        {
				return base.Getint(ColumnNames.SN);
			}
			set
	        {
				base.Setint(ColumnNames.SN, value);
			}
		}

		public virtual bool NeedExpiryBatch
	    {
			get
	        {
				return base.Getbool(ColumnNames.NeedExpiryBatch);
			}
		}

		public virtual int RRGroupID
	    {
			get
	        {
				return base.Getint(ColumnNames.RRGroupID);
			}
			set
	        {
				base.Setint(ColumnNames.RRGroupID, value);
			}
		}

		public virtual bool IsVariableMargin
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsVariableMargin);
			}
			set
	        {
				base.Setbool(ColumnNames.IsVariableMargin, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_StockCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StockCode) ? string.Empty : base.GetstringAsString(ColumnNames.StockCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StockCode);
				else
					this.StockCode = base.SetstringAsString(ColumnNames.StockCode, value);
			}
		}

		public virtual string s_Strength
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Strength) ? string.Empty : base.GetstringAsString(ColumnNames.Strength);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Strength);
				else
					this.Strength = base.SetstringAsString(ColumnNames.Strength, value);
			}
		}

		public virtual string s_DosageFormID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DosageFormID) ? string.Empty : base.GetintAsString(ColumnNames.DosageFormID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DosageFormID);
				else
					this.DosageFormID = base.SetintAsString(ColumnNames.DosageFormID, value);
			}
		}

		public virtual string s_VEN
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VEN) ? string.Empty : base.GetintAsString(ColumnNames.VEN);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VEN);
				else
					this.VEN = base.SetintAsString(ColumnNames.VEN, value);
			}
		}

		public virtual string s_ABC
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ABC) ? string.Empty : base.GetintAsString(ColumnNames.ABC);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ABC);
				else
					this.ABC = base.SetintAsString(ColumnNames.ABC, value);
			}
		}

		public virtual string s_IsFree
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsFree) ? string.Empty : base.GetboolAsString(ColumnNames.IsFree);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsFree);
				else
					this.IsFree = base.SetboolAsString(ColumnNames.IsFree, value);
			}
		}

		public virtual string s_IsDiscontinued
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsDiscontinued) ? string.Empty : base.GetboolAsString(ColumnNames.IsDiscontinued);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsDiscontinued);
				else
					this.IsDiscontinued = base.SetboolAsString(ColumnNames.IsDiscontinued, value);
			}
		}

		public virtual string s_Cost
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Cost) ? string.Empty : base.GetdecimalAsString(ColumnNames.Cost);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Cost);
				else
					this.Cost = base.SetdecimalAsString(ColumnNames.Cost, value);
			}
		}

		public virtual string s_EDL
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EDL) ? string.Empty : base.GetboolAsString(ColumnNames.EDL);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EDL);
				else
					this.EDL = base.SetboolAsString(ColumnNames.EDL, value);
			}
		}

		public virtual string s_Refrigeratored
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Refrigeratored) ? string.Empty : base.GetboolAsString(ColumnNames.Refrigeratored);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Refrigeratored);
				else
					this.Refrigeratored = base.SetboolAsString(ColumnNames.Refrigeratored, value);
			}
		}

		public virtual string s_Pediatric
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pediatric) ? string.Empty : base.GetboolAsString(ColumnNames.Pediatric);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pediatric);
				else
					this.Pediatric = base.SetboolAsString(ColumnNames.Pediatric, value);
			}
		}

		public virtual string s_IINID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IINID) ? string.Empty : base.GetintAsString(ColumnNames.IINID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IINID);
				else
					this.IINID = base.SetintAsString(ColumnNames.IINID, value);
			}
		}

		public virtual string s_IsInHospitalList
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsInHospitalList) ? string.Empty : base.GetboolAsString(ColumnNames.IsInHospitalList);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsInHospitalList);
				else
					this.IsInHospitalList = base.SetboolAsString(ColumnNames.IsInHospitalList, value);
			}
		}

		public virtual string s_Code
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Code) ? string.Empty : base.GetstringAsString(ColumnNames.Code);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Code);
				else
					this.Code = base.SetstringAsString(ColumnNames.Code, value);
			}
		}

		public virtual string s_StockCodeDACA
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StockCodeDACA) ? string.Empty : base.GetstringAsString(ColumnNames.StockCodeDACA);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StockCodeDACA);
				else
					this.StockCodeDACA = base.SetstringAsString(ColumnNames.StockCodeDACA, value);
			}
		}

		public virtual string s_NearExpiryTrigger
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NearExpiryTrigger) ? string.Empty : base.GetdoubleAsString(ColumnNames.NearExpiryTrigger);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NearExpiryTrigger);
				else
					this.NearExpiryTrigger = base.SetdoubleAsString(ColumnNames.NearExpiryTrigger, value);
			}
		}

		public virtual string s_StorageTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StorageTypeID) ? string.Empty : base.GetintAsString(ColumnNames.StorageTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StorageTypeID);
				else
					this.StorageTypeID = base.SetintAsString(ColumnNames.StorageTypeID, value);
			}
		}

		public virtual string s_IsStackStored
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsStackStored) ? string.Empty : base.GetboolAsString(ColumnNames.IsStackStored);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsStackStored);
				else
					this.IsStackStored = base.SetboolAsString(ColumnNames.IsStackStored, value);
			}
		}

		public virtual string s_ProcessInDecimal
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProcessInDecimal) ? string.Empty : base.GetboolAsString(ColumnNames.ProcessInDecimal);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProcessInDecimal);
				else
					this.ProcessInDecimal = base.SetboolAsString(ColumnNames.ProcessInDecimal, value);
			}
		}

		public virtual string s_IsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsActive) ? string.Empty : base.GetboolAsString(ColumnNames.IsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsActive);
				else
					this.IsActive = base.SetboolAsString(ColumnNames.IsActive, value);
			}
		}

		public virtual string s_NeedExpiry
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NeedExpiry) ? string.Empty : base.GetboolAsString(ColumnNames.NeedExpiry);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NeedExpiry);
				else
					this.NeedExpiry = base.SetboolAsString(ColumnNames.NeedExpiry, value);
			}
		}

		public virtual string s_NeedBatch
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NeedBatch) ? string.Empty : base.GetboolAsString(ColumnNames.NeedBatch);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NeedBatch);
				else
					this.NeedBatch = base.SetboolAsString(ColumnNames.NeedBatch, value);
			}
		}

		public virtual string s_Rowguid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rowguid) ? string.Empty : base.GetGuidAsString(ColumnNames.Rowguid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rowguid);
				else
					this.Rowguid = base.SetGuidAsString(ColumnNames.Rowguid, value);
			}
		}

		public virtual string s_StorageLocationTypeGuid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StorageLocationTypeGuid) ? string.Empty : base.GetGuidAsString(ColumnNames.StorageLocationTypeGuid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StorageLocationTypeGuid);
				else
					this.StorageLocationTypeGuid = base.SetGuidAsString(ColumnNames.StorageLocationTypeGuid, value);
			}
		}

		public virtual string s_VENGuid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VENGuid) ? string.Empty : base.GetGuidAsString(ColumnNames.VENGuid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VENGuid);
				else
					this.VENGuid = base.SetGuidAsString(ColumnNames.VENGuid, value);
			}
		}

		public virtual string s_ABCGuid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ABCGuid) ? string.Empty : base.GetGuidAsString(ColumnNames.ABCGuid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ABCGuid);
				else
					this.ABCGuid = base.SetGuidAsString(ColumnNames.ABCGuid, value);
			}
		}

		public virtual string s_ProductGuid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProductGuid) ? string.Empty : base.GetGuidAsString(ColumnNames.ProductGuid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProductGuid);
				else
					this.ProductGuid = base.SetGuidAsString(ColumnNames.ProductGuid, value);
			}
		}

		public virtual string s_DosageFormGuid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DosageFormGuid) ? string.Empty : base.GetGuidAsString(ColumnNames.DosageFormGuid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DosageFormGuid);
				else
					this.DosageFormGuid = base.SetGuidAsString(ColumnNames.DosageFormGuid, value);
			}
		}

		public virtual string s_UnitGuid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UnitGuid) ? string.Empty : base.GetGuidAsString(ColumnNames.UnitGuid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnitGuid);
				else
					this.UnitGuid = base.SetGuidAsString(ColumnNames.UnitGuid, value);
			}
		}

		public virtual string s_CreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedDate);
				else
					this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
			}
		}

		public virtual string s_ModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifiedDate);
				else
					this.ModifiedDate = base.SetDateTimeAsString(ColumnNames.ModifiedDate, value);
			}
		}

		public virtual string s_ModifiedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifiedBy) ? string.Empty : base.GetstringAsString(ColumnNames.ModifiedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifiedBy);
				else
					this.ModifiedBy = base.SetstringAsString(ColumnNames.ModifiedBy, value);
			}
		}

		public virtual string s_SN
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SN) ? string.Empty : base.GetintAsString(ColumnNames.SN);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SN);
				else
					this.SN = base.SetintAsString(ColumnNames.SN, value);
			}
		}

		public virtual string s_NeedExpiryBatch
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NeedExpiryBatch) ? string.Empty : base.GetboolAsString(ColumnNames.NeedExpiryBatch);
			}
		}

		public virtual string s_RRGroupID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RRGroupID) ? string.Empty : base.GetintAsString(ColumnNames.RRGroupID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RRGroupID);
				else
					this.RRGroupID = base.SetintAsString(ColumnNames.RRGroupID, value);
			}
		}

		public virtual string s_IsVariableMargin
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsVariableMargin) ? string.Empty : base.GetboolAsString(ColumnNames.IsVariableMargin);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsVariableMargin);
				else
					this.IsVariableMargin = base.SetboolAsString(ColumnNames.IsVariableMargin, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StockCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StockCode, Parameters.StockCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Strength
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Strength, Parameters.Strength);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DosageFormID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DosageFormID, Parameters.DosageFormID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter VEN
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VEN, Parameters.VEN);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ABC
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ABC, Parameters.ABC);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsFree
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsFree, Parameters.IsFree);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsDiscontinued
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsDiscontinued, Parameters.IsDiscontinued);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Cost
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Cost, Parameters.Cost);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EDL
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EDL, Parameters.EDL);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Refrigeratored
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Refrigeratored, Parameters.Refrigeratored);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pediatric
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pediatric, Parameters.Pediatric);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IINID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IINID, Parameters.IINID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsInHospitalList
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsInHospitalList, Parameters.IsInHospitalList);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Code
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Code, Parameters.Code);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StockCodeDACA
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StockCodeDACA, Parameters.StockCodeDACA);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NearExpiryTrigger
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NearExpiryTrigger, Parameters.NearExpiryTrigger);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StorageTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StorageTypeID, Parameters.StorageTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsStackStored
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsStackStored, Parameters.IsStackStored);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ProcessInDecimal
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProcessInDecimal, Parameters.ProcessInDecimal);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NeedExpiry
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NeedExpiry, Parameters.NeedExpiry);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NeedBatch
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NeedBatch, Parameters.NeedBatch);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rowguid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rowguid, Parameters.Rowguid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StorageLocationTypeGuid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StorageLocationTypeGuid, Parameters.StorageLocationTypeGuid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter VENGuid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VENGuid, Parameters.VENGuid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ABCGuid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ABCGuid, Parameters.ABCGuid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ProductGuid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProductGuid, Parameters.ProductGuid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DosageFormGuid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DosageFormGuid, Parameters.DosageFormGuid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UnitGuid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UnitGuid, Parameters.UnitGuid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifiedDate, Parameters.ModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifiedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifiedBy, Parameters.ModifiedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SN
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SN, Parameters.SN);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NeedExpiryBatch
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NeedExpiryBatch, Parameters.NeedExpiryBatch);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RRGroupID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RRGroupID, Parameters.RRGroupID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsVariableMargin
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsVariableMargin, Parameters.IsVariableMargin);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter StockCode
		    {
				get
		        {
					if(_StockCode_W == null)
	        	    {
						_StockCode_W = TearOff.StockCode;
					}
					return _StockCode_W;
				}
			}

			public WhereParameter Strength
		    {
				get
		        {
					if(_Strength_W == null)
	        	    {
						_Strength_W = TearOff.Strength;
					}
					return _Strength_W;
				}
			}

			public WhereParameter DosageFormID
		    {
				get
		        {
					if(_DosageFormID_W == null)
	        	    {
						_DosageFormID_W = TearOff.DosageFormID;
					}
					return _DosageFormID_W;
				}
			}

			public WhereParameter VEN
		    {
				get
		        {
					if(_VEN_W == null)
	        	    {
						_VEN_W = TearOff.VEN;
					}
					return _VEN_W;
				}
			}

			public WhereParameter ABC
		    {
				get
		        {
					if(_ABC_W == null)
	        	    {
						_ABC_W = TearOff.ABC;
					}
					return _ABC_W;
				}
			}

			public WhereParameter IsFree
		    {
				get
		        {
					if(_IsFree_W == null)
	        	    {
						_IsFree_W = TearOff.IsFree;
					}
					return _IsFree_W;
				}
			}

			public WhereParameter IsDiscontinued
		    {
				get
		        {
					if(_IsDiscontinued_W == null)
	        	    {
						_IsDiscontinued_W = TearOff.IsDiscontinued;
					}
					return _IsDiscontinued_W;
				}
			}

			public WhereParameter Cost
		    {
				get
		        {
					if(_Cost_W == null)
	        	    {
						_Cost_W = TearOff.Cost;
					}
					return _Cost_W;
				}
			}

			public WhereParameter EDL
		    {
				get
		        {
					if(_EDL_W == null)
	        	    {
						_EDL_W = TearOff.EDL;
					}
					return _EDL_W;
				}
			}

			public WhereParameter Refrigeratored
		    {
				get
		        {
					if(_Refrigeratored_W == null)
	        	    {
						_Refrigeratored_W = TearOff.Refrigeratored;
					}
					return _Refrigeratored_W;
				}
			}

			public WhereParameter Pediatric
		    {
				get
		        {
					if(_Pediatric_W == null)
	        	    {
						_Pediatric_W = TearOff.Pediatric;
					}
					return _Pediatric_W;
				}
			}

			public WhereParameter IINID
		    {
				get
		        {
					if(_IINID_W == null)
	        	    {
						_IINID_W = TearOff.IINID;
					}
					return _IINID_W;
				}
			}

			public WhereParameter IsInHospitalList
		    {
				get
		        {
					if(_IsInHospitalList_W == null)
	        	    {
						_IsInHospitalList_W = TearOff.IsInHospitalList;
					}
					return _IsInHospitalList_W;
				}
			}

			public WhereParameter Code
		    {
				get
		        {
					if(_Code_W == null)
	        	    {
						_Code_W = TearOff.Code;
					}
					return _Code_W;
				}
			}

			public WhereParameter StockCodeDACA
		    {
				get
		        {
					if(_StockCodeDACA_W == null)
	        	    {
						_StockCodeDACA_W = TearOff.StockCodeDACA;
					}
					return _StockCodeDACA_W;
				}
			}

			public WhereParameter NearExpiryTrigger
		    {
				get
		        {
					if(_NearExpiryTrigger_W == null)
	        	    {
						_NearExpiryTrigger_W = TearOff.NearExpiryTrigger;
					}
					return _NearExpiryTrigger_W;
				}
			}

			public WhereParameter StorageTypeID
		    {
				get
		        {
					if(_StorageTypeID_W == null)
	        	    {
						_StorageTypeID_W = TearOff.StorageTypeID;
					}
					return _StorageTypeID_W;
				}
			}

			public WhereParameter IsStackStored
		    {
				get
		        {
					if(_IsStackStored_W == null)
	        	    {
						_IsStackStored_W = TearOff.IsStackStored;
					}
					return _IsStackStored_W;
				}
			}

			public WhereParameter ProcessInDecimal
		    {
				get
		        {
					if(_ProcessInDecimal_W == null)
	        	    {
						_ProcessInDecimal_W = TearOff.ProcessInDecimal;
					}
					return _ProcessInDecimal_W;
				}
			}

			public WhereParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public WhereParameter NeedExpiry
		    {
				get
		        {
					if(_NeedExpiry_W == null)
	        	    {
						_NeedExpiry_W = TearOff.NeedExpiry;
					}
					return _NeedExpiry_W;
				}
			}

			public WhereParameter NeedBatch
		    {
				get
		        {
					if(_NeedBatch_W == null)
	        	    {
						_NeedBatch_W = TearOff.NeedBatch;
					}
					return _NeedBatch_W;
				}
			}

			public WhereParameter Rowguid
		    {
				get
		        {
					if(_Rowguid_W == null)
	        	    {
						_Rowguid_W = TearOff.Rowguid;
					}
					return _Rowguid_W;
				}
			}

			public WhereParameter StorageLocationTypeGuid
		    {
				get
		        {
					if(_StorageLocationTypeGuid_W == null)
	        	    {
						_StorageLocationTypeGuid_W = TearOff.StorageLocationTypeGuid;
					}
					return _StorageLocationTypeGuid_W;
				}
			}

			public WhereParameter VENGuid
		    {
				get
		        {
					if(_VENGuid_W == null)
	        	    {
						_VENGuid_W = TearOff.VENGuid;
					}
					return _VENGuid_W;
				}
			}

			public WhereParameter ABCGuid
		    {
				get
		        {
					if(_ABCGuid_W == null)
	        	    {
						_ABCGuid_W = TearOff.ABCGuid;
					}
					return _ABCGuid_W;
				}
			}

			public WhereParameter ProductGuid
		    {
				get
		        {
					if(_ProductGuid_W == null)
	        	    {
						_ProductGuid_W = TearOff.ProductGuid;
					}
					return _ProductGuid_W;
				}
			}

			public WhereParameter DosageFormGuid
		    {
				get
		        {
					if(_DosageFormGuid_W == null)
	        	    {
						_DosageFormGuid_W = TearOff.DosageFormGuid;
					}
					return _DosageFormGuid_W;
				}
			}

			public WhereParameter UnitGuid
		    {
				get
		        {
					if(_UnitGuid_W == null)
	        	    {
						_UnitGuid_W = TearOff.UnitGuid;
					}
					return _UnitGuid_W;
				}
			}

			public WhereParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public WhereParameter ModifiedDate
		    {
				get
		        {
					if(_ModifiedDate_W == null)
	        	    {
						_ModifiedDate_W = TearOff.ModifiedDate;
					}
					return _ModifiedDate_W;
				}
			}

			public WhereParameter ModifiedBy
		    {
				get
		        {
					if(_ModifiedBy_W == null)
	        	    {
						_ModifiedBy_W = TearOff.ModifiedBy;
					}
					return _ModifiedBy_W;
				}
			}

			public WhereParameter SN
		    {
				get
		        {
					if(_SN_W == null)
	        	    {
						_SN_W = TearOff.SN;
					}
					return _SN_W;
				}
			}

			public WhereParameter NeedExpiryBatch
		    {
				get
		        {
					if(_NeedExpiryBatch_W == null)
	        	    {
						_NeedExpiryBatch_W = TearOff.NeedExpiryBatch;
					}
					return _NeedExpiryBatch_W;
				}
			}

			public WhereParameter RRGroupID
		    {
				get
		        {
					if(_RRGroupID_W == null)
	        	    {
						_RRGroupID_W = TearOff.RRGroupID;
					}
					return _RRGroupID_W;
				}
			}

			public WhereParameter IsVariableMargin
		    {
				get
		        {
					if(_IsVariableMargin_W == null)
	        	    {
						_IsVariableMargin_W = TearOff.IsVariableMargin;
					}
					return _IsVariableMargin_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _StockCode_W = null;
			private WhereParameter _Strength_W = null;
			private WhereParameter _DosageFormID_W = null;
			private WhereParameter _VEN_W = null;
			private WhereParameter _ABC_W = null;
			private WhereParameter _IsFree_W = null;
			private WhereParameter _IsDiscontinued_W = null;
			private WhereParameter _Cost_W = null;
			private WhereParameter _EDL_W = null;
			private WhereParameter _Refrigeratored_W = null;
			private WhereParameter _Pediatric_W = null;
			private WhereParameter _IINID_W = null;
			private WhereParameter _IsInHospitalList_W = null;
			private WhereParameter _Code_W = null;
			private WhereParameter _StockCodeDACA_W = null;
			private WhereParameter _NearExpiryTrigger_W = null;
			private WhereParameter _StorageTypeID_W = null;
			private WhereParameter _IsStackStored_W = null;
			private WhereParameter _ProcessInDecimal_W = null;
			private WhereParameter _IsActive_W = null;
			private WhereParameter _NeedExpiry_W = null;
			private WhereParameter _NeedBatch_W = null;
			private WhereParameter _Rowguid_W = null;
			private WhereParameter _StorageLocationTypeGuid_W = null;
			private WhereParameter _VENGuid_W = null;
			private WhereParameter _ABCGuid_W = null;
			private WhereParameter _ProductGuid_W = null;
			private WhereParameter _DosageFormGuid_W = null;
			private WhereParameter _UnitGuid_W = null;
			private WhereParameter _CreatedDate_W = null;
			private WhereParameter _ModifiedDate_W = null;
			private WhereParameter _ModifiedBy_W = null;
			private WhereParameter _SN_W = null;
			private WhereParameter _NeedExpiryBatch_W = null;
			private WhereParameter _RRGroupID_W = null;
			private WhereParameter _IsVariableMargin_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_StockCode_W = null;
				_Strength_W = null;
				_DosageFormID_W = null;
				_VEN_W = null;
				_ABC_W = null;
				_IsFree_W = null;
				_IsDiscontinued_W = null;
				_Cost_W = null;
				_EDL_W = null;
				_Refrigeratored_W = null;
				_Pediatric_W = null;
				_IINID_W = null;
				_IsInHospitalList_W = null;
				_Code_W = null;
				_StockCodeDACA_W = null;
				_NearExpiryTrigger_W = null;
				_StorageTypeID_W = null;
				_IsStackStored_W = null;
				_ProcessInDecimal_W = null;
				_IsActive_W = null;
				_NeedExpiry_W = null;
				_NeedBatch_W = null;
				_Rowguid_W = null;
				_StorageLocationTypeGuid_W = null;
				_VENGuid_W = null;
				_ABCGuid_W = null;
				_ProductGuid_W = null;
				_DosageFormGuid_W = null;
				_UnitGuid_W = null;
				_CreatedDate_W = null;
				_ModifiedDate_W = null;
				_ModifiedBy_W = null;
				_SN_W = null;
				_NeedExpiryBatch_W = null;
				_RRGroupID_W = null;
				_IsVariableMargin_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StockCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StockCode, Parameters.StockCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Strength
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Strength, Parameters.Strength);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DosageFormID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DosageFormID, Parameters.DosageFormID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter VEN
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VEN, Parameters.VEN);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ABC
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ABC, Parameters.ABC);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsFree
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsFree, Parameters.IsFree);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsDiscontinued
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsDiscontinued, Parameters.IsDiscontinued);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Cost
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Cost, Parameters.Cost);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EDL
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EDL, Parameters.EDL);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Refrigeratored
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Refrigeratored, Parameters.Refrigeratored);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pediatric
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pediatric, Parameters.Pediatric);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IINID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IINID, Parameters.IINID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsInHospitalList
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsInHospitalList, Parameters.IsInHospitalList);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Code
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Code, Parameters.Code);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StockCodeDACA
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StockCodeDACA, Parameters.StockCodeDACA);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NearExpiryTrigger
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NearExpiryTrigger, Parameters.NearExpiryTrigger);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StorageTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StorageTypeID, Parameters.StorageTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsStackStored
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsStackStored, Parameters.IsStackStored);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ProcessInDecimal
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProcessInDecimal, Parameters.ProcessInDecimal);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NeedExpiry
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NeedExpiry, Parameters.NeedExpiry);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NeedBatch
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NeedBatch, Parameters.NeedBatch);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rowguid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rowguid, Parameters.Rowguid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StorageLocationTypeGuid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StorageLocationTypeGuid, Parameters.StorageLocationTypeGuid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter VENGuid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VENGuid, Parameters.VENGuid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ABCGuid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ABCGuid, Parameters.ABCGuid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ProductGuid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProductGuid, Parameters.ProductGuid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DosageFormGuid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DosageFormGuid, Parameters.DosageFormGuid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UnitGuid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitGuid, Parameters.UnitGuid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifiedDate, Parameters.ModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifiedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifiedBy, Parameters.ModifiedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SN
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SN, Parameters.SN);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NeedExpiryBatch
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NeedExpiryBatch, Parameters.NeedExpiryBatch);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RRGroupID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RRGroupID, Parameters.RRGroupID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsVariableMargin
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsVariableMargin, Parameters.IsVariableMargin);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter StockCode
		    {
				get
		        {
					if(_StockCode_W == null)
	        	    {
						_StockCode_W = TearOff.StockCode;
					}
					return _StockCode_W;
				}
			}

			public AggregateParameter Strength
		    {
				get
		        {
					if(_Strength_W == null)
	        	    {
						_Strength_W = TearOff.Strength;
					}
					return _Strength_W;
				}
			}

			public AggregateParameter DosageFormID
		    {
				get
		        {
					if(_DosageFormID_W == null)
	        	    {
						_DosageFormID_W = TearOff.DosageFormID;
					}
					return _DosageFormID_W;
				}
			}

			public AggregateParameter VEN
		    {
				get
		        {
					if(_VEN_W == null)
	        	    {
						_VEN_W = TearOff.VEN;
					}
					return _VEN_W;
				}
			}

			public AggregateParameter ABC
		    {
				get
		        {
					if(_ABC_W == null)
	        	    {
						_ABC_W = TearOff.ABC;
					}
					return _ABC_W;
				}
			}

			public AggregateParameter IsFree
		    {
				get
		        {
					if(_IsFree_W == null)
	        	    {
						_IsFree_W = TearOff.IsFree;
					}
					return _IsFree_W;
				}
			}

			public AggregateParameter IsDiscontinued
		    {
				get
		        {
					if(_IsDiscontinued_W == null)
	        	    {
						_IsDiscontinued_W = TearOff.IsDiscontinued;
					}
					return _IsDiscontinued_W;
				}
			}

			public AggregateParameter Cost
		    {
				get
		        {
					if(_Cost_W == null)
	        	    {
						_Cost_W = TearOff.Cost;
					}
					return _Cost_W;
				}
			}

			public AggregateParameter EDL
		    {
				get
		        {
					if(_EDL_W == null)
	        	    {
						_EDL_W = TearOff.EDL;
					}
					return _EDL_W;
				}
			}

			public AggregateParameter Refrigeratored
		    {
				get
		        {
					if(_Refrigeratored_W == null)
	        	    {
						_Refrigeratored_W = TearOff.Refrigeratored;
					}
					return _Refrigeratored_W;
				}
			}

			public AggregateParameter Pediatric
		    {
				get
		        {
					if(_Pediatric_W == null)
	        	    {
						_Pediatric_W = TearOff.Pediatric;
					}
					return _Pediatric_W;
				}
			}

			public AggregateParameter IINID
		    {
				get
		        {
					if(_IINID_W == null)
	        	    {
						_IINID_W = TearOff.IINID;
					}
					return _IINID_W;
				}
			}

			public AggregateParameter IsInHospitalList
		    {
				get
		        {
					if(_IsInHospitalList_W == null)
	        	    {
						_IsInHospitalList_W = TearOff.IsInHospitalList;
					}
					return _IsInHospitalList_W;
				}
			}

			public AggregateParameter Code
		    {
				get
		        {
					if(_Code_W == null)
	        	    {
						_Code_W = TearOff.Code;
					}
					return _Code_W;
				}
			}

			public AggregateParameter StockCodeDACA
		    {
				get
		        {
					if(_StockCodeDACA_W == null)
	        	    {
						_StockCodeDACA_W = TearOff.StockCodeDACA;
					}
					return _StockCodeDACA_W;
				}
			}

			public AggregateParameter NearExpiryTrigger
		    {
				get
		        {
					if(_NearExpiryTrigger_W == null)
	        	    {
						_NearExpiryTrigger_W = TearOff.NearExpiryTrigger;
					}
					return _NearExpiryTrigger_W;
				}
			}

			public AggregateParameter StorageTypeID
		    {
				get
		        {
					if(_StorageTypeID_W == null)
	        	    {
						_StorageTypeID_W = TearOff.StorageTypeID;
					}
					return _StorageTypeID_W;
				}
			}

			public AggregateParameter IsStackStored
		    {
				get
		        {
					if(_IsStackStored_W == null)
	        	    {
						_IsStackStored_W = TearOff.IsStackStored;
					}
					return _IsStackStored_W;
				}
			}

			public AggregateParameter ProcessInDecimal
		    {
				get
		        {
					if(_ProcessInDecimal_W == null)
	        	    {
						_ProcessInDecimal_W = TearOff.ProcessInDecimal;
					}
					return _ProcessInDecimal_W;
				}
			}

			public AggregateParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public AggregateParameter NeedExpiry
		    {
				get
		        {
					if(_NeedExpiry_W == null)
	        	    {
						_NeedExpiry_W = TearOff.NeedExpiry;
					}
					return _NeedExpiry_W;
				}
			}

			public AggregateParameter NeedBatch
		    {
				get
		        {
					if(_NeedBatch_W == null)
	        	    {
						_NeedBatch_W = TearOff.NeedBatch;
					}
					return _NeedBatch_W;
				}
			}

			public AggregateParameter Rowguid
		    {
				get
		        {
					if(_Rowguid_W == null)
	        	    {
						_Rowguid_W = TearOff.Rowguid;
					}
					return _Rowguid_W;
				}
			}

			public AggregateParameter StorageLocationTypeGuid
		    {
				get
		        {
					if(_StorageLocationTypeGuid_W == null)
	        	    {
						_StorageLocationTypeGuid_W = TearOff.StorageLocationTypeGuid;
					}
					return _StorageLocationTypeGuid_W;
				}
			}

			public AggregateParameter VENGuid
		    {
				get
		        {
					if(_VENGuid_W == null)
	        	    {
						_VENGuid_W = TearOff.VENGuid;
					}
					return _VENGuid_W;
				}
			}

			public AggregateParameter ABCGuid
		    {
				get
		        {
					if(_ABCGuid_W == null)
	        	    {
						_ABCGuid_W = TearOff.ABCGuid;
					}
					return _ABCGuid_W;
				}
			}

			public AggregateParameter ProductGuid
		    {
				get
		        {
					if(_ProductGuid_W == null)
	        	    {
						_ProductGuid_W = TearOff.ProductGuid;
					}
					return _ProductGuid_W;
				}
			}

			public AggregateParameter DosageFormGuid
		    {
				get
		        {
					if(_DosageFormGuid_W == null)
	        	    {
						_DosageFormGuid_W = TearOff.DosageFormGuid;
					}
					return _DosageFormGuid_W;
				}
			}

			public AggregateParameter UnitGuid
		    {
				get
		        {
					if(_UnitGuid_W == null)
	        	    {
						_UnitGuid_W = TearOff.UnitGuid;
					}
					return _UnitGuid_W;
				}
			}

			public AggregateParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public AggregateParameter ModifiedDate
		    {
				get
		        {
					if(_ModifiedDate_W == null)
	        	    {
						_ModifiedDate_W = TearOff.ModifiedDate;
					}
					return _ModifiedDate_W;
				}
			}

			public AggregateParameter ModifiedBy
		    {
				get
		        {
					if(_ModifiedBy_W == null)
	        	    {
						_ModifiedBy_W = TearOff.ModifiedBy;
					}
					return _ModifiedBy_W;
				}
			}

			public AggregateParameter SN
		    {
				get
		        {
					if(_SN_W == null)
	        	    {
						_SN_W = TearOff.SN;
					}
					return _SN_W;
				}
			}

			public AggregateParameter NeedExpiryBatch
		    {
				get
		        {
					if(_NeedExpiryBatch_W == null)
	        	    {
						_NeedExpiryBatch_W = TearOff.NeedExpiryBatch;
					}
					return _NeedExpiryBatch_W;
				}
			}

			public AggregateParameter RRGroupID
		    {
				get
		        {
					if(_RRGroupID_W == null)
	        	    {
						_RRGroupID_W = TearOff.RRGroupID;
					}
					return _RRGroupID_W;
				}
			}

			public AggregateParameter IsVariableMargin
		    {
				get
		        {
					if(_IsVariableMargin_W == null)
	        	    {
						_IsVariableMargin_W = TearOff.IsVariableMargin;
					}
					return _IsVariableMargin_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _StockCode_W = null;
			private AggregateParameter _Strength_W = null;
			private AggregateParameter _DosageFormID_W = null;
			private AggregateParameter _VEN_W = null;
			private AggregateParameter _ABC_W = null;
			private AggregateParameter _IsFree_W = null;
			private AggregateParameter _IsDiscontinued_W = null;
			private AggregateParameter _Cost_W = null;
			private AggregateParameter _EDL_W = null;
			private AggregateParameter _Refrigeratored_W = null;
			private AggregateParameter _Pediatric_W = null;
			private AggregateParameter _IINID_W = null;
			private AggregateParameter _IsInHospitalList_W = null;
			private AggregateParameter _Code_W = null;
			private AggregateParameter _StockCodeDACA_W = null;
			private AggregateParameter _NearExpiryTrigger_W = null;
			private AggregateParameter _StorageTypeID_W = null;
			private AggregateParameter _IsStackStored_W = null;
			private AggregateParameter _ProcessInDecimal_W = null;
			private AggregateParameter _IsActive_W = null;
			private AggregateParameter _NeedExpiry_W = null;
			private AggregateParameter _NeedBatch_W = null;
			private AggregateParameter _Rowguid_W = null;
			private AggregateParameter _StorageLocationTypeGuid_W = null;
			private AggregateParameter _VENGuid_W = null;
			private AggregateParameter _ABCGuid_W = null;
			private AggregateParameter _ProductGuid_W = null;
			private AggregateParameter _DosageFormGuid_W = null;
			private AggregateParameter _UnitGuid_W = null;
			private AggregateParameter _CreatedDate_W = null;
			private AggregateParameter _ModifiedDate_W = null;
			private AggregateParameter _ModifiedBy_W = null;
			private AggregateParameter _SN_W = null;
			private AggregateParameter _NeedExpiryBatch_W = null;
			private AggregateParameter _RRGroupID_W = null;
			private AggregateParameter _IsVariableMargin_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_StockCode_W = null;
				_Strength_W = null;
				_DosageFormID_W = null;
				_VEN_W = null;
				_ABC_W = null;
				_IsFree_W = null;
				_IsDiscontinued_W = null;
				_Cost_W = null;
				_EDL_W = null;
				_Refrigeratored_W = null;
				_Pediatric_W = null;
				_IINID_W = null;
				_IsInHospitalList_W = null;
				_Code_W = null;
				_StockCodeDACA_W = null;
				_NearExpiryTrigger_W = null;
				_StorageTypeID_W = null;
				_IsStackStored_W = null;
				_ProcessInDecimal_W = null;
				_IsActive_W = null;
				_NeedExpiry_W = null;
				_NeedBatch_W = null;
				_Rowguid_W = null;
				_StorageLocationTypeGuid_W = null;
				_VENGuid_W = null;
				_ABCGuid_W = null;
				_ProductGuid_W = null;
				_DosageFormGuid_W = null;
				_UnitGuid_W = null;
				_CreatedDate_W = null;
				_ModifiedDate_W = null;
				_ModifiedBy_W = null;
				_SN_W = null;
				_NeedExpiryBatch_W = null;
				_RRGroupID_W = null;
				_IsVariableMargin_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ItemInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
			p = cmd.Parameters[Parameters.NeedExpiryBatch.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ItemUpdate]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.NeedExpiryBatch.ParameterName];
			p.Direction = ParameterDirection.Output;
      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ItemDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StockCode);
			p.SourceColumn = ColumnNames.StockCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Strength);
			p.SourceColumn = ColumnNames.Strength;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DosageFormID);
			p.SourceColumn = ColumnNames.DosageFormID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.VEN);
			p.SourceColumn = ColumnNames.VEN;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ABC);
			p.SourceColumn = ColumnNames.ABC;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsFree);
			p.SourceColumn = ColumnNames.IsFree;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsDiscontinued);
			p.SourceColumn = ColumnNames.IsDiscontinued;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Cost);
			p.SourceColumn = ColumnNames.Cost;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EDL);
			p.SourceColumn = ColumnNames.EDL;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Refrigeratored);
			p.SourceColumn = ColumnNames.Refrigeratored;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Pediatric);
			p.SourceColumn = ColumnNames.Pediatric;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IINID);
			p.SourceColumn = ColumnNames.IINID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsInHospitalList);
			p.SourceColumn = ColumnNames.IsInHospitalList;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Code);
			p.SourceColumn = ColumnNames.Code;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StockCodeDACA);
			p.SourceColumn = ColumnNames.StockCodeDACA;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NearExpiryTrigger);
			p.SourceColumn = ColumnNames.NearExpiryTrigger;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StorageTypeID);
			p.SourceColumn = ColumnNames.StorageTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsStackStored);
			p.SourceColumn = ColumnNames.IsStackStored;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ProcessInDecimal);
			p.SourceColumn = ColumnNames.ProcessInDecimal;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsActive);
			p.SourceColumn = ColumnNames.IsActive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NeedExpiry);
			p.SourceColumn = ColumnNames.NeedExpiry;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NeedBatch);
			p.SourceColumn = ColumnNames.NeedBatch;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rowguid);
			p.SourceColumn = ColumnNames.Rowguid;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StorageLocationTypeGuid);
			p.SourceColumn = ColumnNames.StorageLocationTypeGuid;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.VENGuid);
			p.SourceColumn = ColumnNames.VENGuid;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ABCGuid);
			p.SourceColumn = ColumnNames.ABCGuid;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ProductGuid);
			p.SourceColumn = ColumnNames.ProductGuid;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DosageFormGuid);
			p.SourceColumn = ColumnNames.DosageFormGuid;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UnitGuid);
			p.SourceColumn = ColumnNames.UnitGuid;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedDate);
			p.SourceColumn = ColumnNames.CreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifiedDate);
			p.SourceColumn = ColumnNames.ModifiedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifiedBy);
			p.SourceColumn = ColumnNames.ModifiedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SN);
			p.SourceColumn = ColumnNames.SN;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NeedExpiryBatch);
			p.SourceColumn = ColumnNames.NeedExpiryBatch;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RRGroupID);
			p.SourceColumn = ColumnNames.RRGroupID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsVariableMargin);
			p.SourceColumn = ColumnNames.IsVariableMargin;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
