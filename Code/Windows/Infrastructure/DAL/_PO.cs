
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
    public abstract class _PO : SqlClientEntity
    {
        public _PO()
        {
            this.QuerySource = "PO";
            this.MappingName = "PO";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_POLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int ID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.ID, ID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_POLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter ID
            {
                get
                {
                    return new SqlParameter("@ID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter PONumber
            {
                get
                {
                    return new SqlParameter("@PONumber", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter LetterNo
            {
                get
                {
                    return new SqlParameter("@LetterNo", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter SupplierID
            {
                get
                {
                    return new SqlParameter("@SupplierID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter StoreID
            {
                get
                {
                    return new SqlParameter("@StoreID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter DateOfEntry
            {
                get
                {
                    return new SqlParameter("@DateOfEntry", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter SavedbyUserID
            {
                get
                {
                    return new SqlParameter("@SavedbyUserID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter TotalValue
            {
                get
                {
                    return new SqlParameter("@TotalValue", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter Insurance
            {
                get
                {
                    return new SqlParameter("@Insurance", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter AirFreight
            {
                get
                {
                    return new SqlParameter("@AirFreight", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter SeaFreight
            {
                get
                {
                    return new SqlParameter("@SeaFreight", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter InlandFreight
            {
                get
                {
                    return new SqlParameter("@InlandFreight", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter NBE
            {
                get
                {
                    return new SqlParameter("@NBE", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter CBE
            {
                get
                {
                    return new SqlParameter("@CBE", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter CustomDutyTax
            {
                get
                {
                    return new SqlParameter("@CustomDutyTax", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter TransitServiceCharge
            {
                get
                {
                    return new SqlParameter("@TransitServiceCharge", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter Provision
            {
                get
                {
                    return new SqlParameter("@Provision", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter OtherExpense
            {
                get
                {
                    return new SqlParameter("@OtherExpense", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter ExhangeRate
            {
                get
                {
                    return new SqlParameter("@ExhangeRate", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter Description
            {
                get
                {
                    return new SqlParameter("@Description", SqlDbType.Text, 2147483647);
                }
            }

            public static SqlParameter PurchaseType
            {
                get
                {
                    return new SqlParameter("@PurchaseType", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter RefNo
            {
                get
                {
                    return new SqlParameter("@RefNo", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter Delivery
            {
                get
                {
                    return new SqlParameter("@Delivery", SqlDbType.VarChar, 200);
                }
            }

            public static SqlParameter Currency
            {
                get
                {
                    return new SqlParameter("@Currency", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter LCID
            {
                get
                {
                    return new SqlParameter("@LCID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter TermOfPayement
            {
                get
                {
                    return new SqlParameter("@TermOfPayement", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter PODate
            {
                get
                {
                    return new SqlParameter("@PODate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter IsElectronic
            {
                get
                {
                    return new SqlParameter("@IsElectronic", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter POFinalized
            {
                get
                {
                    return new SqlParameter("@POFinalized", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter Rowguid
            {
                get
                {
                    return new SqlParameter("@Rowguid", SqlDbType.UniqueIdentifier, 0);
                }
            }

            public static SqlParameter ModeID
            {
                get
                {
                    return new SqlParameter("@ModeID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter FiscalYearID
            {
                get
                {
                    return new SqlParameter("@FiscalYearID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter PaymentTypeID
            {
                get
                {
                    return new SqlParameter("@PaymentTypeID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Identifier
            {
                get
                {
                    return new SqlParameter("@Identifier", SqlDbType.NVarChar, 5);
                }
            }

            public static SqlParameter CreatedDate
            {
                get
                {
                    return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter ShippingSite
            {
                get
                {
                    return new SqlParameter("@ShippingSite", SqlDbType.NVarChar, 100);
                }
            }

            public static SqlParameter ModifiedDate
            {
                get
                {
                    return new SqlParameter("@ModifiedDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter Source
            {
                get
                {
                    return new SqlParameter("@Source", SqlDbType.NVarChar, 10);
                }
            }

            public static SqlParameter POGroupID
            {
                get
                {
                    return new SqlParameter("@POGroupID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter HeaderPurchaseOrderID
            {
                get
                {
                    return new SqlParameter("@HeaderPurchaseOrderID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter PurchaseOrderStatusID
            {
                get
                {
                    return new SqlParameter("@PurchaseOrderStatusID", SqlDbType.Int, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string ID = "ID";
            public const string PONumber = "PONumber";
            public const string LetterNo = "LetterNo";
            public const string SupplierID = "SupplierID";
            public const string StoreID = "StoreID";
            public const string DateOfEntry = "DateOfEntry";
            public const string SavedbyUserID = "SavedbyUserID";
            public const string TotalValue = "TotalValue";
            public const string Insurance = "Insurance";
            public const string AirFreight = "AirFreight";
            public const string SeaFreight = "SeaFreight";
            public const string InlandFreight = "InlandFreight";
            public const string NBE = "NBE";
            public const string CBE = "CBE";
            public const string CustomDutyTax = "CustomDutyTax";
            public const string TransitServiceCharge = "TransitServiceCharge";
            public const string Provision = "Provision";
            public const string OtherExpense = "OtherExpense";
            public const string ExhangeRate = "ExhangeRate";
            public const string Description = "Description";
            public const string PurchaseType = "PurchaseType";
            public const string RefNo = "RefNo";
            public const string Delivery = "Delivery";
            public const string Currency = "Currency";
            public const string LCID = "LCID";
            public const string TermOfPayement = "TermOfPayement";
            public const string PODate = "PODate";
            public const string IsElectronic = "IsElectronic";
            public const string POFinalized = "POFinalized";
            public const string Rowguid = "rowguid";
            public const string ModeID = "ModeID";
            public const string FiscalYearID = "FiscalYearID";
            public const string PaymentTypeID = "PaymentTypeID";
            public const string Identifier = "Identifier";
            public const string CreatedDate = "CreatedDate";
            public const string ShippingSite = "ShippingSite";
            public const string ModifiedDate = "ModifiedDate";
            public const string Source = "Source";
            public const string POGroupID = "POGroupID";
            public const string HeaderPurchaseOrderID = "HeaderPurchaseOrderID";
            public const string PurchaseOrderStatusID = "PurchaseOrderStatusID";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _PO.PropertyNames.ID;
                    ht[PONumber] = _PO.PropertyNames.PONumber;
                    ht[LetterNo] = _PO.PropertyNames.LetterNo;
                    ht[SupplierID] = _PO.PropertyNames.SupplierID;
                    ht[StoreID] = _PO.PropertyNames.StoreID;
                    ht[DateOfEntry] = _PO.PropertyNames.DateOfEntry;
                    ht[SavedbyUserID] = _PO.PropertyNames.SavedbyUserID;
                    ht[TotalValue] = _PO.PropertyNames.TotalValue;
                    ht[Insurance] = _PO.PropertyNames.Insurance;
                    ht[AirFreight] = _PO.PropertyNames.AirFreight;
                    ht[SeaFreight] = _PO.PropertyNames.SeaFreight;
                    ht[InlandFreight] = _PO.PropertyNames.InlandFreight;
                    ht[NBE] = _PO.PropertyNames.NBE;
                    ht[CBE] = _PO.PropertyNames.CBE;
                    ht[CustomDutyTax] = _PO.PropertyNames.CustomDutyTax;
                    ht[TransitServiceCharge] = _PO.PropertyNames.TransitServiceCharge;
                    ht[Provision] = _PO.PropertyNames.Provision;
                    ht[OtherExpense] = _PO.PropertyNames.OtherExpense;
                    ht[ExhangeRate] = _PO.PropertyNames.ExhangeRate;
                    ht[Description] = _PO.PropertyNames.Description;
                    ht[PurchaseType] = _PO.PropertyNames.PurchaseType;
                    ht[RefNo] = _PO.PropertyNames.RefNo;
                    ht[Delivery] = _PO.PropertyNames.Delivery;
                    ht[Currency] = _PO.PropertyNames.Currency;
                    ht[LCID] = _PO.PropertyNames.LCID;
                    ht[TermOfPayement] = _PO.PropertyNames.TermOfPayement;
                    ht[PODate] = _PO.PropertyNames.PODate;
                    ht[IsElectronic] = _PO.PropertyNames.IsElectronic;
                    ht[POFinalized] = _PO.PropertyNames.POFinalized;
                    ht[Rowguid] = _PO.PropertyNames.Rowguid;
                    ht[ModeID] = _PO.PropertyNames.ModeID;
                    ht[FiscalYearID] = _PO.PropertyNames.FiscalYearID;
                    ht[PaymentTypeID] = _PO.PropertyNames.PaymentTypeID;
                    ht[Identifier] = _PO.PropertyNames.Identifier;
                    ht[CreatedDate] = _PO.PropertyNames.CreatedDate;
                    ht[ShippingSite] = _PO.PropertyNames.ShippingSite;
                    ht[ModifiedDate] = _PO.PropertyNames.ModifiedDate;
                    ht[Source] = _PO.PropertyNames.Source;
                    ht[POGroupID] = _PO.PropertyNames.POGroupID;
                    ht[HeaderPurchaseOrderID] = _PO.PropertyNames.HeaderPurchaseOrderID;
                    ht[PurchaseOrderStatusID] = _PO.PropertyNames.PurchaseOrderStatusID;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string ID = "ID";
            public const string PONumber = "PONumber";
            public const string LetterNo = "LetterNo";
            public const string SupplierID = "SupplierID";
            public const string StoreID = "StoreID";
            public const string DateOfEntry = "DateOfEntry";
            public const string SavedbyUserID = "SavedbyUserID";
            public const string TotalValue = "TotalValue";
            public const string Insurance = "Insurance";
            public const string AirFreight = "AirFreight";
            public const string SeaFreight = "SeaFreight";
            public const string InlandFreight = "InlandFreight";
            public const string NBE = "NBE";
            public const string CBE = "CBE";
            public const string CustomDutyTax = "CustomDutyTax";
            public const string TransitServiceCharge = "TransitServiceCharge";
            public const string Provision = "Provision";
            public const string OtherExpense = "OtherExpense";
            public const string ExhangeRate = "ExhangeRate";
            public const string Description = "Description";
            public const string PurchaseType = "PurchaseType";
            public const string RefNo = "RefNo";
            public const string Delivery = "Delivery";
            public const string Currency = "Currency";
            public const string LCID = "LCID";
            public const string TermOfPayement = "TermOfPayement";
            public const string PODate = "PODate";
            public const string IsElectronic = "IsElectronic";
            public const string POFinalized = "POFinalized";
            public const string Rowguid = "Rowguid";
            public const string ModeID = "ModeID";
            public const string FiscalYearID = "FiscalYearID";
            public const string PaymentTypeID = "PaymentTypeID";
            public const string Identifier = "Identifier";
            public const string CreatedDate = "CreatedDate";
            public const string ShippingSite = "ShippingSite";
            public const string ModifiedDate = "ModifiedDate";
            public const string Source = "Source";
            public const string POGroupID = "POGroupID";
            public const string HeaderPurchaseOrderID = "HeaderPurchaseOrderID";
            public const string PurchaseOrderStatusID = "PurchaseOrderStatusID";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _PO.ColumnNames.ID;
                    ht[PONumber] = _PO.ColumnNames.PONumber;
                    ht[LetterNo] = _PO.ColumnNames.LetterNo;
                    ht[SupplierID] = _PO.ColumnNames.SupplierID;
                    ht[StoreID] = _PO.ColumnNames.StoreID;
                    ht[DateOfEntry] = _PO.ColumnNames.DateOfEntry;
                    ht[SavedbyUserID] = _PO.ColumnNames.SavedbyUserID;
                    ht[TotalValue] = _PO.ColumnNames.TotalValue;
                    ht[Insurance] = _PO.ColumnNames.Insurance;
                    ht[AirFreight] = _PO.ColumnNames.AirFreight;
                    ht[SeaFreight] = _PO.ColumnNames.SeaFreight;
                    ht[InlandFreight] = _PO.ColumnNames.InlandFreight;
                    ht[NBE] = _PO.ColumnNames.NBE;
                    ht[CBE] = _PO.ColumnNames.CBE;
                    ht[CustomDutyTax] = _PO.ColumnNames.CustomDutyTax;
                    ht[TransitServiceCharge] = _PO.ColumnNames.TransitServiceCharge;
                    ht[Provision] = _PO.ColumnNames.Provision;
                    ht[OtherExpense] = _PO.ColumnNames.OtherExpense;
                    ht[ExhangeRate] = _PO.ColumnNames.ExhangeRate;
                    ht[Description] = _PO.ColumnNames.Description;
                    ht[PurchaseType] = _PO.ColumnNames.PurchaseType;
                    ht[RefNo] = _PO.ColumnNames.RefNo;
                    ht[Delivery] = _PO.ColumnNames.Delivery;
                    ht[Currency] = _PO.ColumnNames.Currency;
                    ht[LCID] = _PO.ColumnNames.LCID;
                    ht[TermOfPayement] = _PO.ColumnNames.TermOfPayement;
                    ht[PODate] = _PO.ColumnNames.PODate;
                    ht[IsElectronic] = _PO.ColumnNames.IsElectronic;
                    ht[POFinalized] = _PO.ColumnNames.POFinalized;
                    ht[Rowguid] = _PO.ColumnNames.Rowguid;
                    ht[ModeID] = _PO.ColumnNames.ModeID;
                    ht[FiscalYearID] = _PO.ColumnNames.FiscalYearID;
                    ht[PaymentTypeID] = _PO.ColumnNames.PaymentTypeID;
                    ht[Identifier] = _PO.ColumnNames.Identifier;
                    ht[CreatedDate] = _PO.ColumnNames.CreatedDate;
                    ht[ShippingSite] = _PO.ColumnNames.ShippingSite;
                    ht[ModifiedDate] = _PO.ColumnNames.ModifiedDate;
                    ht[Source] = _PO.ColumnNames.Source;
                    ht[POGroupID] = _PO.ColumnNames.POGroupID;
                    ht[HeaderPurchaseOrderID] = _PO.ColumnNames.HeaderPurchaseOrderID;
                    ht[PurchaseOrderStatusID] = _PO.ColumnNames.PurchaseOrderStatusID;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string ID = "s_ID";
            public const string PONumber = "s_PONumber";
            public const string LetterNo = "s_LetterNo";
            public const string SupplierID = "s_SupplierID";
            public const string StoreID = "s_StoreID";
            public const string DateOfEntry = "s_DateOfEntry";
            public const string SavedbyUserID = "s_SavedbyUserID";
            public const string TotalValue = "s_TotalValue";
            public const string Insurance = "s_Insurance";
            public const string AirFreight = "s_AirFreight";
            public const string SeaFreight = "s_SeaFreight";
            public const string InlandFreight = "s_InlandFreight";
            public const string NBE = "s_NBE";
            public const string CBE = "s_CBE";
            public const string CustomDutyTax = "s_CustomDutyTax";
            public const string TransitServiceCharge = "s_TransitServiceCharge";
            public const string Provision = "s_Provision";
            public const string OtherExpense = "s_OtherExpense";
            public const string ExhangeRate = "s_ExhangeRate";
            public const string Description = "s_Description";
            public const string PurchaseType = "s_PurchaseType";
            public const string RefNo = "s_RefNo";
            public const string Delivery = "s_Delivery";
            public const string Currency = "s_Currency";
            public const string LCID = "s_LCID";
            public const string TermOfPayement = "s_TermOfPayement";
            public const string PODate = "s_PODate";
            public const string IsElectronic = "s_IsElectronic";
            public const string POFinalized = "s_POFinalized";
            public const string Rowguid = "s_Rowguid";
            public const string ModeID = "s_ModeID";
            public const string FiscalYearID = "s_FiscalYearID";
            public const string PaymentTypeID = "s_PaymentTypeID";
            public const string Identifier = "s_Identifier";
            public const string CreatedDate = "s_CreatedDate";
            public const string ShippingSite = "s_ShippingSite";
            public const string ModifiedDate = "s_ModifiedDate";
            public const string Source = "s_Source";
            public const string POGroupID = "s_POGroupID";
            public const string HeaderPurchaseOrderID = "s_HeaderPurchaseOrderID";
            public const string PurchaseOrderStatusID = "s_PurchaseOrderStatusID";

        }
        #endregion

        #region Properties

        public virtual int ID
        {
            get
            {
                return base.Getint(ColumnNames.ID);
            }
            set
            {
                base.Setint(ColumnNames.ID, value);
            }
        }

        public virtual string PONumber
        {
            get
            {
                return base.Getstring(ColumnNames.PONumber);
            }
            set
            {
                base.Setstring(ColumnNames.PONumber, value);
            }
        }

        public virtual string LetterNo
        {
            get
            {
                return base.Getstring(ColumnNames.LetterNo);
            }
            set
            {
                base.Setstring(ColumnNames.LetterNo, value);
            }
        }

        public virtual int SupplierID
        {
            get
            {
                return base.Getint(ColumnNames.SupplierID);
            }
            set
            {
                base.Setint(ColumnNames.SupplierID, value);
            }
        }

        public virtual int StoreID
        {
            get
            {
                return base.Getint(ColumnNames.StoreID);
            }
            set
            {
                base.Setint(ColumnNames.StoreID, value);
            }
        }

        public virtual DateTime DateOfEntry
        {
            get
            {
                return base.GetDateTime(ColumnNames.DateOfEntry);
            }
            set
            {
                base.SetDateTime(ColumnNames.DateOfEntry, value);
            }
        }

        public virtual int SavedbyUserID
        {
            get
            {
                return base.Getint(ColumnNames.SavedbyUserID);
            }
            set
            {
                base.Setint(ColumnNames.SavedbyUserID, value);
            }
        }

        public virtual double TotalValue
        {
            get
            {
                if (!IsColumnNull("TotalValue"))
                    return base.Getdouble(ColumnNames.TotalValue);
                else
                    return -1;
            }
            set
            {
                base.Setdouble(ColumnNames.TotalValue, value);
            }
        }

        public virtual double Insurance
        {
            get
            {
                if (!IsColumnNull("Insurance"))
                    return base.Getdouble(ColumnNames.Insurance);
                else
                    return -1;
            }
            set
            {
                base.Setdouble(ColumnNames.Insurance, value);
            }
        }

        public virtual double AirFreight
        {
            get
            {
                return base.Getdouble(ColumnNames.AirFreight);
            }
            set
            {
                base.Setdouble(ColumnNames.AirFreight, value);
            }
        }

        public virtual double SeaFreight
        {
            get
            {
                return base.Getdouble(ColumnNames.SeaFreight);
            }
            set
            {
                base.Setdouble(ColumnNames.SeaFreight, value);
            }
        }

        public virtual double InlandFreight
        {
            get
            {
                return base.Getdouble(ColumnNames.InlandFreight);
            }
            set
            {
                base.Setdouble(ColumnNames.InlandFreight, value);
            }
        }

        public virtual double NBE
        {
            get
            {
                if (!IsColumnNull("NBE"))
                    return base.Getdouble(ColumnNames.NBE);
                else
                    return -1;
            }
            set
            {
                base.Setdouble(ColumnNames.NBE, value);
            }
        }

        public virtual double CBE
        {
            get
            {
                return base.Getdouble(ColumnNames.CBE);
            }
            set
            {
                base.Setdouble(ColumnNames.CBE, value);
            }
        }

        public virtual double CustomDutyTax
        {
            get
            {
                return base.Getdouble(ColumnNames.CustomDutyTax);
            }
            set
            {
                base.Setdouble(ColumnNames.CustomDutyTax, value);
            }
        }

        public virtual double TransitServiceCharge
        {
            get
            {
                return base.Getdouble(ColumnNames.TransitServiceCharge);
            }
            set
            {
                base.Setdouble(ColumnNames.TransitServiceCharge, value);
            }
        }

        public virtual double Provision
        {
            get
            {
                return base.Getdouble(ColumnNames.Provision);
            }
            set
            {
                base.Setdouble(ColumnNames.Provision, value);
            }
        }

        public virtual double OtherExpense
        {
            get
            {
                return base.Getdouble(ColumnNames.OtherExpense);
            }
            set
            {
                base.Setdouble(ColumnNames.OtherExpense, value);
            }
        }

        public virtual double ExhangeRate
        {
            get
            {
                return base.Getdouble(ColumnNames.ExhangeRate);
            }
            set
            {
                base.Setdouble(ColumnNames.ExhangeRate, value);
            }
        }

        public virtual string Description
        {
            get
            {
                return base.Getstring(ColumnNames.Description);
            }
            set
            {
                base.Setstring(ColumnNames.Description, value);
            }
        }

        public virtual int PurchaseType
        {
            get
            {
                return base.Getint(ColumnNames.PurchaseType);
            }
            set
            {
                base.Setint(ColumnNames.PurchaseType, value);
            }
        }

        public virtual string RefNo
        {
            get
            {
                return base.Getstring(ColumnNames.RefNo);
            }
            set
            {
                base.Setstring(ColumnNames.RefNo, value);
            }
        }

        public virtual string Delivery
        {
            get
            {
                return base.Getstring(ColumnNames.Delivery);
            }
            set
            {
                base.Setstring(ColumnNames.Delivery, value);
            }
        }

        public virtual string Currency
        {
            get
            {
                return base.Getstring(ColumnNames.Currency);
            }
            set
            {
                base.Setstring(ColumnNames.Currency, value);
            }
        }

        public virtual int LCID
        {
            get
            {
                return base.Getint(ColumnNames.LCID);
            }
            set
            {
                base.Setint(ColumnNames.LCID, value);
            }
        }

        public virtual int TermOfPayement
        {
            get
            {
                return base.Getint(ColumnNames.TermOfPayement);
            }
            set
            {
                base.Setint(ColumnNames.TermOfPayement, value);
            }
        }

        public virtual DateTime PODate
        {
            get
            {
                return base.GetDateTime(ColumnNames.PODate);
            }
            set
            {
                base.SetDateTime(ColumnNames.PODate, value);
            }
        }

        public virtual bool IsElectronic
        {
            get
            {
                return base.Getbool(ColumnNames.IsElectronic);
            }
            set
            {
                base.Setbool(ColumnNames.IsElectronic, value);
            }
        }

        public virtual bool POFinalized
        {
            get
            {
                return base.Getbool(ColumnNames.POFinalized);
            }
            set
            {
                base.Setbool(ColumnNames.POFinalized, value);
            }
        }

        public virtual Guid Rowguid
        {
            get
            {
                return base.GetGuid(ColumnNames.Rowguid);
            }
            set
            {
                base.SetGuid(ColumnNames.Rowguid, value);
            }
        }

        public virtual int ModeID
        {
            get
            {
                return base.Getint(ColumnNames.ModeID);
            }
            set
            {
                base.Setint(ColumnNames.ModeID, value);
            }
        }

        public virtual int FiscalYearID
        {
            get
            {
                return base.Getint(ColumnNames.FiscalYearID);
            }
            set
            {
                base.Setint(ColumnNames.FiscalYearID, value);
            }
        }

        public virtual int PaymentTypeID
        {
            get
            {
                return base.Getint(ColumnNames.PaymentTypeID);
            }
            set
            {
                base.Setint(ColumnNames.PaymentTypeID, value);
            }
        }

        public virtual string Identifier
        {
            get
            {
                return base.Getstring(ColumnNames.Identifier);
            }
            set
            {
                base.Setstring(ColumnNames.Identifier, value);
            }
        }

        public virtual DateTime CreatedDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.CreatedDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.CreatedDate, value);
            }
        }

        public virtual string ShippingSite
        {
            get
            {
                return base.Getstring(ColumnNames.ShippingSite);
            }
            set
            {
                base.Setstring(ColumnNames.ShippingSite, value);
            }
        }

        public virtual DateTime ModifiedDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.ModifiedDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.ModifiedDate, value);
            }
        }

        public virtual string Source
        {
            get
            {
                return base.Getstring(ColumnNames.Source);
            }
            set
            {
                base.Setstring(ColumnNames.Source, value);
            }
        }

        public virtual int POGroupID
        {
            get
            {
                return base.Getint(ColumnNames.POGroupID);
            }
            set
            {
                base.Setint(ColumnNames.POGroupID, value);
            }
        }

        public virtual int HeaderPurchaseOrderID
        {
            get
            {
                return base.Getint(ColumnNames.HeaderPurchaseOrderID);
            }
            set
            {
                base.Setint(ColumnNames.HeaderPurchaseOrderID, value);
            }
        }

        public virtual int PurchaseOrderStatusID
        {
            get
            {
                return base.Getint(ColumnNames.PurchaseOrderStatusID);
            }
            set
            {
                base.Setint(ColumnNames.PurchaseOrderStatusID, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_ID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ID);
                else
                    this.ID = base.SetintAsString(ColumnNames.ID, value);
            }
        }

        public virtual string s_PONumber
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PONumber) ? string.Empty : base.GetstringAsString(ColumnNames.PONumber);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PONumber);
                else
                    this.PONumber = base.SetstringAsString(ColumnNames.PONumber, value);
            }
        }

        public virtual string s_LetterNo
        {
            get
            {
                return this.IsColumnNull(ColumnNames.LetterNo) ? string.Empty : base.GetstringAsString(ColumnNames.LetterNo);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.LetterNo);
                else
                    this.LetterNo = base.SetstringAsString(ColumnNames.LetterNo, value);
            }
        }

        public virtual string s_SupplierID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SupplierID) ? string.Empty : base.GetintAsString(ColumnNames.SupplierID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SupplierID);
                else
                    this.SupplierID = base.SetintAsString(ColumnNames.SupplierID, value);
            }
        }

        public virtual string s_StoreID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.StoreID) ? string.Empty : base.GetintAsString(ColumnNames.StoreID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.StoreID);
                else
                    this.StoreID = base.SetintAsString(ColumnNames.StoreID, value);
            }
        }

        public virtual string s_DateOfEntry
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DateOfEntry) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateOfEntry);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DateOfEntry);
                else
                    this.DateOfEntry = base.SetDateTimeAsString(ColumnNames.DateOfEntry, value);
            }
        }

        public virtual string s_SavedbyUserID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SavedbyUserID) ? string.Empty : base.GetintAsString(ColumnNames.SavedbyUserID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SavedbyUserID);
                else
                    this.SavedbyUserID = base.SetintAsString(ColumnNames.SavedbyUserID, value);
            }
        }

        public virtual string s_TotalValue
        {
            get
            {
                return this.IsColumnNull(ColumnNames.TotalValue) ? string.Empty : base.GetdoubleAsString(ColumnNames.TotalValue);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.TotalValue);
                else
                    this.TotalValue = base.SetdoubleAsString(ColumnNames.TotalValue, value);
            }
        }

        public virtual string s_Insurance
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Insurance) ? string.Empty : base.GetdoubleAsString(ColumnNames.Insurance);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Insurance);
                else
                    this.Insurance = base.SetdoubleAsString(ColumnNames.Insurance, value);
            }
        }

        public virtual string s_AirFreight
        {
            get
            {
                return this.IsColumnNull(ColumnNames.AirFreight) ? string.Empty : base.GetdoubleAsString(ColumnNames.AirFreight);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.AirFreight);
                else
                    this.AirFreight = base.SetdoubleAsString(ColumnNames.AirFreight, value);
            }
        }

        public virtual string s_SeaFreight
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SeaFreight) ? string.Empty : base.GetdoubleAsString(ColumnNames.SeaFreight);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SeaFreight);
                else
                    this.SeaFreight = base.SetdoubleAsString(ColumnNames.SeaFreight, value);
            }
        }

        public virtual string s_InlandFreight
        {
            get
            {
                return this.IsColumnNull(ColumnNames.InlandFreight) ? string.Empty : base.GetdoubleAsString(ColumnNames.InlandFreight);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.InlandFreight);
                else
                    this.InlandFreight = base.SetdoubleAsString(ColumnNames.InlandFreight, value);
            }
        }

        public virtual string s_NBE
        {
            get
            {
                return this.IsColumnNull(ColumnNames.NBE) ? string.Empty : base.GetdoubleAsString(ColumnNames.NBE);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.NBE);
                else
                    this.NBE = base.SetdoubleAsString(ColumnNames.NBE, value);
            }
        }

        public virtual string s_CBE
        {
            get
            {
                return this.IsColumnNull(ColumnNames.CBE) ? string.Empty : base.GetdoubleAsString(ColumnNames.CBE);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.CBE);
                else
                    this.CBE = base.SetdoubleAsString(ColumnNames.CBE, value);
            }
        }

        public virtual string s_CustomDutyTax
        {
            get
            {
                return this.IsColumnNull(ColumnNames.CustomDutyTax) ? string.Empty : base.GetdoubleAsString(ColumnNames.CustomDutyTax);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.CustomDutyTax);
                else
                    this.CustomDutyTax = base.SetdoubleAsString(ColumnNames.CustomDutyTax, value);
            }
        }

        public virtual string s_TransitServiceCharge
        {
            get
            {
                return this.IsColumnNull(ColumnNames.TransitServiceCharge) ? string.Empty : base.GetdoubleAsString(ColumnNames.TransitServiceCharge);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.TransitServiceCharge);
                else
                    this.TransitServiceCharge = base.SetdoubleAsString(ColumnNames.TransitServiceCharge, value);
            }
        }

        public virtual string s_Provision
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Provision) ? string.Empty : base.GetdoubleAsString(ColumnNames.Provision);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Provision);
                else
                    this.Provision = base.SetdoubleAsString(ColumnNames.Provision, value);
            }
        }

        public virtual string s_OtherExpense
        {
            get
            {
                return this.IsColumnNull(ColumnNames.OtherExpense) ? string.Empty : base.GetdoubleAsString(ColumnNames.OtherExpense);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.OtherExpense);
                else
                    this.OtherExpense = base.SetdoubleAsString(ColumnNames.OtherExpense, value);
            }
        }

        public virtual string s_ExhangeRate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ExhangeRate) ? string.Empty : base.GetdoubleAsString(ColumnNames.ExhangeRate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ExhangeRate);
                else
                    this.ExhangeRate = base.SetdoubleAsString(ColumnNames.ExhangeRate, value);
            }
        }

        public virtual string s_Description
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Description) ? string.Empty : base.GetstringAsString(ColumnNames.Description);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Description);
                else
                    this.Description = base.SetstringAsString(ColumnNames.Description, value);
            }
        }

        public virtual string s_PurchaseType
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PurchaseType) ? string.Empty : base.GetintAsString(ColumnNames.PurchaseType);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PurchaseType);
                else
                    this.PurchaseType = base.SetintAsString(ColumnNames.PurchaseType, value);
            }
        }

        public virtual string s_RefNo
        {
            get
            {
                return this.IsColumnNull(ColumnNames.RefNo) ? string.Empty : base.GetstringAsString(ColumnNames.RefNo);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.RefNo);
                else
                    this.RefNo = base.SetstringAsString(ColumnNames.RefNo, value);
            }
        }

        public virtual string s_Delivery
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Delivery) ? string.Empty : base.GetstringAsString(ColumnNames.Delivery);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Delivery);
                else
                    this.Delivery = base.SetstringAsString(ColumnNames.Delivery, value);
            }
        }

        public virtual string s_Currency
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Currency) ? string.Empty : base.GetstringAsString(ColumnNames.Currency);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Currency);
                else
                    this.Currency = base.SetstringAsString(ColumnNames.Currency, value);
            }
        }

        public virtual string s_LCID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.LCID) ? string.Empty : base.GetintAsString(ColumnNames.LCID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.LCID);
                else
                    this.LCID = base.SetintAsString(ColumnNames.LCID, value);
            }
        }

        public virtual string s_TermOfPayement
        {
            get
            {
                return this.IsColumnNull(ColumnNames.TermOfPayement) ? string.Empty : base.GetintAsString(ColumnNames.TermOfPayement);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.TermOfPayement);
                else
                    this.TermOfPayement = base.SetintAsString(ColumnNames.TermOfPayement, value);
            }
        }

        public virtual string s_PODate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PODate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.PODate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PODate);
                else
                    this.PODate = base.SetDateTimeAsString(ColumnNames.PODate, value);
            }
        }

        public virtual string s_IsElectronic
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IsElectronic) ? string.Empty : base.GetboolAsString(ColumnNames.IsElectronic);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IsElectronic);
                else
                    this.IsElectronic = base.SetboolAsString(ColumnNames.IsElectronic, value);
            }
        }

        public virtual string s_POFinalized
        {
            get
            {
                return this.IsColumnNull(ColumnNames.POFinalized) ? string.Empty : base.GetboolAsString(ColumnNames.POFinalized);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.POFinalized);
                else
                    this.POFinalized = base.SetboolAsString(ColumnNames.POFinalized, value);
            }
        }

        public virtual string s_Rowguid
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Rowguid) ? string.Empty : base.GetGuidAsString(ColumnNames.Rowguid);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Rowguid);
                else
                    this.Rowguid = base.SetGuidAsString(ColumnNames.Rowguid, value);
            }
        }

        public virtual string s_ModeID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ModeID) ? string.Empty : base.GetintAsString(ColumnNames.ModeID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ModeID);
                else
                    this.ModeID = base.SetintAsString(ColumnNames.ModeID, value);
            }
        }

        public virtual string s_FiscalYearID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.FiscalYearID) ? string.Empty : base.GetintAsString(ColumnNames.FiscalYearID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.FiscalYearID);
                else
                    this.FiscalYearID = base.SetintAsString(ColumnNames.FiscalYearID, value);
            }
        }

        public virtual string s_PaymentTypeID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PaymentTypeID) ? string.Empty : base.GetintAsString(ColumnNames.PaymentTypeID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PaymentTypeID);
                else
                    this.PaymentTypeID = base.SetintAsString(ColumnNames.PaymentTypeID, value);
            }
        }

        public virtual string s_Identifier
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Identifier) ? string.Empty : base.GetstringAsString(ColumnNames.Identifier);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Identifier);
                else
                    this.Identifier = base.SetstringAsString(ColumnNames.Identifier, value);
            }
        }

        public virtual string s_CreatedDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.CreatedDate);
                else
                    this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
            }
        }

        public virtual string s_ShippingSite
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ShippingSite) ? string.Empty : base.GetstringAsString(ColumnNames.ShippingSite);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ShippingSite);
                else
                    this.ShippingSite = base.SetstringAsString(ColumnNames.ShippingSite, value);
            }
        }

        public virtual string s_ModifiedDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ModifiedDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ModifiedDate);
                else
                    this.ModifiedDate = base.SetDateTimeAsString(ColumnNames.ModifiedDate, value);
            }
        }

        public virtual string s_Source
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Source) ? string.Empty : base.GetstringAsString(ColumnNames.Source);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Source);
                else
                    this.Source = base.SetstringAsString(ColumnNames.Source, value);
            }
        }

        public virtual string s_POGroupID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.POGroupID) ? string.Empty : base.GetintAsString(ColumnNames.POGroupID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.POGroupID);
                else
                    this.POGroupID = base.SetintAsString(ColumnNames.POGroupID, value);
            }
        }

        public virtual string s_HeaderPurchaseOrderID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.HeaderPurchaseOrderID) ? string.Empty : base.GetintAsString(ColumnNames.HeaderPurchaseOrderID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.HeaderPurchaseOrderID);
                else
                    this.HeaderPurchaseOrderID = base.SetintAsString(ColumnNames.HeaderPurchaseOrderID, value);
            }
        }

        public virtual string s_PurchaseOrderStatusID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PurchaseOrderStatusID) ? string.Empty : base.GetintAsString(ColumnNames.PurchaseOrderStatusID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PurchaseOrderStatusID);
                else
                    this.PurchaseOrderStatusID = base.SetintAsString(ColumnNames.PurchaseOrderStatusID, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter ID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PONumber
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PONumber, Parameters.PONumber);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter LetterNo
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.LetterNo, Parameters.LetterNo);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SupplierID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SupplierID, Parameters.SupplierID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter StoreID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.StoreID, Parameters.StoreID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DateOfEntry
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DateOfEntry, Parameters.DateOfEntry);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SavedbyUserID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SavedbyUserID, Parameters.SavedbyUserID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter TotalValue
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.TotalValue, Parameters.TotalValue);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Insurance
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Insurance, Parameters.Insurance);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter AirFreight
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.AirFreight, Parameters.AirFreight);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SeaFreight
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SeaFreight, Parameters.SeaFreight);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter InlandFreight
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.InlandFreight, Parameters.InlandFreight);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter NBE
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.NBE, Parameters.NBE);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter CBE
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.CBE, Parameters.CBE);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter CustomDutyTax
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.CustomDutyTax, Parameters.CustomDutyTax);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter TransitServiceCharge
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.TransitServiceCharge, Parameters.TransitServiceCharge);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Provision
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Provision, Parameters.Provision);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter OtherExpense
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.OtherExpense, Parameters.OtherExpense);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ExhangeRate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ExhangeRate, Parameters.ExhangeRate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Description
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Description, Parameters.Description);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PurchaseType
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PurchaseType, Parameters.PurchaseType);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter RefNo
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.RefNo, Parameters.RefNo);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Delivery
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Delivery, Parameters.Delivery);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Currency
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Currency, Parameters.Currency);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter LCID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.LCID, Parameters.LCID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter TermOfPayement
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.TermOfPayement, Parameters.TermOfPayement);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PODate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PODate, Parameters.PODate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IsElectronic
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IsElectronic, Parameters.IsElectronic);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter POFinalized
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.POFinalized, Parameters.POFinalized);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Rowguid
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Rowguid, Parameters.Rowguid);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ModeID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ModeID, Parameters.ModeID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter FiscalYearID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.FiscalYearID, Parameters.FiscalYearID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PaymentTypeID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PaymentTypeID, Parameters.PaymentTypeID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Identifier
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Identifier, Parameters.Identifier);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter CreatedDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ShippingSite
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ShippingSite, Parameters.ShippingSite);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ModifiedDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ModifiedDate, Parameters.ModifiedDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Source
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Source, Parameters.Source);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter POGroupID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.POGroupID, Parameters.POGroupID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter HeaderPurchaseOrderID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.HeaderPurchaseOrderID, Parameters.HeaderPurchaseOrderID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PurchaseOrderStatusID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PurchaseOrderStatusID, Parameters.PurchaseOrderStatusID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public WhereParameter PONumber
            {
                get
                {
                    if (_PONumber_W == null)
                    {
                        _PONumber_W = TearOff.PONumber;
                    }
                    return _PONumber_W;
                }
            }

            public WhereParameter LetterNo
            {
                get
                {
                    if (_LetterNo_W == null)
                    {
                        _LetterNo_W = TearOff.LetterNo;
                    }
                    return _LetterNo_W;
                }
            }

            public WhereParameter SupplierID
            {
                get
                {
                    if (_SupplierID_W == null)
                    {
                        _SupplierID_W = TearOff.SupplierID;
                    }
                    return _SupplierID_W;
                }
            }

            public WhereParameter StoreID
            {
                get
                {
                    if (_StoreID_W == null)
                    {
                        _StoreID_W = TearOff.StoreID;
                    }
                    return _StoreID_W;
                }
            }

            public WhereParameter DateOfEntry
            {
                get
                {
                    if (_DateOfEntry_W == null)
                    {
                        _DateOfEntry_W = TearOff.DateOfEntry;
                    }
                    return _DateOfEntry_W;
                }
            }

            public WhereParameter SavedbyUserID
            {
                get
                {
                    if (_SavedbyUserID_W == null)
                    {
                        _SavedbyUserID_W = TearOff.SavedbyUserID;
                    }
                    return _SavedbyUserID_W;
                }
            }

            public WhereParameter TotalValue
            {
                get
                {
                    if (_TotalValue_W == null)
                    {
                        _TotalValue_W = TearOff.TotalValue;
                    }
                    return _TotalValue_W;
                }
            }

            public WhereParameter Insurance
            {
                get
                {
                    if (_Insurance_W == null)
                    {
                        _Insurance_W = TearOff.Insurance;
                    }
                    return _Insurance_W;
                }
            }

            public WhereParameter AirFreight
            {
                get
                {
                    if (_AirFreight_W == null)
                    {
                        _AirFreight_W = TearOff.AirFreight;
                    }
                    return _AirFreight_W;
                }
            }

            public WhereParameter SeaFreight
            {
                get
                {
                    if (_SeaFreight_W == null)
                    {
                        _SeaFreight_W = TearOff.SeaFreight;
                    }
                    return _SeaFreight_W;
                }
            }

            public WhereParameter InlandFreight
            {
                get
                {
                    if (_InlandFreight_W == null)
                    {
                        _InlandFreight_W = TearOff.InlandFreight;
                    }
                    return _InlandFreight_W;
                }
            }

            public WhereParameter NBE
            {
                get
                {
                    if (_NBE_W == null)
                    {
                        _NBE_W = TearOff.NBE;
                    }
                    return _NBE_W;
                }
            }

            public WhereParameter CBE
            {
                get
                {
                    if (_CBE_W == null)
                    {
                        _CBE_W = TearOff.CBE;
                    }
                    return _CBE_W;
                }
            }

            public WhereParameter CustomDutyTax
            {
                get
                {
                    if (_CustomDutyTax_W == null)
                    {
                        _CustomDutyTax_W = TearOff.CustomDutyTax;
                    }
                    return _CustomDutyTax_W;
                }
            }

            public WhereParameter TransitServiceCharge
            {
                get
                {
                    if (_TransitServiceCharge_W == null)
                    {
                        _TransitServiceCharge_W = TearOff.TransitServiceCharge;
                    }
                    return _TransitServiceCharge_W;
                }
            }

            public WhereParameter Provision
            {
                get
                {
                    if (_Provision_W == null)
                    {
                        _Provision_W = TearOff.Provision;
                    }
                    return _Provision_W;
                }
            }

            public WhereParameter OtherExpense
            {
                get
                {
                    if (_OtherExpense_W == null)
                    {
                        _OtherExpense_W = TearOff.OtherExpense;
                    }
                    return _OtherExpense_W;
                }
            }

            public WhereParameter ExhangeRate
            {
                get
                {
                    if (_ExhangeRate_W == null)
                    {
                        _ExhangeRate_W = TearOff.ExhangeRate;
                    }
                    return _ExhangeRate_W;
                }
            }

            public WhereParameter Description
            {
                get
                {
                    if (_Description_W == null)
                    {
                        _Description_W = TearOff.Description;
                    }
                    return _Description_W;
                }
            }

            public WhereParameter PurchaseType
            {
                get
                {
                    if (_PurchaseType_W == null)
                    {
                        _PurchaseType_W = TearOff.PurchaseType;
                    }
                    return _PurchaseType_W;
                }
            }

            public WhereParameter RefNo
            {
                get
                {
                    if (_RefNo_W == null)
                    {
                        _RefNo_W = TearOff.RefNo;
                    }
                    return _RefNo_W;
                }
            }

            public WhereParameter Delivery
            {
                get
                {
                    if (_Delivery_W == null)
                    {
                        _Delivery_W = TearOff.Delivery;
                    }
                    return _Delivery_W;
                }
            }

            public WhereParameter Currency
            {
                get
                {
                    if (_Currency_W == null)
                    {
                        _Currency_W = TearOff.Currency;
                    }
                    return _Currency_W;
                }
            }

            public WhereParameter LCID
            {
                get
                {
                    if (_LCID_W == null)
                    {
                        _LCID_W = TearOff.LCID;
                    }
                    return _LCID_W;
                }
            }

            public WhereParameter TermOfPayement
            {
                get
                {
                    if (_TermOfPayement_W == null)
                    {
                        _TermOfPayement_W = TearOff.TermOfPayement;
                    }
                    return _TermOfPayement_W;
                }
            }

            public WhereParameter PODate
            {
                get
                {
                    if (_PODate_W == null)
                    {
                        _PODate_W = TearOff.PODate;
                    }
                    return _PODate_W;
                }
            }

            public WhereParameter IsElectronic
            {
                get
                {
                    if (_IsElectronic_W == null)
                    {
                        _IsElectronic_W = TearOff.IsElectronic;
                    }
                    return _IsElectronic_W;
                }
            }

            public WhereParameter POFinalized
            {
                get
                {
                    if (_POFinalized_W == null)
                    {
                        _POFinalized_W = TearOff.POFinalized;
                    }
                    return _POFinalized_W;
                }
            }

            public WhereParameter Rowguid
            {
                get
                {
                    if (_Rowguid_W == null)
                    {
                        _Rowguid_W = TearOff.Rowguid;
                    }
                    return _Rowguid_W;
                }
            }

            public WhereParameter ModeID
            {
                get
                {
                    if (_ModeID_W == null)
                    {
                        _ModeID_W = TearOff.ModeID;
                    }
                    return _ModeID_W;
                }
            }

            public WhereParameter FiscalYearID
            {
                get
                {
                    if (_FiscalYearID_W == null)
                    {
                        _FiscalYearID_W = TearOff.FiscalYearID;
                    }
                    return _FiscalYearID_W;
                }
            }

            public WhereParameter PaymentTypeID
            {
                get
                {
                    if (_PaymentTypeID_W == null)
                    {
                        _PaymentTypeID_W = TearOff.PaymentTypeID;
                    }
                    return _PaymentTypeID_W;
                }
            }

            public WhereParameter Identifier
            {
                get
                {
                    if (_Identifier_W == null)
                    {
                        _Identifier_W = TearOff.Identifier;
                    }
                    return _Identifier_W;
                }
            }

            public WhereParameter CreatedDate
            {
                get
                {
                    if (_CreatedDate_W == null)
                    {
                        _CreatedDate_W = TearOff.CreatedDate;
                    }
                    return _CreatedDate_W;
                }
            }

            public WhereParameter ShippingSite
            {
                get
                {
                    if (_ShippingSite_W == null)
                    {
                        _ShippingSite_W = TearOff.ShippingSite;
                    }
                    return _ShippingSite_W;
                }
            }

            public WhereParameter ModifiedDate
            {
                get
                {
                    if (_ModifiedDate_W == null)
                    {
                        _ModifiedDate_W = TearOff.ModifiedDate;
                    }
                    return _ModifiedDate_W;
                }
            }

            public WhereParameter Source
            {
                get
                {
                    if (_Source_W == null)
                    {
                        _Source_W = TearOff.Source;
                    }
                    return _Source_W;
                }
            }

            public WhereParameter POGroupID
            {
                get
                {
                    if (_POGroupID_W == null)
                    {
                        _POGroupID_W = TearOff.POGroupID;
                    }
                    return _POGroupID_W;
                }
            }

            public WhereParameter HeaderPurchaseOrderID
            {
                get
                {
                    if (_HeaderPurchaseOrderID_W == null)
                    {
                        _HeaderPurchaseOrderID_W = TearOff.HeaderPurchaseOrderID;
                    }
                    return _HeaderPurchaseOrderID_W;
                }
            }

            public WhereParameter PurchaseOrderStatusID
            {
                get
                {
                    if (_PurchaseOrderStatusID_W == null)
                    {
                        _PurchaseOrderStatusID_W = TearOff.PurchaseOrderStatusID;
                    }
                    return _PurchaseOrderStatusID_W;
                }
            }

            private WhereParameter _ID_W = null;
            private WhereParameter _PONumber_W = null;
            private WhereParameter _LetterNo_W = null;
            private WhereParameter _SupplierID_W = null;
            private WhereParameter _StoreID_W = null;
            private WhereParameter _DateOfEntry_W = null;
            private WhereParameter _SavedbyUserID_W = null;
            private WhereParameter _TotalValue_W = null;
            private WhereParameter _Insurance_W = null;
            private WhereParameter _AirFreight_W = null;
            private WhereParameter _SeaFreight_W = null;
            private WhereParameter _InlandFreight_W = null;
            private WhereParameter _NBE_W = null;
            private WhereParameter _CBE_W = null;
            private WhereParameter _CustomDutyTax_W = null;
            private WhereParameter _TransitServiceCharge_W = null;
            private WhereParameter _Provision_W = null;
            private WhereParameter _OtherExpense_W = null;
            private WhereParameter _ExhangeRate_W = null;
            private WhereParameter _Description_W = null;
            private WhereParameter _PurchaseType_W = null;
            private WhereParameter _RefNo_W = null;
            private WhereParameter _Delivery_W = null;
            private WhereParameter _Currency_W = null;
            private WhereParameter _LCID_W = null;
            private WhereParameter _TermOfPayement_W = null;
            private WhereParameter _PODate_W = null;
            private WhereParameter _IsElectronic_W = null;
            private WhereParameter _POFinalized_W = null;
            private WhereParameter _Rowguid_W = null;
            private WhereParameter _ModeID_W = null;
            private WhereParameter _FiscalYearID_W = null;
            private WhereParameter _PaymentTypeID_W = null;
            private WhereParameter _Identifier_W = null;
            private WhereParameter _CreatedDate_W = null;
            private WhereParameter _ShippingSite_W = null;
            private WhereParameter _ModifiedDate_W = null;
            private WhereParameter _Source_W = null;
            private WhereParameter _POGroupID_W = null;
            private WhereParameter _HeaderPurchaseOrderID_W = null;
            private WhereParameter _PurchaseOrderStatusID_W = null;

            public void WhereClauseReset()
            {
                _ID_W = null;
                _PONumber_W = null;
                _LetterNo_W = null;
                _SupplierID_W = null;
                _StoreID_W = null;
                _DateOfEntry_W = null;
                _SavedbyUserID_W = null;
                _TotalValue_W = null;
                _Insurance_W = null;
                _AirFreight_W = null;
                _SeaFreight_W = null;
                _InlandFreight_W = null;
                _NBE_W = null;
                _CBE_W = null;
                _CustomDutyTax_W = null;
                _TransitServiceCharge_W = null;
                _Provision_W = null;
                _OtherExpense_W = null;
                _ExhangeRate_W = null;
                _Description_W = null;
                _PurchaseType_W = null;
                _RefNo_W = null;
                _Delivery_W = null;
                _Currency_W = null;
                _LCID_W = null;
                _TermOfPayement_W = null;
                _PODate_W = null;
                _IsElectronic_W = null;
                _POFinalized_W = null;
                _Rowguid_W = null;
                _ModeID_W = null;
                _FiscalYearID_W = null;
                _PaymentTypeID_W = null;
                _Identifier_W = null;
                _CreatedDate_W = null;
                _ShippingSite_W = null;
                _ModifiedDate_W = null;
                _Source_W = null;
                _POGroupID_W = null;
                _HeaderPurchaseOrderID_W = null;
                _PurchaseOrderStatusID_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter ID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PONumber
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PONumber, Parameters.PONumber);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter LetterNo
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.LetterNo, Parameters.LetterNo);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SupplierID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SupplierID, Parameters.SupplierID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter StoreID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.StoreID, Parameters.StoreID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DateOfEntry
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateOfEntry, Parameters.DateOfEntry);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SavedbyUserID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SavedbyUserID, Parameters.SavedbyUserID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter TotalValue
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.TotalValue, Parameters.TotalValue);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Insurance
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Insurance, Parameters.Insurance);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter AirFreight
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.AirFreight, Parameters.AirFreight);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SeaFreight
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SeaFreight, Parameters.SeaFreight);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter InlandFreight
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.InlandFreight, Parameters.InlandFreight);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter NBE
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.NBE, Parameters.NBE);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter CBE
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.CBE, Parameters.CBE);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter CustomDutyTax
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.CustomDutyTax, Parameters.CustomDutyTax);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter TransitServiceCharge
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.TransitServiceCharge, Parameters.TransitServiceCharge);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Provision
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Provision, Parameters.Provision);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter OtherExpense
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.OtherExpense, Parameters.OtherExpense);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ExhangeRate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExhangeRate, Parameters.ExhangeRate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Description
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description, Parameters.Description);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PurchaseType
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PurchaseType, Parameters.PurchaseType);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter RefNo
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.RefNo, Parameters.RefNo);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Delivery
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Delivery, Parameters.Delivery);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Currency
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Currency, Parameters.Currency);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter LCID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.LCID, Parameters.LCID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter TermOfPayement
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.TermOfPayement, Parameters.TermOfPayement);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PODate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PODate, Parameters.PODate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IsElectronic
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsElectronic, Parameters.IsElectronic);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter POFinalized
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.POFinalized, Parameters.POFinalized);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Rowguid
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rowguid, Parameters.Rowguid);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ModeID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModeID, Parameters.ModeID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter FiscalYearID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.FiscalYearID, Parameters.FiscalYearID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PaymentTypeID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PaymentTypeID, Parameters.PaymentTypeID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Identifier
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Identifier, Parameters.Identifier);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter CreatedDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ShippingSite
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShippingSite, Parameters.ShippingSite);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ModifiedDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifiedDate, Parameters.ModifiedDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Source
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Source, Parameters.Source);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter POGroupID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.POGroupID, Parameters.POGroupID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter HeaderPurchaseOrderID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.HeaderPurchaseOrderID, Parameters.HeaderPurchaseOrderID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PurchaseOrderStatusID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PurchaseOrderStatusID, Parameters.PurchaseOrderStatusID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public AggregateParameter PONumber
            {
                get
                {
                    if (_PONumber_W == null)
                    {
                        _PONumber_W = TearOff.PONumber;
                    }
                    return _PONumber_W;
                }
            }

            public AggregateParameter LetterNo
            {
                get
                {
                    if (_LetterNo_W == null)
                    {
                        _LetterNo_W = TearOff.LetterNo;
                    }
                    return _LetterNo_W;
                }
            }

            public AggregateParameter SupplierID
            {
                get
                {
                    if (_SupplierID_W == null)
                    {
                        _SupplierID_W = TearOff.SupplierID;
                    }
                    return _SupplierID_W;
                }
            }

            public AggregateParameter StoreID
            {
                get
                {
                    if (_StoreID_W == null)
                    {
                        _StoreID_W = TearOff.StoreID;
                    }
                    return _StoreID_W;
                }
            }

            public AggregateParameter DateOfEntry
            {
                get
                {
                    if (_DateOfEntry_W == null)
                    {
                        _DateOfEntry_W = TearOff.DateOfEntry;
                    }
                    return _DateOfEntry_W;
                }
            }

            public AggregateParameter SavedbyUserID
            {
                get
                {
                    if (_SavedbyUserID_W == null)
                    {
                        _SavedbyUserID_W = TearOff.SavedbyUserID;
                    }
                    return _SavedbyUserID_W;
                }
            }

            public AggregateParameter TotalValue
            {
                get
                {
                    if (_TotalValue_W == null)
                    {
                        _TotalValue_W = TearOff.TotalValue;
                    }
                    return _TotalValue_W;
                }
            }

            public AggregateParameter Insurance
            {
                get
                {
                    if (_Insurance_W == null)
                    {
                        _Insurance_W = TearOff.Insurance;
                    }
                    return _Insurance_W;
                }
            }

            public AggregateParameter AirFreight
            {
                get
                {
                    if (_AirFreight_W == null)
                    {
                        _AirFreight_W = TearOff.AirFreight;
                    }
                    return _AirFreight_W;
                }
            }

            public AggregateParameter SeaFreight
            {
                get
                {
                    if (_SeaFreight_W == null)
                    {
                        _SeaFreight_W = TearOff.SeaFreight;
                    }
                    return _SeaFreight_W;
                }
            }

            public AggregateParameter InlandFreight
            {
                get
                {
                    if (_InlandFreight_W == null)
                    {
                        _InlandFreight_W = TearOff.InlandFreight;
                    }
                    return _InlandFreight_W;
                }
            }

            public AggregateParameter NBE
            {
                get
                {
                    if (_NBE_W == null)
                    {
                        _NBE_W = TearOff.NBE;
                    }
                    return _NBE_W;
                }
            }

            public AggregateParameter CBE
            {
                get
                {
                    if (_CBE_W == null)
                    {
                        _CBE_W = TearOff.CBE;
                    }
                    return _CBE_W;
                }
            }

            public AggregateParameter CustomDutyTax
            {
                get
                {
                    if (_CustomDutyTax_W == null)
                    {
                        _CustomDutyTax_W = TearOff.CustomDutyTax;
                    }
                    return _CustomDutyTax_W;
                }
            }

            public AggregateParameter TransitServiceCharge
            {
                get
                {
                    if (_TransitServiceCharge_W == null)
                    {
                        _TransitServiceCharge_W = TearOff.TransitServiceCharge;
                    }
                    return _TransitServiceCharge_W;
                }
            }

            public AggregateParameter Provision
            {
                get
                {
                    if (_Provision_W == null)
                    {
                        _Provision_W = TearOff.Provision;
                    }
                    return _Provision_W;
                }
            }

            public AggregateParameter OtherExpense
            {
                get
                {
                    if (_OtherExpense_W == null)
                    {
                        _OtherExpense_W = TearOff.OtherExpense;
                    }
                    return _OtherExpense_W;
                }
            }

            public AggregateParameter ExhangeRate
            {
                get
                {
                    if (_ExhangeRate_W == null)
                    {
                        _ExhangeRate_W = TearOff.ExhangeRate;
                    }
                    return _ExhangeRate_W;
                }
            }

            public AggregateParameter Description
            {
                get
                {
                    if (_Description_W == null)
                    {
                        _Description_W = TearOff.Description;
                    }
                    return _Description_W;
                }
            }

            public AggregateParameter PurchaseType
            {
                get
                {
                    if (_PurchaseType_W == null)
                    {
                        _PurchaseType_W = TearOff.PurchaseType;
                    }
                    return _PurchaseType_W;
                }
            }

            public AggregateParameter RefNo
            {
                get
                {
                    if (_RefNo_W == null)
                    {
                        _RefNo_W = TearOff.RefNo;
                    }
                    return _RefNo_W;
                }
            }

            public AggregateParameter Delivery
            {
                get
                {
                    if (_Delivery_W == null)
                    {
                        _Delivery_W = TearOff.Delivery;
                    }
                    return _Delivery_W;
                }
            }

            public AggregateParameter Currency
            {
                get
                {
                    if (_Currency_W == null)
                    {
                        _Currency_W = TearOff.Currency;
                    }
                    return _Currency_W;
                }
            }

            public AggregateParameter LCID
            {
                get
                {
                    if (_LCID_W == null)
                    {
                        _LCID_W = TearOff.LCID;
                    }
                    return _LCID_W;
                }
            }

            public AggregateParameter TermOfPayement
            {
                get
                {
                    if (_TermOfPayement_W == null)
                    {
                        _TermOfPayement_W = TearOff.TermOfPayement;
                    }
                    return _TermOfPayement_W;
                }
            }

            public AggregateParameter PODate
            {
                get
                {
                    if (_PODate_W == null)
                    {
                        _PODate_W = TearOff.PODate;
                    }
                    return _PODate_W;
                }
            }

            public AggregateParameter IsElectronic
            {
                get
                {
                    if (_IsElectronic_W == null)
                    {
                        _IsElectronic_W = TearOff.IsElectronic;
                    }
                    return _IsElectronic_W;
                }
            }

            public AggregateParameter POFinalized
            {
                get
                {
                    if (_POFinalized_W == null)
                    {
                        _POFinalized_W = TearOff.POFinalized;
                    }
                    return _POFinalized_W;
                }
            }

            public AggregateParameter Rowguid
            {
                get
                {
                    if (_Rowguid_W == null)
                    {
                        _Rowguid_W = TearOff.Rowguid;
                    }
                    return _Rowguid_W;
                }
            }

            public AggregateParameter ModeID
            {
                get
                {
                    if (_ModeID_W == null)
                    {
                        _ModeID_W = TearOff.ModeID;
                    }
                    return _ModeID_W;
                }
            }

            public AggregateParameter FiscalYearID
            {
                get
                {
                    if (_FiscalYearID_W == null)
                    {
                        _FiscalYearID_W = TearOff.FiscalYearID;
                    }
                    return _FiscalYearID_W;
                }
            }

            public AggregateParameter PaymentTypeID
            {
                get
                {
                    if (_PaymentTypeID_W == null)
                    {
                        _PaymentTypeID_W = TearOff.PaymentTypeID;
                    }
                    return _PaymentTypeID_W;
                }
            }

            public AggregateParameter Identifier
            {
                get
                {
                    if (_Identifier_W == null)
                    {
                        _Identifier_W = TearOff.Identifier;
                    }
                    return _Identifier_W;
                }
            }

            public AggregateParameter CreatedDate
            {
                get
                {
                    if (_CreatedDate_W == null)
                    {
                        _CreatedDate_W = TearOff.CreatedDate;
                    }
                    return _CreatedDate_W;
                }
            }

            public AggregateParameter ShippingSite
            {
                get
                {
                    if (_ShippingSite_W == null)
                    {
                        _ShippingSite_W = TearOff.ShippingSite;
                    }
                    return _ShippingSite_W;
                }
            }

            public AggregateParameter ModifiedDate
            {
                get
                {
                    if (_ModifiedDate_W == null)
                    {
                        _ModifiedDate_W = TearOff.ModifiedDate;
                    }
                    return _ModifiedDate_W;
                }
            }

            public AggregateParameter Source
            {
                get
                {
                    if (_Source_W == null)
                    {
                        _Source_W = TearOff.Source;
                    }
                    return _Source_W;
                }
            }

            public AggregateParameter POGroupID
            {
                get
                {
                    if (_POGroupID_W == null)
                    {
                        _POGroupID_W = TearOff.POGroupID;
                    }
                    return _POGroupID_W;
                }
            }

            public AggregateParameter HeaderPurchaseOrderID
            {
                get
                {
                    if (_HeaderPurchaseOrderID_W == null)
                    {
                        _HeaderPurchaseOrderID_W = TearOff.HeaderPurchaseOrderID;
                    }
                    return _HeaderPurchaseOrderID_W;
                }
            }

            public AggregateParameter PurchaseOrderStatusID
            {
                get
                {
                    if (_PurchaseOrderStatusID_W == null)
                    {
                        _PurchaseOrderStatusID_W = TearOff.PurchaseOrderStatusID;
                    }
                    return _PurchaseOrderStatusID_W;
                }
            }

            private AggregateParameter _ID_W = null;
            private AggregateParameter _PONumber_W = null;
            private AggregateParameter _LetterNo_W = null;
            private AggregateParameter _SupplierID_W = null;
            private AggregateParameter _StoreID_W = null;
            private AggregateParameter _DateOfEntry_W = null;
            private AggregateParameter _SavedbyUserID_W = null;
            private AggregateParameter _TotalValue_W = null;
            private AggregateParameter _Insurance_W = null;
            private AggregateParameter _AirFreight_W = null;
            private AggregateParameter _SeaFreight_W = null;
            private AggregateParameter _InlandFreight_W = null;
            private AggregateParameter _NBE_W = null;
            private AggregateParameter _CBE_W = null;
            private AggregateParameter _CustomDutyTax_W = null;
            private AggregateParameter _TransitServiceCharge_W = null;
            private AggregateParameter _Provision_W = null;
            private AggregateParameter _OtherExpense_W = null;
            private AggregateParameter _ExhangeRate_W = null;
            private AggregateParameter _Description_W = null;
            private AggregateParameter _PurchaseType_W = null;
            private AggregateParameter _RefNo_W = null;
            private AggregateParameter _Delivery_W = null;
            private AggregateParameter _Currency_W = null;
            private AggregateParameter _LCID_W = null;
            private AggregateParameter _TermOfPayement_W = null;
            private AggregateParameter _PODate_W = null;
            private AggregateParameter _IsElectronic_W = null;
            private AggregateParameter _POFinalized_W = null;
            private AggregateParameter _Rowguid_W = null;
            private AggregateParameter _ModeID_W = null;
            private AggregateParameter _FiscalYearID_W = null;
            private AggregateParameter _PaymentTypeID_W = null;
            private AggregateParameter _Identifier_W = null;
            private AggregateParameter _CreatedDate_W = null;
            private AggregateParameter _ShippingSite_W = null;
            private AggregateParameter _ModifiedDate_W = null;
            private AggregateParameter _Source_W = null;
            private AggregateParameter _POGroupID_W = null;
            private AggregateParameter _HeaderPurchaseOrderID_W = null;
            private AggregateParameter _PurchaseOrderStatusID_W = null;

            public void AggregateClauseReset()
            {
                _ID_W = null;
                _PONumber_W = null;
                _LetterNo_W = null;
                _SupplierID_W = null;
                _StoreID_W = null;
                _DateOfEntry_W = null;
                _SavedbyUserID_W = null;
                _TotalValue_W = null;
                _Insurance_W = null;
                _AirFreight_W = null;
                _SeaFreight_W = null;
                _InlandFreight_W = null;
                _NBE_W = null;
                _CBE_W = null;
                _CustomDutyTax_W = null;
                _TransitServiceCharge_W = null;
                _Provision_W = null;
                _OtherExpense_W = null;
                _ExhangeRate_W = null;
                _Description_W = null;
                _PurchaseType_W = null;
                _RefNo_W = null;
                _Delivery_W = null;
                _Currency_W = null;
                _LCID_W = null;
                _TermOfPayement_W = null;
                _PODate_W = null;
                _IsElectronic_W = null;
                _POFinalized_W = null;
                _Rowguid_W = null;
                _ModeID_W = null;
                _FiscalYearID_W = null;
                _PaymentTypeID_W = null;
                _Identifier_W = null;
                _CreatedDate_W = null;
                _ShippingSite_W = null;
                _ModifiedDate_W = null;
                _Source_W = null;
                _POGroupID_W = null;
                _HeaderPurchaseOrderID_W = null;
                _PurchaseOrderStatusID_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_POInsert]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.ID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_POUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PODelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PONumber);
            p.SourceColumn = ColumnNames.PONumber;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.LetterNo);
            p.SourceColumn = ColumnNames.LetterNo;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SupplierID);
            p.SourceColumn = ColumnNames.SupplierID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.StoreID);
            p.SourceColumn = ColumnNames.StoreID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DateOfEntry);
            p.SourceColumn = ColumnNames.DateOfEntry;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SavedbyUserID);
            p.SourceColumn = ColumnNames.SavedbyUserID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.TotalValue);
            p.SourceColumn = ColumnNames.TotalValue;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Insurance);
            p.SourceColumn = ColumnNames.Insurance;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.AirFreight);
            p.SourceColumn = ColumnNames.AirFreight;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SeaFreight);
            p.SourceColumn = ColumnNames.SeaFreight;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.InlandFreight);
            p.SourceColumn = ColumnNames.InlandFreight;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.NBE);
            p.SourceColumn = ColumnNames.NBE;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.CBE);
            p.SourceColumn = ColumnNames.CBE;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.CustomDutyTax);
            p.SourceColumn = ColumnNames.CustomDutyTax;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.TransitServiceCharge);
            p.SourceColumn = ColumnNames.TransitServiceCharge;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Provision);
            p.SourceColumn = ColumnNames.Provision;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.OtherExpense);
            p.SourceColumn = ColumnNames.OtherExpense;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ExhangeRate);
            p.SourceColumn = ColumnNames.ExhangeRate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Description);
            p.SourceColumn = ColumnNames.Description;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PurchaseType);
            p.SourceColumn = ColumnNames.PurchaseType;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.RefNo);
            p.SourceColumn = ColumnNames.RefNo;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Delivery);
            p.SourceColumn = ColumnNames.Delivery;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Currency);
            p.SourceColumn = ColumnNames.Currency;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.LCID);
            p.SourceColumn = ColumnNames.LCID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.TermOfPayement);
            p.SourceColumn = ColumnNames.TermOfPayement;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PODate);
            p.SourceColumn = ColumnNames.PODate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IsElectronic);
            p.SourceColumn = ColumnNames.IsElectronic;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.POFinalized);
            p.SourceColumn = ColumnNames.POFinalized;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Rowguid);
            p.SourceColumn = ColumnNames.Rowguid;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ModeID);
            p.SourceColumn = ColumnNames.ModeID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.FiscalYearID);
            p.SourceColumn = ColumnNames.FiscalYearID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PaymentTypeID);
            p.SourceColumn = ColumnNames.PaymentTypeID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Identifier);
            p.SourceColumn = ColumnNames.Identifier;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.CreatedDate);
            p.SourceColumn = ColumnNames.CreatedDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ShippingSite);
            p.SourceColumn = ColumnNames.ShippingSite;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ModifiedDate);
            p.SourceColumn = ColumnNames.ModifiedDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Source);
            p.SourceColumn = ColumnNames.Source;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.POGroupID);
            p.SourceColumn = ColumnNames.POGroupID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.HeaderPurchaseOrderID);
            p.SourceColumn = ColumnNames.HeaderPurchaseOrderID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PurchaseOrderStatusID);
            p.SourceColumn = ColumnNames.PurchaseOrderStatusID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}
