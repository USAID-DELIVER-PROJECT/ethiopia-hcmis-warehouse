
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _VolumeMetrics : SqlClientEntity
	{
		public _VolumeMetrics()
		{
			this.QuerySource = "VolumeMetrics";
			this.MappingName = "VolumeMetrics";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_VolumeMetricsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int VolumeMetricsID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.VolumeMetricsID, VolumeMetricsID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_VolumeMetricsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter VolumeMetricsID
			{
				get
				{
					return new SqlParameter("@VolumeMetricsID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ItemID
			{
				get
				{
					return new SqlParameter("@ItemID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ManufacturerID
			{
				get
				{
					return new SqlParameter("@ManufacturerID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UnitOfIssueID
			{
				get
				{
					return new SqlParameter("@UnitOfIssueID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter WidthMM
			{
				get
				{
					return new SqlParameter("@WidthMM", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter LengthMM
			{
				get
				{
					return new SqlParameter("@LengthMM", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter HeightMM
			{
				get
				{
					return new SqlParameter("@HeightMM", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter WeightG
			{
				get
				{
					return new SqlParameter("@WeightG", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter CreatedDate
			{
				get
				{
					return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ModifiedDate
			{
				get
				{
					return new SqlParameter("@ModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string VolumeMetricsID = "VolumeMetricsID";
            public const string ItemID = "ItemID";
            public const string ManufacturerID = "ManufacturerID";
            public const string UnitOfIssueID = "UnitOfIssueID";
            public const string WidthMM = "WidthMM";
            public const string LengthMM = "LengthMM";
            public const string HeightMM = "HeightMM";
            public const string WeightG = "WeightG";
            public const string CreatedDate = "CreatedDate";
            public const string ModifiedDate = "ModifiedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[VolumeMetricsID] = _VolumeMetrics.PropertyNames.VolumeMetricsID;
					ht[ItemID] = _VolumeMetrics.PropertyNames.ItemID;
					ht[ManufacturerID] = _VolumeMetrics.PropertyNames.ManufacturerID;
					ht[UnitOfIssueID] = _VolumeMetrics.PropertyNames.UnitOfIssueID;
					ht[WidthMM] = _VolumeMetrics.PropertyNames.WidthMM;
					ht[LengthMM] = _VolumeMetrics.PropertyNames.LengthMM;
					ht[HeightMM] = _VolumeMetrics.PropertyNames.HeightMM;
					ht[WeightG] = _VolumeMetrics.PropertyNames.WeightG;
					ht[CreatedDate] = _VolumeMetrics.PropertyNames.CreatedDate;
					ht[ModifiedDate] = _VolumeMetrics.PropertyNames.ModifiedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string VolumeMetricsID = "VolumeMetricsID";
            public const string ItemID = "ItemID";
            public const string ManufacturerID = "ManufacturerID";
            public const string UnitOfIssueID = "UnitOfIssueID";
            public const string WidthMM = "WidthMM";
            public const string LengthMM = "LengthMM";
            public const string HeightMM = "HeightMM";
            public const string WeightG = "WeightG";
            public const string CreatedDate = "CreatedDate";
            public const string ModifiedDate = "ModifiedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[VolumeMetricsID] = _VolumeMetrics.ColumnNames.VolumeMetricsID;
					ht[ItemID] = _VolumeMetrics.ColumnNames.ItemID;
					ht[ManufacturerID] = _VolumeMetrics.ColumnNames.ManufacturerID;
					ht[UnitOfIssueID] = _VolumeMetrics.ColumnNames.UnitOfIssueID;
					ht[WidthMM] = _VolumeMetrics.ColumnNames.WidthMM;
					ht[LengthMM] = _VolumeMetrics.ColumnNames.LengthMM;
					ht[HeightMM] = _VolumeMetrics.ColumnNames.HeightMM;
					ht[WeightG] = _VolumeMetrics.ColumnNames.WeightG;
					ht[CreatedDate] = _VolumeMetrics.ColumnNames.CreatedDate;
					ht[ModifiedDate] = _VolumeMetrics.ColumnNames.ModifiedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string VolumeMetricsID = "s_VolumeMetricsID";
            public const string ItemID = "s_ItemID";
            public const string ManufacturerID = "s_ManufacturerID";
            public const string UnitOfIssueID = "s_UnitOfIssueID";
            public const string WidthMM = "s_WidthMM";
            public const string LengthMM = "s_LengthMM";
            public const string HeightMM = "s_HeightMM";
            public const string WeightG = "s_WeightG";
            public const string CreatedDate = "s_CreatedDate";
            public const string ModifiedDate = "s_ModifiedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int VolumeMetricsID
	    {
			get
	        {
				return base.Getint(ColumnNames.VolumeMetricsID);
			}
			set
	        {
				base.Setint(ColumnNames.VolumeMetricsID, value);
			}
		}

		public virtual int ItemID
	    {
			get
	        {
				return base.Getint(ColumnNames.ItemID);
			}
			set
	        {
				base.Setint(ColumnNames.ItemID, value);
			}
		}

		public virtual int ManufacturerID
	    {
			get
	        {
				return base.Getint(ColumnNames.ManufacturerID);
			}
			set
	        {
				base.Setint(ColumnNames.ManufacturerID, value);
			}
		}

		public virtual int UnitOfIssueID
	    {
			get
	        {
				return base.Getint(ColumnNames.UnitOfIssueID);
			}
			set
	        {
				base.Setint(ColumnNames.UnitOfIssueID, value);
			}
		}

		public virtual decimal WidthMM
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.WidthMM);
			}
			set
	        {
				base.Setdecimal(ColumnNames.WidthMM, value);
			}
		}

		public virtual decimal LengthMM
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.LengthMM);
			}
			set
	        {
				base.Setdecimal(ColumnNames.LengthMM, value);
			}
		}

		public virtual decimal HeightMM
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.HeightMM);
			}
			set
	        {
				base.Setdecimal(ColumnNames.HeightMM, value);
			}
		}

		public virtual decimal WeightG
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.WeightG);
			}
			set
	        {
				base.Setdecimal(ColumnNames.WeightG, value);
			}
		}

		public virtual DateTime CreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreatedDate, value);
			}
		}

		public virtual DateTime ModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ModifiedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_VolumeMetricsID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VolumeMetricsID) ? string.Empty : base.GetintAsString(ColumnNames.VolumeMetricsID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VolumeMetricsID);
				else
					this.VolumeMetricsID = base.SetintAsString(ColumnNames.VolumeMetricsID, value);
			}
		}

		public virtual string s_ItemID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ItemID) ? string.Empty : base.GetintAsString(ColumnNames.ItemID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ItemID);
				else
					this.ItemID = base.SetintAsString(ColumnNames.ItemID, value);
			}
		}

		public virtual string s_ManufacturerID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ManufacturerID) ? string.Empty : base.GetintAsString(ColumnNames.ManufacturerID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ManufacturerID);
				else
					this.ManufacturerID = base.SetintAsString(ColumnNames.ManufacturerID, value);
			}
		}

		public virtual string s_UnitOfIssueID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UnitOfIssueID) ? string.Empty : base.GetintAsString(ColumnNames.UnitOfIssueID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnitOfIssueID);
				else
					this.UnitOfIssueID = base.SetintAsString(ColumnNames.UnitOfIssueID, value);
			}
		}

		public virtual string s_WidthMM
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WidthMM) ? string.Empty : base.GetdecimalAsString(ColumnNames.WidthMM);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WidthMM);
				else
					this.WidthMM = base.SetdecimalAsString(ColumnNames.WidthMM, value);
			}
		}

		public virtual string s_LengthMM
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LengthMM) ? string.Empty : base.GetdecimalAsString(ColumnNames.LengthMM);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LengthMM);
				else
					this.LengthMM = base.SetdecimalAsString(ColumnNames.LengthMM, value);
			}
		}

		public virtual string s_HeightMM
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HeightMM) ? string.Empty : base.GetdecimalAsString(ColumnNames.HeightMM);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HeightMM);
				else
					this.HeightMM = base.SetdecimalAsString(ColumnNames.HeightMM, value);
			}
		}

		public virtual string s_WeightG
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WeightG) ? string.Empty : base.GetdecimalAsString(ColumnNames.WeightG);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WeightG);
				else
					this.WeightG = base.SetdecimalAsString(ColumnNames.WeightG, value);
			}
		}

		public virtual string s_CreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedDate);
				else
					this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
			}
		}

		public virtual string s_ModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifiedDate);
				else
					this.ModifiedDate = base.SetDateTimeAsString(ColumnNames.ModifiedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter VolumeMetricsID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VolumeMetricsID, Parameters.VolumeMetricsID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ItemID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ManufacturerID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ManufacturerID, Parameters.ManufacturerID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UnitOfIssueID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UnitOfIssueID, Parameters.UnitOfIssueID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WidthMM
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WidthMM, Parameters.WidthMM);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LengthMM
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LengthMM, Parameters.LengthMM);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HeightMM
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HeightMM, Parameters.HeightMM);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WeightG
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WeightG, Parameters.WeightG);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifiedDate, Parameters.ModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter VolumeMetricsID
		    {
				get
		        {
					if(_VolumeMetricsID_W == null)
	        	    {
						_VolumeMetricsID_W = TearOff.VolumeMetricsID;
					}
					return _VolumeMetricsID_W;
				}
			}

			public WhereParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public WhereParameter ManufacturerID
		    {
				get
		        {
					if(_ManufacturerID_W == null)
	        	    {
						_ManufacturerID_W = TearOff.ManufacturerID;
					}
					return _ManufacturerID_W;
				}
			}

			public WhereParameter UnitOfIssueID
		    {
				get
		        {
					if(_UnitOfIssueID_W == null)
	        	    {
						_UnitOfIssueID_W = TearOff.UnitOfIssueID;
					}
					return _UnitOfIssueID_W;
				}
			}

			public WhereParameter WidthMM
		    {
				get
		        {
					if(_WidthMM_W == null)
	        	    {
						_WidthMM_W = TearOff.WidthMM;
					}
					return _WidthMM_W;
				}
			}

			public WhereParameter LengthMM
		    {
				get
		        {
					if(_LengthMM_W == null)
	        	    {
						_LengthMM_W = TearOff.LengthMM;
					}
					return _LengthMM_W;
				}
			}

			public WhereParameter HeightMM
		    {
				get
		        {
					if(_HeightMM_W == null)
	        	    {
						_HeightMM_W = TearOff.HeightMM;
					}
					return _HeightMM_W;
				}
			}

			public WhereParameter WeightG
		    {
				get
		        {
					if(_WeightG_W == null)
	        	    {
						_WeightG_W = TearOff.WeightG;
					}
					return _WeightG_W;
				}
			}

			public WhereParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public WhereParameter ModifiedDate
		    {
				get
		        {
					if(_ModifiedDate_W == null)
	        	    {
						_ModifiedDate_W = TearOff.ModifiedDate;
					}
					return _ModifiedDate_W;
				}
			}

			private WhereParameter _VolumeMetricsID_W = null;
			private WhereParameter _ItemID_W = null;
			private WhereParameter _ManufacturerID_W = null;
			private WhereParameter _UnitOfIssueID_W = null;
			private WhereParameter _WidthMM_W = null;
			private WhereParameter _LengthMM_W = null;
			private WhereParameter _HeightMM_W = null;
			private WhereParameter _WeightG_W = null;
			private WhereParameter _CreatedDate_W = null;
			private WhereParameter _ModifiedDate_W = null;

			public void WhereClauseReset()
			{
				_VolumeMetricsID_W = null;
				_ItemID_W = null;
				_ManufacturerID_W = null;
				_UnitOfIssueID_W = null;
				_WidthMM_W = null;
				_LengthMM_W = null;
				_HeightMM_W = null;
				_WeightG_W = null;
				_CreatedDate_W = null;
				_ModifiedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter VolumeMetricsID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VolumeMetricsID, Parameters.VolumeMetricsID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ItemID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ManufacturerID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ManufacturerID, Parameters.ManufacturerID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UnitOfIssueID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitOfIssueID, Parameters.UnitOfIssueID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WidthMM
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WidthMM, Parameters.WidthMM);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LengthMM
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LengthMM, Parameters.LengthMM);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HeightMM
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HeightMM, Parameters.HeightMM);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WeightG
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WeightG, Parameters.WeightG);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifiedDate, Parameters.ModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter VolumeMetricsID
		    {
				get
		        {
					if(_VolumeMetricsID_W == null)
	        	    {
						_VolumeMetricsID_W = TearOff.VolumeMetricsID;
					}
					return _VolumeMetricsID_W;
				}
			}

			public AggregateParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public AggregateParameter ManufacturerID
		    {
				get
		        {
					if(_ManufacturerID_W == null)
	        	    {
						_ManufacturerID_W = TearOff.ManufacturerID;
					}
					return _ManufacturerID_W;
				}
			}

			public AggregateParameter UnitOfIssueID
		    {
				get
		        {
					if(_UnitOfIssueID_W == null)
	        	    {
						_UnitOfIssueID_W = TearOff.UnitOfIssueID;
					}
					return _UnitOfIssueID_W;
				}
			}

			public AggregateParameter WidthMM
		    {
				get
		        {
					if(_WidthMM_W == null)
	        	    {
						_WidthMM_W = TearOff.WidthMM;
					}
					return _WidthMM_W;
				}
			}

			public AggregateParameter LengthMM
		    {
				get
		        {
					if(_LengthMM_W == null)
	        	    {
						_LengthMM_W = TearOff.LengthMM;
					}
					return _LengthMM_W;
				}
			}

			public AggregateParameter HeightMM
		    {
				get
		        {
					if(_HeightMM_W == null)
	        	    {
						_HeightMM_W = TearOff.HeightMM;
					}
					return _HeightMM_W;
				}
			}

			public AggregateParameter WeightG
		    {
				get
		        {
					if(_WeightG_W == null)
	        	    {
						_WeightG_W = TearOff.WeightG;
					}
					return _WeightG_W;
				}
			}

			public AggregateParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public AggregateParameter ModifiedDate
		    {
				get
		        {
					if(_ModifiedDate_W == null)
	        	    {
						_ModifiedDate_W = TearOff.ModifiedDate;
					}
					return _ModifiedDate_W;
				}
			}

			private AggregateParameter _VolumeMetricsID_W = null;
			private AggregateParameter _ItemID_W = null;
			private AggregateParameter _ManufacturerID_W = null;
			private AggregateParameter _UnitOfIssueID_W = null;
			private AggregateParameter _WidthMM_W = null;
			private AggregateParameter _LengthMM_W = null;
			private AggregateParameter _HeightMM_W = null;
			private AggregateParameter _WeightG_W = null;
			private AggregateParameter _CreatedDate_W = null;
			private AggregateParameter _ModifiedDate_W = null;

			public void AggregateClauseReset()
			{
				_VolumeMetricsID_W = null;
				_ItemID_W = null;
				_ManufacturerID_W = null;
				_UnitOfIssueID_W = null;
				_WidthMM_W = null;
				_LengthMM_W = null;
				_HeightMM_W = null;
				_WeightG_W = null;
				_CreatedDate_W = null;
				_ModifiedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_VolumeMetricsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.VolumeMetricsID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_VolumeMetricsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_VolumeMetricsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.VolumeMetricsID);
			p.SourceColumn = ColumnNames.VolumeMetricsID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.VolumeMetricsID);
			p.SourceColumn = ColumnNames.VolumeMetricsID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ItemID);
			p.SourceColumn = ColumnNames.ItemID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ManufacturerID);
			p.SourceColumn = ColumnNames.ManufacturerID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UnitOfIssueID);
			p.SourceColumn = ColumnNames.UnitOfIssueID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WidthMM);
			p.SourceColumn = ColumnNames.WidthMM;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LengthMM);
			p.SourceColumn = ColumnNames.LengthMM;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HeightMM);
			p.SourceColumn = ColumnNames.HeightMM;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WeightG);
			p.SourceColumn = ColumnNames.WeightG;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedDate);
			p.SourceColumn = ColumnNames.CreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifiedDate);
			p.SourceColumn = ColumnNames.ModifiedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
