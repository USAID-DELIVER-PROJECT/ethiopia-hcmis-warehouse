
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _ItemManufacturer : SqlClientEntity
	{
		public _ItemManufacturer()
		{
			this.QuerySource = "ItemManufacturer";
			this.MappingName = "ItemManufacturer";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ItemManufacturerLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ItemManufacturerLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ItemID
			{
				get
				{
					return new SqlParameter("@ItemID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ManufacturerID
			{
				get
				{
					return new SqlParameter("@ManufacturerID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PackageLevel
			{
				get
				{
					return new SqlParameter("@PackageLevel", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter QuantityPerLevel
			{
				get
				{
					return new SqlParameter("@QuantityPerLevel", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsssuingDefault
			{
				get
				{
					return new SqlParameter("@IsssuingDefault", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter RecevingDefault
			{
				get
				{
					return new SqlParameter("@RecevingDefault", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter BoxWidth
			{
				get
				{
					return new SqlParameter("@BoxWidth", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter BoxHeight
			{
				get
				{
					return new SqlParameter("@BoxHeight", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter BoxLength
			{
				get
				{
					return new SqlParameter("@BoxLength", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter BrandName
			{
				get
				{
					return new SqlParameter("@BrandName", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter StackHeight
			{
				get
				{
					return new SqlParameter("@StackHeight", SqlDbType.Float, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string ItemID = "ItemID";
            public const string ManufacturerID = "ManufacturerID";
            public const string PackageLevel = "PackageLevel";
            public const string QuantityPerLevel = "QuantityPerLevel";
            public const string IsssuingDefault = "IsssuingDefault";
            public const string RecevingDefault = "RecevingDefault";
            public const string BoxWidth = "BoxWidth";
            public const string BoxHeight = "BoxHeight";
            public const string BoxLength = "BoxLength";
            public const string BrandName = "BrandName";
            public const string StackHeight = "StackHeight";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _ItemManufacturer.PropertyNames.ID;
					ht[ItemID] = _ItemManufacturer.PropertyNames.ItemID;
					ht[ManufacturerID] = _ItemManufacturer.PropertyNames.ManufacturerID;
					ht[PackageLevel] = _ItemManufacturer.PropertyNames.PackageLevel;
					ht[QuantityPerLevel] = _ItemManufacturer.PropertyNames.QuantityPerLevel;
					ht[IsssuingDefault] = _ItemManufacturer.PropertyNames.IsssuingDefault;
					ht[RecevingDefault] = _ItemManufacturer.PropertyNames.RecevingDefault;
					ht[BoxWidth] = _ItemManufacturer.PropertyNames.BoxWidth;
					ht[BoxHeight] = _ItemManufacturer.PropertyNames.BoxHeight;
					ht[BoxLength] = _ItemManufacturer.PropertyNames.BoxLength;
					ht[BrandName] = _ItemManufacturer.PropertyNames.BrandName;
					ht[StackHeight] = _ItemManufacturer.PropertyNames.StackHeight;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string ItemID = "ItemID";
            public const string ManufacturerID = "ManufacturerID";
            public const string PackageLevel = "PackageLevel";
            public const string QuantityPerLevel = "QuantityPerLevel";
            public const string IsssuingDefault = "IsssuingDefault";
            public const string RecevingDefault = "RecevingDefault";
            public const string BoxWidth = "BoxWidth";
            public const string BoxHeight = "BoxHeight";
            public const string BoxLength = "BoxLength";
            public const string BrandName = "BrandName";
            public const string StackHeight = "StackHeight";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _ItemManufacturer.ColumnNames.ID;
					ht[ItemID] = _ItemManufacturer.ColumnNames.ItemID;
					ht[ManufacturerID] = _ItemManufacturer.ColumnNames.ManufacturerID;
					ht[PackageLevel] = _ItemManufacturer.ColumnNames.PackageLevel;
					ht[QuantityPerLevel] = _ItemManufacturer.ColumnNames.QuantityPerLevel;
					ht[IsssuingDefault] = _ItemManufacturer.ColumnNames.IsssuingDefault;
					ht[RecevingDefault] = _ItemManufacturer.ColumnNames.RecevingDefault;
					ht[BoxWidth] = _ItemManufacturer.ColumnNames.BoxWidth;
					ht[BoxHeight] = _ItemManufacturer.ColumnNames.BoxHeight;
					ht[BoxLength] = _ItemManufacturer.ColumnNames.BoxLength;
					ht[BrandName] = _ItemManufacturer.ColumnNames.BrandName;
					ht[StackHeight] = _ItemManufacturer.ColumnNames.StackHeight;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string ItemID = "s_ItemID";
            public const string ManufacturerID = "s_ManufacturerID";
            public const string PackageLevel = "s_PackageLevel";
            public const string QuantityPerLevel = "s_QuantityPerLevel";
            public const string IsssuingDefault = "s_IsssuingDefault";
            public const string RecevingDefault = "s_RecevingDefault";
            public const string BoxWidth = "s_BoxWidth";
            public const string BoxHeight = "s_BoxHeight";
            public const string BoxLength = "s_BoxLength";
            public const string BrandName = "s_BrandName";
            public const string StackHeight = "s_StackHeight";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual int ItemID
	    {
			get
	        {
				return base.Getint(ColumnNames.ItemID);
			}
			set
	        {
				base.Setint(ColumnNames.ItemID, value);
			}
		}

		public virtual int ManufacturerID
	    {
			get
	        {
				return base.Getint(ColumnNames.ManufacturerID);
			}
			set
	        {
				base.Setint(ColumnNames.ManufacturerID, value);
			}
		}

		public virtual int PackageLevel
	    {
			get
	        {
				return base.Getint(ColumnNames.PackageLevel);
			}
			set
	        {
				base.Setint(ColumnNames.PackageLevel, value);
			}
		}

		public virtual int QuantityPerLevel
	    {
			get
	        {
				return base.Getint(ColumnNames.QuantityPerLevel);
			}
			set
	        {
				base.Setint(ColumnNames.QuantityPerLevel, value);
			}
		}

		public virtual bool IsssuingDefault
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsssuingDefault);
			}
			set
	        {
				base.Setbool(ColumnNames.IsssuingDefault, value);
			}
		}

		public virtual bool RecevingDefault
	    {
			get
	        {
				return base.Getbool(ColumnNames.RecevingDefault);
			}
			set
	        {
				base.Setbool(ColumnNames.RecevingDefault, value);
			}
		}

		public virtual double BoxWidth
	    {
			get
	        {
				return base.Getdouble(ColumnNames.BoxWidth);
			}
			set
	        {
				base.Setdouble(ColumnNames.BoxWidth, value);
			}
		}

		public virtual double BoxHeight
	    {
			get
	        {
				return base.Getdouble(ColumnNames.BoxHeight);
			}
			set
	        {
				base.Setdouble(ColumnNames.BoxHeight, value);
			}
		}

		public virtual double BoxLength
	    {
			get
	        {
				return base.Getdouble(ColumnNames.BoxLength);
			}
			set
	        {
				base.Setdouble(ColumnNames.BoxLength, value);
			}
		}

		public virtual string BrandName
	    {
			get
	        {
				return base.Getstring(ColumnNames.BrandName);
			}
			set
	        {
				base.Setstring(ColumnNames.BrandName, value);
			}
		}

		public virtual double StackHeight
	    {
			get
	        {
				return base.Getdouble(ColumnNames.StackHeight);
			}
			set
	        {
				base.Setdouble(ColumnNames.StackHeight, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_ItemID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ItemID) ? string.Empty : base.GetintAsString(ColumnNames.ItemID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ItemID);
				else
					this.ItemID = base.SetintAsString(ColumnNames.ItemID, value);
			}
		}

		public virtual string s_ManufacturerID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ManufacturerID) ? string.Empty : base.GetintAsString(ColumnNames.ManufacturerID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ManufacturerID);
				else
					this.ManufacturerID = base.SetintAsString(ColumnNames.ManufacturerID, value);
			}
		}

		public virtual string s_PackageLevel
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PackageLevel) ? string.Empty : base.GetintAsString(ColumnNames.PackageLevel);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PackageLevel);
				else
					this.PackageLevel = base.SetintAsString(ColumnNames.PackageLevel, value);
			}
		}

		public virtual string s_QuantityPerLevel
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.QuantityPerLevel) ? string.Empty : base.GetintAsString(ColumnNames.QuantityPerLevel);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.QuantityPerLevel);
				else
					this.QuantityPerLevel = base.SetintAsString(ColumnNames.QuantityPerLevel, value);
			}
		}

		public virtual string s_IsssuingDefault
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsssuingDefault) ? string.Empty : base.GetboolAsString(ColumnNames.IsssuingDefault);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsssuingDefault);
				else
					this.IsssuingDefault = base.SetboolAsString(ColumnNames.IsssuingDefault, value);
			}
		}

		public virtual string s_RecevingDefault
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RecevingDefault) ? string.Empty : base.GetboolAsString(ColumnNames.RecevingDefault);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RecevingDefault);
				else
					this.RecevingDefault = base.SetboolAsString(ColumnNames.RecevingDefault, value);
			}
		}

		public virtual string s_BoxWidth
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BoxWidth) ? string.Empty : base.GetdoubleAsString(ColumnNames.BoxWidth);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BoxWidth);
				else
					this.BoxWidth = base.SetdoubleAsString(ColumnNames.BoxWidth, value);
			}
		}

		public virtual string s_BoxHeight
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BoxHeight) ? string.Empty : base.GetdoubleAsString(ColumnNames.BoxHeight);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BoxHeight);
				else
					this.BoxHeight = base.SetdoubleAsString(ColumnNames.BoxHeight, value);
			}
		}

		public virtual string s_BoxLength
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BoxLength) ? string.Empty : base.GetdoubleAsString(ColumnNames.BoxLength);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BoxLength);
				else
					this.BoxLength = base.SetdoubleAsString(ColumnNames.BoxLength, value);
			}
		}

		public virtual string s_BrandName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BrandName) ? string.Empty : base.GetstringAsString(ColumnNames.BrandName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BrandName);
				else
					this.BrandName = base.SetstringAsString(ColumnNames.BrandName, value);
			}
		}

		public virtual string s_StackHeight
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StackHeight) ? string.Empty : base.GetdoubleAsString(ColumnNames.StackHeight);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StackHeight);
				else
					this.StackHeight = base.SetdoubleAsString(ColumnNames.StackHeight, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ItemID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ManufacturerID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ManufacturerID, Parameters.ManufacturerID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PackageLevel
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PackageLevel, Parameters.PackageLevel);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter QuantityPerLevel
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.QuantityPerLevel, Parameters.QuantityPerLevel);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsssuingDefault
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsssuingDefault, Parameters.IsssuingDefault);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RecevingDefault
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RecevingDefault, Parameters.RecevingDefault);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BoxWidth
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BoxWidth, Parameters.BoxWidth);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BoxHeight
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BoxHeight, Parameters.BoxHeight);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BoxLength
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BoxLength, Parameters.BoxLength);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BrandName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BrandName, Parameters.BrandName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StackHeight
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StackHeight, Parameters.StackHeight);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public WhereParameter ManufacturerID
		    {
				get
		        {
					if(_ManufacturerID_W == null)
	        	    {
						_ManufacturerID_W = TearOff.ManufacturerID;
					}
					return _ManufacturerID_W;
				}
			}

			public WhereParameter PackageLevel
		    {
				get
		        {
					if(_PackageLevel_W == null)
	        	    {
						_PackageLevel_W = TearOff.PackageLevel;
					}
					return _PackageLevel_W;
				}
			}

			public WhereParameter QuantityPerLevel
		    {
				get
		        {
					if(_QuantityPerLevel_W == null)
	        	    {
						_QuantityPerLevel_W = TearOff.QuantityPerLevel;
					}
					return _QuantityPerLevel_W;
				}
			}

			public WhereParameter IsssuingDefault
		    {
				get
		        {
					if(_IsssuingDefault_W == null)
	        	    {
						_IsssuingDefault_W = TearOff.IsssuingDefault;
					}
					return _IsssuingDefault_W;
				}
			}

			public WhereParameter RecevingDefault
		    {
				get
		        {
					if(_RecevingDefault_W == null)
	        	    {
						_RecevingDefault_W = TearOff.RecevingDefault;
					}
					return _RecevingDefault_W;
				}
			}

			public WhereParameter BoxWidth
		    {
				get
		        {
					if(_BoxWidth_W == null)
	        	    {
						_BoxWidth_W = TearOff.BoxWidth;
					}
					return _BoxWidth_W;
				}
			}

			public WhereParameter BoxHeight
		    {
				get
		        {
					if(_BoxHeight_W == null)
	        	    {
						_BoxHeight_W = TearOff.BoxHeight;
					}
					return _BoxHeight_W;
				}
			}

			public WhereParameter BoxLength
		    {
				get
		        {
					if(_BoxLength_W == null)
	        	    {
						_BoxLength_W = TearOff.BoxLength;
					}
					return _BoxLength_W;
				}
			}

			public WhereParameter BrandName
		    {
				get
		        {
					if(_BrandName_W == null)
	        	    {
						_BrandName_W = TearOff.BrandName;
					}
					return _BrandName_W;
				}
			}

			public WhereParameter StackHeight
		    {
				get
		        {
					if(_StackHeight_W == null)
	        	    {
						_StackHeight_W = TearOff.StackHeight;
					}
					return _StackHeight_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _ItemID_W = null;
			private WhereParameter _ManufacturerID_W = null;
			private WhereParameter _PackageLevel_W = null;
			private WhereParameter _QuantityPerLevel_W = null;
			private WhereParameter _IsssuingDefault_W = null;
			private WhereParameter _RecevingDefault_W = null;
			private WhereParameter _BoxWidth_W = null;
			private WhereParameter _BoxHeight_W = null;
			private WhereParameter _BoxLength_W = null;
			private WhereParameter _BrandName_W = null;
			private WhereParameter _StackHeight_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_ItemID_W = null;
				_ManufacturerID_W = null;
				_PackageLevel_W = null;
				_QuantityPerLevel_W = null;
				_IsssuingDefault_W = null;
				_RecevingDefault_W = null;
				_BoxWidth_W = null;
				_BoxHeight_W = null;
				_BoxLength_W = null;
				_BrandName_W = null;
				_StackHeight_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ItemID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ManufacturerID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ManufacturerID, Parameters.ManufacturerID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PackageLevel
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PackageLevel, Parameters.PackageLevel);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter QuantityPerLevel
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.QuantityPerLevel, Parameters.QuantityPerLevel);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsssuingDefault
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsssuingDefault, Parameters.IsssuingDefault);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RecevingDefault
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RecevingDefault, Parameters.RecevingDefault);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BoxWidth
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BoxWidth, Parameters.BoxWidth);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BoxHeight
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BoxHeight, Parameters.BoxHeight);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BoxLength
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BoxLength, Parameters.BoxLength);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BrandName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BrandName, Parameters.BrandName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StackHeight
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StackHeight, Parameters.StackHeight);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public AggregateParameter ManufacturerID
		    {
				get
		        {
					if(_ManufacturerID_W == null)
	        	    {
						_ManufacturerID_W = TearOff.ManufacturerID;
					}
					return _ManufacturerID_W;
				}
			}

			public AggregateParameter PackageLevel
		    {
				get
		        {
					if(_PackageLevel_W == null)
	        	    {
						_PackageLevel_W = TearOff.PackageLevel;
					}
					return _PackageLevel_W;
				}
			}

			public AggregateParameter QuantityPerLevel
		    {
				get
		        {
					if(_QuantityPerLevel_W == null)
	        	    {
						_QuantityPerLevel_W = TearOff.QuantityPerLevel;
					}
					return _QuantityPerLevel_W;
				}
			}

			public AggregateParameter IsssuingDefault
		    {
				get
		        {
					if(_IsssuingDefault_W == null)
	        	    {
						_IsssuingDefault_W = TearOff.IsssuingDefault;
					}
					return _IsssuingDefault_W;
				}
			}

			public AggregateParameter RecevingDefault
		    {
				get
		        {
					if(_RecevingDefault_W == null)
	        	    {
						_RecevingDefault_W = TearOff.RecevingDefault;
					}
					return _RecevingDefault_W;
				}
			}

			public AggregateParameter BoxWidth
		    {
				get
		        {
					if(_BoxWidth_W == null)
	        	    {
						_BoxWidth_W = TearOff.BoxWidth;
					}
					return _BoxWidth_W;
				}
			}

			public AggregateParameter BoxHeight
		    {
				get
		        {
					if(_BoxHeight_W == null)
	        	    {
						_BoxHeight_W = TearOff.BoxHeight;
					}
					return _BoxHeight_W;
				}
			}

			public AggregateParameter BoxLength
		    {
				get
		        {
					if(_BoxLength_W == null)
	        	    {
						_BoxLength_W = TearOff.BoxLength;
					}
					return _BoxLength_W;
				}
			}

			public AggregateParameter BrandName
		    {
				get
		        {
					if(_BrandName_W == null)
	        	    {
						_BrandName_W = TearOff.BrandName;
					}
					return _BrandName_W;
				}
			}

			public AggregateParameter StackHeight
		    {
				get
		        {
					if(_StackHeight_W == null)
	        	    {
						_StackHeight_W = TearOff.StackHeight;
					}
					return _StackHeight_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _ItemID_W = null;
			private AggregateParameter _ManufacturerID_W = null;
			private AggregateParameter _PackageLevel_W = null;
			private AggregateParameter _QuantityPerLevel_W = null;
			private AggregateParameter _IsssuingDefault_W = null;
			private AggregateParameter _RecevingDefault_W = null;
			private AggregateParameter _BoxWidth_W = null;
			private AggregateParameter _BoxHeight_W = null;
			private AggregateParameter _BoxLength_W = null;
			private AggregateParameter _BrandName_W = null;
			private AggregateParameter _StackHeight_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_ItemID_W = null;
				_ManufacturerID_W = null;
				_PackageLevel_W = null;
				_QuantityPerLevel_W = null;
				_IsssuingDefault_W = null;
				_RecevingDefault_W = null;
				_BoxWidth_W = null;
				_BoxHeight_W = null;
				_BoxLength_W = null;
				_BrandName_W = null;
				_StackHeight_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ItemManufacturerInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ItemManufacturerUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ItemManufacturerDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ItemID);
			p.SourceColumn = ColumnNames.ItemID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ManufacturerID);
			p.SourceColumn = ColumnNames.ManufacturerID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PackageLevel);
			p.SourceColumn = ColumnNames.PackageLevel;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.QuantityPerLevel);
			p.SourceColumn = ColumnNames.QuantityPerLevel;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsssuingDefault);
			p.SourceColumn = ColumnNames.IsssuingDefault;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RecevingDefault);
			p.SourceColumn = ColumnNames.RecevingDefault;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BoxWidth);
			p.SourceColumn = ColumnNames.BoxWidth;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BoxHeight);
			p.SourceColumn = ColumnNames.BoxHeight;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BoxLength);
			p.SourceColumn = ColumnNames.BoxLength;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BrandName);
			p.SourceColumn = ColumnNames.BrandName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StackHeight);
			p.SourceColumn = ColumnNames.StackHeight;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
