
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _LogActivity : SqlClientEntity
	{
		public _LogActivity()
		{
			this.QuerySource = "LogActivity";
			this.MappingName = "LogActivity";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_LogActivityLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int LogID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.LogID, LogID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_LogActivityLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter LogID
			{
				get
				{
					return new SqlParameter("@LogID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ActivityID
			{
				get
				{
					return new SqlParameter("@ActivityID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter HostName
			{
				get
				{
					return new SqlParameter("@HostName", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter IPAddress
			{
				get
				{
					return new SqlParameter("@IPAddress", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter OccuranceDate
			{
				get
				{
					return new SqlParameter("@OccuranceDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Page
			{
				get
				{
					return new SqlParameter("@Page", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter ActivityName
			{
				get
				{
					return new SqlParameter("@ActivityName", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter ClassName
			{
				get
				{
					return new SqlParameter("@ClassName", SqlDbType.NText, 1073741823);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string LogID = "LogID";
            public const string ActivityID = "ActivityID";
            public const string HostName = "HostName";
            public const string IPAddress = "IPAddress";
            public const string OccuranceDate = "OccuranceDate";
            public const string Page = "Page";
            public const string ActivityName = "ActivityName";
            public const string ClassName = "ClassName";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[LogID] = _LogActivity.PropertyNames.LogID;
					ht[ActivityID] = _LogActivity.PropertyNames.ActivityID;
					ht[HostName] = _LogActivity.PropertyNames.HostName;
					ht[IPAddress] = _LogActivity.PropertyNames.IPAddress;
					ht[OccuranceDate] = _LogActivity.PropertyNames.OccuranceDate;
					ht[Page] = _LogActivity.PropertyNames.Page;
					ht[ActivityName] = _LogActivity.PropertyNames.ActivityName;
					ht[ClassName] = _LogActivity.PropertyNames.ClassName;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string LogID = "LogID";
            public const string ActivityID = "ActivityID";
            public const string HostName = "HostName";
            public const string IPAddress = "IPAddress";
            public const string OccuranceDate = "OccuranceDate";
            public const string Page = "Page";
            public const string ActivityName = "ActivityName";
            public const string ClassName = "ClassName";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[LogID] = _LogActivity.ColumnNames.LogID;
					ht[ActivityID] = _LogActivity.ColumnNames.ActivityID;
					ht[HostName] = _LogActivity.ColumnNames.HostName;
					ht[IPAddress] = _LogActivity.ColumnNames.IPAddress;
					ht[OccuranceDate] = _LogActivity.ColumnNames.OccuranceDate;
					ht[Page] = _LogActivity.ColumnNames.Page;
					ht[ActivityName] = _LogActivity.ColumnNames.ActivityName;
					ht[ClassName] = _LogActivity.ColumnNames.ClassName;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string LogID = "s_LogID";
            public const string ActivityID = "s_ActivityID";
            public const string HostName = "s_HostName";
            public const string IPAddress = "s_IPAddress";
            public const string OccuranceDate = "s_OccuranceDate";
            public const string Page = "s_Page";
            public const string ActivityName = "s_ActivityName";
            public const string ClassName = "s_ClassName";

		}
		#endregion		
		
		#region Properties
	
		public virtual int LogID
	    {
			get
	        {
				return base.Getint(ColumnNames.LogID);
			}
			set
	        {
				base.Setint(ColumnNames.LogID, value);
			}
		}

		public virtual int ActivityID
	    {
			get
	        {
				return base.Getint(ColumnNames.ActivityID);
			}
			set
	        {
				base.Setint(ColumnNames.ActivityID, value);
			}
		}

		public virtual string HostName
	    {
			get
	        {
				return base.Getstring(ColumnNames.HostName);
			}
			set
	        {
				base.Setstring(ColumnNames.HostName, value);
			}
		}

		public virtual string IPAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.IPAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.IPAddress, value);
			}
		}

		public virtual DateTime OccuranceDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.OccuranceDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.OccuranceDate, value);
			}
		}

		public virtual string Page
	    {
			get
	        {
				return base.Getstring(ColumnNames.Page);
			}
			set
	        {
				base.Setstring(ColumnNames.Page, value);
			}
		}

		public virtual string ActivityName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ActivityName);
			}
			set
	        {
				base.Setstring(ColumnNames.ActivityName, value);
			}
		}

		public virtual string ClassName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ClassName);
			}
			set
	        {
				base.Setstring(ColumnNames.ClassName, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_LogID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LogID) ? string.Empty : base.GetintAsString(ColumnNames.LogID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LogID);
				else
					this.LogID = base.SetintAsString(ColumnNames.LogID, value);
			}
		}

		public virtual string s_ActivityID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ActivityID) ? string.Empty : base.GetintAsString(ColumnNames.ActivityID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ActivityID);
				else
					this.ActivityID = base.SetintAsString(ColumnNames.ActivityID, value);
			}
		}

		public virtual string s_HostName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HostName) ? string.Empty : base.GetstringAsString(ColumnNames.HostName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HostName);
				else
					this.HostName = base.SetstringAsString(ColumnNames.HostName, value);
			}
		}

		public virtual string s_IPAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IPAddress) ? string.Empty : base.GetstringAsString(ColumnNames.IPAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IPAddress);
				else
					this.IPAddress = base.SetstringAsString(ColumnNames.IPAddress, value);
			}
		}

		public virtual string s_OccuranceDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OccuranceDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.OccuranceDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OccuranceDate);
				else
					this.OccuranceDate = base.SetDateTimeAsString(ColumnNames.OccuranceDate, value);
			}
		}

		public virtual string s_Page
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Page) ? string.Empty : base.GetstringAsString(ColumnNames.Page);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Page);
				else
					this.Page = base.SetstringAsString(ColumnNames.Page, value);
			}
		}

		public virtual string s_ActivityName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ActivityName) ? string.Empty : base.GetstringAsString(ColumnNames.ActivityName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ActivityName);
				else
					this.ActivityName = base.SetstringAsString(ColumnNames.ActivityName, value);
			}
		}

		public virtual string s_ClassName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ClassName) ? string.Empty : base.GetstringAsString(ColumnNames.ClassName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ClassName);
				else
					this.ClassName = base.SetstringAsString(ColumnNames.ClassName, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter LogID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LogID, Parameters.LogID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ActivityID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ActivityID, Parameters.ActivityID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HostName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HostName, Parameters.HostName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IPAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IPAddress, Parameters.IPAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OccuranceDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OccuranceDate, Parameters.OccuranceDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Page
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Page, Parameters.Page);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ActivityName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ActivityName, Parameters.ActivityName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ClassName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ClassName, Parameters.ClassName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter LogID
		    {
				get
		        {
					if(_LogID_W == null)
	        	    {
						_LogID_W = TearOff.LogID;
					}
					return _LogID_W;
				}
			}

			public WhereParameter ActivityID
		    {
				get
		        {
					if(_ActivityID_W == null)
	        	    {
						_ActivityID_W = TearOff.ActivityID;
					}
					return _ActivityID_W;
				}
			}

			public WhereParameter HostName
		    {
				get
		        {
					if(_HostName_W == null)
	        	    {
						_HostName_W = TearOff.HostName;
					}
					return _HostName_W;
				}
			}

			public WhereParameter IPAddress
		    {
				get
		        {
					if(_IPAddress_W == null)
	        	    {
						_IPAddress_W = TearOff.IPAddress;
					}
					return _IPAddress_W;
				}
			}

			public WhereParameter OccuranceDate
		    {
				get
		        {
					if(_OccuranceDate_W == null)
	        	    {
						_OccuranceDate_W = TearOff.OccuranceDate;
					}
					return _OccuranceDate_W;
				}
			}

			public WhereParameter Page
		    {
				get
		        {
					if(_Page_W == null)
	        	    {
						_Page_W = TearOff.Page;
					}
					return _Page_W;
				}
			}

			public WhereParameter ActivityName
		    {
				get
		        {
					if(_ActivityName_W == null)
	        	    {
						_ActivityName_W = TearOff.ActivityName;
					}
					return _ActivityName_W;
				}
			}

			public WhereParameter ClassName
		    {
				get
		        {
					if(_ClassName_W == null)
	        	    {
						_ClassName_W = TearOff.ClassName;
					}
					return _ClassName_W;
				}
			}

			private WhereParameter _LogID_W = null;
			private WhereParameter _ActivityID_W = null;
			private WhereParameter _HostName_W = null;
			private WhereParameter _IPAddress_W = null;
			private WhereParameter _OccuranceDate_W = null;
			private WhereParameter _Page_W = null;
			private WhereParameter _ActivityName_W = null;
			private WhereParameter _ClassName_W = null;

			public void WhereClauseReset()
			{
				_LogID_W = null;
				_ActivityID_W = null;
				_HostName_W = null;
				_IPAddress_W = null;
				_OccuranceDate_W = null;
				_Page_W = null;
				_ActivityName_W = null;
				_ClassName_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter LogID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LogID, Parameters.LogID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ActivityID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ActivityID, Parameters.ActivityID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HostName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HostName, Parameters.HostName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IPAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IPAddress, Parameters.IPAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OccuranceDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OccuranceDate, Parameters.OccuranceDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Page
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Page, Parameters.Page);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ActivityName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ActivityName, Parameters.ActivityName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ClassName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ClassName, Parameters.ClassName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter LogID
		    {
				get
		        {
					if(_LogID_W == null)
	        	    {
						_LogID_W = TearOff.LogID;
					}
					return _LogID_W;
				}
			}

			public AggregateParameter ActivityID
		    {
				get
		        {
					if(_ActivityID_W == null)
	        	    {
						_ActivityID_W = TearOff.ActivityID;
					}
					return _ActivityID_W;
				}
			}

			public AggregateParameter HostName
		    {
				get
		        {
					if(_HostName_W == null)
	        	    {
						_HostName_W = TearOff.HostName;
					}
					return _HostName_W;
				}
			}

			public AggregateParameter IPAddress
		    {
				get
		        {
					if(_IPAddress_W == null)
	        	    {
						_IPAddress_W = TearOff.IPAddress;
					}
					return _IPAddress_W;
				}
			}

			public AggregateParameter OccuranceDate
		    {
				get
		        {
					if(_OccuranceDate_W == null)
	        	    {
						_OccuranceDate_W = TearOff.OccuranceDate;
					}
					return _OccuranceDate_W;
				}
			}

			public AggregateParameter Page
		    {
				get
		        {
					if(_Page_W == null)
	        	    {
						_Page_W = TearOff.Page;
					}
					return _Page_W;
				}
			}

			public AggregateParameter ActivityName
		    {
				get
		        {
					if(_ActivityName_W == null)
	        	    {
						_ActivityName_W = TearOff.ActivityName;
					}
					return _ActivityName_W;
				}
			}

			public AggregateParameter ClassName
		    {
				get
		        {
					if(_ClassName_W == null)
	        	    {
						_ClassName_W = TearOff.ClassName;
					}
					return _ClassName_W;
				}
			}

			private AggregateParameter _LogID_W = null;
			private AggregateParameter _ActivityID_W = null;
			private AggregateParameter _HostName_W = null;
			private AggregateParameter _IPAddress_W = null;
			private AggregateParameter _OccuranceDate_W = null;
			private AggregateParameter _Page_W = null;
			private AggregateParameter _ActivityName_W = null;
			private AggregateParameter _ClassName_W = null;

			public void AggregateClauseReset()
			{
				_LogID_W = null;
				_ActivityID_W = null;
				_HostName_W = null;
				_IPAddress_W = null;
				_OccuranceDate_W = null;
				_Page_W = null;
				_ActivityName_W = null;
				_ClassName_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_LogActivityInsert]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_LogActivityUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_LogActivityDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.LogID);
			p.SourceColumn = ColumnNames.LogID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.LogID);
			p.SourceColumn = ColumnNames.LogID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ActivityID);
			p.SourceColumn = ColumnNames.ActivityID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HostName);
			p.SourceColumn = ColumnNames.HostName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IPAddress);
			p.SourceColumn = ColumnNames.IPAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OccuranceDate);
			p.SourceColumn = ColumnNames.OccuranceDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Page);
			p.SourceColumn = ColumnNames.Page;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ActivityName);
			p.SourceColumn = ColumnNames.ActivityName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ClassName);
			p.SourceColumn = ColumnNames.ClassName;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
