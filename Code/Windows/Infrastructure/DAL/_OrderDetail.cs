
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _OrderDetail : SqlClientEntity
	{
		public _OrderDetail()
		{
			this.QuerySource = "OrderDetail";
			this.MappingName = "OrderDetail";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_OrderDetailLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_OrderDetailLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OrderID
			{
				get
				{
					return new SqlParameter("@OrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ItemID
			{
				get
				{
					return new SqlParameter("@ItemID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Pack
			{
				get
				{
					return new SqlParameter("@Pack", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter QtyPerPack
			{
				get
				{
					return new SqlParameter("@QtyPerPack", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Quantity
			{
				get
				{
					return new SqlParameter("@Quantity", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter ApprovedQuantity
			{
				get
				{
					return new SqlParameter("@ApprovedQuantity", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter Remark
			{
				get
				{
					return new SqlParameter("@Remark", SqlDbType.Text, 2147483647);
				}
			}
			
			public static SqlParameter HACTOrderDetailID
			{
				get
				{
					return new SqlParameter("@HACTOrderDetailID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UnitID
			{
				get
				{
					return new SqlParameter("@UnitID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StoreID
			{
				get
				{
					return new SqlParameter("@StoreID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StockedOut
			{
				get
				{
					return new SqlParameter("@StockedOut", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter DeliveryNote
			{
				get
				{
					return new SqlParameter("@DeliveryNote", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter PreferredManufacturerID
			{
				get
				{
					return new SqlParameter("@PreferredManufacturerID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PreferredExpiryDate
			{
				get
				{
					return new SqlParameter("@PreferredExpiryDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter PreferredPhysicalStoreID
			{
				get
				{
					return new SqlParameter("@PreferredPhysicalStoreID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StockOnHand
			{
				get
				{
					return new SqlParameter("@StockOnHand", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter ExpiredStock
			{
				get
				{
					return new SqlParameter("@ExpiredStock", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter DamagedStock
			{
				get
				{
					return new SqlParameter("@DamagedStock", SqlDbType.Decimal, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string OrderID = "OrderID";
            public const string ItemID = "ItemID";
            public const string Pack = "Pack";
            public const string QtyPerPack = "QtyPerPack";
            public const string Quantity = "Quantity";
            public const string ApprovedQuantity = "ApprovedQuantity";
            public const string Remark = "Remark";
            public const string HACTOrderDetailID = "HACTOrderDetailID";
            public const string UnitID = "UnitID";
            public const string StoreID = "StoreID";
            public const string StockedOut = "StockedOut";
            public const string DeliveryNote = "DeliveryNote";
            public const string PreferredManufacturerID = "PreferredManufacturerID";
            public const string PreferredExpiryDate = "PreferredExpiryDate";
            public const string PreferredPhysicalStoreID = "PreferredPhysicalStoreID";
            public const string StockOnHand = "StockOnHand";
            public const string ExpiredStock = "ExpiredStock";
            public const string DamagedStock = "DamagedStock";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _OrderDetail.PropertyNames.ID;
					ht[OrderID] = _OrderDetail.PropertyNames.OrderID;
					ht[ItemID] = _OrderDetail.PropertyNames.ItemID;
					ht[Pack] = _OrderDetail.PropertyNames.Pack;
					ht[QtyPerPack] = _OrderDetail.PropertyNames.QtyPerPack;
					ht[Quantity] = _OrderDetail.PropertyNames.Quantity;
					ht[ApprovedQuantity] = _OrderDetail.PropertyNames.ApprovedQuantity;
					ht[Remark] = _OrderDetail.PropertyNames.Remark;
					ht[HACTOrderDetailID] = _OrderDetail.PropertyNames.HACTOrderDetailID;
					ht[UnitID] = _OrderDetail.PropertyNames.UnitID;
					ht[StoreID] = _OrderDetail.PropertyNames.StoreID;
					ht[StockedOut] = _OrderDetail.PropertyNames.StockedOut;
					ht[DeliveryNote] = _OrderDetail.PropertyNames.DeliveryNote;
					ht[PreferredManufacturerID] = _OrderDetail.PropertyNames.PreferredManufacturerID;
					ht[PreferredExpiryDate] = _OrderDetail.PropertyNames.PreferredExpiryDate;
					ht[PreferredPhysicalStoreID] = _OrderDetail.PropertyNames.PreferredPhysicalStoreID;
					ht[StockOnHand] = _OrderDetail.PropertyNames.StockOnHand;
					ht[ExpiredStock] = _OrderDetail.PropertyNames.ExpiredStock;
					ht[DamagedStock] = _OrderDetail.PropertyNames.DamagedStock;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string OrderID = "OrderID";
            public const string ItemID = "ItemID";
            public const string Pack = "Pack";
            public const string QtyPerPack = "QtyPerPack";
            public const string Quantity = "Quantity";
            public const string ApprovedQuantity = "ApprovedQuantity";
            public const string Remark = "Remark";
            public const string HACTOrderDetailID = "HACTOrderDetailID";
            public const string UnitID = "UnitID";
            public const string StoreID = "StoreID";
            public const string StockedOut = "StockedOut";
            public const string DeliveryNote = "DeliveryNote";
            public const string PreferredManufacturerID = "PreferredManufacturerID";
            public const string PreferredExpiryDate = "PreferredExpiryDate";
            public const string PreferredPhysicalStoreID = "PreferredPhysicalStoreID";
            public const string StockOnHand = "StockOnHand";
            public const string ExpiredStock = "ExpiredStock";
            public const string DamagedStock = "DamagedStock";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _OrderDetail.ColumnNames.ID;
					ht[OrderID] = _OrderDetail.ColumnNames.OrderID;
					ht[ItemID] = _OrderDetail.ColumnNames.ItemID;
					ht[Pack] = _OrderDetail.ColumnNames.Pack;
					ht[QtyPerPack] = _OrderDetail.ColumnNames.QtyPerPack;
					ht[Quantity] = _OrderDetail.ColumnNames.Quantity;
					ht[ApprovedQuantity] = _OrderDetail.ColumnNames.ApprovedQuantity;
					ht[Remark] = _OrderDetail.ColumnNames.Remark;
					ht[HACTOrderDetailID] = _OrderDetail.ColumnNames.HACTOrderDetailID;
					ht[UnitID] = _OrderDetail.ColumnNames.UnitID;
					ht[StoreID] = _OrderDetail.ColumnNames.StoreID;
					ht[StockedOut] = _OrderDetail.ColumnNames.StockedOut;
					ht[DeliveryNote] = _OrderDetail.ColumnNames.DeliveryNote;
					ht[PreferredManufacturerID] = _OrderDetail.ColumnNames.PreferredManufacturerID;
					ht[PreferredExpiryDate] = _OrderDetail.ColumnNames.PreferredExpiryDate;
					ht[PreferredPhysicalStoreID] = _OrderDetail.ColumnNames.PreferredPhysicalStoreID;
					ht[StockOnHand] = _OrderDetail.ColumnNames.StockOnHand;
					ht[ExpiredStock] = _OrderDetail.ColumnNames.ExpiredStock;
					ht[DamagedStock] = _OrderDetail.ColumnNames.DamagedStock;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string OrderID = "s_OrderID";
            public const string ItemID = "s_ItemID";
            public const string Pack = "s_Pack";
            public const string QtyPerPack = "s_QtyPerPack";
            public const string Quantity = "s_Quantity";
            public const string ApprovedQuantity = "s_ApprovedQuantity";
            public const string Remark = "s_Remark";
            public const string HACTOrderDetailID = "s_HACTOrderDetailID";
            public const string UnitID = "s_UnitID";
            public const string StoreID = "s_StoreID";
            public const string StockedOut = "s_StockedOut";
            public const string DeliveryNote = "s_DeliveryNote";
            public const string PreferredManufacturerID = "s_PreferredManufacturerID";
            public const string PreferredExpiryDate = "s_PreferredExpiryDate";
            public const string PreferredPhysicalStoreID = "s_PreferredPhysicalStoreID";
            public const string StockOnHand = "s_StockOnHand";
            public const string ExpiredStock = "s_ExpiredStock";
            public const string DamagedStock = "s_DamagedStock";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual int OrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.OrderID);
			}
			set
	        {
				base.Setint(ColumnNames.OrderID, value);
			}
		}

		public virtual int ItemID
	    {
			get
	        {
				return base.Getint(ColumnNames.ItemID);
			}
			set
	        {
				base.Setint(ColumnNames.ItemID, value);
			}
		}

		public virtual decimal Pack
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Pack);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Pack, value);
			}
		}

		public virtual int QtyPerPack
	    {
			get
	        {
				return base.Getint(ColumnNames.QtyPerPack);
			}
			set
	        {
				base.Setint(ColumnNames.QtyPerPack, value);
			}
		}

		public virtual decimal Quantity
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Quantity);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Quantity, value);
			}
		}

		public virtual decimal ApprovedQuantity
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.ApprovedQuantity);
			}
			set
	        {
				base.Setdecimal(ColumnNames.ApprovedQuantity, value);
			}
		}

		public virtual string Remark
	    {
			get
	        {
				return base.Getstring(ColumnNames.Remark);
			}
			set
	        {
				base.Setstring(ColumnNames.Remark, value);
			}
		}

		public virtual int HACTOrderDetailID
	    {
			get
	        {
				return base.Getint(ColumnNames.HACTOrderDetailID);
			}
			set
	        {
				base.Setint(ColumnNames.HACTOrderDetailID, value);
			}
		}

		public virtual int UnitID
	    {
			get
	        {
				return base.Getint(ColumnNames.UnitID);
			}
			set
	        {
				base.Setint(ColumnNames.UnitID, value);
			}
		}

		public virtual int StoreID
	    {
			get
	        {
				return base.Getint(ColumnNames.StoreID);
			}
			set
	        {
				base.Setint(ColumnNames.StoreID, value);
			}
		}

		public virtual bool StockedOut
	    {
			get
	        {
				return base.Getbool(ColumnNames.StockedOut);
			}
			set
	        {
				base.Setbool(ColumnNames.StockedOut, value);
			}
		}

		public virtual bool DeliveryNote
	    {
			get
	        {
                if (IsColumnNull(ColumnNames.DeliveryNote))
                {
                    return false;
                }
				return base.Getbool(ColumnNames.DeliveryNote);
			}
			set
	        {
				base.Setbool(ColumnNames.DeliveryNote, value);
			}
		}

		public virtual int PreferredManufacturerID
	    {
			get
	        {
				return base.Getint(ColumnNames.PreferredManufacturerID);
			}
			set
	        {
				base.Setint(ColumnNames.PreferredManufacturerID, value);
			}
		}

		public virtual DateTime PreferredExpiryDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.PreferredExpiryDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.PreferredExpiryDate, value);
			}
		}

		public virtual int PreferredPhysicalStoreID
	    {
			get
	        {
				return base.Getint(ColumnNames.PreferredPhysicalStoreID);
			}
			set
	        {
				base.Setint(ColumnNames.PreferredPhysicalStoreID, value);
			}
		}

		public virtual decimal StockOnHand
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.StockOnHand);
			}
			set
	        {
				base.Setdecimal(ColumnNames.StockOnHand, value);
			}
		}

		public virtual decimal ExpiredStock
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.ExpiredStock);
			}
			set
	        {
				base.Setdecimal(ColumnNames.ExpiredStock, value);
			}
		}

		public virtual decimal DamagedStock
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.DamagedStock);
			}
			set
	        {
				base.Setdecimal(ColumnNames.DamagedStock, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_OrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderID) ? string.Empty : base.GetintAsString(ColumnNames.OrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderID);
				else
					this.OrderID = base.SetintAsString(ColumnNames.OrderID, value);
			}
		}

		public virtual string s_ItemID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ItemID) ? string.Empty : base.GetintAsString(ColumnNames.ItemID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ItemID);
				else
					this.ItemID = base.SetintAsString(ColumnNames.ItemID, value);
			}
		}

		public virtual string s_Pack
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pack) ? string.Empty : base.GetdecimalAsString(ColumnNames.Pack);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pack);
				else
					this.Pack = base.SetdecimalAsString(ColumnNames.Pack, value);
			}
		}

		public virtual string s_QtyPerPack
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.QtyPerPack) ? string.Empty : base.GetintAsString(ColumnNames.QtyPerPack);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.QtyPerPack);
				else
					this.QtyPerPack = base.SetintAsString(ColumnNames.QtyPerPack, value);
			}
		}

		public virtual string s_Quantity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Quantity) ? string.Empty : base.GetdecimalAsString(ColumnNames.Quantity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Quantity);
				else
					this.Quantity = base.SetdecimalAsString(ColumnNames.Quantity, value);
			}
		}

		public virtual string s_ApprovedQuantity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ApprovedQuantity) ? string.Empty : base.GetdecimalAsString(ColumnNames.ApprovedQuantity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ApprovedQuantity);
				else
					this.ApprovedQuantity = base.SetdecimalAsString(ColumnNames.ApprovedQuantity, value);
			}
		}

		public virtual string s_Remark
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Remark) ? string.Empty : base.GetstringAsString(ColumnNames.Remark);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Remark);
				else
					this.Remark = base.SetstringAsString(ColumnNames.Remark, value);
			}
		}

		public virtual string s_HACTOrderDetailID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HACTOrderDetailID) ? string.Empty : base.GetintAsString(ColumnNames.HACTOrderDetailID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HACTOrderDetailID);
				else
					this.HACTOrderDetailID = base.SetintAsString(ColumnNames.HACTOrderDetailID, value);
			}
		}

		public virtual string s_UnitID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UnitID) ? string.Empty : base.GetintAsString(ColumnNames.UnitID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnitID);
				else
					this.UnitID = base.SetintAsString(ColumnNames.UnitID, value);
			}
		}

		public virtual string s_StoreID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StoreID) ? string.Empty : base.GetintAsString(ColumnNames.StoreID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StoreID);
				else
					this.StoreID = base.SetintAsString(ColumnNames.StoreID, value);
			}
		}

		public virtual string s_StockedOut
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StockedOut) ? string.Empty : base.GetboolAsString(ColumnNames.StockedOut);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StockedOut);
				else
					this.StockedOut = base.SetboolAsString(ColumnNames.StockedOut, value);
			}
		}

		public virtual string s_DeliveryNote
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryNote) ? string.Empty : base.GetboolAsString(ColumnNames.DeliveryNote);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryNote);
				else
					this.DeliveryNote = base.SetboolAsString(ColumnNames.DeliveryNote, value);
			}
		}

		public virtual string s_PreferredManufacturerID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PreferredManufacturerID) ? string.Empty : base.GetintAsString(ColumnNames.PreferredManufacturerID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PreferredManufacturerID);
				else
					this.PreferredManufacturerID = base.SetintAsString(ColumnNames.PreferredManufacturerID, value);
			}
		}

		public virtual string s_PreferredExpiryDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PreferredExpiryDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.PreferredExpiryDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PreferredExpiryDate);
				else
					this.PreferredExpiryDate = base.SetDateTimeAsString(ColumnNames.PreferredExpiryDate, value);
			}
		}

		public virtual string s_PreferredPhysicalStoreID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PreferredPhysicalStoreID) ? string.Empty : base.GetintAsString(ColumnNames.PreferredPhysicalStoreID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PreferredPhysicalStoreID);
				else
					this.PreferredPhysicalStoreID = base.SetintAsString(ColumnNames.PreferredPhysicalStoreID, value);
			}
		}

		public virtual string s_StockOnHand
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StockOnHand) ? string.Empty : base.GetdecimalAsString(ColumnNames.StockOnHand);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StockOnHand);
				else
					this.StockOnHand = base.SetdecimalAsString(ColumnNames.StockOnHand, value);
			}
		}

		public virtual string s_ExpiredStock
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ExpiredStock) ? string.Empty : base.GetdecimalAsString(ColumnNames.ExpiredStock);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ExpiredStock);
				else
					this.ExpiredStock = base.SetdecimalAsString(ColumnNames.ExpiredStock, value);
			}
		}

		public virtual string s_DamagedStock
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DamagedStock) ? string.Empty : base.GetdecimalAsString(ColumnNames.DamagedStock);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DamagedStock);
				else
					this.DamagedStock = base.SetdecimalAsString(ColumnNames.DamagedStock, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderID, Parameters.OrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ItemID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pack
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pack, Parameters.Pack);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter QtyPerPack
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.QtyPerPack, Parameters.QtyPerPack);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Quantity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Quantity, Parameters.Quantity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ApprovedQuantity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ApprovedQuantity, Parameters.ApprovedQuantity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Remark
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HACTOrderDetailID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HACTOrderDetailID, Parameters.HACTOrderDetailID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UnitID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UnitID, Parameters.UnitID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StoreID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StoreID, Parameters.StoreID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StockedOut
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StockedOut, Parameters.StockedOut);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeliveryNote
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryNote, Parameters.DeliveryNote);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PreferredManufacturerID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PreferredManufacturerID, Parameters.PreferredManufacturerID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PreferredExpiryDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PreferredExpiryDate, Parameters.PreferredExpiryDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PreferredPhysicalStoreID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PreferredPhysicalStoreID, Parameters.PreferredPhysicalStoreID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StockOnHand
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StockOnHand, Parameters.StockOnHand);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ExpiredStock
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ExpiredStock, Parameters.ExpiredStock);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DamagedStock
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DamagedStock, Parameters.DamagedStock);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter OrderID
		    {
				get
		        {
					if(_OrderID_W == null)
	        	    {
						_OrderID_W = TearOff.OrderID;
					}
					return _OrderID_W;
				}
			}

			public WhereParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public WhereParameter Pack
		    {
				get
		        {
					if(_Pack_W == null)
	        	    {
						_Pack_W = TearOff.Pack;
					}
					return _Pack_W;
				}
			}

			public WhereParameter QtyPerPack
		    {
				get
		        {
					if(_QtyPerPack_W == null)
	        	    {
						_QtyPerPack_W = TearOff.QtyPerPack;
					}
					return _QtyPerPack_W;
				}
			}

			public WhereParameter Quantity
		    {
				get
		        {
					if(_Quantity_W == null)
	        	    {
						_Quantity_W = TearOff.Quantity;
					}
					return _Quantity_W;
				}
			}

			public WhereParameter ApprovedQuantity
		    {
				get
		        {
					if(_ApprovedQuantity_W == null)
	        	    {
						_ApprovedQuantity_W = TearOff.ApprovedQuantity;
					}
					return _ApprovedQuantity_W;
				}
			}

			public WhereParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			public WhereParameter HACTOrderDetailID
		    {
				get
		        {
					if(_HACTOrderDetailID_W == null)
	        	    {
						_HACTOrderDetailID_W = TearOff.HACTOrderDetailID;
					}
					return _HACTOrderDetailID_W;
				}
			}

			public WhereParameter UnitID
		    {
				get
		        {
					if(_UnitID_W == null)
	        	    {
						_UnitID_W = TearOff.UnitID;
					}
					return _UnitID_W;
				}
			}

			public WhereParameter StoreID
		    {
				get
		        {
					if(_StoreID_W == null)
	        	    {
						_StoreID_W = TearOff.StoreID;
					}
					return _StoreID_W;
				}
			}

			public WhereParameter StockedOut
		    {
				get
		        {
					if(_StockedOut_W == null)
	        	    {
						_StockedOut_W = TearOff.StockedOut;
					}
					return _StockedOut_W;
				}
			}

			public WhereParameter DeliveryNote
		    {
				get
		        {
					if(_DeliveryNote_W == null)
	        	    {
						_DeliveryNote_W = TearOff.DeliveryNote;
					}
					return _DeliveryNote_W;
				}
			}

			public WhereParameter PreferredManufacturerID
		    {
				get
		        {
					if(_PreferredManufacturerID_W == null)
	        	    {
						_PreferredManufacturerID_W = TearOff.PreferredManufacturerID;
					}
					return _PreferredManufacturerID_W;
				}
			}

			public WhereParameter PreferredExpiryDate
		    {
				get
		        {
					if(_PreferredExpiryDate_W == null)
	        	    {
						_PreferredExpiryDate_W = TearOff.PreferredExpiryDate;
					}
					return _PreferredExpiryDate_W;
				}
			}

			public WhereParameter PreferredPhysicalStoreID
		    {
				get
		        {
					if(_PreferredPhysicalStoreID_W == null)
	        	    {
						_PreferredPhysicalStoreID_W = TearOff.PreferredPhysicalStoreID;
					}
					return _PreferredPhysicalStoreID_W;
				}
			}

			public WhereParameter StockOnHand
		    {
				get
		        {
					if(_StockOnHand_W == null)
	        	    {
						_StockOnHand_W = TearOff.StockOnHand;
					}
					return _StockOnHand_W;
				}
			}

			public WhereParameter ExpiredStock
		    {
				get
		        {
					if(_ExpiredStock_W == null)
	        	    {
						_ExpiredStock_W = TearOff.ExpiredStock;
					}
					return _ExpiredStock_W;
				}
			}

			public WhereParameter DamagedStock
		    {
				get
		        {
					if(_DamagedStock_W == null)
	        	    {
						_DamagedStock_W = TearOff.DamagedStock;
					}
					return _DamagedStock_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _OrderID_W = null;
			private WhereParameter _ItemID_W = null;
			private WhereParameter _Pack_W = null;
			private WhereParameter _QtyPerPack_W = null;
			private WhereParameter _Quantity_W = null;
			private WhereParameter _ApprovedQuantity_W = null;
			private WhereParameter _Remark_W = null;
			private WhereParameter _HACTOrderDetailID_W = null;
			private WhereParameter _UnitID_W = null;
			private WhereParameter _StoreID_W = null;
			private WhereParameter _StockedOut_W = null;
			private WhereParameter _DeliveryNote_W = null;
			private WhereParameter _PreferredManufacturerID_W = null;
			private WhereParameter _PreferredExpiryDate_W = null;
			private WhereParameter _PreferredPhysicalStoreID_W = null;
			private WhereParameter _StockOnHand_W = null;
			private WhereParameter _ExpiredStock_W = null;
			private WhereParameter _DamagedStock_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_OrderID_W = null;
				_ItemID_W = null;
				_Pack_W = null;
				_QtyPerPack_W = null;
				_Quantity_W = null;
				_ApprovedQuantity_W = null;
				_Remark_W = null;
				_HACTOrderDetailID_W = null;
				_UnitID_W = null;
				_StoreID_W = null;
				_StockedOut_W = null;
				_DeliveryNote_W = null;
				_PreferredManufacturerID_W = null;
				_PreferredExpiryDate_W = null;
				_PreferredPhysicalStoreID_W = null;
				_StockOnHand_W = null;
				_ExpiredStock_W = null;
				_DamagedStock_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderID, Parameters.OrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ItemID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pack
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pack, Parameters.Pack);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter QtyPerPack
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.QtyPerPack, Parameters.QtyPerPack);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Quantity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Quantity, Parameters.Quantity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ApprovedQuantity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ApprovedQuantity, Parameters.ApprovedQuantity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Remark
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HACTOrderDetailID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HACTOrderDetailID, Parameters.HACTOrderDetailID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UnitID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitID, Parameters.UnitID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StoreID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StoreID, Parameters.StoreID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StockedOut
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StockedOut, Parameters.StockedOut);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeliveryNote
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryNote, Parameters.DeliveryNote);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PreferredManufacturerID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PreferredManufacturerID, Parameters.PreferredManufacturerID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PreferredExpiryDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PreferredExpiryDate, Parameters.PreferredExpiryDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PreferredPhysicalStoreID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PreferredPhysicalStoreID, Parameters.PreferredPhysicalStoreID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StockOnHand
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StockOnHand, Parameters.StockOnHand);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ExpiredStock
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExpiredStock, Parameters.ExpiredStock);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DamagedStock
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DamagedStock, Parameters.DamagedStock);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter OrderID
		    {
				get
		        {
					if(_OrderID_W == null)
	        	    {
						_OrderID_W = TearOff.OrderID;
					}
					return _OrderID_W;
				}
			}

			public AggregateParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public AggregateParameter Pack
		    {
				get
		        {
					if(_Pack_W == null)
	        	    {
						_Pack_W = TearOff.Pack;
					}
					return _Pack_W;
				}
			}

			public AggregateParameter QtyPerPack
		    {
				get
		        {
					if(_QtyPerPack_W == null)
	        	    {
						_QtyPerPack_W = TearOff.QtyPerPack;
					}
					return _QtyPerPack_W;
				}
			}

			public AggregateParameter Quantity
		    {
				get
		        {
					if(_Quantity_W == null)
	        	    {
						_Quantity_W = TearOff.Quantity;
					}
					return _Quantity_W;
				}
			}

			public AggregateParameter ApprovedQuantity
		    {
				get
		        {
					if(_ApprovedQuantity_W == null)
	        	    {
						_ApprovedQuantity_W = TearOff.ApprovedQuantity;
					}
					return _ApprovedQuantity_W;
				}
			}

			public AggregateParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			public AggregateParameter HACTOrderDetailID
		    {
				get
		        {
					if(_HACTOrderDetailID_W == null)
	        	    {
						_HACTOrderDetailID_W = TearOff.HACTOrderDetailID;
					}
					return _HACTOrderDetailID_W;
				}
			}

			public AggregateParameter UnitID
		    {
				get
		        {
					if(_UnitID_W == null)
	        	    {
						_UnitID_W = TearOff.UnitID;
					}
					return _UnitID_W;
				}
			}

			public AggregateParameter StoreID
		    {
				get
		        {
					if(_StoreID_W == null)
	        	    {
						_StoreID_W = TearOff.StoreID;
					}
					return _StoreID_W;
				}
			}

			public AggregateParameter StockedOut
		    {
				get
		        {
					if(_StockedOut_W == null)
	        	    {
						_StockedOut_W = TearOff.StockedOut;
					}
					return _StockedOut_W;
				}
			}

			public AggregateParameter DeliveryNote
		    {
				get
		        {
					if(_DeliveryNote_W == null)
	        	    {
						_DeliveryNote_W = TearOff.DeliveryNote;
					}
					return _DeliveryNote_W;
				}
			}

			public AggregateParameter PreferredManufacturerID
		    {
				get
		        {
					if(_PreferredManufacturerID_W == null)
	        	    {
						_PreferredManufacturerID_W = TearOff.PreferredManufacturerID;
					}
					return _PreferredManufacturerID_W;
				}
			}

			public AggregateParameter PreferredExpiryDate
		    {
				get
		        {
					if(_PreferredExpiryDate_W == null)
	        	    {
						_PreferredExpiryDate_W = TearOff.PreferredExpiryDate;
					}
					return _PreferredExpiryDate_W;
				}
			}

			public AggregateParameter PreferredPhysicalStoreID
		    {
				get
		        {
					if(_PreferredPhysicalStoreID_W == null)
	        	    {
						_PreferredPhysicalStoreID_W = TearOff.PreferredPhysicalStoreID;
					}
					return _PreferredPhysicalStoreID_W;
				}
			}

			public AggregateParameter StockOnHand
		    {
				get
		        {
					if(_StockOnHand_W == null)
	        	    {
						_StockOnHand_W = TearOff.StockOnHand;
					}
					return _StockOnHand_W;
				}
			}

			public AggregateParameter ExpiredStock
		    {
				get
		        {
					if(_ExpiredStock_W == null)
	        	    {
						_ExpiredStock_W = TearOff.ExpiredStock;
					}
					return _ExpiredStock_W;
				}
			}

			public AggregateParameter DamagedStock
		    {
				get
		        {
					if(_DamagedStock_W == null)
	        	    {
						_DamagedStock_W = TearOff.DamagedStock;
					}
					return _DamagedStock_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _OrderID_W = null;
			private AggregateParameter _ItemID_W = null;
			private AggregateParameter _Pack_W = null;
			private AggregateParameter _QtyPerPack_W = null;
			private AggregateParameter _Quantity_W = null;
			private AggregateParameter _ApprovedQuantity_W = null;
			private AggregateParameter _Remark_W = null;
			private AggregateParameter _HACTOrderDetailID_W = null;
			private AggregateParameter _UnitID_W = null;
			private AggregateParameter _StoreID_W = null;
			private AggregateParameter _StockedOut_W = null;
			private AggregateParameter _DeliveryNote_W = null;
			private AggregateParameter _PreferredManufacturerID_W = null;
			private AggregateParameter _PreferredExpiryDate_W = null;
			private AggregateParameter _PreferredPhysicalStoreID_W = null;
			private AggregateParameter _StockOnHand_W = null;
			private AggregateParameter _ExpiredStock_W = null;
			private AggregateParameter _DamagedStock_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_OrderID_W = null;
				_ItemID_W = null;
				_Pack_W = null;
				_QtyPerPack_W = null;
				_Quantity_W = null;
				_ApprovedQuantity_W = null;
				_Remark_W = null;
				_HACTOrderDetailID_W = null;
				_UnitID_W = null;
				_StoreID_W = null;
				_StockedOut_W = null;
				_DeliveryNote_W = null;
				_PreferredManufacturerID_W = null;
				_PreferredExpiryDate_W = null;
				_PreferredPhysicalStoreID_W = null;
				_StockOnHand_W = null;
				_ExpiredStock_W = null;
				_DamagedStock_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_OrderDetailInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_OrderDetailUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_OrderDetailDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrderID);
			p.SourceColumn = ColumnNames.OrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ItemID);
			p.SourceColumn = ColumnNames.ItemID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Pack);
			p.SourceColumn = ColumnNames.Pack;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.QtyPerPack);
			p.SourceColumn = ColumnNames.QtyPerPack;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Quantity);
			p.SourceColumn = ColumnNames.Quantity;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ApprovedQuantity);
			p.SourceColumn = ColumnNames.ApprovedQuantity;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Remark);
			p.SourceColumn = ColumnNames.Remark;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HACTOrderDetailID);
			p.SourceColumn = ColumnNames.HACTOrderDetailID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UnitID);
			p.SourceColumn = ColumnNames.UnitID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StoreID);
			p.SourceColumn = ColumnNames.StoreID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StockedOut);
			p.SourceColumn = ColumnNames.StockedOut;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeliveryNote);
			p.SourceColumn = ColumnNames.DeliveryNote;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PreferredManufacturerID);
			p.SourceColumn = ColumnNames.PreferredManufacturerID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PreferredExpiryDate);
			p.SourceColumn = ColumnNames.PreferredExpiryDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PreferredPhysicalStoreID);
			p.SourceColumn = ColumnNames.PreferredPhysicalStoreID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StockOnHand);
			p.SourceColumn = ColumnNames.StockOnHand;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ExpiredStock);
			p.SourceColumn = ColumnNames.ExpiredStock;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DamagedStock);
			p.SourceColumn = ColumnNames.DamagedStock;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
