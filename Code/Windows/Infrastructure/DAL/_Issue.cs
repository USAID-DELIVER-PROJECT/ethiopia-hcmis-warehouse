
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _Issue : SqlClientEntity
	{
		public _Issue()
		{
			this.QuerySource = "Issue";
			this.MappingName = "Issue";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_IssueLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_IssueLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PrintedDate
			{
				get
				{
					return new SqlParameter("@PrintedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter RefNo
			{
				get
				{
					return new SqlParameter("@RefNo", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter PickListID
			{
				get
				{
					return new SqlParameter("@PickListID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SupplierID
			{
				get
				{
					return new SqlParameter("@SupplierID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsReprintOf
			{
				get
				{
					return new SqlParameter("@IsReprintOf", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Reason
			{
				get
				{
					return new SqlParameter("@Reason", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StoreID
			{
				get
				{
					return new SqlParameter("@StoreID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IDPrinted
			{
				get
				{
					return new SqlParameter("@IDPrinted", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter VoidRequest
			{
				get
				{
					return new SqlParameter("@VoidRequest", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter VoidRequestDateTime
			{
				get
				{
					return new SqlParameter("@VoidRequestDateTime", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter VoidRequestUserID
			{
				get
				{
					return new SqlParameter("@VoidRequestUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsVoided
			{
				get
				{
					return new SqlParameter("@IsVoided", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter VoidApprovedByUserID
			{
				get
				{
					return new SqlParameter("@VoidApprovedByUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter VoidApprovalDateTime
			{
				get
				{
					return new SqlParameter("@VoidApprovalDateTime", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter PrePrintedInvoiceNo
			{
				get
				{
					return new SqlParameter("@PrePrintedInvoiceNo", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ReceivingUnitID
			{
				get
				{
					return new SqlParameter("@ReceivingUnitID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsDeliveryNote
			{
				get
				{
					return new SqlParameter("@IsDeliveryNote", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter HasDeliveryNoteBeenConverted
			{
				get
				{
					return new SqlParameter("@HasDeliveryNoteBeenConverted", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter HasInsurance
			{
				get
				{
					return new SqlParameter("@HasInsurance", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter InsuranceValue
			{
				get
				{
					return new SqlParameter("@InsuranceValue", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter WarehouseID
			{
				get
				{
					return new SqlParameter("@WarehouseID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PaymentTypeID
			{
				get
				{
					return new SqlParameter("@PaymentTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OrderID
			{
				get
				{
					return new SqlParameter("@OrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsChecked
			{
				get
				{
					return new SqlParameter("@IsChecked", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter InstitutionName
			{
				get
				{
					return new SqlParameter("@InstitutionName", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter FiscalYearID
			{
				get
				{
					return new SqlParameter("@FiscalYearID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AccountID
			{
				get
				{
					return new SqlParameter("@AccountID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DocumentTypeID
			{
				get
				{
					return new SqlParameter("@DocumentTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UniqueIDPrinted
			{
				get
				{
					return new SqlParameter("@UniqueIDPrinted", SqlDbType.VarChar, 162);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string PrintedDate = "PrintedDate";
            public const string RefNo = "RefNo";
            public const string PickListID = "PickListID";
            public const string SupplierID = "SupplierID";
            public const string IsReprintOf = "IsReprintOf";
            public const string Reason = "Reason";
            public const string UserID = "UserID";
            public const string StoreID = "StoreID";
            public const string IDPrinted = "IDPrinted";
            public const string VoidRequest = "VoidRequest";
            public const string VoidRequestDateTime = "VoidRequestDateTime";
            public const string VoidRequestUserID = "VoidRequestUserID";
            public const string IsVoided = "IsVoided";
            public const string VoidApprovedByUserID = "VoidApprovedByUserID";
            public const string VoidApprovalDateTime = "VoidApprovalDateTime";
            public const string PrePrintedInvoiceNo = "PrePrintedInvoiceNo";
            public const string ReceivingUnitID = "ReceivingUnitID";
            public const string IsDeliveryNote = "IsDeliveryNote";
            public const string HasDeliveryNoteBeenConverted = "HasDeliveryNoteBeenConverted";
            public const string HasInsurance = "HasInsurance";
            public const string InsuranceValue = "InsuranceValue";
            public const string WarehouseID = "WarehouseID";
            public const string PaymentTypeID = "PaymentTypeID";
            public const string OrderID = "OrderID";
            public const string IsChecked = "IsChecked";
            public const string InstitutionName = "InstitutionName";
            public const string FiscalYearID = "FiscalYearID";
            public const string AccountID = "AccountID";
            public const string DocumentTypeID = "DocumentTypeID";
            public const string UniqueIDPrinted = "UniqueIDPrinted";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _Issue.PropertyNames.ID;
					ht[PrintedDate] = _Issue.PropertyNames.PrintedDate;
					ht[RefNo] = _Issue.PropertyNames.RefNo;
					ht[PickListID] = _Issue.PropertyNames.PickListID;
					ht[SupplierID] = _Issue.PropertyNames.SupplierID;
					ht[IsReprintOf] = _Issue.PropertyNames.IsReprintOf;
					ht[Reason] = _Issue.PropertyNames.Reason;
					ht[UserID] = _Issue.PropertyNames.UserID;
					ht[StoreID] = _Issue.PropertyNames.StoreID;
					ht[IDPrinted] = _Issue.PropertyNames.IDPrinted;
					ht[VoidRequest] = _Issue.PropertyNames.VoidRequest;
					ht[VoidRequestDateTime] = _Issue.PropertyNames.VoidRequestDateTime;
					ht[VoidRequestUserID] = _Issue.PropertyNames.VoidRequestUserID;
					ht[IsVoided] = _Issue.PropertyNames.IsVoided;
					ht[VoidApprovedByUserID] = _Issue.PropertyNames.VoidApprovedByUserID;
					ht[VoidApprovalDateTime] = _Issue.PropertyNames.VoidApprovalDateTime;
					ht[PrePrintedInvoiceNo] = _Issue.PropertyNames.PrePrintedInvoiceNo;
					ht[ReceivingUnitID] = _Issue.PropertyNames.ReceivingUnitID;
					ht[IsDeliveryNote] = _Issue.PropertyNames.IsDeliveryNote;
					ht[HasDeliveryNoteBeenConverted] = _Issue.PropertyNames.HasDeliveryNoteBeenConverted;
					ht[HasInsurance] = _Issue.PropertyNames.HasInsurance;
					ht[InsuranceValue] = _Issue.PropertyNames.InsuranceValue;
					ht[WarehouseID] = _Issue.PropertyNames.WarehouseID;
					ht[PaymentTypeID] = _Issue.PropertyNames.PaymentTypeID;
					ht[OrderID] = _Issue.PropertyNames.OrderID;
					ht[IsChecked] = _Issue.PropertyNames.IsChecked;
					ht[InstitutionName] = _Issue.PropertyNames.InstitutionName;
					ht[FiscalYearID] = _Issue.PropertyNames.FiscalYearID;
					ht[AccountID] = _Issue.PropertyNames.AccountID;
					ht[DocumentTypeID] = _Issue.PropertyNames.DocumentTypeID;
					ht[UniqueIDPrinted] = _Issue.PropertyNames.UniqueIDPrinted;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string PrintedDate = "PrintedDate";
            public const string RefNo = "RefNo";
            public const string PickListID = "PickListID";
            public const string SupplierID = "SupplierID";
            public const string IsReprintOf = "IsReprintOf";
            public const string Reason = "Reason";
            public const string UserID = "UserID";
            public const string StoreID = "StoreID";
            public const string IDPrinted = "IDPrinted";
            public const string VoidRequest = "VoidRequest";
            public const string VoidRequestDateTime = "VoidRequestDateTime";
            public const string VoidRequestUserID = "VoidRequestUserID";
            public const string IsVoided = "IsVoided";
            public const string VoidApprovedByUserID = "VoidApprovedByUserID";
            public const string VoidApprovalDateTime = "VoidApprovalDateTime";
            public const string PrePrintedInvoiceNo = "PrePrintedInvoiceNo";
            public const string ReceivingUnitID = "ReceivingUnitID";
            public const string IsDeliveryNote = "IsDeliveryNote";
            public const string HasDeliveryNoteBeenConverted = "HasDeliveryNoteBeenConverted";
            public const string HasInsurance = "HasInsurance";
            public const string InsuranceValue = "InsuranceValue";
            public const string WarehouseID = "WarehouseID";
            public const string PaymentTypeID = "PaymentTypeID";
            public const string OrderID = "OrderID";
            public const string IsChecked = "IsChecked";
            public const string InstitutionName = "InstitutionName";
            public const string FiscalYearID = "FiscalYearID";
            public const string AccountID = "AccountID";
            public const string DocumentTypeID = "DocumentTypeID";
            public const string UniqueIDPrinted = "UniqueIDPrinted";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _Issue.ColumnNames.ID;
					ht[PrintedDate] = _Issue.ColumnNames.PrintedDate;
					ht[RefNo] = _Issue.ColumnNames.RefNo;
					ht[PickListID] = _Issue.ColumnNames.PickListID;
					ht[SupplierID] = _Issue.ColumnNames.SupplierID;
					ht[IsReprintOf] = _Issue.ColumnNames.IsReprintOf;
					ht[Reason] = _Issue.ColumnNames.Reason;
					ht[UserID] = _Issue.ColumnNames.UserID;
					ht[StoreID] = _Issue.ColumnNames.StoreID;
					ht[IDPrinted] = _Issue.ColumnNames.IDPrinted;
					ht[VoidRequest] = _Issue.ColumnNames.VoidRequest;
					ht[VoidRequestDateTime] = _Issue.ColumnNames.VoidRequestDateTime;
					ht[VoidRequestUserID] = _Issue.ColumnNames.VoidRequestUserID;
					ht[IsVoided] = _Issue.ColumnNames.IsVoided;
					ht[VoidApprovedByUserID] = _Issue.ColumnNames.VoidApprovedByUserID;
					ht[VoidApprovalDateTime] = _Issue.ColumnNames.VoidApprovalDateTime;
					ht[PrePrintedInvoiceNo] = _Issue.ColumnNames.PrePrintedInvoiceNo;
					ht[ReceivingUnitID] = _Issue.ColumnNames.ReceivingUnitID;
					ht[IsDeliveryNote] = _Issue.ColumnNames.IsDeliveryNote;
					ht[HasDeliveryNoteBeenConverted] = _Issue.ColumnNames.HasDeliveryNoteBeenConverted;
					ht[HasInsurance] = _Issue.ColumnNames.HasInsurance;
					ht[InsuranceValue] = _Issue.ColumnNames.InsuranceValue;
					ht[WarehouseID] = _Issue.ColumnNames.WarehouseID;
					ht[PaymentTypeID] = _Issue.ColumnNames.PaymentTypeID;
					ht[OrderID] = _Issue.ColumnNames.OrderID;
					ht[IsChecked] = _Issue.ColumnNames.IsChecked;
					ht[InstitutionName] = _Issue.ColumnNames.InstitutionName;
					ht[FiscalYearID] = _Issue.ColumnNames.FiscalYearID;
					ht[AccountID] = _Issue.ColumnNames.AccountID;
					ht[DocumentTypeID] = _Issue.ColumnNames.DocumentTypeID;
					ht[UniqueIDPrinted] = _Issue.ColumnNames.UniqueIDPrinted;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string PrintedDate = "s_PrintedDate";
            public const string RefNo = "s_RefNo";
            public const string PickListID = "s_PickListID";
            public const string SupplierID = "s_SupplierID";
            public const string IsReprintOf = "s_IsReprintOf";
            public const string Reason = "s_Reason";
            public const string UserID = "s_UserID";
            public const string StoreID = "s_StoreID";
            public const string IDPrinted = "s_IDPrinted";
            public const string VoidRequest = "s_VoidRequest";
            public const string VoidRequestDateTime = "s_VoidRequestDateTime";
            public const string VoidRequestUserID = "s_VoidRequestUserID";
            public const string IsVoided = "s_IsVoided";
            public const string VoidApprovedByUserID = "s_VoidApprovedByUserID";
            public const string VoidApprovalDateTime = "s_VoidApprovalDateTime";
            public const string PrePrintedInvoiceNo = "s_PrePrintedInvoiceNo";
            public const string ReceivingUnitID = "s_ReceivingUnitID";
            public const string IsDeliveryNote = "s_IsDeliveryNote";
            public const string HasDeliveryNoteBeenConverted = "s_HasDeliveryNoteBeenConverted";
            public const string HasInsurance = "s_HasInsurance";
            public const string InsuranceValue = "s_InsuranceValue";
            public const string WarehouseID = "s_WarehouseID";
            public const string PaymentTypeID = "s_PaymentTypeID";
            public const string OrderID = "s_OrderID";
            public const string IsChecked = "s_IsChecked";
            public const string InstitutionName = "s_InstitutionName";
            public const string FiscalYearID = "s_FiscalYearID";
            public const string AccountID = "s_AccountID";
            public const string DocumentTypeID = "s_DocumentTypeID";
            public const string UniqueIDPrinted = "s_UniqueIDPrinted";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual DateTime PrintedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.PrintedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.PrintedDate, value);
			}
		}

		public virtual string RefNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.RefNo);
			}
			set
	        {
				base.Setstring(ColumnNames.RefNo, value);
			}
		}

		public virtual int PickListID
	    {
			get
	        {
				return base.Getint(ColumnNames.PickListID);
			}
			set
	        {
				base.Setint(ColumnNames.PickListID, value);
			}
		}

		public virtual int SupplierID
	    {
			get
	        {
				return base.Getint(ColumnNames.SupplierID);
			}
			set
	        {
				base.Setint(ColumnNames.SupplierID, value);
			}
		}

		public virtual int IsReprintOf
	    {
			get
	        {
				return base.Getint(ColumnNames.IsReprintOf);
			}
			set
	        {
				base.Setint(ColumnNames.IsReprintOf, value);
			}
		}

		public virtual string Reason
	    {
			get
	        {
				return base.Getstring(ColumnNames.Reason);
			}
			set
	        {
				base.Setstring(ColumnNames.Reason, value);
			}
		}

		public virtual int UserID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserID);
			}
			set
	        {
				base.Setint(ColumnNames.UserID, value);
			}
		}

		public virtual int StoreID
	    {
			get
	        {
				return base.Getint(ColumnNames.StoreID);
			}
			set
	        {
				base.Setint(ColumnNames.StoreID, value);
			}
		}

		public virtual int IDPrinted
	    {
			get
	        {
				return base.Getint(ColumnNames.IDPrinted);
			}
			set
	        {
				base.Setint(ColumnNames.IDPrinted, value);
			}
		}

		public virtual bool VoidRequest
	    {
			get
	        {
				return base.Getbool(ColumnNames.VoidRequest);
			}
			set
	        {
				base.Setbool(ColumnNames.VoidRequest, value);
			}
		}

		public virtual DateTime VoidRequestDateTime
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.VoidRequestDateTime);
			}
			set
	        {
				base.SetDateTime(ColumnNames.VoidRequestDateTime, value);
			}
		}

		public virtual int VoidRequestUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.VoidRequestUserID);
			}
			set
	        {
				base.Setint(ColumnNames.VoidRequestUserID, value);
			}
		}

		public virtual bool IsVoided
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsVoided);
			}
			set
	        {
				base.Setbool(ColumnNames.IsVoided, value);
			}
		}

		public virtual int VoidApprovedByUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.VoidApprovedByUserID);
			}
			set
	        {
				base.Setint(ColumnNames.VoidApprovedByUserID, value);
			}
		}

		public virtual DateTime VoidApprovalDateTime
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.VoidApprovalDateTime);
			}
			set
	        {
				base.SetDateTime(ColumnNames.VoidApprovalDateTime, value);
			}
		}

		public virtual int PrePrintedInvoiceNo
	    {
			get
	        {
				return base.Getint(ColumnNames.PrePrintedInvoiceNo);
			}
			set
	        {
				base.Setint(ColumnNames.PrePrintedInvoiceNo, value);
			}
		}

		public virtual int ReceivingUnitID
	    {
			get
	        {
				return base.Getint(ColumnNames.ReceivingUnitID);
			}
			set
	        {
				base.Setint(ColumnNames.ReceivingUnitID, value);
			}
		}

		public virtual bool IsDeliveryNote
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsDeliveryNote);
			}
			set
	        {
				base.Setbool(ColumnNames.IsDeliveryNote, value);
			}
		}

		public virtual bool HasDeliveryNoteBeenConverted
	    {
			get
	        {
				return base.Getbool(ColumnNames.HasDeliveryNoteBeenConverted);
			}
			set
	        {
				base.Setbool(ColumnNames.HasDeliveryNoteBeenConverted, value);
			}
		}

		public virtual bool HasInsurance
	    {
			get
	        {
				return base.Getbool(ColumnNames.HasInsurance);
			}
			set
	        {
				base.Setbool(ColumnNames.HasInsurance, value);
			}
		}

		public virtual double InsuranceValue
	    {
			get
	        {
				return base.Getdouble(ColumnNames.InsuranceValue);
			}
			set
	        {
				base.Setdouble(ColumnNames.InsuranceValue, value);
			}
		}

		public virtual int WarehouseID
	    {
			get
	        {
				return base.Getint(ColumnNames.WarehouseID);
			}
			set
	        {
				base.Setint(ColumnNames.WarehouseID, value);
			}
		}

		public virtual int PaymentTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.PaymentTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.PaymentTypeID, value);
			}
		}

		public virtual int OrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.OrderID);
			}
			set
	        {
				base.Setint(ColumnNames.OrderID, value);
			}
		}

		public virtual bool IsChecked
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsChecked);
			}
			set
	        {
				base.Setbool(ColumnNames.IsChecked, value);
			}
		}

		public virtual string InstitutionName
	    {
			get
	        {
				return base.Getstring(ColumnNames.InstitutionName);
			}
			set
	        {
				base.Setstring(ColumnNames.InstitutionName, value);
			}
		}

		public virtual int FiscalYearID
	    {
			get
	        {
				return base.Getint(ColumnNames.FiscalYearID);
			}
			set
	        {
				base.Setint(ColumnNames.FiscalYearID, value);
			}
		}

		public virtual int AccountID
	    {
			get
	        {
				return base.Getint(ColumnNames.AccountID);
			}
			set
	        {
				base.Setint(ColumnNames.AccountID, value);
			}
		}

		public virtual int DocumentTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.DocumentTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.DocumentTypeID, value);
			}
		}

		public virtual string UniqueIDPrinted
	    {
			get
	        {
				return base.Getstring(ColumnNames.UniqueIDPrinted);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_PrintedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PrintedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.PrintedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PrintedDate);
				else
					this.PrintedDate = base.SetDateTimeAsString(ColumnNames.PrintedDate, value);
			}
		}

		public virtual string s_RefNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RefNo) ? string.Empty : base.GetstringAsString(ColumnNames.RefNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RefNo);
				else
					this.RefNo = base.SetstringAsString(ColumnNames.RefNo, value);
			}
		}

		public virtual string s_PickListID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PickListID) ? string.Empty : base.GetintAsString(ColumnNames.PickListID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PickListID);
				else
					this.PickListID = base.SetintAsString(ColumnNames.PickListID, value);
			}
		}

		public virtual string s_SupplierID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SupplierID) ? string.Empty : base.GetintAsString(ColumnNames.SupplierID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SupplierID);
				else
					this.SupplierID = base.SetintAsString(ColumnNames.SupplierID, value);
			}
		}

		public virtual string s_IsReprintOf
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsReprintOf) ? string.Empty : base.GetintAsString(ColumnNames.IsReprintOf);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsReprintOf);
				else
					this.IsReprintOf = base.SetintAsString(ColumnNames.IsReprintOf, value);
			}
		}

		public virtual string s_Reason
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Reason) ? string.Empty : base.GetstringAsString(ColumnNames.Reason);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Reason);
				else
					this.Reason = base.SetstringAsString(ColumnNames.Reason, value);
			}
		}

		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetintAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_StoreID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StoreID) ? string.Empty : base.GetintAsString(ColumnNames.StoreID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StoreID);
				else
					this.StoreID = base.SetintAsString(ColumnNames.StoreID, value);
			}
		}

		public virtual string s_IDPrinted
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IDPrinted) ? string.Empty : base.GetintAsString(ColumnNames.IDPrinted);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IDPrinted);
				else
					this.IDPrinted = base.SetintAsString(ColumnNames.IDPrinted, value);
			}
		}

		public virtual string s_VoidRequest
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VoidRequest) ? string.Empty : base.GetboolAsString(ColumnNames.VoidRequest);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VoidRequest);
				else
					this.VoidRequest = base.SetboolAsString(ColumnNames.VoidRequest, value);
			}
		}

		public virtual string s_VoidRequestDateTime
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VoidRequestDateTime) ? string.Empty : base.GetDateTimeAsString(ColumnNames.VoidRequestDateTime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VoidRequestDateTime);
				else
					this.VoidRequestDateTime = base.SetDateTimeAsString(ColumnNames.VoidRequestDateTime, value);
			}
		}

		public virtual string s_VoidRequestUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VoidRequestUserID) ? string.Empty : base.GetintAsString(ColumnNames.VoidRequestUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VoidRequestUserID);
				else
					this.VoidRequestUserID = base.SetintAsString(ColumnNames.VoidRequestUserID, value);
			}
		}

		public virtual string s_IsVoided
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsVoided) ? string.Empty : base.GetboolAsString(ColumnNames.IsVoided);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsVoided);
				else
					this.IsVoided = base.SetboolAsString(ColumnNames.IsVoided, value);
			}
		}

		public virtual string s_VoidApprovedByUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VoidApprovedByUserID) ? string.Empty : base.GetintAsString(ColumnNames.VoidApprovedByUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VoidApprovedByUserID);
				else
					this.VoidApprovedByUserID = base.SetintAsString(ColumnNames.VoidApprovedByUserID, value);
			}
		}

		public virtual string s_VoidApprovalDateTime
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VoidApprovalDateTime) ? string.Empty : base.GetDateTimeAsString(ColumnNames.VoidApprovalDateTime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VoidApprovalDateTime);
				else
					this.VoidApprovalDateTime = base.SetDateTimeAsString(ColumnNames.VoidApprovalDateTime, value);
			}
		}

		public virtual string s_PrePrintedInvoiceNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PrePrintedInvoiceNo) ? string.Empty : base.GetintAsString(ColumnNames.PrePrintedInvoiceNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PrePrintedInvoiceNo);
				else
					this.PrePrintedInvoiceNo = base.SetintAsString(ColumnNames.PrePrintedInvoiceNo, value);
			}
		}

		public virtual string s_ReceivingUnitID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceivingUnitID) ? string.Empty : base.GetintAsString(ColumnNames.ReceivingUnitID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceivingUnitID);
				else
					this.ReceivingUnitID = base.SetintAsString(ColumnNames.ReceivingUnitID, value);
			}
		}

		public virtual string s_IsDeliveryNote
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsDeliveryNote) ? string.Empty : base.GetboolAsString(ColumnNames.IsDeliveryNote);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsDeliveryNote);
				else
					this.IsDeliveryNote = base.SetboolAsString(ColumnNames.IsDeliveryNote, value);
			}
		}

		public virtual string s_HasDeliveryNoteBeenConverted
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HasDeliveryNoteBeenConverted) ? string.Empty : base.GetboolAsString(ColumnNames.HasDeliveryNoteBeenConverted);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HasDeliveryNoteBeenConverted);
				else
					this.HasDeliveryNoteBeenConverted = base.SetboolAsString(ColumnNames.HasDeliveryNoteBeenConverted, value);
			}
		}

		public virtual string s_HasInsurance
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HasInsurance) ? string.Empty : base.GetboolAsString(ColumnNames.HasInsurance);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HasInsurance);
				else
					this.HasInsurance = base.SetboolAsString(ColumnNames.HasInsurance, value);
			}
		}

		public virtual string s_InsuranceValue
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InsuranceValue) ? string.Empty : base.GetdoubleAsString(ColumnNames.InsuranceValue);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InsuranceValue);
				else
					this.InsuranceValue = base.SetdoubleAsString(ColumnNames.InsuranceValue, value);
			}
		}

		public virtual string s_WarehouseID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WarehouseID) ? string.Empty : base.GetintAsString(ColumnNames.WarehouseID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WarehouseID);
				else
					this.WarehouseID = base.SetintAsString(ColumnNames.WarehouseID, value);
			}
		}

		public virtual string s_PaymentTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PaymentTypeID) ? string.Empty : base.GetintAsString(ColumnNames.PaymentTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PaymentTypeID);
				else
					this.PaymentTypeID = base.SetintAsString(ColumnNames.PaymentTypeID, value);
			}
		}

		public virtual string s_OrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderID) ? string.Empty : base.GetintAsString(ColumnNames.OrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderID);
				else
					this.OrderID = base.SetintAsString(ColumnNames.OrderID, value);
			}
		}

		public virtual string s_IsChecked
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsChecked) ? string.Empty : base.GetboolAsString(ColumnNames.IsChecked);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsChecked);
				else
					this.IsChecked = base.SetboolAsString(ColumnNames.IsChecked, value);
			}
		}

		public virtual string s_InstitutionName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InstitutionName) ? string.Empty : base.GetstringAsString(ColumnNames.InstitutionName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InstitutionName);
				else
					this.InstitutionName = base.SetstringAsString(ColumnNames.InstitutionName, value);
			}
		}

		public virtual string s_FiscalYearID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FiscalYearID) ? string.Empty : base.GetintAsString(ColumnNames.FiscalYearID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FiscalYearID);
				else
					this.FiscalYearID = base.SetintAsString(ColumnNames.FiscalYearID, value);
			}
		}

		public virtual string s_AccountID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AccountID) ? string.Empty : base.GetintAsString(ColumnNames.AccountID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AccountID);
				else
					this.AccountID = base.SetintAsString(ColumnNames.AccountID, value);
			}
		}

		public virtual string s_DocumentTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DocumentTypeID) ? string.Empty : base.GetintAsString(ColumnNames.DocumentTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DocumentTypeID);
				else
					this.DocumentTypeID = base.SetintAsString(ColumnNames.DocumentTypeID, value);
			}
		}

		public virtual string s_UniqueIDPrinted
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UniqueIDPrinted) ? string.Empty : base.GetstringAsString(ColumnNames.UniqueIDPrinted);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PrintedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PrintedDate, Parameters.PrintedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RefNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RefNo, Parameters.RefNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PickListID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PickListID, Parameters.PickListID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SupplierID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SupplierID, Parameters.SupplierID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsReprintOf
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsReprintOf, Parameters.IsReprintOf);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Reason
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Reason, Parameters.Reason);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StoreID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StoreID, Parameters.StoreID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IDPrinted
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IDPrinted, Parameters.IDPrinted);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter VoidRequest
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VoidRequest, Parameters.VoidRequest);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter VoidRequestDateTime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VoidRequestDateTime, Parameters.VoidRequestDateTime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter VoidRequestUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VoidRequestUserID, Parameters.VoidRequestUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsVoided
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsVoided, Parameters.IsVoided);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter VoidApprovedByUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VoidApprovedByUserID, Parameters.VoidApprovedByUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter VoidApprovalDateTime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VoidApprovalDateTime, Parameters.VoidApprovalDateTime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PrePrintedInvoiceNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PrePrintedInvoiceNo, Parameters.PrePrintedInvoiceNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReceivingUnitID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceivingUnitID, Parameters.ReceivingUnitID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsDeliveryNote
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsDeliveryNote, Parameters.IsDeliveryNote);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HasDeliveryNoteBeenConverted
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HasDeliveryNoteBeenConverted, Parameters.HasDeliveryNoteBeenConverted);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HasInsurance
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HasInsurance, Parameters.HasInsurance);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InsuranceValue
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InsuranceValue, Parameters.InsuranceValue);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WarehouseID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WarehouseID, Parameters.WarehouseID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PaymentTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PaymentTypeID, Parameters.PaymentTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderID, Parameters.OrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsChecked
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsChecked, Parameters.IsChecked);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InstitutionName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InstitutionName, Parameters.InstitutionName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FiscalYearID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FiscalYearID, Parameters.FiscalYearID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AccountID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AccountID, Parameters.AccountID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DocumentTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DocumentTypeID, Parameters.DocumentTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UniqueIDPrinted
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UniqueIDPrinted, Parameters.UniqueIDPrinted);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter PrintedDate
		    {
				get
		        {
					if(_PrintedDate_W == null)
	        	    {
						_PrintedDate_W = TearOff.PrintedDate;
					}
					return _PrintedDate_W;
				}
			}

			public WhereParameter RefNo
		    {
				get
		        {
					if(_RefNo_W == null)
	        	    {
						_RefNo_W = TearOff.RefNo;
					}
					return _RefNo_W;
				}
			}

			public WhereParameter PickListID
		    {
				get
		        {
					if(_PickListID_W == null)
	        	    {
						_PickListID_W = TearOff.PickListID;
					}
					return _PickListID_W;
				}
			}

			public WhereParameter SupplierID
		    {
				get
		        {
					if(_SupplierID_W == null)
	        	    {
						_SupplierID_W = TearOff.SupplierID;
					}
					return _SupplierID_W;
				}
			}

			public WhereParameter IsReprintOf
		    {
				get
		        {
					if(_IsReprintOf_W == null)
	        	    {
						_IsReprintOf_W = TearOff.IsReprintOf;
					}
					return _IsReprintOf_W;
				}
			}

			public WhereParameter Reason
		    {
				get
		        {
					if(_Reason_W == null)
	        	    {
						_Reason_W = TearOff.Reason;
					}
					return _Reason_W;
				}
			}

			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter StoreID
		    {
				get
		        {
					if(_StoreID_W == null)
	        	    {
						_StoreID_W = TearOff.StoreID;
					}
					return _StoreID_W;
				}
			}

			public WhereParameter IDPrinted
		    {
				get
		        {
					if(_IDPrinted_W == null)
	        	    {
						_IDPrinted_W = TearOff.IDPrinted;
					}
					return _IDPrinted_W;
				}
			}

			public WhereParameter VoidRequest
		    {
				get
		        {
					if(_VoidRequest_W == null)
	        	    {
						_VoidRequest_W = TearOff.VoidRequest;
					}
					return _VoidRequest_W;
				}
			}

			public WhereParameter VoidRequestDateTime
		    {
				get
		        {
					if(_VoidRequestDateTime_W == null)
	        	    {
						_VoidRequestDateTime_W = TearOff.VoidRequestDateTime;
					}
					return _VoidRequestDateTime_W;
				}
			}

			public WhereParameter VoidRequestUserID
		    {
				get
		        {
					if(_VoidRequestUserID_W == null)
	        	    {
						_VoidRequestUserID_W = TearOff.VoidRequestUserID;
					}
					return _VoidRequestUserID_W;
				}
			}

			public WhereParameter IsVoided
		    {
				get
		        {
					if(_IsVoided_W == null)
	        	    {
						_IsVoided_W = TearOff.IsVoided;
					}
					return _IsVoided_W;
				}
			}

			public WhereParameter VoidApprovedByUserID
		    {
				get
		        {
					if(_VoidApprovedByUserID_W == null)
	        	    {
						_VoidApprovedByUserID_W = TearOff.VoidApprovedByUserID;
					}
					return _VoidApprovedByUserID_W;
				}
			}

			public WhereParameter VoidApprovalDateTime
		    {
				get
		        {
					if(_VoidApprovalDateTime_W == null)
	        	    {
						_VoidApprovalDateTime_W = TearOff.VoidApprovalDateTime;
					}
					return _VoidApprovalDateTime_W;
				}
			}

			public WhereParameter PrePrintedInvoiceNo
		    {
				get
		        {
					if(_PrePrintedInvoiceNo_W == null)
	        	    {
						_PrePrintedInvoiceNo_W = TearOff.PrePrintedInvoiceNo;
					}
					return _PrePrintedInvoiceNo_W;
				}
			}

			public WhereParameter ReceivingUnitID
		    {
				get
		        {
					if(_ReceivingUnitID_W == null)
	        	    {
						_ReceivingUnitID_W = TearOff.ReceivingUnitID;
					}
					return _ReceivingUnitID_W;
				}
			}

			public WhereParameter IsDeliveryNote
		    {
				get
		        {
					if(_IsDeliveryNote_W == null)
	        	    {
						_IsDeliveryNote_W = TearOff.IsDeliveryNote;
					}
					return _IsDeliveryNote_W;
				}
			}

			public WhereParameter HasDeliveryNoteBeenConverted
		    {
				get
		        {
					if(_HasDeliveryNoteBeenConverted_W == null)
	        	    {
						_HasDeliveryNoteBeenConverted_W = TearOff.HasDeliveryNoteBeenConverted;
					}
					return _HasDeliveryNoteBeenConverted_W;
				}
			}

			public WhereParameter HasInsurance
		    {
				get
		        {
					if(_HasInsurance_W == null)
	        	    {
						_HasInsurance_W = TearOff.HasInsurance;
					}
					return _HasInsurance_W;
				}
			}

			public WhereParameter InsuranceValue
		    {
				get
		        {
					if(_InsuranceValue_W == null)
	        	    {
						_InsuranceValue_W = TearOff.InsuranceValue;
					}
					return _InsuranceValue_W;
				}
			}

			public WhereParameter WarehouseID
		    {
				get
		        {
					if(_WarehouseID_W == null)
	        	    {
						_WarehouseID_W = TearOff.WarehouseID;
					}
					return _WarehouseID_W;
				}
			}

			public WhereParameter PaymentTypeID
		    {
				get
		        {
					if(_PaymentTypeID_W == null)
	        	    {
						_PaymentTypeID_W = TearOff.PaymentTypeID;
					}
					return _PaymentTypeID_W;
				}
			}

			public WhereParameter OrderID
		    {
				get
		        {
					if(_OrderID_W == null)
	        	    {
						_OrderID_W = TearOff.OrderID;
					}
					return _OrderID_W;
				}
			}

			public WhereParameter IsChecked
		    {
				get
		        {
					if(_IsChecked_W == null)
	        	    {
						_IsChecked_W = TearOff.IsChecked;
					}
					return _IsChecked_W;
				}
			}

			public WhereParameter InstitutionName
		    {
				get
		        {
					if(_InstitutionName_W == null)
	        	    {
						_InstitutionName_W = TearOff.InstitutionName;
					}
					return _InstitutionName_W;
				}
			}

			public WhereParameter FiscalYearID
		    {
				get
		        {
					if(_FiscalYearID_W == null)
	        	    {
						_FiscalYearID_W = TearOff.FiscalYearID;
					}
					return _FiscalYearID_W;
				}
			}

			public WhereParameter AccountID
		    {
				get
		        {
					if(_AccountID_W == null)
	        	    {
						_AccountID_W = TearOff.AccountID;
					}
					return _AccountID_W;
				}
			}

			public WhereParameter DocumentTypeID
		    {
				get
		        {
					if(_DocumentTypeID_W == null)
	        	    {
						_DocumentTypeID_W = TearOff.DocumentTypeID;
					}
					return _DocumentTypeID_W;
				}
			}

			public WhereParameter UniqueIDPrinted
		    {
				get
		        {
					if(_UniqueIDPrinted_W == null)
	        	    {
						_UniqueIDPrinted_W = TearOff.UniqueIDPrinted;
					}
					return _UniqueIDPrinted_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _PrintedDate_W = null;
			private WhereParameter _RefNo_W = null;
			private WhereParameter _PickListID_W = null;
			private WhereParameter _SupplierID_W = null;
			private WhereParameter _IsReprintOf_W = null;
			private WhereParameter _Reason_W = null;
			private WhereParameter _UserID_W = null;
			private WhereParameter _StoreID_W = null;
			private WhereParameter _IDPrinted_W = null;
			private WhereParameter _VoidRequest_W = null;
			private WhereParameter _VoidRequestDateTime_W = null;
			private WhereParameter _VoidRequestUserID_W = null;
			private WhereParameter _IsVoided_W = null;
			private WhereParameter _VoidApprovedByUserID_W = null;
			private WhereParameter _VoidApprovalDateTime_W = null;
			private WhereParameter _PrePrintedInvoiceNo_W = null;
			private WhereParameter _ReceivingUnitID_W = null;
			private WhereParameter _IsDeliveryNote_W = null;
			private WhereParameter _HasDeliveryNoteBeenConverted_W = null;
			private WhereParameter _HasInsurance_W = null;
			private WhereParameter _InsuranceValue_W = null;
			private WhereParameter _WarehouseID_W = null;
			private WhereParameter _PaymentTypeID_W = null;
			private WhereParameter _OrderID_W = null;
			private WhereParameter _IsChecked_W = null;
			private WhereParameter _InstitutionName_W = null;
			private WhereParameter _FiscalYearID_W = null;
			private WhereParameter _AccountID_W = null;
			private WhereParameter _DocumentTypeID_W = null;
			private WhereParameter _UniqueIDPrinted_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_PrintedDate_W = null;
				_RefNo_W = null;
				_PickListID_W = null;
				_SupplierID_W = null;
				_IsReprintOf_W = null;
				_Reason_W = null;
				_UserID_W = null;
				_StoreID_W = null;
				_IDPrinted_W = null;
				_VoidRequest_W = null;
				_VoidRequestDateTime_W = null;
				_VoidRequestUserID_W = null;
				_IsVoided_W = null;
				_VoidApprovedByUserID_W = null;
				_VoidApprovalDateTime_W = null;
				_PrePrintedInvoiceNo_W = null;
				_ReceivingUnitID_W = null;
				_IsDeliveryNote_W = null;
				_HasDeliveryNoteBeenConverted_W = null;
				_HasInsurance_W = null;
				_InsuranceValue_W = null;
				_WarehouseID_W = null;
				_PaymentTypeID_W = null;
				_OrderID_W = null;
				_IsChecked_W = null;
				_InstitutionName_W = null;
				_FiscalYearID_W = null;
				_AccountID_W = null;
				_DocumentTypeID_W = null;
				_UniqueIDPrinted_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PrintedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PrintedDate, Parameters.PrintedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RefNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RefNo, Parameters.RefNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PickListID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PickListID, Parameters.PickListID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SupplierID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SupplierID, Parameters.SupplierID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsReprintOf
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsReprintOf, Parameters.IsReprintOf);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Reason
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Reason, Parameters.Reason);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StoreID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StoreID, Parameters.StoreID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IDPrinted
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IDPrinted, Parameters.IDPrinted);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter VoidRequest
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VoidRequest, Parameters.VoidRequest);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter VoidRequestDateTime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VoidRequestDateTime, Parameters.VoidRequestDateTime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter VoidRequestUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VoidRequestUserID, Parameters.VoidRequestUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsVoided
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsVoided, Parameters.IsVoided);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter VoidApprovedByUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VoidApprovedByUserID, Parameters.VoidApprovedByUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter VoidApprovalDateTime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VoidApprovalDateTime, Parameters.VoidApprovalDateTime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PrePrintedInvoiceNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PrePrintedInvoiceNo, Parameters.PrePrintedInvoiceNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReceivingUnitID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceivingUnitID, Parameters.ReceivingUnitID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsDeliveryNote
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsDeliveryNote, Parameters.IsDeliveryNote);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HasDeliveryNoteBeenConverted
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HasDeliveryNoteBeenConverted, Parameters.HasDeliveryNoteBeenConverted);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HasInsurance
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HasInsurance, Parameters.HasInsurance);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InsuranceValue
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InsuranceValue, Parameters.InsuranceValue);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WarehouseID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WarehouseID, Parameters.WarehouseID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PaymentTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PaymentTypeID, Parameters.PaymentTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderID, Parameters.OrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsChecked
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsChecked, Parameters.IsChecked);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InstitutionName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InstitutionName, Parameters.InstitutionName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FiscalYearID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FiscalYearID, Parameters.FiscalYearID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AccountID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AccountID, Parameters.AccountID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DocumentTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DocumentTypeID, Parameters.DocumentTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UniqueIDPrinted
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UniqueIDPrinted, Parameters.UniqueIDPrinted);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter PrintedDate
		    {
				get
		        {
					if(_PrintedDate_W == null)
	        	    {
						_PrintedDate_W = TearOff.PrintedDate;
					}
					return _PrintedDate_W;
				}
			}

			public AggregateParameter RefNo
		    {
				get
		        {
					if(_RefNo_W == null)
	        	    {
						_RefNo_W = TearOff.RefNo;
					}
					return _RefNo_W;
				}
			}

			public AggregateParameter PickListID
		    {
				get
		        {
					if(_PickListID_W == null)
	        	    {
						_PickListID_W = TearOff.PickListID;
					}
					return _PickListID_W;
				}
			}

			public AggregateParameter SupplierID
		    {
				get
		        {
					if(_SupplierID_W == null)
	        	    {
						_SupplierID_W = TearOff.SupplierID;
					}
					return _SupplierID_W;
				}
			}

			public AggregateParameter IsReprintOf
		    {
				get
		        {
					if(_IsReprintOf_W == null)
	        	    {
						_IsReprintOf_W = TearOff.IsReprintOf;
					}
					return _IsReprintOf_W;
				}
			}

			public AggregateParameter Reason
		    {
				get
		        {
					if(_Reason_W == null)
	        	    {
						_Reason_W = TearOff.Reason;
					}
					return _Reason_W;
				}
			}

			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter StoreID
		    {
				get
		        {
					if(_StoreID_W == null)
	        	    {
						_StoreID_W = TearOff.StoreID;
					}
					return _StoreID_W;
				}
			}

			public AggregateParameter IDPrinted
		    {
				get
		        {
					if(_IDPrinted_W == null)
	        	    {
						_IDPrinted_W = TearOff.IDPrinted;
					}
					return _IDPrinted_W;
				}
			}

			public AggregateParameter VoidRequest
		    {
				get
		        {
					if(_VoidRequest_W == null)
	        	    {
						_VoidRequest_W = TearOff.VoidRequest;
					}
					return _VoidRequest_W;
				}
			}

			public AggregateParameter VoidRequestDateTime
		    {
				get
		        {
					if(_VoidRequestDateTime_W == null)
	        	    {
						_VoidRequestDateTime_W = TearOff.VoidRequestDateTime;
					}
					return _VoidRequestDateTime_W;
				}
			}

			public AggregateParameter VoidRequestUserID
		    {
				get
		        {
					if(_VoidRequestUserID_W == null)
	        	    {
						_VoidRequestUserID_W = TearOff.VoidRequestUserID;
					}
					return _VoidRequestUserID_W;
				}
			}

			public AggregateParameter IsVoided
		    {
				get
		        {
					if(_IsVoided_W == null)
	        	    {
						_IsVoided_W = TearOff.IsVoided;
					}
					return _IsVoided_W;
				}
			}

			public AggregateParameter VoidApprovedByUserID
		    {
				get
		        {
					if(_VoidApprovedByUserID_W == null)
	        	    {
						_VoidApprovedByUserID_W = TearOff.VoidApprovedByUserID;
					}
					return _VoidApprovedByUserID_W;
				}
			}

			public AggregateParameter VoidApprovalDateTime
		    {
				get
		        {
					if(_VoidApprovalDateTime_W == null)
	        	    {
						_VoidApprovalDateTime_W = TearOff.VoidApprovalDateTime;
					}
					return _VoidApprovalDateTime_W;
				}
			}

			public AggregateParameter PrePrintedInvoiceNo
		    {
				get
		        {
					if(_PrePrintedInvoiceNo_W == null)
	        	    {
						_PrePrintedInvoiceNo_W = TearOff.PrePrintedInvoiceNo;
					}
					return _PrePrintedInvoiceNo_W;
				}
			}

			public AggregateParameter ReceivingUnitID
		    {
				get
		        {
					if(_ReceivingUnitID_W == null)
	        	    {
						_ReceivingUnitID_W = TearOff.ReceivingUnitID;
					}
					return _ReceivingUnitID_W;
				}
			}

			public AggregateParameter IsDeliveryNote
		    {
				get
		        {
					if(_IsDeliveryNote_W == null)
	        	    {
						_IsDeliveryNote_W = TearOff.IsDeliveryNote;
					}
					return _IsDeliveryNote_W;
				}
			}

			public AggregateParameter HasDeliveryNoteBeenConverted
		    {
				get
		        {
					if(_HasDeliveryNoteBeenConverted_W == null)
	        	    {
						_HasDeliveryNoteBeenConverted_W = TearOff.HasDeliveryNoteBeenConverted;
					}
					return _HasDeliveryNoteBeenConverted_W;
				}
			}

			public AggregateParameter HasInsurance
		    {
				get
		        {
					if(_HasInsurance_W == null)
	        	    {
						_HasInsurance_W = TearOff.HasInsurance;
					}
					return _HasInsurance_W;
				}
			}

			public AggregateParameter InsuranceValue
		    {
				get
		        {
					if(_InsuranceValue_W == null)
	        	    {
						_InsuranceValue_W = TearOff.InsuranceValue;
					}
					return _InsuranceValue_W;
				}
			}

			public AggregateParameter WarehouseID
		    {
				get
		        {
					if(_WarehouseID_W == null)
	        	    {
						_WarehouseID_W = TearOff.WarehouseID;
					}
					return _WarehouseID_W;
				}
			}

			public AggregateParameter PaymentTypeID
		    {
				get
		        {
					if(_PaymentTypeID_W == null)
	        	    {
						_PaymentTypeID_W = TearOff.PaymentTypeID;
					}
					return _PaymentTypeID_W;
				}
			}

			public AggregateParameter OrderID
		    {
				get
		        {
					if(_OrderID_W == null)
	        	    {
						_OrderID_W = TearOff.OrderID;
					}
					return _OrderID_W;
				}
			}

			public AggregateParameter IsChecked
		    {
				get
		        {
					if(_IsChecked_W == null)
	        	    {
						_IsChecked_W = TearOff.IsChecked;
					}
					return _IsChecked_W;
				}
			}

			public AggregateParameter InstitutionName
		    {
				get
		        {
					if(_InstitutionName_W == null)
	        	    {
						_InstitutionName_W = TearOff.InstitutionName;
					}
					return _InstitutionName_W;
				}
			}

			public AggregateParameter FiscalYearID
		    {
				get
		        {
					if(_FiscalYearID_W == null)
	        	    {
						_FiscalYearID_W = TearOff.FiscalYearID;
					}
					return _FiscalYearID_W;
				}
			}

			public AggregateParameter AccountID
		    {
				get
		        {
					if(_AccountID_W == null)
	        	    {
						_AccountID_W = TearOff.AccountID;
					}
					return _AccountID_W;
				}
			}

			public AggregateParameter DocumentTypeID
		    {
				get
		        {
					if(_DocumentTypeID_W == null)
	        	    {
						_DocumentTypeID_W = TearOff.DocumentTypeID;
					}
					return _DocumentTypeID_W;
				}
			}

			public AggregateParameter UniqueIDPrinted
		    {
				get
		        {
					if(_UniqueIDPrinted_W == null)
	        	    {
						_UniqueIDPrinted_W = TearOff.UniqueIDPrinted;
					}
					return _UniqueIDPrinted_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _PrintedDate_W = null;
			private AggregateParameter _RefNo_W = null;
			private AggregateParameter _PickListID_W = null;
			private AggregateParameter _SupplierID_W = null;
			private AggregateParameter _IsReprintOf_W = null;
			private AggregateParameter _Reason_W = null;
			private AggregateParameter _UserID_W = null;
			private AggregateParameter _StoreID_W = null;
			private AggregateParameter _IDPrinted_W = null;
			private AggregateParameter _VoidRequest_W = null;
			private AggregateParameter _VoidRequestDateTime_W = null;
			private AggregateParameter _VoidRequestUserID_W = null;
			private AggregateParameter _IsVoided_W = null;
			private AggregateParameter _VoidApprovedByUserID_W = null;
			private AggregateParameter _VoidApprovalDateTime_W = null;
			private AggregateParameter _PrePrintedInvoiceNo_W = null;
			private AggregateParameter _ReceivingUnitID_W = null;
			private AggregateParameter _IsDeliveryNote_W = null;
			private AggregateParameter _HasDeliveryNoteBeenConverted_W = null;
			private AggregateParameter _HasInsurance_W = null;
			private AggregateParameter _InsuranceValue_W = null;
			private AggregateParameter _WarehouseID_W = null;
			private AggregateParameter _PaymentTypeID_W = null;
			private AggregateParameter _OrderID_W = null;
			private AggregateParameter _IsChecked_W = null;
			private AggregateParameter _InstitutionName_W = null;
			private AggregateParameter _FiscalYearID_W = null;
			private AggregateParameter _AccountID_W = null;
			private AggregateParameter _DocumentTypeID_W = null;
			private AggregateParameter _UniqueIDPrinted_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_PrintedDate_W = null;
				_RefNo_W = null;
				_PickListID_W = null;
				_SupplierID_W = null;
				_IsReprintOf_W = null;
				_Reason_W = null;
				_UserID_W = null;
				_StoreID_W = null;
				_IDPrinted_W = null;
				_VoidRequest_W = null;
				_VoidRequestDateTime_W = null;
				_VoidRequestUserID_W = null;
				_IsVoided_W = null;
				_VoidApprovedByUserID_W = null;
				_VoidApprovalDateTime_W = null;
				_PrePrintedInvoiceNo_W = null;
				_ReceivingUnitID_W = null;
				_IsDeliveryNote_W = null;
				_HasDeliveryNoteBeenConverted_W = null;
				_HasInsurance_W = null;
				_InsuranceValue_W = null;
				_WarehouseID_W = null;
				_PaymentTypeID_W = null;
				_OrderID_W = null;
				_IsChecked_W = null;
				_InstitutionName_W = null;
				_FiscalYearID_W = null;
				_AccountID_W = null;
				_DocumentTypeID_W = null;
				_UniqueIDPrinted_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_IssueInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
			p = cmd.Parameters[Parameters.UniqueIDPrinted.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_IssueUpdate]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.UniqueIDPrinted.ParameterName];
			p.Direction = ParameterDirection.Output;
      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_IssueDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PrintedDate);
			p.SourceColumn = ColumnNames.PrintedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RefNo);
			p.SourceColumn = ColumnNames.RefNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PickListID);
			p.SourceColumn = ColumnNames.PickListID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SupplierID);
			p.SourceColumn = ColumnNames.SupplierID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsReprintOf);
			p.SourceColumn = ColumnNames.IsReprintOf;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Reason);
			p.SourceColumn = ColumnNames.Reason;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StoreID);
			p.SourceColumn = ColumnNames.StoreID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IDPrinted);
			p.SourceColumn = ColumnNames.IDPrinted;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.VoidRequest);
			p.SourceColumn = ColumnNames.VoidRequest;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.VoidRequestDateTime);
			p.SourceColumn = ColumnNames.VoidRequestDateTime;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.VoidRequestUserID);
			p.SourceColumn = ColumnNames.VoidRequestUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsVoided);
			p.SourceColumn = ColumnNames.IsVoided;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.VoidApprovedByUserID);
			p.SourceColumn = ColumnNames.VoidApprovedByUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.VoidApprovalDateTime);
			p.SourceColumn = ColumnNames.VoidApprovalDateTime;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PrePrintedInvoiceNo);
			p.SourceColumn = ColumnNames.PrePrintedInvoiceNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReceivingUnitID);
			p.SourceColumn = ColumnNames.ReceivingUnitID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsDeliveryNote);
			p.SourceColumn = ColumnNames.IsDeliveryNote;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HasDeliveryNoteBeenConverted);
			p.SourceColumn = ColumnNames.HasDeliveryNoteBeenConverted;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HasInsurance);
			p.SourceColumn = ColumnNames.HasInsurance;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InsuranceValue);
			p.SourceColumn = ColumnNames.InsuranceValue;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WarehouseID);
			p.SourceColumn = ColumnNames.WarehouseID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PaymentTypeID);
			p.SourceColumn = ColumnNames.PaymentTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrderID);
			p.SourceColumn = ColumnNames.OrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsChecked);
			p.SourceColumn = ColumnNames.IsChecked;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InstitutionName);
			p.SourceColumn = ColumnNames.InstitutionName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FiscalYearID);
			p.SourceColumn = ColumnNames.FiscalYearID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AccountID);
			p.SourceColumn = ColumnNames.AccountID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DocumentTypeID);
			p.SourceColumn = ColumnNames.DocumentTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UniqueIDPrinted);
			p.SourceColumn = ColumnNames.UniqueIDPrinted;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
