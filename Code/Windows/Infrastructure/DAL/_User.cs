
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _User : SqlClientEntity
	{
		public _User()
		{
			this.QuerySource = "User";
			this.MappingName = "User";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FullName
			{
				get
				{
					return new SqlParameter("@FullName", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Address
			{
				get
				{
					return new SqlParameter("@Address", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Mobile
			{
				get
				{
					return new SqlParameter("@Mobile", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter UserName
			{
				get
				{
					return new SqlParameter("@UserName", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Password
			{
				get
				{
					return new SqlParameter("@Password", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter UserType
			{
				get
				{
					return new SqlParameter("@UserType", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Active
			{
				get
				{
					return new SqlParameter("@Active", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter FirstName
			{
				get
				{
					return new SqlParameter("@FirstName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter LastName
			{
				get
				{
					return new SqlParameter("@LastName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter DepartmentID
			{
				get
				{
					return new SqlParameter("@DepartmentID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter JobTitleID
			{
				get
				{
					return new SqlParameter("@JobTitleID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CreatedByID
			{
				get
				{
					return new SqlParameter("@CreatedByID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter LastLogin
			{
				get
				{
					return new SqlParameter("@LastLogin", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter CreatedDate
			{
				get
				{
					return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ModifiedDate
			{
				get
				{
					return new SqlParameter("@ModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter PasswordExpires
			{
				get
				{
					return new SqlParameter("@PasswordExpires", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ExpirationDate
			{
				get
				{
					return new SqlParameter("@ExpirationDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string FullName = "FullName";
            public const string Address = "Address";
            public const string Mobile = "Mobile";
            public const string UserName = "UserName";
            public const string Password = "Password";
            public const string UserType = "UserType";
            public const string Active = "Active";
            public const string FirstName = "FirstName";
            public const string LastName = "LastName";
            public const string DepartmentID = "DepartmentID";
            public const string JobTitleID = "JobTitleID";
            public const string CreatedByID = "CreatedByID";
            public const string LastLogin = "LastLogin";
            public const string CreatedDate = "CreatedDate";
            public const string ModifiedDate = "ModifiedDate";
            public const string PasswordExpires = "PasswordExpires";
            public const string ExpirationDate = "ExpirationDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _User.PropertyNames.ID;
					ht[FullName] = _User.PropertyNames.FullName;
					ht[Address] = _User.PropertyNames.Address;
					ht[Mobile] = _User.PropertyNames.Mobile;
					ht[UserName] = _User.PropertyNames.UserName;
					ht[Password] = _User.PropertyNames.Password;
					ht[UserType] = _User.PropertyNames.UserType;
					ht[Active] = _User.PropertyNames.Active;
					ht[FirstName] = _User.PropertyNames.FirstName;
					ht[LastName] = _User.PropertyNames.LastName;
					ht[DepartmentID] = _User.PropertyNames.DepartmentID;
					ht[JobTitleID] = _User.PropertyNames.JobTitleID;
					ht[CreatedByID] = _User.PropertyNames.CreatedByID;
					ht[LastLogin] = _User.PropertyNames.LastLogin;
					ht[CreatedDate] = _User.PropertyNames.CreatedDate;
					ht[ModifiedDate] = _User.PropertyNames.ModifiedDate;
					ht[PasswordExpires] = _User.PropertyNames.PasswordExpires;
					ht[ExpirationDate] = _User.PropertyNames.ExpirationDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string FullName = "FullName";
            public const string Address = "Address";
            public const string Mobile = "Mobile";
            public const string UserName = "UserName";
            public const string Password = "Password";
            public const string UserType = "UserType";
            public const string Active = "Active";
            public const string FirstName = "FirstName";
            public const string LastName = "LastName";
            public const string DepartmentID = "DepartmentID";
            public const string JobTitleID = "JobTitleID";
            public const string CreatedByID = "CreatedByID";
            public const string LastLogin = "LastLogin";
            public const string CreatedDate = "CreatedDate";
            public const string ModifiedDate = "ModifiedDate";
            public const string PasswordExpires = "PasswordExpires";
            public const string ExpirationDate = "ExpirationDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _User.ColumnNames.ID;
					ht[FullName] = _User.ColumnNames.FullName;
					ht[Address] = _User.ColumnNames.Address;
					ht[Mobile] = _User.ColumnNames.Mobile;
					ht[UserName] = _User.ColumnNames.UserName;
					ht[Password] = _User.ColumnNames.Password;
					ht[UserType] = _User.ColumnNames.UserType;
					ht[Active] = _User.ColumnNames.Active;
					ht[FirstName] = _User.ColumnNames.FirstName;
					ht[LastName] = _User.ColumnNames.LastName;
					ht[DepartmentID] = _User.ColumnNames.DepartmentID;
					ht[JobTitleID] = _User.ColumnNames.JobTitleID;
					ht[CreatedByID] = _User.ColumnNames.CreatedByID;
					ht[LastLogin] = _User.ColumnNames.LastLogin;
					ht[CreatedDate] = _User.ColumnNames.CreatedDate;
					ht[ModifiedDate] = _User.ColumnNames.ModifiedDate;
					ht[PasswordExpires] = _User.ColumnNames.PasswordExpires;
					ht[ExpirationDate] = _User.ColumnNames.ExpirationDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string FullName = "s_FullName";
            public const string Address = "s_Address";
            public const string Mobile = "s_Mobile";
            public const string UserName = "s_UserName";
            public const string Password = "s_Password";
            public const string UserType = "s_UserType";
            public const string Active = "s_Active";
            public const string FirstName = "s_FirstName";
            public const string LastName = "s_LastName";
            public const string DepartmentID = "s_DepartmentID";
            public const string JobTitleID = "s_JobTitleID";
            public const string CreatedByID = "s_CreatedByID";
            public const string LastLogin = "s_LastLogin";
            public const string CreatedDate = "s_CreatedDate";
            public const string ModifiedDate = "s_ModifiedDate";
            public const string PasswordExpires = "s_PasswordExpires";
            public const string ExpirationDate = "s_ExpirationDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual string FullName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FullName);
			}
			set
	        {
				base.Setstring(ColumnNames.FullName, value);
			}
		}

		public virtual string Address
	    {
			get
	        {
				return base.Getstring(ColumnNames.Address);
			}
			set
	        {
				base.Setstring(ColumnNames.Address, value);
			}
		}

		public virtual string Mobile
	    {
			get
	        {
				return base.Getstring(ColumnNames.Mobile);
			}
			set
	        {
				base.Setstring(ColumnNames.Mobile, value);
			}
		}

		public virtual string UserName
	    {
			get
	        {
				return base.Getstring(ColumnNames.UserName);
			}
			set
	        {
				base.Setstring(ColumnNames.UserName, value);
			}
		}

		public virtual string Password
	    {
			get
	        {
				return base.Getstring(ColumnNames.Password);
			}
			set
	        {
				base.Setstring(ColumnNames.Password, value);
			}
		}

		public virtual int UserType
	    {
			get
	        {
				return base.Getint(ColumnNames.UserType);
			}
			set
	        {
				base.Setint(ColumnNames.UserType, value);
			}
		}

		public virtual bool Active
	    {
			get
	        {
				return base.Getbool(ColumnNames.Active);
			}
			set
	        {
				base.Setbool(ColumnNames.Active, value);
			}
		}

		public virtual string FirstName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FirstName);
			}
			set
	        {
				base.Setstring(ColumnNames.FirstName, value);
			}
		}

		public virtual string LastName
	    {
			get
	        {
				return base.Getstring(ColumnNames.LastName);
			}
			set
	        {
				base.Setstring(ColumnNames.LastName, value);
			}
		}

		public virtual int DepartmentID
	    {
			get
	        {
				return base.Getint(ColumnNames.DepartmentID);
			}
			set
	        {
				base.Setint(ColumnNames.DepartmentID, value);
			}
		}

		public virtual int JobTitleID
	    {
			get
	        {
				return base.Getint(ColumnNames.JobTitleID);
			}
			set
	        {
				base.Setint(ColumnNames.JobTitleID, value);
			}
		}

		public virtual int CreatedByID
	    {
			get
	        {
				return base.Getint(ColumnNames.CreatedByID);
			}
			set
	        {
				base.Setint(ColumnNames.CreatedByID, value);
			}
		}

		public virtual DateTime LastLogin
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastLogin);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastLogin, value);
			}
		}

		public virtual DateTime CreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreatedDate, value);
			}
		}

		public virtual DateTime ModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ModifiedDate, value);
			}
		}

		public virtual bool PasswordExpires
	    {
			get
	        {
				return base.Getbool(ColumnNames.PasswordExpires);
			}
			set
	        {
				base.Setbool(ColumnNames.PasswordExpires, value);
			}
		}

		public virtual DateTime ExpirationDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ExpirationDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ExpirationDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_FullName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FullName) ? string.Empty : base.GetstringAsString(ColumnNames.FullName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FullName);
				else
					this.FullName = base.SetstringAsString(ColumnNames.FullName, value);
			}
		}

		public virtual string s_Address
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Address) ? string.Empty : base.GetstringAsString(ColumnNames.Address);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Address);
				else
					this.Address = base.SetstringAsString(ColumnNames.Address, value);
			}
		}

		public virtual string s_Mobile
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Mobile) ? string.Empty : base.GetstringAsString(ColumnNames.Mobile);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Mobile);
				else
					this.Mobile = base.SetstringAsString(ColumnNames.Mobile, value);
			}
		}

		public virtual string s_UserName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserName) ? string.Empty : base.GetstringAsString(ColumnNames.UserName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserName);
				else
					this.UserName = base.SetstringAsString(ColumnNames.UserName, value);
			}
		}

		public virtual string s_Password
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Password) ? string.Empty : base.GetstringAsString(ColumnNames.Password);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Password);
				else
					this.Password = base.SetstringAsString(ColumnNames.Password, value);
			}
		}

		public virtual string s_UserType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserType) ? string.Empty : base.GetintAsString(ColumnNames.UserType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserType);
				else
					this.UserType = base.SetintAsString(ColumnNames.UserType, value);
			}
		}

		public virtual string s_Active
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Active) ? string.Empty : base.GetboolAsString(ColumnNames.Active);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Active);
				else
					this.Active = base.SetboolAsString(ColumnNames.Active, value);
			}
		}

		public virtual string s_FirstName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstName) ? string.Empty : base.GetstringAsString(ColumnNames.FirstName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstName);
				else
					this.FirstName = base.SetstringAsString(ColumnNames.FirstName, value);
			}
		}

		public virtual string s_LastName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastName) ? string.Empty : base.GetstringAsString(ColumnNames.LastName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastName);
				else
					this.LastName = base.SetstringAsString(ColumnNames.LastName, value);
			}
		}

		public virtual string s_DepartmentID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DepartmentID) ? string.Empty : base.GetintAsString(ColumnNames.DepartmentID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DepartmentID);
				else
					this.DepartmentID = base.SetintAsString(ColumnNames.DepartmentID, value);
			}
		}

		public virtual string s_JobTitleID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobTitleID) ? string.Empty : base.GetintAsString(ColumnNames.JobTitleID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobTitleID);
				else
					this.JobTitleID = base.SetintAsString(ColumnNames.JobTitleID, value);
			}
		}

		public virtual string s_CreatedByID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedByID) ? string.Empty : base.GetintAsString(ColumnNames.CreatedByID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedByID);
				else
					this.CreatedByID = base.SetintAsString(ColumnNames.CreatedByID, value);
			}
		}

		public virtual string s_LastLogin
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastLogin) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastLogin);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastLogin);
				else
					this.LastLogin = base.SetDateTimeAsString(ColumnNames.LastLogin, value);
			}
		}

		public virtual string s_CreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedDate);
				else
					this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
			}
		}

		public virtual string s_ModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifiedDate);
				else
					this.ModifiedDate = base.SetDateTimeAsString(ColumnNames.ModifiedDate, value);
			}
		}

		public virtual string s_PasswordExpires
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PasswordExpires) ? string.Empty : base.GetboolAsString(ColumnNames.PasswordExpires);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PasswordExpires);
				else
					this.PasswordExpires = base.SetboolAsString(ColumnNames.PasswordExpires, value);
			}
		}

		public virtual string s_ExpirationDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ExpirationDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ExpirationDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ExpirationDate);
				else
					this.ExpirationDate = base.SetDateTimeAsString(ColumnNames.ExpirationDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FullName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FullName, Parameters.FullName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Address
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Address, Parameters.Address);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Mobile
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Mobile, Parameters.Mobile);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserName, Parameters.UserName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Password
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserType, Parameters.UserType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Active
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Active, Parameters.Active);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastName, Parameters.LastName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DepartmentID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DepartmentID, Parameters.DepartmentID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobTitleID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobTitleID, Parameters.JobTitleID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedByID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedByID, Parameters.CreatedByID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastLogin
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastLogin, Parameters.LastLogin);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifiedDate, Parameters.ModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PasswordExpires
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PasswordExpires, Parameters.PasswordExpires);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ExpirationDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ExpirationDate, Parameters.ExpirationDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter FullName
		    {
				get
		        {
					if(_FullName_W == null)
	        	    {
						_FullName_W = TearOff.FullName;
					}
					return _FullName_W;
				}
			}

			public WhereParameter Address
		    {
				get
		        {
					if(_Address_W == null)
	        	    {
						_Address_W = TearOff.Address;
					}
					return _Address_W;
				}
			}

			public WhereParameter Mobile
		    {
				get
		        {
					if(_Mobile_W == null)
	        	    {
						_Mobile_W = TearOff.Mobile;
					}
					return _Mobile_W;
				}
			}

			public WhereParameter UserName
		    {
				get
		        {
					if(_UserName_W == null)
	        	    {
						_UserName_W = TearOff.UserName;
					}
					return _UserName_W;
				}
			}

			public WhereParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public WhereParameter UserType
		    {
				get
		        {
					if(_UserType_W == null)
	        	    {
						_UserType_W = TearOff.UserType;
					}
					return _UserType_W;
				}
			}

			public WhereParameter Active
		    {
				get
		        {
					if(_Active_W == null)
	        	    {
						_Active_W = TearOff.Active;
					}
					return _Active_W;
				}
			}

			public WhereParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public WhereParameter LastName
		    {
				get
		        {
					if(_LastName_W == null)
	        	    {
						_LastName_W = TearOff.LastName;
					}
					return _LastName_W;
				}
			}

			public WhereParameter DepartmentID
		    {
				get
		        {
					if(_DepartmentID_W == null)
	        	    {
						_DepartmentID_W = TearOff.DepartmentID;
					}
					return _DepartmentID_W;
				}
			}

			public WhereParameter JobTitleID
		    {
				get
		        {
					if(_JobTitleID_W == null)
	        	    {
						_JobTitleID_W = TearOff.JobTitleID;
					}
					return _JobTitleID_W;
				}
			}

			public WhereParameter CreatedByID
		    {
				get
		        {
					if(_CreatedByID_W == null)
	        	    {
						_CreatedByID_W = TearOff.CreatedByID;
					}
					return _CreatedByID_W;
				}
			}

			public WhereParameter LastLogin
		    {
				get
		        {
					if(_LastLogin_W == null)
	        	    {
						_LastLogin_W = TearOff.LastLogin;
					}
					return _LastLogin_W;
				}
			}

			public WhereParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public WhereParameter ModifiedDate
		    {
				get
		        {
					if(_ModifiedDate_W == null)
	        	    {
						_ModifiedDate_W = TearOff.ModifiedDate;
					}
					return _ModifiedDate_W;
				}
			}

			public WhereParameter PasswordExpires
		    {
				get
		        {
					if(_PasswordExpires_W == null)
	        	    {
						_PasswordExpires_W = TearOff.PasswordExpires;
					}
					return _PasswordExpires_W;
				}
			}

			public WhereParameter ExpirationDate
		    {
				get
		        {
					if(_ExpirationDate_W == null)
	        	    {
						_ExpirationDate_W = TearOff.ExpirationDate;
					}
					return _ExpirationDate_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _FullName_W = null;
			private WhereParameter _Address_W = null;
			private WhereParameter _Mobile_W = null;
			private WhereParameter _UserName_W = null;
			private WhereParameter _Password_W = null;
			private WhereParameter _UserType_W = null;
			private WhereParameter _Active_W = null;
			private WhereParameter _FirstName_W = null;
			private WhereParameter _LastName_W = null;
			private WhereParameter _DepartmentID_W = null;
			private WhereParameter _JobTitleID_W = null;
			private WhereParameter _CreatedByID_W = null;
			private WhereParameter _LastLogin_W = null;
			private WhereParameter _CreatedDate_W = null;
			private WhereParameter _ModifiedDate_W = null;
			private WhereParameter _PasswordExpires_W = null;
			private WhereParameter _ExpirationDate_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_FullName_W = null;
				_Address_W = null;
				_Mobile_W = null;
				_UserName_W = null;
				_Password_W = null;
				_UserType_W = null;
				_Active_W = null;
				_FirstName_W = null;
				_LastName_W = null;
				_DepartmentID_W = null;
				_JobTitleID_W = null;
				_CreatedByID_W = null;
				_LastLogin_W = null;
				_CreatedDate_W = null;
				_ModifiedDate_W = null;
				_PasswordExpires_W = null;
				_ExpirationDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FullName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FullName, Parameters.FullName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Address
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Address, Parameters.Address);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Mobile
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Mobile, Parameters.Mobile);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserName, Parameters.UserName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Password
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserType, Parameters.UserType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Active
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Active, Parameters.Active);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastName, Parameters.LastName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DepartmentID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DepartmentID, Parameters.DepartmentID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobTitleID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobTitleID, Parameters.JobTitleID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedByID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedByID, Parameters.CreatedByID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastLogin
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastLogin, Parameters.LastLogin);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifiedDate, Parameters.ModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PasswordExpires
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PasswordExpires, Parameters.PasswordExpires);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ExpirationDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExpirationDate, Parameters.ExpirationDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter FullName
		    {
				get
		        {
					if(_FullName_W == null)
	        	    {
						_FullName_W = TearOff.FullName;
					}
					return _FullName_W;
				}
			}

			public AggregateParameter Address
		    {
				get
		        {
					if(_Address_W == null)
	        	    {
						_Address_W = TearOff.Address;
					}
					return _Address_W;
				}
			}

			public AggregateParameter Mobile
		    {
				get
		        {
					if(_Mobile_W == null)
	        	    {
						_Mobile_W = TearOff.Mobile;
					}
					return _Mobile_W;
				}
			}

			public AggregateParameter UserName
		    {
				get
		        {
					if(_UserName_W == null)
	        	    {
						_UserName_W = TearOff.UserName;
					}
					return _UserName_W;
				}
			}

			public AggregateParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public AggregateParameter UserType
		    {
				get
		        {
					if(_UserType_W == null)
	        	    {
						_UserType_W = TearOff.UserType;
					}
					return _UserType_W;
				}
			}

			public AggregateParameter Active
		    {
				get
		        {
					if(_Active_W == null)
	        	    {
						_Active_W = TearOff.Active;
					}
					return _Active_W;
				}
			}

			public AggregateParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public AggregateParameter LastName
		    {
				get
		        {
					if(_LastName_W == null)
	        	    {
						_LastName_W = TearOff.LastName;
					}
					return _LastName_W;
				}
			}

			public AggregateParameter DepartmentID
		    {
				get
		        {
					if(_DepartmentID_W == null)
	        	    {
						_DepartmentID_W = TearOff.DepartmentID;
					}
					return _DepartmentID_W;
				}
			}

			public AggregateParameter JobTitleID
		    {
				get
		        {
					if(_JobTitleID_W == null)
	        	    {
						_JobTitleID_W = TearOff.JobTitleID;
					}
					return _JobTitleID_W;
				}
			}

			public AggregateParameter CreatedByID
		    {
				get
		        {
					if(_CreatedByID_W == null)
	        	    {
						_CreatedByID_W = TearOff.CreatedByID;
					}
					return _CreatedByID_W;
				}
			}

			public AggregateParameter LastLogin
		    {
				get
		        {
					if(_LastLogin_W == null)
	        	    {
						_LastLogin_W = TearOff.LastLogin;
					}
					return _LastLogin_W;
				}
			}

			public AggregateParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public AggregateParameter ModifiedDate
		    {
				get
		        {
					if(_ModifiedDate_W == null)
	        	    {
						_ModifiedDate_W = TearOff.ModifiedDate;
					}
					return _ModifiedDate_W;
				}
			}

			public AggregateParameter PasswordExpires
		    {
				get
		        {
					if(_PasswordExpires_W == null)
	        	    {
						_PasswordExpires_W = TearOff.PasswordExpires;
					}
					return _PasswordExpires_W;
				}
			}

			public AggregateParameter ExpirationDate
		    {
				get
		        {
					if(_ExpirationDate_W == null)
	        	    {
						_ExpirationDate_W = TearOff.ExpirationDate;
					}
					return _ExpirationDate_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _FullName_W = null;
			private AggregateParameter _Address_W = null;
			private AggregateParameter _Mobile_W = null;
			private AggregateParameter _UserName_W = null;
			private AggregateParameter _Password_W = null;
			private AggregateParameter _UserType_W = null;
			private AggregateParameter _Active_W = null;
			private AggregateParameter _FirstName_W = null;
			private AggregateParameter _LastName_W = null;
			private AggregateParameter _DepartmentID_W = null;
			private AggregateParameter _JobTitleID_W = null;
			private AggregateParameter _CreatedByID_W = null;
			private AggregateParameter _LastLogin_W = null;
			private AggregateParameter _CreatedDate_W = null;
			private AggregateParameter _ModifiedDate_W = null;
			private AggregateParameter _PasswordExpires_W = null;
			private AggregateParameter _ExpirationDate_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_FullName_W = null;
				_Address_W = null;
				_Mobile_W = null;
				_UserName_W = null;
				_Password_W = null;
				_UserType_W = null;
				_Active_W = null;
				_FirstName_W = null;
				_LastName_W = null;
				_DepartmentID_W = null;
				_JobTitleID_W = null;
				_CreatedByID_W = null;
				_LastLogin_W = null;
				_CreatedDate_W = null;
				_ModifiedDate_W = null;
				_PasswordExpires_W = null;
				_ExpirationDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FullName);
			p.SourceColumn = ColumnNames.FullName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Address);
			p.SourceColumn = ColumnNames.Address;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Mobile);
			p.SourceColumn = ColumnNames.Mobile;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserName);
			p.SourceColumn = ColumnNames.UserName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Password);
			p.SourceColumn = ColumnNames.Password;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserType);
			p.SourceColumn = ColumnNames.UserType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Active);
			p.SourceColumn = ColumnNames.Active;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstName);
			p.SourceColumn = ColumnNames.FirstName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastName);
			p.SourceColumn = ColumnNames.LastName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DepartmentID);
			p.SourceColumn = ColumnNames.DepartmentID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobTitleID);
			p.SourceColumn = ColumnNames.JobTitleID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedByID);
			p.SourceColumn = ColumnNames.CreatedByID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastLogin);
			p.SourceColumn = ColumnNames.LastLogin;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedDate);
			p.SourceColumn = ColumnNames.CreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifiedDate);
			p.SourceColumn = ColumnNames.ModifiedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PasswordExpires);
			p.SourceColumn = ColumnNames.PasswordExpires;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ExpirationDate);
			p.SourceColumn = ColumnNames.ExpirationDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
