
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _LogLogin : SqlClientEntity
	{
		public _LogLogin()
		{
			this.QuerySource = "LogLogin";
			this.MappingName = "LogLogin";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_LogLoginLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_LogLoginLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter LoginTime
			{
				get
				{
					return new SqlParameter("@LoginTime", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter SuccesfulLogin
			{
				get
				{
					return new SqlParameter("@SuccesfulLogin", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter LogOffTime
			{
				get
				{
					return new SqlParameter("@LogOffTime", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter HostName
			{
				get
				{
					return new SqlParameter("@HostName", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter IPAddress
			{
				get
				{
					return new SqlParameter("@IPAddress", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter MACAddress
			{
				get
				{
					return new SqlParameter("@MACAddress", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter UnknownUser
			{
				get
				{
					return new SqlParameter("@UnknownUser", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter UnknownUserName
			{
				get
				{
					return new SqlParameter("@UnknownUserName", SqlDbType.NChar, 10);
				}
			}
			
			public static SqlParameter ApplicationVersion
			{
				get
				{
					return new SqlParameter("@ApplicationVersion", SqlDbType.VarChar, 50);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string UserID = "UserID";
            public const string LoginTime = "LoginTime";
            public const string SuccesfulLogin = "SuccesfulLogin";
            public const string LogOffTime = "LogOffTime";
            public const string HostName = "HostName";
            public const string IPAddress = "IPAddress";
            public const string MACAddress = "MACAddress";
            public const string UnknownUser = "UnknownUser";
            public const string UnknownUserName = "UnknownUserName";
            public const string ApplicationVersion = "ApplicationVersion";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _LogLogin.PropertyNames.ID;
					ht[UserID] = _LogLogin.PropertyNames.UserID;
					ht[LoginTime] = _LogLogin.PropertyNames.LoginTime;
					ht[SuccesfulLogin] = _LogLogin.PropertyNames.SuccesfulLogin;
					ht[LogOffTime] = _LogLogin.PropertyNames.LogOffTime;
					ht[HostName] = _LogLogin.PropertyNames.HostName;
					ht[IPAddress] = _LogLogin.PropertyNames.IPAddress;
					ht[MACAddress] = _LogLogin.PropertyNames.MACAddress;
					ht[UnknownUser] = _LogLogin.PropertyNames.UnknownUser;
					ht[UnknownUserName] = _LogLogin.PropertyNames.UnknownUserName;
					ht[ApplicationVersion] = _LogLogin.PropertyNames.ApplicationVersion;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string UserID = "UserID";
            public const string LoginTime = "LoginTime";
            public const string SuccesfulLogin = "SuccesfulLogin";
            public const string LogOffTime = "LogOffTime";
            public const string HostName = "HostName";
            public const string IPAddress = "IPAddress";
            public const string MACAddress = "MACAddress";
            public const string UnknownUser = "UnknownUser";
            public const string UnknownUserName = "UnknownUserName";
            public const string ApplicationVersion = "ApplicationVersion";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _LogLogin.ColumnNames.ID;
					ht[UserID] = _LogLogin.ColumnNames.UserID;
					ht[LoginTime] = _LogLogin.ColumnNames.LoginTime;
					ht[SuccesfulLogin] = _LogLogin.ColumnNames.SuccesfulLogin;
					ht[LogOffTime] = _LogLogin.ColumnNames.LogOffTime;
					ht[HostName] = _LogLogin.ColumnNames.HostName;
					ht[IPAddress] = _LogLogin.ColumnNames.IPAddress;
					ht[MACAddress] = _LogLogin.ColumnNames.MACAddress;
					ht[UnknownUser] = _LogLogin.ColumnNames.UnknownUser;
					ht[UnknownUserName] = _LogLogin.ColumnNames.UnknownUserName;
					ht[ApplicationVersion] = _LogLogin.ColumnNames.ApplicationVersion;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string UserID = "s_UserID";
            public const string LoginTime = "s_LoginTime";
            public const string SuccesfulLogin = "s_SuccesfulLogin";
            public const string LogOffTime = "s_LogOffTime";
            public const string HostName = "s_HostName";
            public const string IPAddress = "s_IPAddress";
            public const string MACAddress = "s_MACAddress";
            public const string UnknownUser = "s_UnknownUser";
            public const string UnknownUserName = "s_UnknownUserName";
            public const string ApplicationVersion = "s_ApplicationVersion";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual int UserID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserID);
			}
			set
	        {
				base.Setint(ColumnNames.UserID, value);
			}
		}

		public virtual DateTime LoginTime
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LoginTime);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LoginTime, value);
			}
		}

		public virtual bool SuccesfulLogin
	    {
			get
	        {
				return base.Getbool(ColumnNames.SuccesfulLogin);
			}
			set
	        {
				base.Setbool(ColumnNames.SuccesfulLogin, value);
			}
		}

		public virtual DateTime LogOffTime
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LogOffTime);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LogOffTime, value);
			}
		}

		public virtual string HostName
	    {
			get
	        {
				return base.Getstring(ColumnNames.HostName);
			}
			set
	        {
				base.Setstring(ColumnNames.HostName, value);
			}
		}

		public virtual string IPAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.IPAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.IPAddress, value);
			}
		}

		public virtual string MACAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.MACAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.MACAddress, value);
			}
		}

		public virtual bool UnknownUser
	    {
			get
	        {
				return base.Getbool(ColumnNames.UnknownUser);
			}
			set
	        {
				base.Setbool(ColumnNames.UnknownUser, value);
			}
		}

		public virtual string UnknownUserName
	    {
			get
	        {
				return base.Getstring(ColumnNames.UnknownUserName);
			}
			set
	        {
				base.Setstring(ColumnNames.UnknownUserName, value);
			}
		}

		public virtual string ApplicationVersion
	    {
			get
	        {
				return base.Getstring(ColumnNames.ApplicationVersion);
			}
			set
	        {
				base.Setstring(ColumnNames.ApplicationVersion, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetintAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_LoginTime
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LoginTime) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LoginTime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LoginTime);
				else
					this.LoginTime = base.SetDateTimeAsString(ColumnNames.LoginTime, value);
			}
		}

		public virtual string s_SuccesfulLogin
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SuccesfulLogin) ? string.Empty : base.GetboolAsString(ColumnNames.SuccesfulLogin);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SuccesfulLogin);
				else
					this.SuccesfulLogin = base.SetboolAsString(ColumnNames.SuccesfulLogin, value);
			}
		}

		public virtual string s_LogOffTime
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LogOffTime) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LogOffTime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LogOffTime);
				else
					this.LogOffTime = base.SetDateTimeAsString(ColumnNames.LogOffTime, value);
			}
		}

		public virtual string s_HostName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HostName) ? string.Empty : base.GetstringAsString(ColumnNames.HostName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HostName);
				else
					this.HostName = base.SetstringAsString(ColumnNames.HostName, value);
			}
		}

		public virtual string s_IPAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IPAddress) ? string.Empty : base.GetstringAsString(ColumnNames.IPAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IPAddress);
				else
					this.IPAddress = base.SetstringAsString(ColumnNames.IPAddress, value);
			}
		}

		public virtual string s_MACAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MACAddress) ? string.Empty : base.GetstringAsString(ColumnNames.MACAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MACAddress);
				else
					this.MACAddress = base.SetstringAsString(ColumnNames.MACAddress, value);
			}
		}

		public virtual string s_UnknownUser
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UnknownUser) ? string.Empty : base.GetboolAsString(ColumnNames.UnknownUser);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnknownUser);
				else
					this.UnknownUser = base.SetboolAsString(ColumnNames.UnknownUser, value);
			}
		}

		public virtual string s_UnknownUserName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UnknownUserName) ? string.Empty : base.GetstringAsString(ColumnNames.UnknownUserName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnknownUserName);
				else
					this.UnknownUserName = base.SetstringAsString(ColumnNames.UnknownUserName, value);
			}
		}

		public virtual string s_ApplicationVersion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ApplicationVersion) ? string.Empty : base.GetstringAsString(ColumnNames.ApplicationVersion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ApplicationVersion);
				else
					this.ApplicationVersion = base.SetstringAsString(ColumnNames.ApplicationVersion, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LoginTime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LoginTime, Parameters.LoginTime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SuccesfulLogin
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SuccesfulLogin, Parameters.SuccesfulLogin);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LogOffTime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LogOffTime, Parameters.LogOffTime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HostName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HostName, Parameters.HostName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IPAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IPAddress, Parameters.IPAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MACAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MACAddress, Parameters.MACAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UnknownUser
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UnknownUser, Parameters.UnknownUser);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UnknownUserName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UnknownUserName, Parameters.UnknownUserName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ApplicationVersion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ApplicationVersion, Parameters.ApplicationVersion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter LoginTime
		    {
				get
		        {
					if(_LoginTime_W == null)
	        	    {
						_LoginTime_W = TearOff.LoginTime;
					}
					return _LoginTime_W;
				}
			}

			public WhereParameter SuccesfulLogin
		    {
				get
		        {
					if(_SuccesfulLogin_W == null)
	        	    {
						_SuccesfulLogin_W = TearOff.SuccesfulLogin;
					}
					return _SuccesfulLogin_W;
				}
			}

			public WhereParameter LogOffTime
		    {
				get
		        {
					if(_LogOffTime_W == null)
	        	    {
						_LogOffTime_W = TearOff.LogOffTime;
					}
					return _LogOffTime_W;
				}
			}

			public WhereParameter HostName
		    {
				get
		        {
					if(_HostName_W == null)
	        	    {
						_HostName_W = TearOff.HostName;
					}
					return _HostName_W;
				}
			}

			public WhereParameter IPAddress
		    {
				get
		        {
					if(_IPAddress_W == null)
	        	    {
						_IPAddress_W = TearOff.IPAddress;
					}
					return _IPAddress_W;
				}
			}

			public WhereParameter MACAddress
		    {
				get
		        {
					if(_MACAddress_W == null)
	        	    {
						_MACAddress_W = TearOff.MACAddress;
					}
					return _MACAddress_W;
				}
			}

			public WhereParameter UnknownUser
		    {
				get
		        {
					if(_UnknownUser_W == null)
	        	    {
						_UnknownUser_W = TearOff.UnknownUser;
					}
					return _UnknownUser_W;
				}
			}

			public WhereParameter UnknownUserName
		    {
				get
		        {
					if(_UnknownUserName_W == null)
	        	    {
						_UnknownUserName_W = TearOff.UnknownUserName;
					}
					return _UnknownUserName_W;
				}
			}

			public WhereParameter ApplicationVersion
		    {
				get
		        {
					if(_ApplicationVersion_W == null)
	        	    {
						_ApplicationVersion_W = TearOff.ApplicationVersion;
					}
					return _ApplicationVersion_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _UserID_W = null;
			private WhereParameter _LoginTime_W = null;
			private WhereParameter _SuccesfulLogin_W = null;
			private WhereParameter _LogOffTime_W = null;
			private WhereParameter _HostName_W = null;
			private WhereParameter _IPAddress_W = null;
			private WhereParameter _MACAddress_W = null;
			private WhereParameter _UnknownUser_W = null;
			private WhereParameter _UnknownUserName_W = null;
			private WhereParameter _ApplicationVersion_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_UserID_W = null;
				_LoginTime_W = null;
				_SuccesfulLogin_W = null;
				_LogOffTime_W = null;
				_HostName_W = null;
				_IPAddress_W = null;
				_MACAddress_W = null;
				_UnknownUser_W = null;
				_UnknownUserName_W = null;
				_ApplicationVersion_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LoginTime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LoginTime, Parameters.LoginTime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SuccesfulLogin
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SuccesfulLogin, Parameters.SuccesfulLogin);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LogOffTime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LogOffTime, Parameters.LogOffTime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HostName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HostName, Parameters.HostName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IPAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IPAddress, Parameters.IPAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MACAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MACAddress, Parameters.MACAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UnknownUser
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnknownUser, Parameters.UnknownUser);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UnknownUserName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnknownUserName, Parameters.UnknownUserName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ApplicationVersion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ApplicationVersion, Parameters.ApplicationVersion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter LoginTime
		    {
				get
		        {
					if(_LoginTime_W == null)
	        	    {
						_LoginTime_W = TearOff.LoginTime;
					}
					return _LoginTime_W;
				}
			}

			public AggregateParameter SuccesfulLogin
		    {
				get
		        {
					if(_SuccesfulLogin_W == null)
	        	    {
						_SuccesfulLogin_W = TearOff.SuccesfulLogin;
					}
					return _SuccesfulLogin_W;
				}
			}

			public AggregateParameter LogOffTime
		    {
				get
		        {
					if(_LogOffTime_W == null)
	        	    {
						_LogOffTime_W = TearOff.LogOffTime;
					}
					return _LogOffTime_W;
				}
			}

			public AggregateParameter HostName
		    {
				get
		        {
					if(_HostName_W == null)
	        	    {
						_HostName_W = TearOff.HostName;
					}
					return _HostName_W;
				}
			}

			public AggregateParameter IPAddress
		    {
				get
		        {
					if(_IPAddress_W == null)
	        	    {
						_IPAddress_W = TearOff.IPAddress;
					}
					return _IPAddress_W;
				}
			}

			public AggregateParameter MACAddress
		    {
				get
		        {
					if(_MACAddress_W == null)
	        	    {
						_MACAddress_W = TearOff.MACAddress;
					}
					return _MACAddress_W;
				}
			}

			public AggregateParameter UnknownUser
		    {
				get
		        {
					if(_UnknownUser_W == null)
	        	    {
						_UnknownUser_W = TearOff.UnknownUser;
					}
					return _UnknownUser_W;
				}
			}

			public AggregateParameter UnknownUserName
		    {
				get
		        {
					if(_UnknownUserName_W == null)
	        	    {
						_UnknownUserName_W = TearOff.UnknownUserName;
					}
					return _UnknownUserName_W;
				}
			}

			public AggregateParameter ApplicationVersion
		    {
				get
		        {
					if(_ApplicationVersion_W == null)
	        	    {
						_ApplicationVersion_W = TearOff.ApplicationVersion;
					}
					return _ApplicationVersion_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _UserID_W = null;
			private AggregateParameter _LoginTime_W = null;
			private AggregateParameter _SuccesfulLogin_W = null;
			private AggregateParameter _LogOffTime_W = null;
			private AggregateParameter _HostName_W = null;
			private AggregateParameter _IPAddress_W = null;
			private AggregateParameter _MACAddress_W = null;
			private AggregateParameter _UnknownUser_W = null;
			private AggregateParameter _UnknownUserName_W = null;
			private AggregateParameter _ApplicationVersion_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_UserID_W = null;
				_LoginTime_W = null;
				_SuccesfulLogin_W = null;
				_LogOffTime_W = null;
				_HostName_W = null;
				_IPAddress_W = null;
				_MACAddress_W = null;
				_UnknownUser_W = null;
				_UnknownUserName_W = null;
				_ApplicationVersion_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_LogLoginInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_LogLoginUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_LogLoginDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LoginTime);
			p.SourceColumn = ColumnNames.LoginTime;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SuccesfulLogin);
			p.SourceColumn = ColumnNames.SuccesfulLogin;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LogOffTime);
			p.SourceColumn = ColumnNames.LogOffTime;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HostName);
			p.SourceColumn = ColumnNames.HostName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IPAddress);
			p.SourceColumn = ColumnNames.IPAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MACAddress);
			p.SourceColumn = ColumnNames.MACAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UnknownUser);
			p.SourceColumn = ColumnNames.UnknownUser;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UnknownUserName);
			p.SourceColumn = ColumnNames.UnknownUserName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ApplicationVersion);
			p.SourceColumn = ColumnNames.ApplicationVersion;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
