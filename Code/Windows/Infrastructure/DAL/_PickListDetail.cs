
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _PickListDetail : SqlClientEntity
	{
		public _PickListDetail()
		{
			this.QuerySource = "PickListDetail";
			this.MappingName = "PickListDetail";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PickListDetailLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PickListDetailLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PickListID
			{
				get
				{
					return new SqlParameter("@PickListID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ItemID
			{
				get
				{
					return new SqlParameter("@ItemID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PalletLocationID
			{
				get
				{
					return new SqlParameter("@PalletLocationID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter BatchNumber
			{
				get
				{
					return new SqlParameter("@BatchNumber", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter ExpireDate
			{
				get
				{
					return new SqlParameter("@ExpireDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ReceiveDocID
			{
				get
				{
					return new SqlParameter("@ReceiveDocID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter BoxLevel
			{
				get
				{
					return new SqlParameter("@BoxLevel", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Cost
			{
				get
				{
					return new SqlParameter("@Cost", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter ManufacturerID
			{
				get
				{
					return new SqlParameter("@ManufacturerID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Packs
			{
				get
				{
					return new SqlParameter("@Packs", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter QtyPerPack
			{
				get
				{
					return new SqlParameter("@QtyPerPack", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter QuantityInBU
			{
				get
				{
					return new SqlParameter("@QuantityInBU", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter ReceivePalletID
			{
				get
				{
					return new SqlParameter("@ReceivePalletID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UnitPrice
			{
				get
				{
					return new SqlParameter("@UnitPrice", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter UnitID
			{
				get
				{
					return new SqlParameter("@UnitID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StoreID
			{
				get
				{
					return new SqlParameter("@StoreID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DeliveryNote
			{
				get
				{
					return new SqlParameter("@DeliveryNote", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter OrderDetailID
			{
				get
				{
					return new SqlParameter("@OrderDetailID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsApproved
			{
				get
				{
					return new SqlParameter("@IsApproved", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ApprovedByUserID
			{
				get
				{
					return new SqlParameter("@ApprovedByUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter LineNumber
			{
				get
				{
					return new SqlParameter("@LineNumber", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PhysicalStoreID
			{
				get
				{
					return new SqlParameter("@PhysicalStoreID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string PickListID = "PickListID";
            public const string ItemID = "ItemID";
            public const string PalletLocationID = "PalletLocationID";
            public const string BatchNumber = "BatchNumber";
            public const string ExpireDate = "ExpireDate";
            public const string ReceiveDocID = "ReceiveDocID";
            public const string BoxLevel = "BoxLevel";
            public const string Cost = "Cost";
            public const string ManufacturerID = "ManufacturerID";
            public const string Packs = "Packs";
            public const string QtyPerPack = "QtyPerPack";
            public const string QuantityInBU = "QuantityInBU";
            public const string ReceivePalletID = "ReceivePalletID";
            public const string UnitPrice = "UnitPrice";
            public const string UnitID = "UnitID";
            public const string StoreID = "StoreID";
            public const string DeliveryNote = "DeliveryNote";
            public const string OrderDetailID = "OrderDetailID";
            public const string IsApproved = "IsApproved";
            public const string ApprovedByUserID = "ApprovedByUserID";
            public const string LineNumber = "LineNumber";
            public const string PhysicalStoreID = "PhysicalStoreID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _PickListDetail.PropertyNames.ID;
					ht[PickListID] = _PickListDetail.PropertyNames.PickListID;
					ht[ItemID] = _PickListDetail.PropertyNames.ItemID;
					ht[PalletLocationID] = _PickListDetail.PropertyNames.PalletLocationID;
					ht[BatchNumber] = _PickListDetail.PropertyNames.BatchNumber;
					ht[ExpireDate] = _PickListDetail.PropertyNames.ExpireDate;
					ht[ReceiveDocID] = _PickListDetail.PropertyNames.ReceiveDocID;
					ht[BoxLevel] = _PickListDetail.PropertyNames.BoxLevel;
					ht[Cost] = _PickListDetail.PropertyNames.Cost;
					ht[ManufacturerID] = _PickListDetail.PropertyNames.ManufacturerID;
					ht[Packs] = _PickListDetail.PropertyNames.Packs;
					ht[QtyPerPack] = _PickListDetail.PropertyNames.QtyPerPack;
					ht[QuantityInBU] = _PickListDetail.PropertyNames.QuantityInBU;
					ht[ReceivePalletID] = _PickListDetail.PropertyNames.ReceivePalletID;
					ht[UnitPrice] = _PickListDetail.PropertyNames.UnitPrice;
					ht[UnitID] = _PickListDetail.PropertyNames.UnitID;
					ht[StoreID] = _PickListDetail.PropertyNames.StoreID;
					ht[DeliveryNote] = _PickListDetail.PropertyNames.DeliveryNote;
					ht[OrderDetailID] = _PickListDetail.PropertyNames.OrderDetailID;
					ht[IsApproved] = _PickListDetail.PropertyNames.IsApproved;
					ht[ApprovedByUserID] = _PickListDetail.PropertyNames.ApprovedByUserID;
					ht[LineNumber] = _PickListDetail.PropertyNames.LineNumber;
					ht[PhysicalStoreID] = _PickListDetail.PropertyNames.PhysicalStoreID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string PickListID = "PickListID";
            public const string ItemID = "ItemID";
            public const string PalletLocationID = "PalletLocationID";
            public const string BatchNumber = "BatchNumber";
            public const string ExpireDate = "ExpireDate";
            public const string ReceiveDocID = "ReceiveDocID";
            public const string BoxLevel = "BoxLevel";
            public const string Cost = "Cost";
            public const string ManufacturerID = "ManufacturerID";
            public const string Packs = "Packs";
            public const string QtyPerPack = "QtyPerPack";
            public const string QuantityInBU = "QuantityInBU";
            public const string ReceivePalletID = "ReceivePalletID";
            public const string UnitPrice = "UnitPrice";
            public const string UnitID = "UnitID";
            public const string StoreID = "StoreID";
            public const string DeliveryNote = "DeliveryNote";
            public const string OrderDetailID = "OrderDetailID";
            public const string IsApproved = "IsApproved";
            public const string ApprovedByUserID = "ApprovedByUserID";
            public const string LineNumber = "LineNumber";
            public const string PhysicalStoreID = "PhysicalStoreID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _PickListDetail.ColumnNames.ID;
					ht[PickListID] = _PickListDetail.ColumnNames.PickListID;
					ht[ItemID] = _PickListDetail.ColumnNames.ItemID;
					ht[PalletLocationID] = _PickListDetail.ColumnNames.PalletLocationID;
					ht[BatchNumber] = _PickListDetail.ColumnNames.BatchNumber;
					ht[ExpireDate] = _PickListDetail.ColumnNames.ExpireDate;
					ht[ReceiveDocID] = _PickListDetail.ColumnNames.ReceiveDocID;
					ht[BoxLevel] = _PickListDetail.ColumnNames.BoxLevel;
					ht[Cost] = _PickListDetail.ColumnNames.Cost;
					ht[ManufacturerID] = _PickListDetail.ColumnNames.ManufacturerID;
					ht[Packs] = _PickListDetail.ColumnNames.Packs;
					ht[QtyPerPack] = _PickListDetail.ColumnNames.QtyPerPack;
					ht[QuantityInBU] = _PickListDetail.ColumnNames.QuantityInBU;
					ht[ReceivePalletID] = _PickListDetail.ColumnNames.ReceivePalletID;
					ht[UnitPrice] = _PickListDetail.ColumnNames.UnitPrice;
					ht[UnitID] = _PickListDetail.ColumnNames.UnitID;
					ht[StoreID] = _PickListDetail.ColumnNames.StoreID;
					ht[DeliveryNote] = _PickListDetail.ColumnNames.DeliveryNote;
					ht[OrderDetailID] = _PickListDetail.ColumnNames.OrderDetailID;
					ht[IsApproved] = _PickListDetail.ColumnNames.IsApproved;
					ht[ApprovedByUserID] = _PickListDetail.ColumnNames.ApprovedByUserID;
					ht[LineNumber] = _PickListDetail.ColumnNames.LineNumber;
					ht[PhysicalStoreID] = _PickListDetail.ColumnNames.PhysicalStoreID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string PickListID = "s_PickListID";
            public const string ItemID = "s_ItemID";
            public const string PalletLocationID = "s_PalletLocationID";
            public const string BatchNumber = "s_BatchNumber";
            public const string ExpireDate = "s_ExpireDate";
            public const string ReceiveDocID = "s_ReceiveDocID";
            public const string BoxLevel = "s_BoxLevel";
            public const string Cost = "s_Cost";
            public const string ManufacturerID = "s_ManufacturerID";
            public const string Packs = "s_Packs";
            public const string QtyPerPack = "s_QtyPerPack";
            public const string QuantityInBU = "s_QuantityInBU";
            public const string ReceivePalletID = "s_ReceivePalletID";
            public const string UnitPrice = "s_UnitPrice";
            public const string UnitID = "s_UnitID";
            public const string StoreID = "s_StoreID";
            public const string DeliveryNote = "s_DeliveryNote";
            public const string OrderDetailID = "s_OrderDetailID";
            public const string IsApproved = "s_IsApproved";
            public const string ApprovedByUserID = "s_ApprovedByUserID";
            public const string LineNumber = "s_LineNumber";
            public const string PhysicalStoreID = "s_PhysicalStoreID";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual int PickListID
	    {
			get
	        {
				return base.Getint(ColumnNames.PickListID);
			}
			set
	        {
				base.Setint(ColumnNames.PickListID, value);
			}
		}

		public virtual int ItemID
	    {
			get
	        {
				return base.Getint(ColumnNames.ItemID);
			}
			set
	        {
				base.Setint(ColumnNames.ItemID, value);
			}
		}

		public virtual int PalletLocationID
	    {
			get
	        {
				return base.Getint(ColumnNames.PalletLocationID);
			}
			set
	        {
				base.Setint(ColumnNames.PalletLocationID, value);
			}
		}

		public virtual string BatchNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.BatchNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.BatchNumber, value);
			}
		}

		public virtual DateTime ExpireDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ExpireDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ExpireDate, value);
			}
		}

		public virtual int ReceiveDocID
	    {
			get
	        {
				return base.Getint(ColumnNames.ReceiveDocID);
			}
			set
	        {
				base.Setint(ColumnNames.ReceiveDocID, value);
			}
		}

		public virtual int BoxLevel
	    {
			get
	        {
				return base.Getint(ColumnNames.BoxLevel);
			}
			set
	        {
				base.Setint(ColumnNames.BoxLevel, value);
			}
		}

		public virtual double Cost
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Cost);
			}
			set
	        {
				base.Setdouble(ColumnNames.Cost, value);
			}
		}

		public virtual int ManufacturerID
	    {
			get
	        {
				return base.Getint(ColumnNames.ManufacturerID);
			}
			set
	        {
				base.Setint(ColumnNames.ManufacturerID, value);
			}
		}

		public virtual decimal Packs
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Packs);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Packs, value);
			}
		}

		public virtual int QtyPerPack
	    {
			get
	        {
				return base.Getint(ColumnNames.QtyPerPack);
			}
			set
	        {
				base.Setint(ColumnNames.QtyPerPack, value);
			}
		}

		public virtual decimal QuantityInBU
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.QuantityInBU);
			}
			set
	        {
				base.Setdecimal(ColumnNames.QuantityInBU, value);
			}
		}

		public virtual int ReceivePalletID
	    {
			get
	        {
				return base.Getint(ColumnNames.ReceivePalletID);
			}
			set
	        {
				base.Setint(ColumnNames.ReceivePalletID, value);
			}
		}

		public virtual double UnitPrice
	    {
			get
	        {
				return base.Getdouble(ColumnNames.UnitPrice);
			}
			set
	        {
				base.Setdouble(ColumnNames.UnitPrice, value);
			}
		}

		public virtual int UnitID
	    {
			get
	        {
				return base.Getint(ColumnNames.UnitID);
			}
			set
	        {
				base.Setint(ColumnNames.UnitID, value);
			}
		}

		public virtual int StoreID
	    {
			get
	        {
				return base.Getint(ColumnNames.StoreID);
			}
			set
	        {
				base.Setint(ColumnNames.StoreID, value);
			}
		}

		public virtual bool DeliveryNote
	    {
			get
	        {
				return base.Getbool(ColumnNames.DeliveryNote);
			}
			set
	        {
				base.Setbool(ColumnNames.DeliveryNote, value);
			}
		}

		public virtual int OrderDetailID
	    {
			get
	        {
				return base.Getint(ColumnNames.OrderDetailID);
			}
			set
	        {
				base.Setint(ColumnNames.OrderDetailID, value);
			}
		}

		public virtual bool IsApproved
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsApproved);
			}
			set
	        {
				base.Setbool(ColumnNames.IsApproved, value);
			}
		}

		public virtual int ApprovedByUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.ApprovedByUserID);
			}
			set
	        {
				base.Setint(ColumnNames.ApprovedByUserID, value);
			}
		}

		public virtual int LineNumber
	    {
			get
	        {
				return base.Getint(ColumnNames.LineNumber);
			}
			set
	        {
				base.Setint(ColumnNames.LineNumber, value);
			}
		}

		public virtual int PhysicalStoreID
	    {
			get
	        {
				return base.Getint(ColumnNames.PhysicalStoreID);
			}
			set
	        {
				base.Setint(ColumnNames.PhysicalStoreID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_PickListID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PickListID) ? string.Empty : base.GetintAsString(ColumnNames.PickListID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PickListID);
				else
					this.PickListID = base.SetintAsString(ColumnNames.PickListID, value);
			}
		}

		public virtual string s_ItemID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ItemID) ? string.Empty : base.GetintAsString(ColumnNames.ItemID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ItemID);
				else
					this.ItemID = base.SetintAsString(ColumnNames.ItemID, value);
			}
		}

		public virtual string s_PalletLocationID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PalletLocationID) ? string.Empty : base.GetintAsString(ColumnNames.PalletLocationID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PalletLocationID);
				else
					this.PalletLocationID = base.SetintAsString(ColumnNames.PalletLocationID, value);
			}
		}

		public virtual string s_BatchNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BatchNumber) ? string.Empty : base.GetstringAsString(ColumnNames.BatchNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BatchNumber);
				else
					this.BatchNumber = base.SetstringAsString(ColumnNames.BatchNumber, value);
			}
		}

		public virtual string s_ExpireDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ExpireDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ExpireDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ExpireDate);
				else
					this.ExpireDate = base.SetDateTimeAsString(ColumnNames.ExpireDate, value);
			}
		}

		public virtual string s_ReceiveDocID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceiveDocID) ? string.Empty : base.GetintAsString(ColumnNames.ReceiveDocID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceiveDocID);
				else
					this.ReceiveDocID = base.SetintAsString(ColumnNames.ReceiveDocID, value);
			}
		}

		public virtual string s_BoxLevel
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BoxLevel) ? string.Empty : base.GetintAsString(ColumnNames.BoxLevel);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BoxLevel);
				else
					this.BoxLevel = base.SetintAsString(ColumnNames.BoxLevel, value);
			}
		}

		public virtual string s_Cost
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Cost) ? string.Empty : base.GetdoubleAsString(ColumnNames.Cost);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Cost);
				else
					this.Cost = base.SetdoubleAsString(ColumnNames.Cost, value);
			}
		}

		public virtual string s_ManufacturerID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ManufacturerID) ? string.Empty : base.GetintAsString(ColumnNames.ManufacturerID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ManufacturerID);
				else
					this.ManufacturerID = base.SetintAsString(ColumnNames.ManufacturerID, value);
			}
		}

		public virtual string s_Packs
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Packs) ? string.Empty : base.GetdecimalAsString(ColumnNames.Packs);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Packs);
				else
					this.Packs = base.SetdecimalAsString(ColumnNames.Packs, value);
			}
		}

		public virtual string s_QtyPerPack
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.QtyPerPack) ? string.Empty : base.GetintAsString(ColumnNames.QtyPerPack);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.QtyPerPack);
				else
					this.QtyPerPack = base.SetintAsString(ColumnNames.QtyPerPack, value);
			}
		}

		public virtual string s_QuantityInBU
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.QuantityInBU) ? string.Empty : base.GetdecimalAsString(ColumnNames.QuantityInBU);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.QuantityInBU);
				else
					this.QuantityInBU = base.SetdecimalAsString(ColumnNames.QuantityInBU, value);
			}
		}

		public virtual string s_ReceivePalletID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceivePalletID) ? string.Empty : base.GetintAsString(ColumnNames.ReceivePalletID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceivePalletID);
				else
					this.ReceivePalletID = base.SetintAsString(ColumnNames.ReceivePalletID, value);
			}
		}

		public virtual string s_UnitPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UnitPrice) ? string.Empty : base.GetdoubleAsString(ColumnNames.UnitPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnitPrice);
				else
					this.UnitPrice = base.SetdoubleAsString(ColumnNames.UnitPrice, value);
			}
		}

		public virtual string s_UnitID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UnitID) ? string.Empty : base.GetintAsString(ColumnNames.UnitID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnitID);
				else
					this.UnitID = base.SetintAsString(ColumnNames.UnitID, value);
			}
		}

		public virtual string s_StoreID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StoreID) ? string.Empty : base.GetintAsString(ColumnNames.StoreID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StoreID);
				else
					this.StoreID = base.SetintAsString(ColumnNames.StoreID, value);
			}
		}

		public virtual string s_DeliveryNote
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryNote) ? string.Empty : base.GetboolAsString(ColumnNames.DeliveryNote);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryNote);
				else
					this.DeliveryNote = base.SetboolAsString(ColumnNames.DeliveryNote, value);
			}
		}

		public virtual string s_OrderDetailID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderDetailID) ? string.Empty : base.GetintAsString(ColumnNames.OrderDetailID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderDetailID);
				else
					this.OrderDetailID = base.SetintAsString(ColumnNames.OrderDetailID, value);
			}
		}

		public virtual string s_IsApproved
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsApproved) ? string.Empty : base.GetboolAsString(ColumnNames.IsApproved);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsApproved);
				else
					this.IsApproved = base.SetboolAsString(ColumnNames.IsApproved, value);
			}
		}

		public virtual string s_ApprovedByUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ApprovedByUserID) ? string.Empty : base.GetintAsString(ColumnNames.ApprovedByUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ApprovedByUserID);
				else
					this.ApprovedByUserID = base.SetintAsString(ColumnNames.ApprovedByUserID, value);
			}
		}

		public virtual string s_LineNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LineNumber) ? string.Empty : base.GetintAsString(ColumnNames.LineNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LineNumber);
				else
					this.LineNumber = base.SetintAsString(ColumnNames.LineNumber, value);
			}
		}

		public virtual string s_PhysicalStoreID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PhysicalStoreID) ? string.Empty : base.GetintAsString(ColumnNames.PhysicalStoreID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PhysicalStoreID);
				else
					this.PhysicalStoreID = base.SetintAsString(ColumnNames.PhysicalStoreID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PickListID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PickListID, Parameters.PickListID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ItemID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PalletLocationID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PalletLocationID, Parameters.PalletLocationID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BatchNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BatchNumber, Parameters.BatchNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ExpireDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ExpireDate, Parameters.ExpireDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReceiveDocID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceiveDocID, Parameters.ReceiveDocID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BoxLevel
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BoxLevel, Parameters.BoxLevel);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Cost
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Cost, Parameters.Cost);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ManufacturerID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ManufacturerID, Parameters.ManufacturerID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Packs
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Packs, Parameters.Packs);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter QtyPerPack
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.QtyPerPack, Parameters.QtyPerPack);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter QuantityInBU
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.QuantityInBU, Parameters.QuantityInBU);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReceivePalletID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceivePalletID, Parameters.ReceivePalletID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UnitPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UnitPrice, Parameters.UnitPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UnitID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UnitID, Parameters.UnitID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StoreID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StoreID, Parameters.StoreID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeliveryNote
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryNote, Parameters.DeliveryNote);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrderDetailID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderDetailID, Parameters.OrderDetailID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsApproved
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsApproved, Parameters.IsApproved);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ApprovedByUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ApprovedByUserID, Parameters.ApprovedByUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LineNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LineNumber, Parameters.LineNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PhysicalStoreID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PhysicalStoreID, Parameters.PhysicalStoreID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter PickListID
		    {
				get
		        {
					if(_PickListID_W == null)
	        	    {
						_PickListID_W = TearOff.PickListID;
					}
					return _PickListID_W;
				}
			}

			public WhereParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public WhereParameter PalletLocationID
		    {
				get
		        {
					if(_PalletLocationID_W == null)
	        	    {
						_PalletLocationID_W = TearOff.PalletLocationID;
					}
					return _PalletLocationID_W;
				}
			}

			public WhereParameter BatchNumber
		    {
				get
		        {
					if(_BatchNumber_W == null)
	        	    {
						_BatchNumber_W = TearOff.BatchNumber;
					}
					return _BatchNumber_W;
				}
			}

			public WhereParameter ExpireDate
		    {
				get
		        {
					if(_ExpireDate_W == null)
	        	    {
						_ExpireDate_W = TearOff.ExpireDate;
					}
					return _ExpireDate_W;
				}
			}

			public WhereParameter ReceiveDocID
		    {
				get
		        {
					if(_ReceiveDocID_W == null)
	        	    {
						_ReceiveDocID_W = TearOff.ReceiveDocID;
					}
					return _ReceiveDocID_W;
				}
			}

			public WhereParameter BoxLevel
		    {
				get
		        {
					if(_BoxLevel_W == null)
	        	    {
						_BoxLevel_W = TearOff.BoxLevel;
					}
					return _BoxLevel_W;
				}
			}

			public WhereParameter Cost
		    {
				get
		        {
					if(_Cost_W == null)
	        	    {
						_Cost_W = TearOff.Cost;
					}
					return _Cost_W;
				}
			}

			public WhereParameter ManufacturerID
		    {
				get
		        {
					if(_ManufacturerID_W == null)
	        	    {
						_ManufacturerID_W = TearOff.ManufacturerID;
					}
					return _ManufacturerID_W;
				}
			}

			public WhereParameter Packs
		    {
				get
		        {
					if(_Packs_W == null)
	        	    {
						_Packs_W = TearOff.Packs;
					}
					return _Packs_W;
				}
			}

			public WhereParameter QtyPerPack
		    {
				get
		        {
					if(_QtyPerPack_W == null)
	        	    {
						_QtyPerPack_W = TearOff.QtyPerPack;
					}
					return _QtyPerPack_W;
				}
			}

			public WhereParameter QuantityInBU
		    {
				get
		        {
					if(_QuantityInBU_W == null)
	        	    {
						_QuantityInBU_W = TearOff.QuantityInBU;
					}
					return _QuantityInBU_W;
				}
			}

			public WhereParameter ReceivePalletID
		    {
				get
		        {
					if(_ReceivePalletID_W == null)
	        	    {
						_ReceivePalletID_W = TearOff.ReceivePalletID;
					}
					return _ReceivePalletID_W;
				}
			}

			public WhereParameter UnitPrice
		    {
				get
		        {
					if(_UnitPrice_W == null)
	        	    {
						_UnitPrice_W = TearOff.UnitPrice;
					}
					return _UnitPrice_W;
				}
			}

			public WhereParameter UnitID
		    {
				get
		        {
					if(_UnitID_W == null)
	        	    {
						_UnitID_W = TearOff.UnitID;
					}
					return _UnitID_W;
				}
			}

			public WhereParameter StoreID
		    {
				get
		        {
					if(_StoreID_W == null)
	        	    {
						_StoreID_W = TearOff.StoreID;
					}
					return _StoreID_W;
				}
			}

			public WhereParameter DeliveryNote
		    {
				get
		        {
					if(_DeliveryNote_W == null)
	        	    {
						_DeliveryNote_W = TearOff.DeliveryNote;
					}
					return _DeliveryNote_W;
				}
			}

			public WhereParameter OrderDetailID
		    {
				get
		        {
					if(_OrderDetailID_W == null)
	        	    {
						_OrderDetailID_W = TearOff.OrderDetailID;
					}
					return _OrderDetailID_W;
				}
			}

			public WhereParameter IsApproved
		    {
				get
		        {
					if(_IsApproved_W == null)
	        	    {
						_IsApproved_W = TearOff.IsApproved;
					}
					return _IsApproved_W;
				}
			}

			public WhereParameter ApprovedByUserID
		    {
				get
		        {
					if(_ApprovedByUserID_W == null)
	        	    {
						_ApprovedByUserID_W = TearOff.ApprovedByUserID;
					}
					return _ApprovedByUserID_W;
				}
			}

			public WhereParameter LineNumber
		    {
				get
		        {
					if(_LineNumber_W == null)
	        	    {
						_LineNumber_W = TearOff.LineNumber;
					}
					return _LineNumber_W;
				}
			}

			public WhereParameter PhysicalStoreID
		    {
				get
		        {
					if(_PhysicalStoreID_W == null)
	        	    {
						_PhysicalStoreID_W = TearOff.PhysicalStoreID;
					}
					return _PhysicalStoreID_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _PickListID_W = null;
			private WhereParameter _ItemID_W = null;
			private WhereParameter _PalletLocationID_W = null;
			private WhereParameter _BatchNumber_W = null;
			private WhereParameter _ExpireDate_W = null;
			private WhereParameter _ReceiveDocID_W = null;
			private WhereParameter _BoxLevel_W = null;
			private WhereParameter _Cost_W = null;
			private WhereParameter _ManufacturerID_W = null;
			private WhereParameter _Packs_W = null;
			private WhereParameter _QtyPerPack_W = null;
			private WhereParameter _QuantityInBU_W = null;
			private WhereParameter _ReceivePalletID_W = null;
			private WhereParameter _UnitPrice_W = null;
			private WhereParameter _UnitID_W = null;
			private WhereParameter _StoreID_W = null;
			private WhereParameter _DeliveryNote_W = null;
			private WhereParameter _OrderDetailID_W = null;
			private WhereParameter _IsApproved_W = null;
			private WhereParameter _ApprovedByUserID_W = null;
			private WhereParameter _LineNumber_W = null;
			private WhereParameter _PhysicalStoreID_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_PickListID_W = null;
				_ItemID_W = null;
				_PalletLocationID_W = null;
				_BatchNumber_W = null;
				_ExpireDate_W = null;
				_ReceiveDocID_W = null;
				_BoxLevel_W = null;
				_Cost_W = null;
				_ManufacturerID_W = null;
				_Packs_W = null;
				_QtyPerPack_W = null;
				_QuantityInBU_W = null;
				_ReceivePalletID_W = null;
				_UnitPrice_W = null;
				_UnitID_W = null;
				_StoreID_W = null;
				_DeliveryNote_W = null;
				_OrderDetailID_W = null;
				_IsApproved_W = null;
				_ApprovedByUserID_W = null;
				_LineNumber_W = null;
				_PhysicalStoreID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PickListID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PickListID, Parameters.PickListID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ItemID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PalletLocationID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PalletLocationID, Parameters.PalletLocationID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BatchNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BatchNumber, Parameters.BatchNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ExpireDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExpireDate, Parameters.ExpireDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReceiveDocID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceiveDocID, Parameters.ReceiveDocID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BoxLevel
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BoxLevel, Parameters.BoxLevel);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Cost
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Cost, Parameters.Cost);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ManufacturerID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ManufacturerID, Parameters.ManufacturerID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Packs
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Packs, Parameters.Packs);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter QtyPerPack
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.QtyPerPack, Parameters.QtyPerPack);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter QuantityInBU
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.QuantityInBU, Parameters.QuantityInBU);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReceivePalletID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceivePalletID, Parameters.ReceivePalletID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UnitPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitPrice, Parameters.UnitPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UnitID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitID, Parameters.UnitID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StoreID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StoreID, Parameters.StoreID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeliveryNote
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryNote, Parameters.DeliveryNote);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrderDetailID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderDetailID, Parameters.OrderDetailID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsApproved
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsApproved, Parameters.IsApproved);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ApprovedByUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ApprovedByUserID, Parameters.ApprovedByUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LineNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LineNumber, Parameters.LineNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PhysicalStoreID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PhysicalStoreID, Parameters.PhysicalStoreID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter PickListID
		    {
				get
		        {
					if(_PickListID_W == null)
	        	    {
						_PickListID_W = TearOff.PickListID;
					}
					return _PickListID_W;
				}
			}

			public AggregateParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public AggregateParameter PalletLocationID
		    {
				get
		        {
					if(_PalletLocationID_W == null)
	        	    {
						_PalletLocationID_W = TearOff.PalletLocationID;
					}
					return _PalletLocationID_W;
				}
			}

			public AggregateParameter BatchNumber
		    {
				get
		        {
					if(_BatchNumber_W == null)
	        	    {
						_BatchNumber_W = TearOff.BatchNumber;
					}
					return _BatchNumber_W;
				}
			}

			public AggregateParameter ExpireDate
		    {
				get
		        {
					if(_ExpireDate_W == null)
	        	    {
						_ExpireDate_W = TearOff.ExpireDate;
					}
					return _ExpireDate_W;
				}
			}

			public AggregateParameter ReceiveDocID
		    {
				get
		        {
					if(_ReceiveDocID_W == null)
	        	    {
						_ReceiveDocID_W = TearOff.ReceiveDocID;
					}
					return _ReceiveDocID_W;
				}
			}

			public AggregateParameter BoxLevel
		    {
				get
		        {
					if(_BoxLevel_W == null)
	        	    {
						_BoxLevel_W = TearOff.BoxLevel;
					}
					return _BoxLevel_W;
				}
			}

			public AggregateParameter Cost
		    {
				get
		        {
					if(_Cost_W == null)
	        	    {
						_Cost_W = TearOff.Cost;
					}
					return _Cost_W;
				}
			}

			public AggregateParameter ManufacturerID
		    {
				get
		        {
					if(_ManufacturerID_W == null)
	        	    {
						_ManufacturerID_W = TearOff.ManufacturerID;
					}
					return _ManufacturerID_W;
				}
			}

			public AggregateParameter Packs
		    {
				get
		        {
					if(_Packs_W == null)
	        	    {
						_Packs_W = TearOff.Packs;
					}
					return _Packs_W;
				}
			}

			public AggregateParameter QtyPerPack
		    {
				get
		        {
					if(_QtyPerPack_W == null)
	        	    {
						_QtyPerPack_W = TearOff.QtyPerPack;
					}
					return _QtyPerPack_W;
				}
			}

			public AggregateParameter QuantityInBU
		    {
				get
		        {
					if(_QuantityInBU_W == null)
	        	    {
						_QuantityInBU_W = TearOff.QuantityInBU;
					}
					return _QuantityInBU_W;
				}
			}

			public AggregateParameter ReceivePalletID
		    {
				get
		        {
					if(_ReceivePalletID_W == null)
	        	    {
						_ReceivePalletID_W = TearOff.ReceivePalletID;
					}
					return _ReceivePalletID_W;
				}
			}

			public AggregateParameter UnitPrice
		    {
				get
		        {
					if(_UnitPrice_W == null)
	        	    {
						_UnitPrice_W = TearOff.UnitPrice;
					}
					return _UnitPrice_W;
				}
			}

			public AggregateParameter UnitID
		    {
				get
		        {
					if(_UnitID_W == null)
	        	    {
						_UnitID_W = TearOff.UnitID;
					}
					return _UnitID_W;
				}
			}

			public AggregateParameter StoreID
		    {
				get
		        {
					if(_StoreID_W == null)
	        	    {
						_StoreID_W = TearOff.StoreID;
					}
					return _StoreID_W;
				}
			}

			public AggregateParameter DeliveryNote
		    {
				get
		        {
					if(_DeliveryNote_W == null)
	        	    {
						_DeliveryNote_W = TearOff.DeliveryNote;
					}
					return _DeliveryNote_W;
				}
			}

			public AggregateParameter OrderDetailID
		    {
				get
		        {
					if(_OrderDetailID_W == null)
	        	    {
						_OrderDetailID_W = TearOff.OrderDetailID;
					}
					return _OrderDetailID_W;
				}
			}

			public AggregateParameter IsApproved
		    {
				get
		        {
					if(_IsApproved_W == null)
	        	    {
						_IsApproved_W = TearOff.IsApproved;
					}
					return _IsApproved_W;
				}
			}

			public AggregateParameter ApprovedByUserID
		    {
				get
		        {
					if(_ApprovedByUserID_W == null)
	        	    {
						_ApprovedByUserID_W = TearOff.ApprovedByUserID;
					}
					return _ApprovedByUserID_W;
				}
			}

			public AggregateParameter LineNumber
		    {
				get
		        {
					if(_LineNumber_W == null)
	        	    {
						_LineNumber_W = TearOff.LineNumber;
					}
					return _LineNumber_W;
				}
			}

			public AggregateParameter PhysicalStoreID
		    {
				get
		        {
					if(_PhysicalStoreID_W == null)
	        	    {
						_PhysicalStoreID_W = TearOff.PhysicalStoreID;
					}
					return _PhysicalStoreID_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _PickListID_W = null;
			private AggregateParameter _ItemID_W = null;
			private AggregateParameter _PalletLocationID_W = null;
			private AggregateParameter _BatchNumber_W = null;
			private AggregateParameter _ExpireDate_W = null;
			private AggregateParameter _ReceiveDocID_W = null;
			private AggregateParameter _BoxLevel_W = null;
			private AggregateParameter _Cost_W = null;
			private AggregateParameter _ManufacturerID_W = null;
			private AggregateParameter _Packs_W = null;
			private AggregateParameter _QtyPerPack_W = null;
			private AggregateParameter _QuantityInBU_W = null;
			private AggregateParameter _ReceivePalletID_W = null;
			private AggregateParameter _UnitPrice_W = null;
			private AggregateParameter _UnitID_W = null;
			private AggregateParameter _StoreID_W = null;
			private AggregateParameter _DeliveryNote_W = null;
			private AggregateParameter _OrderDetailID_W = null;
			private AggregateParameter _IsApproved_W = null;
			private AggregateParameter _ApprovedByUserID_W = null;
			private AggregateParameter _LineNumber_W = null;
			private AggregateParameter _PhysicalStoreID_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_PickListID_W = null;
				_ItemID_W = null;
				_PalletLocationID_W = null;
				_BatchNumber_W = null;
				_ExpireDate_W = null;
				_ReceiveDocID_W = null;
				_BoxLevel_W = null;
				_Cost_W = null;
				_ManufacturerID_W = null;
				_Packs_W = null;
				_QtyPerPack_W = null;
				_QuantityInBU_W = null;
				_ReceivePalletID_W = null;
				_UnitPrice_W = null;
				_UnitID_W = null;
				_StoreID_W = null;
				_DeliveryNote_W = null;
				_OrderDetailID_W = null;
				_IsApproved_W = null;
				_ApprovedByUserID_W = null;
				_LineNumber_W = null;
				_PhysicalStoreID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PickListDetailInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PickListDetailUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PickListDetailDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PickListID);
			p.SourceColumn = ColumnNames.PickListID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ItemID);
			p.SourceColumn = ColumnNames.ItemID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PalletLocationID);
			p.SourceColumn = ColumnNames.PalletLocationID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BatchNumber);
			p.SourceColumn = ColumnNames.BatchNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ExpireDate);
			p.SourceColumn = ColumnNames.ExpireDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReceiveDocID);
			p.SourceColumn = ColumnNames.ReceiveDocID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BoxLevel);
			p.SourceColumn = ColumnNames.BoxLevel;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Cost);
			p.SourceColumn = ColumnNames.Cost;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ManufacturerID);
			p.SourceColumn = ColumnNames.ManufacturerID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Packs);
			p.SourceColumn = ColumnNames.Packs;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.QtyPerPack);
			p.SourceColumn = ColumnNames.QtyPerPack;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.QuantityInBU);
			p.SourceColumn = ColumnNames.QuantityInBU;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReceivePalletID);
			p.SourceColumn = ColumnNames.ReceivePalletID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UnitPrice);
			p.SourceColumn = ColumnNames.UnitPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UnitID);
			p.SourceColumn = ColumnNames.UnitID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StoreID);
			p.SourceColumn = ColumnNames.StoreID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeliveryNote);
			p.SourceColumn = ColumnNames.DeliveryNote;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrderDetailID);
			p.SourceColumn = ColumnNames.OrderDetailID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsApproved);
			p.SourceColumn = ColumnNames.IsApproved;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ApprovedByUserID);
			p.SourceColumn = ColumnNames.ApprovedByUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LineNumber);
			p.SourceColumn = ColumnNames.LineNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PhysicalStoreID);
			p.SourceColumn = ColumnNames.PhysicalStoreID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
