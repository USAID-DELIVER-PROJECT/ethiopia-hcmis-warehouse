
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _JournalLite : SqlClientEntity
	{
		public _JournalLite()
		{
			this.QuerySource = "JournalLite";
			this.MappingName = "JournalLite";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_JournalLiteLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_JournalLiteLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Description
			{
				get
				{
					return new SqlParameter("@Description", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Identifier
			{
				get
				{
					return new SqlParameter("@Identifier", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter AffectedLedgerID
			{
				get
				{
					return new SqlParameter("@AffectedLedgerID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Quantity
			{
				get
				{
					return new SqlParameter("@Quantity", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter UnitCost
			{
				get
				{
					return new SqlParameter("@UnitCost", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter Margin
			{
				get
				{
					return new SqlParameter("@Margin", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter SellingPrice
			{
				get
				{
					return new SqlParameter("@SellingPrice", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string Description = "Description";
            public const string Identifier = "Identifier";
            public const string AffectedLedgerID = "AffectedLedgerID";
            public const string Quantity = "Quantity";
            public const string UnitCost = "UnitCost";
            public const string Margin = "Margin";
            public const string SellingPrice = "SellingPrice";
            public const string UserID = "UserID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _JournalLite.PropertyNames.ID;
					ht[Description] = _JournalLite.PropertyNames.Description;
					ht[Identifier] = _JournalLite.PropertyNames.Identifier;
					ht[AffectedLedgerID] = _JournalLite.PropertyNames.AffectedLedgerID;
					ht[Quantity] = _JournalLite.PropertyNames.Quantity;
					ht[UnitCost] = _JournalLite.PropertyNames.UnitCost;
					ht[Margin] = _JournalLite.PropertyNames.Margin;
					ht[SellingPrice] = _JournalLite.PropertyNames.SellingPrice;
					ht[UserID] = _JournalLite.PropertyNames.UserID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string Description = "Description";
            public const string Identifier = "Identifier";
            public const string AffectedLedgerID = "AffectedLedgerID";
            public const string Quantity = "Quantity";
            public const string UnitCost = "UnitCost";
            public const string Margin = "Margin";
            public const string SellingPrice = "SellingPrice";
            public const string UserID = "UserID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _JournalLite.ColumnNames.ID;
					ht[Description] = _JournalLite.ColumnNames.Description;
					ht[Identifier] = _JournalLite.ColumnNames.Identifier;
					ht[AffectedLedgerID] = _JournalLite.ColumnNames.AffectedLedgerID;
					ht[Quantity] = _JournalLite.ColumnNames.Quantity;
					ht[UnitCost] = _JournalLite.ColumnNames.UnitCost;
					ht[Margin] = _JournalLite.ColumnNames.Margin;
					ht[SellingPrice] = _JournalLite.ColumnNames.SellingPrice;
					ht[UserID] = _JournalLite.ColumnNames.UserID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string Description = "s_Description";
            public const string Identifier = "s_Identifier";
            public const string AffectedLedgerID = "s_AffectedLedgerID";
            public const string Quantity = "s_Quantity";
            public const string UnitCost = "s_UnitCost";
            public const string Margin = "s_Margin";
            public const string SellingPrice = "s_SellingPrice";
            public const string UserID = "s_UserID";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual string Description
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description);
			}
			set
	        {
				base.Setstring(ColumnNames.Description, value);
			}
		}

		public virtual string Identifier
	    {
			get
	        {
				return base.Getstring(ColumnNames.Identifier);
			}
			set
	        {
				base.Setstring(ColumnNames.Identifier, value);
			}
		}

		public virtual int AffectedLedgerID
	    {
			get
	        {
				return base.Getint(ColumnNames.AffectedLedgerID);
			}
			set
	        {
				base.Setint(ColumnNames.AffectedLedgerID, value);
			}
		}

		public virtual decimal Quantity
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Quantity);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Quantity, value);
			}
		}

		public virtual decimal UnitCost
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.UnitCost);
			}
			set
	        {
				base.Setdecimal(ColumnNames.UnitCost, value);
			}
		}

		public virtual decimal Margin
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Margin);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Margin, value);
			}
		}

		public virtual decimal SellingPrice
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.SellingPrice);
			}
			set
	        {
				base.Setdecimal(ColumnNames.SellingPrice, value);
			}
		}

		public virtual int UserID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserID);
			}
			set
	        {
				base.Setint(ColumnNames.UserID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_Description
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description) ? string.Empty : base.GetstringAsString(ColumnNames.Description);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description);
				else
					this.Description = base.SetstringAsString(ColumnNames.Description, value);
			}
		}

		public virtual string s_Identifier
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Identifier) ? string.Empty : base.GetstringAsString(ColumnNames.Identifier);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Identifier);
				else
					this.Identifier = base.SetstringAsString(ColumnNames.Identifier, value);
			}
		}

		public virtual string s_AffectedLedgerID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AffectedLedgerID) ? string.Empty : base.GetintAsString(ColumnNames.AffectedLedgerID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AffectedLedgerID);
				else
					this.AffectedLedgerID = base.SetintAsString(ColumnNames.AffectedLedgerID, value);
			}
		}

		public virtual string s_Quantity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Quantity) ? string.Empty : base.GetdecimalAsString(ColumnNames.Quantity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Quantity);
				else
					this.Quantity = base.SetdecimalAsString(ColumnNames.Quantity, value);
			}
		}

		public virtual string s_UnitCost
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UnitCost) ? string.Empty : base.GetdecimalAsString(ColumnNames.UnitCost);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnitCost);
				else
					this.UnitCost = base.SetdecimalAsString(ColumnNames.UnitCost, value);
			}
		}

		public virtual string s_Margin
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Margin) ? string.Empty : base.GetdecimalAsString(ColumnNames.Margin);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Margin);
				else
					this.Margin = base.SetdecimalAsString(ColumnNames.Margin, value);
			}
		}

		public virtual string s_SellingPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SellingPrice) ? string.Empty : base.GetdecimalAsString(ColumnNames.SellingPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SellingPrice);
				else
					this.SellingPrice = base.SetdecimalAsString(ColumnNames.SellingPrice, value);
			}
		}

		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetintAsString(ColumnNames.UserID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Identifier
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Identifier, Parameters.Identifier);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AffectedLedgerID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AffectedLedgerID, Parameters.AffectedLedgerID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Quantity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Quantity, Parameters.Quantity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UnitCost
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UnitCost, Parameters.UnitCost);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Margin
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Margin, Parameters.Margin);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SellingPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SellingPrice, Parameters.SellingPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public WhereParameter Identifier
		    {
				get
		        {
					if(_Identifier_W == null)
	        	    {
						_Identifier_W = TearOff.Identifier;
					}
					return _Identifier_W;
				}
			}

			public WhereParameter AffectedLedgerID
		    {
				get
		        {
					if(_AffectedLedgerID_W == null)
	        	    {
						_AffectedLedgerID_W = TearOff.AffectedLedgerID;
					}
					return _AffectedLedgerID_W;
				}
			}

			public WhereParameter Quantity
		    {
				get
		        {
					if(_Quantity_W == null)
	        	    {
						_Quantity_W = TearOff.Quantity;
					}
					return _Quantity_W;
				}
			}

			public WhereParameter UnitCost
		    {
				get
		        {
					if(_UnitCost_W == null)
	        	    {
						_UnitCost_W = TearOff.UnitCost;
					}
					return _UnitCost_W;
				}
			}

			public WhereParameter Margin
		    {
				get
		        {
					if(_Margin_W == null)
	        	    {
						_Margin_W = TearOff.Margin;
					}
					return _Margin_W;
				}
			}

			public WhereParameter SellingPrice
		    {
				get
		        {
					if(_SellingPrice_W == null)
	        	    {
						_SellingPrice_W = TearOff.SellingPrice;
					}
					return _SellingPrice_W;
				}
			}

			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _Description_W = null;
			private WhereParameter _Identifier_W = null;
			private WhereParameter _AffectedLedgerID_W = null;
			private WhereParameter _Quantity_W = null;
			private WhereParameter _UnitCost_W = null;
			private WhereParameter _Margin_W = null;
			private WhereParameter _SellingPrice_W = null;
			private WhereParameter _UserID_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_Description_W = null;
				_Identifier_W = null;
				_AffectedLedgerID_W = null;
				_Quantity_W = null;
				_UnitCost_W = null;
				_Margin_W = null;
				_SellingPrice_W = null;
				_UserID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Identifier
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Identifier, Parameters.Identifier);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AffectedLedgerID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AffectedLedgerID, Parameters.AffectedLedgerID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Quantity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Quantity, Parameters.Quantity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UnitCost
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitCost, Parameters.UnitCost);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Margin
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Margin, Parameters.Margin);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SellingPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SellingPrice, Parameters.SellingPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public AggregateParameter Identifier
		    {
				get
		        {
					if(_Identifier_W == null)
	        	    {
						_Identifier_W = TearOff.Identifier;
					}
					return _Identifier_W;
				}
			}

			public AggregateParameter AffectedLedgerID
		    {
				get
		        {
					if(_AffectedLedgerID_W == null)
	        	    {
						_AffectedLedgerID_W = TearOff.AffectedLedgerID;
					}
					return _AffectedLedgerID_W;
				}
			}

			public AggregateParameter Quantity
		    {
				get
		        {
					if(_Quantity_W == null)
	        	    {
						_Quantity_W = TearOff.Quantity;
					}
					return _Quantity_W;
				}
			}

			public AggregateParameter UnitCost
		    {
				get
		        {
					if(_UnitCost_W == null)
	        	    {
						_UnitCost_W = TearOff.UnitCost;
					}
					return _UnitCost_W;
				}
			}

			public AggregateParameter Margin
		    {
				get
		        {
					if(_Margin_W == null)
	        	    {
						_Margin_W = TearOff.Margin;
					}
					return _Margin_W;
				}
			}

			public AggregateParameter SellingPrice
		    {
				get
		        {
					if(_SellingPrice_W == null)
	        	    {
						_SellingPrice_W = TearOff.SellingPrice;
					}
					return _SellingPrice_W;
				}
			}

			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _Description_W = null;
			private AggregateParameter _Identifier_W = null;
			private AggregateParameter _AffectedLedgerID_W = null;
			private AggregateParameter _Quantity_W = null;
			private AggregateParameter _UnitCost_W = null;
			private AggregateParameter _Margin_W = null;
			private AggregateParameter _SellingPrice_W = null;
			private AggregateParameter _UserID_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_Description_W = null;
				_Identifier_W = null;
				_AffectedLedgerID_W = null;
				_Quantity_W = null;
				_UnitCost_W = null;
				_Margin_W = null;
				_SellingPrice_W = null;
				_UserID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_JournalLiteInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_JournalLiteUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_JournalLiteDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Description);
			p.SourceColumn = ColumnNames.Description;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Identifier);
			p.SourceColumn = ColumnNames.Identifier;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AffectedLedgerID);
			p.SourceColumn = ColumnNames.AffectedLedgerID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Quantity);
			p.SourceColumn = ColumnNames.Quantity;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UnitCost);
			p.SourceColumn = ColumnNames.UnitCost;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Margin);
			p.SourceColumn = ColumnNames.Margin;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SellingPrice);
			p.SourceColumn = ColumnNames.SellingPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
