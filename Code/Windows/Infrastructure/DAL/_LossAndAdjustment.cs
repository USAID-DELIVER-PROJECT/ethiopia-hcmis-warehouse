
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _LossAndAdjustment : SqlClientEntity
	{
		public _LossAndAdjustment()
		{
			this.QuerySource = "LossAndAdjustment";
			this.MappingName = "LossAndAdjustment";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_LossAndAdjustmentLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_LossAndAdjustmentLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ItemID
			{
				get
				{
					return new SqlParameter("@ItemID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StoreId
			{
				get
				{
					return new SqlParameter("@StoreId", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ReasonId
			{
				get
				{
					return new SqlParameter("@ReasonId", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Quantity
			{
				get
				{
					return new SqlParameter("@Quantity", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter Date
			{
				get
				{
					return new SqlParameter("@Date", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ApprovedBy
			{
				get
				{
					return new SqlParameter("@ApprovedBy", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Losses
			{
				get
				{
					return new SqlParameter("@Losses", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter BatchNo
			{
				get
				{
					return new SqlParameter("@BatchNo", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Remark
			{
				get
				{
					return new SqlParameter("@Remark", SqlDbType.Text, 2147483647);
				}
			}
			
			public static SqlParameter Cost
			{
				get
				{
					return new SqlParameter("@Cost", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter RefNo
			{
				get
				{
					return new SqlParameter("@RefNo", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter EurDate
			{
				get
				{
					return new SqlParameter("@EurDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter RecID
			{
				get
				{
					return new SqlParameter("@RecID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter InventoryPeriodID
			{
				get
				{
					return new SqlParameter("@InventoryPeriodID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string ItemID = "ItemID";
            public const string StoreId = "StoreId";
            public const string ReasonId = "ReasonId";
            public const string Quantity = "Quantity";
            public const string Date = "Date";
            public const string ApprovedBy = "ApprovedBy";
            public const string Losses = "Losses";
            public const string BatchNo = "BatchNo";
            public const string Remark = "Remark";
            public const string Cost = "Cost";
            public const string RefNo = "RefNo";
            public const string EurDate = "EurDate";
            public const string RecID = "RecID";
            public const string InventoryPeriodID = "InventoryPeriodID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _LossAndAdjustment.PropertyNames.ID;
					ht[ItemID] = _LossAndAdjustment.PropertyNames.ItemID;
					ht[StoreId] = _LossAndAdjustment.PropertyNames.StoreId;
					ht[ReasonId] = _LossAndAdjustment.PropertyNames.ReasonId;
					ht[Quantity] = _LossAndAdjustment.PropertyNames.Quantity;
					ht[Date] = _LossAndAdjustment.PropertyNames.Date;
					ht[ApprovedBy] = _LossAndAdjustment.PropertyNames.ApprovedBy;
					ht[Losses] = _LossAndAdjustment.PropertyNames.Losses;
					ht[BatchNo] = _LossAndAdjustment.PropertyNames.BatchNo;
					ht[Remark] = _LossAndAdjustment.PropertyNames.Remark;
					ht[Cost] = _LossAndAdjustment.PropertyNames.Cost;
					ht[RefNo] = _LossAndAdjustment.PropertyNames.RefNo;
					ht[EurDate] = _LossAndAdjustment.PropertyNames.EurDate;
					ht[RecID] = _LossAndAdjustment.PropertyNames.RecID;
					ht[InventoryPeriodID] = _LossAndAdjustment.PropertyNames.InventoryPeriodID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string ItemID = "ItemID";
            public const string StoreId = "StoreId";
            public const string ReasonId = "ReasonId";
            public const string Quantity = "Quantity";
            public const string Date = "Date";
            public const string ApprovedBy = "ApprovedBy";
            public const string Losses = "Losses";
            public const string BatchNo = "BatchNo";
            public const string Remark = "Remark";
            public const string Cost = "Cost";
            public const string RefNo = "RefNo";
            public const string EurDate = "EurDate";
            public const string RecID = "RecID";
            public const string InventoryPeriodID = "InventoryPeriodID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _LossAndAdjustment.ColumnNames.ID;
					ht[ItemID] = _LossAndAdjustment.ColumnNames.ItemID;
					ht[StoreId] = _LossAndAdjustment.ColumnNames.StoreId;
					ht[ReasonId] = _LossAndAdjustment.ColumnNames.ReasonId;
					ht[Quantity] = _LossAndAdjustment.ColumnNames.Quantity;
					ht[Date] = _LossAndAdjustment.ColumnNames.Date;
					ht[ApprovedBy] = _LossAndAdjustment.ColumnNames.ApprovedBy;
					ht[Losses] = _LossAndAdjustment.ColumnNames.Losses;
					ht[BatchNo] = _LossAndAdjustment.ColumnNames.BatchNo;
					ht[Remark] = _LossAndAdjustment.ColumnNames.Remark;
					ht[Cost] = _LossAndAdjustment.ColumnNames.Cost;
					ht[RefNo] = _LossAndAdjustment.ColumnNames.RefNo;
					ht[EurDate] = _LossAndAdjustment.ColumnNames.EurDate;
					ht[RecID] = _LossAndAdjustment.ColumnNames.RecID;
					ht[InventoryPeriodID] = _LossAndAdjustment.ColumnNames.InventoryPeriodID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string ItemID = "s_ItemID";
            public const string StoreId = "s_StoreId";
            public const string ReasonId = "s_ReasonId";
            public const string Quantity = "s_Quantity";
            public const string Date = "s_Date";
            public const string ApprovedBy = "s_ApprovedBy";
            public const string Losses = "s_Losses";
            public const string BatchNo = "s_BatchNo";
            public const string Remark = "s_Remark";
            public const string Cost = "s_Cost";
            public const string RefNo = "s_RefNo";
            public const string EurDate = "s_EurDate";
            public const string RecID = "s_RecID";
            public const string InventoryPeriodID = "s_InventoryPeriodID";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual int ItemID
	    {
			get
	        {
				return base.Getint(ColumnNames.ItemID);
			}
			set
	        {
				base.Setint(ColumnNames.ItemID, value);
			}
		}

		public virtual int StoreId
	    {
			get
	        {
				return base.Getint(ColumnNames.StoreId);
			}
			set
	        {
				base.Setint(ColumnNames.StoreId, value);
			}
		}

		public virtual int ReasonId
	    {
			get
	        {
				return base.Getint(ColumnNames.ReasonId);
			}
			set
	        {
				base.Setint(ColumnNames.ReasonId, value);
			}
		}

		public virtual decimal Quantity
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Quantity);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Quantity, value);
			}
		}

		public virtual DateTime Date
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Date);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Date, value);
			}
		}

		public virtual string ApprovedBy
	    {
			get
	        {
				return base.Getstring(ColumnNames.ApprovedBy);
			}
			set
	        {
				base.Setstring(ColumnNames.ApprovedBy, value);
			}
		}

		public virtual bool Losses
	    {
			get
	        {
				return base.Getbool(ColumnNames.Losses);
			}
			set
	        {
				base.Setbool(ColumnNames.Losses, value);
			}
		}

		public virtual string BatchNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.BatchNo);
			}
			set
	        {
				base.Setstring(ColumnNames.BatchNo, value);
			}
		}

		public virtual string Remark
	    {
			get
	        {
				return base.Getstring(ColumnNames.Remark);
			}
			set
	        {
				base.Setstring(ColumnNames.Remark, value);
			}
		}

		public virtual double Cost
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Cost);
			}
			set
	        {
				base.Setdouble(ColumnNames.Cost, value);
			}
		}

		public virtual string RefNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.RefNo);
			}
			set
	        {
				base.Setstring(ColumnNames.RefNo, value);
			}
		}

		public virtual DateTime EurDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.EurDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.EurDate, value);
			}
		}

		public virtual int RecID
	    {
			get
	        {
				return base.Getint(ColumnNames.RecID);
			}
			set
	        {
				base.Setint(ColumnNames.RecID, value);
			}
		}

		public virtual int InventoryPeriodID
	    {
			get
	        {
				return base.Getint(ColumnNames.InventoryPeriodID);
			}
			set
	        {
				base.Setint(ColumnNames.InventoryPeriodID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_ItemID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ItemID) ? string.Empty : base.GetintAsString(ColumnNames.ItemID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ItemID);
				else
					this.ItemID = base.SetintAsString(ColumnNames.ItemID, value);
			}
		}

		public virtual string s_StoreId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StoreId) ? string.Empty : base.GetintAsString(ColumnNames.StoreId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StoreId);
				else
					this.StoreId = base.SetintAsString(ColumnNames.StoreId, value);
			}
		}

		public virtual string s_ReasonId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReasonId) ? string.Empty : base.GetintAsString(ColumnNames.ReasonId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReasonId);
				else
					this.ReasonId = base.SetintAsString(ColumnNames.ReasonId, value);
			}
		}

		public virtual string s_Quantity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Quantity) ? string.Empty : base.GetdecimalAsString(ColumnNames.Quantity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Quantity);
				else
					this.Quantity = base.SetdecimalAsString(ColumnNames.Quantity, value);
			}
		}

		public virtual string s_Date
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Date) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Date);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Date);
				else
					this.Date = base.SetDateTimeAsString(ColumnNames.Date, value);
			}
		}

		public virtual string s_ApprovedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ApprovedBy) ? string.Empty : base.GetstringAsString(ColumnNames.ApprovedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ApprovedBy);
				else
					this.ApprovedBy = base.SetstringAsString(ColumnNames.ApprovedBy, value);
			}
		}

		public virtual string s_Losses
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Losses) ? string.Empty : base.GetboolAsString(ColumnNames.Losses);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Losses);
				else
					this.Losses = base.SetboolAsString(ColumnNames.Losses, value);
			}
		}

		public virtual string s_BatchNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BatchNo) ? string.Empty : base.GetstringAsString(ColumnNames.BatchNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BatchNo);
				else
					this.BatchNo = base.SetstringAsString(ColumnNames.BatchNo, value);
			}
		}

		public virtual string s_Remark
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Remark) ? string.Empty : base.GetstringAsString(ColumnNames.Remark);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Remark);
				else
					this.Remark = base.SetstringAsString(ColumnNames.Remark, value);
			}
		}

		public virtual string s_Cost
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Cost) ? string.Empty : base.GetdoubleAsString(ColumnNames.Cost);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Cost);
				else
					this.Cost = base.SetdoubleAsString(ColumnNames.Cost, value);
			}
		}

		public virtual string s_RefNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RefNo) ? string.Empty : base.GetstringAsString(ColumnNames.RefNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RefNo);
				else
					this.RefNo = base.SetstringAsString(ColumnNames.RefNo, value);
			}
		}

		public virtual string s_EurDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EurDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.EurDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EurDate);
				else
					this.EurDate = base.SetDateTimeAsString(ColumnNames.EurDate, value);
			}
		}

		public virtual string s_RecID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RecID) ? string.Empty : base.GetintAsString(ColumnNames.RecID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RecID);
				else
					this.RecID = base.SetintAsString(ColumnNames.RecID, value);
			}
		}

		public virtual string s_InventoryPeriodID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InventoryPeriodID) ? string.Empty : base.GetintAsString(ColumnNames.InventoryPeriodID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InventoryPeriodID);
				else
					this.InventoryPeriodID = base.SetintAsString(ColumnNames.InventoryPeriodID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ItemID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StoreId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StoreId, Parameters.StoreId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReasonId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReasonId, Parameters.ReasonId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Quantity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Quantity, Parameters.Quantity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Date
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Date, Parameters.Date);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ApprovedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ApprovedBy, Parameters.ApprovedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Losses
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Losses, Parameters.Losses);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BatchNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BatchNo, Parameters.BatchNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Remark
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Cost
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Cost, Parameters.Cost);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RefNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RefNo, Parameters.RefNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EurDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EurDate, Parameters.EurDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RecID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RecID, Parameters.RecID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InventoryPeriodID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InventoryPeriodID, Parameters.InventoryPeriodID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public WhereParameter StoreId
		    {
				get
		        {
					if(_StoreId_W == null)
	        	    {
						_StoreId_W = TearOff.StoreId;
					}
					return _StoreId_W;
				}
			}

			public WhereParameter ReasonId
		    {
				get
		        {
					if(_ReasonId_W == null)
	        	    {
						_ReasonId_W = TearOff.ReasonId;
					}
					return _ReasonId_W;
				}
			}

			public WhereParameter Quantity
		    {
				get
		        {
					if(_Quantity_W == null)
	        	    {
						_Quantity_W = TearOff.Quantity;
					}
					return _Quantity_W;
				}
			}

			public WhereParameter Date
		    {
				get
		        {
					if(_Date_W == null)
	        	    {
						_Date_W = TearOff.Date;
					}
					return _Date_W;
				}
			}

			public WhereParameter ApprovedBy
		    {
				get
		        {
					if(_ApprovedBy_W == null)
	        	    {
						_ApprovedBy_W = TearOff.ApprovedBy;
					}
					return _ApprovedBy_W;
				}
			}

			public WhereParameter Losses
		    {
				get
		        {
					if(_Losses_W == null)
	        	    {
						_Losses_W = TearOff.Losses;
					}
					return _Losses_W;
				}
			}

			public WhereParameter BatchNo
		    {
				get
		        {
					if(_BatchNo_W == null)
	        	    {
						_BatchNo_W = TearOff.BatchNo;
					}
					return _BatchNo_W;
				}
			}

			public WhereParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			public WhereParameter Cost
		    {
				get
		        {
					if(_Cost_W == null)
	        	    {
						_Cost_W = TearOff.Cost;
					}
					return _Cost_W;
				}
			}

			public WhereParameter RefNo
		    {
				get
		        {
					if(_RefNo_W == null)
	        	    {
						_RefNo_W = TearOff.RefNo;
					}
					return _RefNo_W;
				}
			}

			public WhereParameter EurDate
		    {
				get
		        {
					if(_EurDate_W == null)
	        	    {
						_EurDate_W = TearOff.EurDate;
					}
					return _EurDate_W;
				}
			}

			public WhereParameter RecID
		    {
				get
		        {
					if(_RecID_W == null)
	        	    {
						_RecID_W = TearOff.RecID;
					}
					return _RecID_W;
				}
			}

			public WhereParameter InventoryPeriodID
		    {
				get
		        {
					if(_InventoryPeriodID_W == null)
	        	    {
						_InventoryPeriodID_W = TearOff.InventoryPeriodID;
					}
					return _InventoryPeriodID_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _ItemID_W = null;
			private WhereParameter _StoreId_W = null;
			private WhereParameter _ReasonId_W = null;
			private WhereParameter _Quantity_W = null;
			private WhereParameter _Date_W = null;
			private WhereParameter _ApprovedBy_W = null;
			private WhereParameter _Losses_W = null;
			private WhereParameter _BatchNo_W = null;
			private WhereParameter _Remark_W = null;
			private WhereParameter _Cost_W = null;
			private WhereParameter _RefNo_W = null;
			private WhereParameter _EurDate_W = null;
			private WhereParameter _RecID_W = null;
			private WhereParameter _InventoryPeriodID_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_ItemID_W = null;
				_StoreId_W = null;
				_ReasonId_W = null;
				_Quantity_W = null;
				_Date_W = null;
				_ApprovedBy_W = null;
				_Losses_W = null;
				_BatchNo_W = null;
				_Remark_W = null;
				_Cost_W = null;
				_RefNo_W = null;
				_EurDate_W = null;
				_RecID_W = null;
				_InventoryPeriodID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ItemID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StoreId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StoreId, Parameters.StoreId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReasonId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReasonId, Parameters.ReasonId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Quantity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Quantity, Parameters.Quantity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Date
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Date, Parameters.Date);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ApprovedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ApprovedBy, Parameters.ApprovedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Losses
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Losses, Parameters.Losses);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BatchNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BatchNo, Parameters.BatchNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Remark
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Cost
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Cost, Parameters.Cost);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RefNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RefNo, Parameters.RefNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EurDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EurDate, Parameters.EurDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RecID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RecID, Parameters.RecID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InventoryPeriodID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InventoryPeriodID, Parameters.InventoryPeriodID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public AggregateParameter StoreId
		    {
				get
		        {
					if(_StoreId_W == null)
	        	    {
						_StoreId_W = TearOff.StoreId;
					}
					return _StoreId_W;
				}
			}

			public AggregateParameter ReasonId
		    {
				get
		        {
					if(_ReasonId_W == null)
	        	    {
						_ReasonId_W = TearOff.ReasonId;
					}
					return _ReasonId_W;
				}
			}

			public AggregateParameter Quantity
		    {
				get
		        {
					if(_Quantity_W == null)
	        	    {
						_Quantity_W = TearOff.Quantity;
					}
					return _Quantity_W;
				}
			}

			public AggregateParameter Date
		    {
				get
		        {
					if(_Date_W == null)
	        	    {
						_Date_W = TearOff.Date;
					}
					return _Date_W;
				}
			}

			public AggregateParameter ApprovedBy
		    {
				get
		        {
					if(_ApprovedBy_W == null)
	        	    {
						_ApprovedBy_W = TearOff.ApprovedBy;
					}
					return _ApprovedBy_W;
				}
			}

			public AggregateParameter Losses
		    {
				get
		        {
					if(_Losses_W == null)
	        	    {
						_Losses_W = TearOff.Losses;
					}
					return _Losses_W;
				}
			}

			public AggregateParameter BatchNo
		    {
				get
		        {
					if(_BatchNo_W == null)
	        	    {
						_BatchNo_W = TearOff.BatchNo;
					}
					return _BatchNo_W;
				}
			}

			public AggregateParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			public AggregateParameter Cost
		    {
				get
		        {
					if(_Cost_W == null)
	        	    {
						_Cost_W = TearOff.Cost;
					}
					return _Cost_W;
				}
			}

			public AggregateParameter RefNo
		    {
				get
		        {
					if(_RefNo_W == null)
	        	    {
						_RefNo_W = TearOff.RefNo;
					}
					return _RefNo_W;
				}
			}

			public AggregateParameter EurDate
		    {
				get
		        {
					if(_EurDate_W == null)
	        	    {
						_EurDate_W = TearOff.EurDate;
					}
					return _EurDate_W;
				}
			}

			public AggregateParameter RecID
		    {
				get
		        {
					if(_RecID_W == null)
	        	    {
						_RecID_W = TearOff.RecID;
					}
					return _RecID_W;
				}
			}

			public AggregateParameter InventoryPeriodID
		    {
				get
		        {
					if(_InventoryPeriodID_W == null)
	        	    {
						_InventoryPeriodID_W = TearOff.InventoryPeriodID;
					}
					return _InventoryPeriodID_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _ItemID_W = null;
			private AggregateParameter _StoreId_W = null;
			private AggregateParameter _ReasonId_W = null;
			private AggregateParameter _Quantity_W = null;
			private AggregateParameter _Date_W = null;
			private AggregateParameter _ApprovedBy_W = null;
			private AggregateParameter _Losses_W = null;
			private AggregateParameter _BatchNo_W = null;
			private AggregateParameter _Remark_W = null;
			private AggregateParameter _Cost_W = null;
			private AggregateParameter _RefNo_W = null;
			private AggregateParameter _EurDate_W = null;
			private AggregateParameter _RecID_W = null;
			private AggregateParameter _InventoryPeriodID_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_ItemID_W = null;
				_StoreId_W = null;
				_ReasonId_W = null;
				_Quantity_W = null;
				_Date_W = null;
				_ApprovedBy_W = null;
				_Losses_W = null;
				_BatchNo_W = null;
				_Remark_W = null;
				_Cost_W = null;
				_RefNo_W = null;
				_EurDate_W = null;
				_RecID_W = null;
				_InventoryPeriodID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_LossAndAdjustmentInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_LossAndAdjustmentUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_LossAndAdjustmentDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ItemID);
			p.SourceColumn = ColumnNames.ItemID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StoreId);
			p.SourceColumn = ColumnNames.StoreId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReasonId);
			p.SourceColumn = ColumnNames.ReasonId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Quantity);
			p.SourceColumn = ColumnNames.Quantity;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Date);
			p.SourceColumn = ColumnNames.Date;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ApprovedBy);
			p.SourceColumn = ColumnNames.ApprovedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Losses);
			p.SourceColumn = ColumnNames.Losses;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BatchNo);
			p.SourceColumn = ColumnNames.BatchNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Remark);
			p.SourceColumn = ColumnNames.Remark;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Cost);
			p.SourceColumn = ColumnNames.Cost;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RefNo);
			p.SourceColumn = ColumnNames.RefNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EurDate);
			p.SourceColumn = ColumnNames.EurDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RecID);
			p.SourceColumn = ColumnNames.RecID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InventoryPeriodID);
			p.SourceColumn = ColumnNames.InventoryPeriodID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
