
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _ReceiveDocConfirmation : SqlClientEntity
	{
		public _ReceiveDocConfirmation()
		{
			this.QuerySource = "ReceiveDocConfirmation";
			this.MappingName = "ReceiveDocConfirmation";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ReceiveDocConfirmationLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ReceiveDocConfirmationLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ReceiveDocID
			{
				get
				{
					return new SqlParameter("@ReceiveDocID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ReceiptConfirmationStatusID
			{
				get
				{
					return new SqlParameter("@ReceiptConfirmationStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ReceivedByUserID
			{
				get
				{
					return new SqlParameter("@ReceivedByUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ReceiptQuantityConfirmedByUserID
			{
				get
				{
					return new SqlParameter("@ReceiptQuantityConfirmedByUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PriceAssignedByUserID
			{
				get
				{
					return new SqlParameter("@PriceAssignedByUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PriceConfirmedByUserID
			{
				get
				{
					return new SqlParameter("@PriceConfirmedByUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter GRVPrintedByUserID
			{
				get
				{
					return new SqlParameter("@GRVPrintedByUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UnitCostCalculatedByUserID
			{
				get
				{
					return new SqlParameter("@UnitCostCalculatedByUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter GRNFPrintedByUserID
			{
				get
				{
					return new SqlParameter("@GRNFPrintedByUserID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string ReceiveDocID = "ReceiveDocID";
            public const string ReceiptConfirmationStatusID = "ReceiptConfirmationStatusID";
            public const string ReceivedByUserID = "ReceivedByUserID";
            public const string ReceiptQuantityConfirmedByUserID = "ReceiptQuantityConfirmedByUserID";
            public const string PriceAssignedByUserID = "PriceAssignedByUserID";
            public const string PriceConfirmedByUserID = "PriceConfirmedByUserID";
            public const string GRVPrintedByUserID = "GRVPrintedByUserID";
            public const string UnitCostCalculatedByUserID = "UnitCostCalculatedByUserID";
            public const string GRNFPrintedByUserID = "GRNFPrintedByUserID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _ReceiveDocConfirmation.PropertyNames.ID;
					ht[ReceiveDocID] = _ReceiveDocConfirmation.PropertyNames.ReceiveDocID;
					ht[ReceiptConfirmationStatusID] = _ReceiveDocConfirmation.PropertyNames.ReceiptConfirmationStatusID;
					ht[ReceivedByUserID] = _ReceiveDocConfirmation.PropertyNames.ReceivedByUserID;
					ht[ReceiptQuantityConfirmedByUserID] = _ReceiveDocConfirmation.PropertyNames.ReceiptQuantityConfirmedByUserID;
					ht[PriceAssignedByUserID] = _ReceiveDocConfirmation.PropertyNames.PriceAssignedByUserID;
					ht[PriceConfirmedByUserID] = _ReceiveDocConfirmation.PropertyNames.PriceConfirmedByUserID;
					ht[GRVPrintedByUserID] = _ReceiveDocConfirmation.PropertyNames.GRVPrintedByUserID;
					ht[UnitCostCalculatedByUserID] = _ReceiveDocConfirmation.PropertyNames.UnitCostCalculatedByUserID;
					ht[GRNFPrintedByUserID] = _ReceiveDocConfirmation.PropertyNames.GRNFPrintedByUserID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string ReceiveDocID = "ReceiveDocID";
            public const string ReceiptConfirmationStatusID = "ReceiptConfirmationStatusID";
            public const string ReceivedByUserID = "ReceivedByUserID";
            public const string ReceiptQuantityConfirmedByUserID = "ReceiptQuantityConfirmedByUserID";
            public const string PriceAssignedByUserID = "PriceAssignedByUserID";
            public const string PriceConfirmedByUserID = "PriceConfirmedByUserID";
            public const string GRVPrintedByUserID = "GRVPrintedByUserID";
            public const string UnitCostCalculatedByUserID = "UnitCostCalculatedByUserID";
            public const string GRNFPrintedByUserID = "GRNFPrintedByUserID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _ReceiveDocConfirmation.ColumnNames.ID;
					ht[ReceiveDocID] = _ReceiveDocConfirmation.ColumnNames.ReceiveDocID;
					ht[ReceiptConfirmationStatusID] = _ReceiveDocConfirmation.ColumnNames.ReceiptConfirmationStatusID;
					ht[ReceivedByUserID] = _ReceiveDocConfirmation.ColumnNames.ReceivedByUserID;
					ht[ReceiptQuantityConfirmedByUserID] = _ReceiveDocConfirmation.ColumnNames.ReceiptQuantityConfirmedByUserID;
					ht[PriceAssignedByUserID] = _ReceiveDocConfirmation.ColumnNames.PriceAssignedByUserID;
					ht[PriceConfirmedByUserID] = _ReceiveDocConfirmation.ColumnNames.PriceConfirmedByUserID;
					ht[GRVPrintedByUserID] = _ReceiveDocConfirmation.ColumnNames.GRVPrintedByUserID;
					ht[UnitCostCalculatedByUserID] = _ReceiveDocConfirmation.ColumnNames.UnitCostCalculatedByUserID;
					ht[GRNFPrintedByUserID] = _ReceiveDocConfirmation.ColumnNames.GRNFPrintedByUserID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string ReceiveDocID = "s_ReceiveDocID";
            public const string ReceiptConfirmationStatusID = "s_ReceiptConfirmationStatusID";
            public const string ReceivedByUserID = "s_ReceivedByUserID";
            public const string ReceiptQuantityConfirmedByUserID = "s_ReceiptQuantityConfirmedByUserID";
            public const string PriceAssignedByUserID = "s_PriceAssignedByUserID";
            public const string PriceConfirmedByUserID = "s_PriceConfirmedByUserID";
            public const string GRVPrintedByUserID = "s_GRVPrintedByUserID";
            public const string UnitCostCalculatedByUserID = "s_UnitCostCalculatedByUserID";
            public const string GRNFPrintedByUserID = "s_GRNFPrintedByUserID";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual int ReceiveDocID
	    {
			get
	        {
				return base.Getint(ColumnNames.ReceiveDocID);
			}
			set
	        {
				base.Setint(ColumnNames.ReceiveDocID, value);
			}
		}

		public virtual int ReceiptConfirmationStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.ReceiptConfirmationStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.ReceiptConfirmationStatusID, value);
			}
		}

		public virtual int ReceivedByUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.ReceivedByUserID);
			}
			set
	        {
				base.Setint(ColumnNames.ReceivedByUserID, value);
			}
		}

		public virtual int ReceiptQuantityConfirmedByUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.ReceiptQuantityConfirmedByUserID);
			}
			set
	        {
				base.Setint(ColumnNames.ReceiptQuantityConfirmedByUserID, value);
			}
		}

		public virtual int PriceAssignedByUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.PriceAssignedByUserID);
			}
			set
	        {
				base.Setint(ColumnNames.PriceAssignedByUserID, value);
			}
		}

		public virtual int PriceConfirmedByUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.PriceConfirmedByUserID);
			}
			set
	        {
				base.Setint(ColumnNames.PriceConfirmedByUserID, value);
			}
		}

		public virtual int GRVPrintedByUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.GRVPrintedByUserID);
			}
			set
	        {
				base.Setint(ColumnNames.GRVPrintedByUserID, value);
			}
		}

		public virtual int UnitCostCalculatedByUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.UnitCostCalculatedByUserID);
			}
			set
	        {
				base.Setint(ColumnNames.UnitCostCalculatedByUserID, value);
			}
		}

		public virtual int GRNFPrintedByUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.GRNFPrintedByUserID);
			}
			set
	        {
				base.Setint(ColumnNames.GRNFPrintedByUserID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_ReceiveDocID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceiveDocID) ? string.Empty : base.GetintAsString(ColumnNames.ReceiveDocID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceiveDocID);
				else
					this.ReceiveDocID = base.SetintAsString(ColumnNames.ReceiveDocID, value);
			}
		}

		public virtual string s_ReceiptConfirmationStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceiptConfirmationStatusID) ? string.Empty : base.GetintAsString(ColumnNames.ReceiptConfirmationStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceiptConfirmationStatusID);
				else
					this.ReceiptConfirmationStatusID = base.SetintAsString(ColumnNames.ReceiptConfirmationStatusID, value);
			}
		}

		public virtual string s_ReceivedByUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceivedByUserID) ? string.Empty : base.GetintAsString(ColumnNames.ReceivedByUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceivedByUserID);
				else
					this.ReceivedByUserID = base.SetintAsString(ColumnNames.ReceivedByUserID, value);
			}
		}

		public virtual string s_ReceiptQuantityConfirmedByUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceiptQuantityConfirmedByUserID) ? string.Empty : base.GetintAsString(ColumnNames.ReceiptQuantityConfirmedByUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceiptQuantityConfirmedByUserID);
				else
					this.ReceiptQuantityConfirmedByUserID = base.SetintAsString(ColumnNames.ReceiptQuantityConfirmedByUserID, value);
			}
		}

		public virtual string s_PriceAssignedByUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PriceAssignedByUserID) ? string.Empty : base.GetintAsString(ColumnNames.PriceAssignedByUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PriceAssignedByUserID);
				else
					this.PriceAssignedByUserID = base.SetintAsString(ColumnNames.PriceAssignedByUserID, value);
			}
		}

		public virtual string s_PriceConfirmedByUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PriceConfirmedByUserID) ? string.Empty : base.GetintAsString(ColumnNames.PriceConfirmedByUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PriceConfirmedByUserID);
				else
					this.PriceConfirmedByUserID = base.SetintAsString(ColumnNames.PriceConfirmedByUserID, value);
			}
		}

		public virtual string s_GRVPrintedByUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GRVPrintedByUserID) ? string.Empty : base.GetintAsString(ColumnNames.GRVPrintedByUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GRVPrintedByUserID);
				else
					this.GRVPrintedByUserID = base.SetintAsString(ColumnNames.GRVPrintedByUserID, value);
			}
		}

		public virtual string s_UnitCostCalculatedByUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UnitCostCalculatedByUserID) ? string.Empty : base.GetintAsString(ColumnNames.UnitCostCalculatedByUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnitCostCalculatedByUserID);
				else
					this.UnitCostCalculatedByUserID = base.SetintAsString(ColumnNames.UnitCostCalculatedByUserID, value);
			}
		}

		public virtual string s_GRNFPrintedByUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GRNFPrintedByUserID) ? string.Empty : base.GetintAsString(ColumnNames.GRNFPrintedByUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GRNFPrintedByUserID);
				else
					this.GRNFPrintedByUserID = base.SetintAsString(ColumnNames.GRNFPrintedByUserID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReceiveDocID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceiveDocID, Parameters.ReceiveDocID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReceiptConfirmationStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceiptConfirmationStatusID, Parameters.ReceiptConfirmationStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReceivedByUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceivedByUserID, Parameters.ReceivedByUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReceiptQuantityConfirmedByUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceiptQuantityConfirmedByUserID, Parameters.ReceiptQuantityConfirmedByUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PriceAssignedByUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PriceAssignedByUserID, Parameters.PriceAssignedByUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PriceConfirmedByUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PriceConfirmedByUserID, Parameters.PriceConfirmedByUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GRVPrintedByUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GRVPrintedByUserID, Parameters.GRVPrintedByUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UnitCostCalculatedByUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UnitCostCalculatedByUserID, Parameters.UnitCostCalculatedByUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GRNFPrintedByUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GRNFPrintedByUserID, Parameters.GRNFPrintedByUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter ReceiveDocID
		    {
				get
		        {
					if(_ReceiveDocID_W == null)
	        	    {
						_ReceiveDocID_W = TearOff.ReceiveDocID;
					}
					return _ReceiveDocID_W;
				}
			}

			public WhereParameter ReceiptConfirmationStatusID
		    {
				get
		        {
					if(_ReceiptConfirmationStatusID_W == null)
	        	    {
						_ReceiptConfirmationStatusID_W = TearOff.ReceiptConfirmationStatusID;
					}
					return _ReceiptConfirmationStatusID_W;
				}
			}

			public WhereParameter ReceivedByUserID
		    {
				get
		        {
					if(_ReceivedByUserID_W == null)
	        	    {
						_ReceivedByUserID_W = TearOff.ReceivedByUserID;
					}
					return _ReceivedByUserID_W;
				}
			}

			public WhereParameter ReceiptQuantityConfirmedByUserID
		    {
				get
		        {
					if(_ReceiptQuantityConfirmedByUserID_W == null)
	        	    {
						_ReceiptQuantityConfirmedByUserID_W = TearOff.ReceiptQuantityConfirmedByUserID;
					}
					return _ReceiptQuantityConfirmedByUserID_W;
				}
			}

			public WhereParameter PriceAssignedByUserID
		    {
				get
		        {
					if(_PriceAssignedByUserID_W == null)
	        	    {
						_PriceAssignedByUserID_W = TearOff.PriceAssignedByUserID;
					}
					return _PriceAssignedByUserID_W;
				}
			}

			public WhereParameter PriceConfirmedByUserID
		    {
				get
		        {
					if(_PriceConfirmedByUserID_W == null)
	        	    {
						_PriceConfirmedByUserID_W = TearOff.PriceConfirmedByUserID;
					}
					return _PriceConfirmedByUserID_W;
				}
			}

			public WhereParameter GRVPrintedByUserID
		    {
				get
		        {
					if(_GRVPrintedByUserID_W == null)
	        	    {
						_GRVPrintedByUserID_W = TearOff.GRVPrintedByUserID;
					}
					return _GRVPrintedByUserID_W;
				}
			}

			public WhereParameter UnitCostCalculatedByUserID
		    {
				get
		        {
					if(_UnitCostCalculatedByUserID_W == null)
	        	    {
						_UnitCostCalculatedByUserID_W = TearOff.UnitCostCalculatedByUserID;
					}
					return _UnitCostCalculatedByUserID_W;
				}
			}

			public WhereParameter GRNFPrintedByUserID
		    {
				get
		        {
					if(_GRNFPrintedByUserID_W == null)
	        	    {
						_GRNFPrintedByUserID_W = TearOff.GRNFPrintedByUserID;
					}
					return _GRNFPrintedByUserID_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _ReceiveDocID_W = null;
			private WhereParameter _ReceiptConfirmationStatusID_W = null;
			private WhereParameter _ReceivedByUserID_W = null;
			private WhereParameter _ReceiptQuantityConfirmedByUserID_W = null;
			private WhereParameter _PriceAssignedByUserID_W = null;
			private WhereParameter _PriceConfirmedByUserID_W = null;
			private WhereParameter _GRVPrintedByUserID_W = null;
			private WhereParameter _UnitCostCalculatedByUserID_W = null;
			private WhereParameter _GRNFPrintedByUserID_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_ReceiveDocID_W = null;
				_ReceiptConfirmationStatusID_W = null;
				_ReceivedByUserID_W = null;
				_ReceiptQuantityConfirmedByUserID_W = null;
				_PriceAssignedByUserID_W = null;
				_PriceConfirmedByUserID_W = null;
				_GRVPrintedByUserID_W = null;
				_UnitCostCalculatedByUserID_W = null;
				_GRNFPrintedByUserID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReceiveDocID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceiveDocID, Parameters.ReceiveDocID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReceiptConfirmationStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceiptConfirmationStatusID, Parameters.ReceiptConfirmationStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReceivedByUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceivedByUserID, Parameters.ReceivedByUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReceiptQuantityConfirmedByUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceiptQuantityConfirmedByUserID, Parameters.ReceiptQuantityConfirmedByUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PriceAssignedByUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PriceAssignedByUserID, Parameters.PriceAssignedByUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PriceConfirmedByUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PriceConfirmedByUserID, Parameters.PriceConfirmedByUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GRVPrintedByUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GRVPrintedByUserID, Parameters.GRVPrintedByUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UnitCostCalculatedByUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitCostCalculatedByUserID, Parameters.UnitCostCalculatedByUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GRNFPrintedByUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GRNFPrintedByUserID, Parameters.GRNFPrintedByUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter ReceiveDocID
		    {
				get
		        {
					if(_ReceiveDocID_W == null)
	        	    {
						_ReceiveDocID_W = TearOff.ReceiveDocID;
					}
					return _ReceiveDocID_W;
				}
			}

			public AggregateParameter ReceiptConfirmationStatusID
		    {
				get
		        {
					if(_ReceiptConfirmationStatusID_W == null)
	        	    {
						_ReceiptConfirmationStatusID_W = TearOff.ReceiptConfirmationStatusID;
					}
					return _ReceiptConfirmationStatusID_W;
				}
			}

			public AggregateParameter ReceivedByUserID
		    {
				get
		        {
					if(_ReceivedByUserID_W == null)
	        	    {
						_ReceivedByUserID_W = TearOff.ReceivedByUserID;
					}
					return _ReceivedByUserID_W;
				}
			}

			public AggregateParameter ReceiptQuantityConfirmedByUserID
		    {
				get
		        {
					if(_ReceiptQuantityConfirmedByUserID_W == null)
	        	    {
						_ReceiptQuantityConfirmedByUserID_W = TearOff.ReceiptQuantityConfirmedByUserID;
					}
					return _ReceiptQuantityConfirmedByUserID_W;
				}
			}

			public AggregateParameter PriceAssignedByUserID
		    {
				get
		        {
					if(_PriceAssignedByUserID_W == null)
	        	    {
						_PriceAssignedByUserID_W = TearOff.PriceAssignedByUserID;
					}
					return _PriceAssignedByUserID_W;
				}
			}

			public AggregateParameter PriceConfirmedByUserID
		    {
				get
		        {
					if(_PriceConfirmedByUserID_W == null)
	        	    {
						_PriceConfirmedByUserID_W = TearOff.PriceConfirmedByUserID;
					}
					return _PriceConfirmedByUserID_W;
				}
			}

			public AggregateParameter GRVPrintedByUserID
		    {
				get
		        {
					if(_GRVPrintedByUserID_W == null)
	        	    {
						_GRVPrintedByUserID_W = TearOff.GRVPrintedByUserID;
					}
					return _GRVPrintedByUserID_W;
				}
			}

			public AggregateParameter UnitCostCalculatedByUserID
		    {
				get
		        {
					if(_UnitCostCalculatedByUserID_W == null)
	        	    {
						_UnitCostCalculatedByUserID_W = TearOff.UnitCostCalculatedByUserID;
					}
					return _UnitCostCalculatedByUserID_W;
				}
			}

			public AggregateParameter GRNFPrintedByUserID
		    {
				get
		        {
					if(_GRNFPrintedByUserID_W == null)
	        	    {
						_GRNFPrintedByUserID_W = TearOff.GRNFPrintedByUserID;
					}
					return _GRNFPrintedByUserID_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _ReceiveDocID_W = null;
			private AggregateParameter _ReceiptConfirmationStatusID_W = null;
			private AggregateParameter _ReceivedByUserID_W = null;
			private AggregateParameter _ReceiptQuantityConfirmedByUserID_W = null;
			private AggregateParameter _PriceAssignedByUserID_W = null;
			private AggregateParameter _PriceConfirmedByUserID_W = null;
			private AggregateParameter _GRVPrintedByUserID_W = null;
			private AggregateParameter _UnitCostCalculatedByUserID_W = null;
			private AggregateParameter _GRNFPrintedByUserID_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_ReceiveDocID_W = null;
				_ReceiptConfirmationStatusID_W = null;
				_ReceivedByUserID_W = null;
				_ReceiptQuantityConfirmedByUserID_W = null;
				_PriceAssignedByUserID_W = null;
				_PriceConfirmedByUserID_W = null;
				_GRVPrintedByUserID_W = null;
				_UnitCostCalculatedByUserID_W = null;
				_GRNFPrintedByUserID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ReceiveDocConfirmationInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ReceiveDocConfirmationUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ReceiveDocConfirmationDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReceiveDocID);
			p.SourceColumn = ColumnNames.ReceiveDocID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReceiptConfirmationStatusID);
			p.SourceColumn = ColumnNames.ReceiptConfirmationStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReceivedByUserID);
			p.SourceColumn = ColumnNames.ReceivedByUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReceiptQuantityConfirmedByUserID);
			p.SourceColumn = ColumnNames.ReceiptQuantityConfirmedByUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PriceAssignedByUserID);
			p.SourceColumn = ColumnNames.PriceAssignedByUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PriceConfirmedByUserID);
			p.SourceColumn = ColumnNames.PriceConfirmedByUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GRVPrintedByUserID);
			p.SourceColumn = ColumnNames.GRVPrintedByUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UnitCostCalculatedByUserID);
			p.SourceColumn = ColumnNames.UnitCostCalculatedByUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GRNFPrintedByUserID);
			p.SourceColumn = ColumnNames.GRNFPrintedByUserID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
