
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _Order : SqlClientEntity
	{
		public _Order()
		{
			this.QuerySource = "Order";
			this.MappingName = "Order";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_OrderLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_OrderLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OrderStatusID
			{
				get
				{
					return new SqlParameter("@OrderStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RequestedBy
			{
				get
				{
					return new SqlParameter("@RequestedBy", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Date
			{
				get
				{
					return new SqlParameter("@Date", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter EurDate
			{
				get
				{
					return new SqlParameter("@EurDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter RefNo
			{
				get
				{
					return new SqlParameter("@RefNo", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Remark
			{
				get
				{
					return new SqlParameter("@Remark", SqlDbType.Text, 2147483647);
				}
			}
			
			public static SqlParameter FromStore
			{
				get
				{
					return new SqlParameter("@FromStore", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FromHCTS
			{
				get
				{
					return new SqlParameter("@FromHCTS", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ConfirmedToHCTS
			{
				get
				{
					return new SqlParameter("@ConfirmedToHCTS", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter HCTSReferenceID
			{
				get
				{
					return new SqlParameter("@HCTSReferenceID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter LicenseNo
			{
				get
				{
					return new SqlParameter("@LicenseNo", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter PaymentTypeID
			{
				get
				{
					return new SqlParameter("@PaymentTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter LetterNo
			{
				get
				{
					return new SqlParameter("@LetterNo", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FilledBy
			{
				get
				{
					return new SqlParameter("@FilledBy", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ApprovedBy
			{
				get
				{
					return new SqlParameter("@ApprovedBy", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ContactPerson
			{
				get
				{
					return new SqlParameter("@ContactPerson", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter OrderTypeID
			{
				get
				{
					return new SqlParameter("@OrderTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FiscalYearID
			{
				get
				{
					return new SqlParameter("@FiscalYearID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SyncModifiedDate
			{
				get
				{
					return new SqlParameter("@SyncModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter SyncCreatedDate
			{
				get
				{
					return new SqlParameter("@SyncCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Rowguid
			{
				get
				{
					return new SqlParameter("@Rowguid", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter IsElectronic
			{
				get
				{
					return new SqlParameter("@IsElectronic", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter RequisitionTypeID
			{
				get
				{
					return new SqlParameter("@RequisitionTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ApprovedDate
			{
				get
				{
					return new SqlParameter("@ApprovedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string OrderStatusID = "OrderStatusID";
            public const string RequestedBy = "RequestedBy";
            public const string Date = "Date";
            public const string EurDate = "EurDate";
            public const string RefNo = "RefNo";
            public const string Remark = "Remark";
            public const string FromStore = "FromStore";
            public const string FromHCTS = "FromHCTS";
            public const string ConfirmedToHCTS = "ConfirmedToHCTS";
            public const string HCTSReferenceID = "HCTSReferenceID";
            public const string LicenseNo = "LicenseNo";
            public const string PaymentTypeID = "PaymentTypeID";
            public const string LetterNo = "LetterNo";
            public const string FilledBy = "FilledBy";
            public const string ApprovedBy = "ApprovedBy";
            public const string ContactPerson = "ContactPerson";
            public const string OrderTypeID = "OrderTypeID";
            public const string FiscalYearID = "FiscalYearID";
            public const string SyncModifiedDate = "SyncModifiedDate";
            public const string SyncCreatedDate = "SyncCreatedDate";
            public const string Rowguid = "rowguid";
            public const string IsElectronic = "IsElectronic";
            public const string RequisitionTypeID = "RequisitionTypeID";
            public const string ApprovedDate = "ApprovedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _Order.PropertyNames.ID;
					ht[OrderStatusID] = _Order.PropertyNames.OrderStatusID;
					ht[RequestedBy] = _Order.PropertyNames.RequestedBy;
					ht[Date] = _Order.PropertyNames.Date;
					ht[EurDate] = _Order.PropertyNames.EurDate;
					ht[RefNo] = _Order.PropertyNames.RefNo;
					ht[Remark] = _Order.PropertyNames.Remark;
					ht[FromStore] = _Order.PropertyNames.FromStore;
					ht[FromHCTS] = _Order.PropertyNames.FromHCTS;
					ht[ConfirmedToHCTS] = _Order.PropertyNames.ConfirmedToHCTS;
					ht[HCTSReferenceID] = _Order.PropertyNames.HCTSReferenceID;
					ht[LicenseNo] = _Order.PropertyNames.LicenseNo;
					ht[PaymentTypeID] = _Order.PropertyNames.PaymentTypeID;
					ht[LetterNo] = _Order.PropertyNames.LetterNo;
					ht[FilledBy] = _Order.PropertyNames.FilledBy;
					ht[ApprovedBy] = _Order.PropertyNames.ApprovedBy;
					ht[ContactPerson] = _Order.PropertyNames.ContactPerson;
					ht[OrderTypeID] = _Order.PropertyNames.OrderTypeID;
					ht[FiscalYearID] = _Order.PropertyNames.FiscalYearID;
					ht[SyncModifiedDate] = _Order.PropertyNames.SyncModifiedDate;
					ht[SyncCreatedDate] = _Order.PropertyNames.SyncCreatedDate;
					ht[Rowguid] = _Order.PropertyNames.Rowguid;
					ht[IsElectronic] = _Order.PropertyNames.IsElectronic;
					ht[RequisitionTypeID] = _Order.PropertyNames.RequisitionTypeID;
					ht[ApprovedDate] = _Order.PropertyNames.ApprovedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string OrderStatusID = "OrderStatusID";
            public const string RequestedBy = "RequestedBy";
            public const string Date = "Date";
            public const string EurDate = "EurDate";
            public const string RefNo = "RefNo";
            public const string Remark = "Remark";
            public const string FromStore = "FromStore";
            public const string FromHCTS = "FromHCTS";
            public const string ConfirmedToHCTS = "ConfirmedToHCTS";
            public const string HCTSReferenceID = "HCTSReferenceID";
            public const string LicenseNo = "LicenseNo";
            public const string PaymentTypeID = "PaymentTypeID";
            public const string LetterNo = "LetterNo";
            public const string FilledBy = "FilledBy";
            public const string ApprovedBy = "ApprovedBy";
            public const string ContactPerson = "ContactPerson";
            public const string OrderTypeID = "OrderTypeID";
            public const string FiscalYearID = "FiscalYearID";
            public const string SyncModifiedDate = "SyncModifiedDate";
            public const string SyncCreatedDate = "SyncCreatedDate";
            public const string Rowguid = "Rowguid";
            public const string IsElectronic = "IsElectronic";
            public const string RequisitionTypeID = "RequisitionTypeID";
            public const string ApprovedDate = "ApprovedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _Order.ColumnNames.ID;
					ht[OrderStatusID] = _Order.ColumnNames.OrderStatusID;
					ht[RequestedBy] = _Order.ColumnNames.RequestedBy;
					ht[Date] = _Order.ColumnNames.Date;
					ht[EurDate] = _Order.ColumnNames.EurDate;
					ht[RefNo] = _Order.ColumnNames.RefNo;
					ht[Remark] = _Order.ColumnNames.Remark;
					ht[FromStore] = _Order.ColumnNames.FromStore;
					ht[FromHCTS] = _Order.ColumnNames.FromHCTS;
					ht[ConfirmedToHCTS] = _Order.ColumnNames.ConfirmedToHCTS;
					ht[HCTSReferenceID] = _Order.ColumnNames.HCTSReferenceID;
					ht[LicenseNo] = _Order.ColumnNames.LicenseNo;
					ht[PaymentTypeID] = _Order.ColumnNames.PaymentTypeID;
					ht[LetterNo] = _Order.ColumnNames.LetterNo;
					ht[FilledBy] = _Order.ColumnNames.FilledBy;
					ht[ApprovedBy] = _Order.ColumnNames.ApprovedBy;
					ht[ContactPerson] = _Order.ColumnNames.ContactPerson;
					ht[OrderTypeID] = _Order.ColumnNames.OrderTypeID;
					ht[FiscalYearID] = _Order.ColumnNames.FiscalYearID;
					ht[SyncModifiedDate] = _Order.ColumnNames.SyncModifiedDate;
					ht[SyncCreatedDate] = _Order.ColumnNames.SyncCreatedDate;
					ht[Rowguid] = _Order.ColumnNames.Rowguid;
					ht[IsElectronic] = _Order.ColumnNames.IsElectronic;
					ht[RequisitionTypeID] = _Order.ColumnNames.RequisitionTypeID;
					ht[ApprovedDate] = _Order.ColumnNames.ApprovedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string OrderStatusID = "s_OrderStatusID";
            public const string RequestedBy = "s_RequestedBy";
            public const string Date = "s_Date";
            public const string EurDate = "s_EurDate";
            public const string RefNo = "s_RefNo";
            public const string Remark = "s_Remark";
            public const string FromStore = "s_FromStore";
            public const string FromHCTS = "s_FromHCTS";
            public const string ConfirmedToHCTS = "s_ConfirmedToHCTS";
            public const string HCTSReferenceID = "s_HCTSReferenceID";
            public const string LicenseNo = "s_LicenseNo";
            public const string PaymentTypeID = "s_PaymentTypeID";
            public const string LetterNo = "s_LetterNo";
            public const string FilledBy = "s_FilledBy";
            public const string ApprovedBy = "s_ApprovedBy";
            public const string ContactPerson = "s_ContactPerson";
            public const string OrderTypeID = "s_OrderTypeID";
            public const string FiscalYearID = "s_FiscalYearID";
            public const string SyncModifiedDate = "s_SyncModifiedDate";
            public const string SyncCreatedDate = "s_SyncCreatedDate";
            public const string Rowguid = "s_Rowguid";
            public const string IsElectronic = "s_IsElectronic";
            public const string RequisitionTypeID = "s_RequisitionTypeID";
            public const string ApprovedDate = "s_ApprovedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual int OrderStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.OrderStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.OrderStatusID, value);
			}
		}

		public virtual int RequestedBy
	    {
			get
	        {
				return base.Getint(ColumnNames.RequestedBy);
			}
			set
	        {
				base.Setint(ColumnNames.RequestedBy, value);
			}
		}

		public virtual DateTime Date
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Date);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Date, value);
			}
		}

		public virtual DateTime EurDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.EurDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.EurDate, value);
			}
		}

		public virtual string RefNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.RefNo);
			}
			set
	        {
				base.Setstring(ColumnNames.RefNo, value);
			}
		}

		public virtual string Remark
	    {
			get
	        {
				return base.Getstring(ColumnNames.Remark);
			}
			set
	        {
				base.Setstring(ColumnNames.Remark, value);
			}
		}

		public virtual int FromStore
	    {
			get
	        {
				return base.Getint(ColumnNames.FromStore);
			}
			set
	        {
				base.Setint(ColumnNames.FromStore, value);
			}
		}

		public virtual bool FromHCTS
	    {
			get
	        {
				return base.Getbool(ColumnNames.FromHCTS);
			}
			set
	        {
				base.Setbool(ColumnNames.FromHCTS, value);
			}
		}

		public virtual bool ConfirmedToHCTS
	    {
			get
	        {
				return base.Getbool(ColumnNames.ConfirmedToHCTS);
			}
			set
	        {
				base.Setbool(ColumnNames.ConfirmedToHCTS, value);
			}
		}

		public virtual int HCTSReferenceID
	    {
			get
	        {
				return base.Getint(ColumnNames.HCTSReferenceID);
			}
			set
	        {
				base.Setint(ColumnNames.HCTSReferenceID, value);
			}
		}

		public virtual string LicenseNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.LicenseNo);
			}
			set
	        {
				base.Setstring(ColumnNames.LicenseNo, value);
			}
		}

		public virtual int PaymentTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.PaymentTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.PaymentTypeID, value);
			}
		}

		public virtual string LetterNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.LetterNo);
			}
			set
	        {
				base.Setstring(ColumnNames.LetterNo, value);
			}
		}

		public virtual int FilledBy
	    {
			get
	        {
				return base.Getint(ColumnNames.FilledBy);
			}
			set
	        {
				base.Setint(ColumnNames.FilledBy, value);
			}
		}

		public virtual int ApprovedBy
	    {
			get
	        {
				return base.Getint(ColumnNames.ApprovedBy);
			}
			set
	        {
				base.Setint(ColumnNames.ApprovedBy, value);
			}
		}

		public virtual string ContactPerson
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactPerson);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactPerson, value);
			}
		}

		public virtual int OrderTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.OrderTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.OrderTypeID, value);
			}
		}

		public virtual int FiscalYearID
	    {
			get
	        {
				return base.Getint(ColumnNames.FiscalYearID);
			}
			set
	        {
				base.Setint(ColumnNames.FiscalYearID, value);
			}
		}

		public virtual DateTime SyncModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.SyncModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.SyncModifiedDate, value);
			}
		}

		public virtual DateTime SyncCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.SyncCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.SyncCreatedDate, value);
			}
		}

		public virtual Guid Rowguid
	    {
			get
	        {
				return base.GetGuid(ColumnNames.Rowguid);
			}
			set
	        {
				base.SetGuid(ColumnNames.Rowguid, value);
			}
		}

		public virtual bool IsElectronic
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsElectronic);
			}
			set
	        {
				base.Setbool(ColumnNames.IsElectronic, value);
			}
		}

		public virtual int RequisitionTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.RequisitionTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.RequisitionTypeID, value);
			}
		}

		public virtual DateTime ApprovedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ApprovedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ApprovedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_OrderStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderStatusID) ? string.Empty : base.GetintAsString(ColumnNames.OrderStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderStatusID);
				else
					this.OrderStatusID = base.SetintAsString(ColumnNames.OrderStatusID, value);
			}
		}

		public virtual string s_RequestedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RequestedBy) ? string.Empty : base.GetintAsString(ColumnNames.RequestedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RequestedBy);
				else
					this.RequestedBy = base.SetintAsString(ColumnNames.RequestedBy, value);
			}
		}

		public virtual string s_Date
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Date) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Date);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Date);
				else
					this.Date = base.SetDateTimeAsString(ColumnNames.Date, value);
			}
		}

		public virtual string s_EurDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EurDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.EurDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EurDate);
				else
					this.EurDate = base.SetDateTimeAsString(ColumnNames.EurDate, value);
			}
		}

		public virtual string s_RefNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RefNo) ? string.Empty : base.GetstringAsString(ColumnNames.RefNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RefNo);
				else
					this.RefNo = base.SetstringAsString(ColumnNames.RefNo, value);
			}
		}

		public virtual string s_Remark
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Remark) ? string.Empty : base.GetstringAsString(ColumnNames.Remark);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Remark);
				else
					this.Remark = base.SetstringAsString(ColumnNames.Remark, value);
			}
		}

		public virtual string s_FromStore
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FromStore) ? string.Empty : base.GetintAsString(ColumnNames.FromStore);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FromStore);
				else
					this.FromStore = base.SetintAsString(ColumnNames.FromStore, value);
			}
		}

		public virtual string s_FromHCTS
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FromHCTS) ? string.Empty : base.GetboolAsString(ColumnNames.FromHCTS);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FromHCTS);
				else
					this.FromHCTS = base.SetboolAsString(ColumnNames.FromHCTS, value);
			}
		}

		public virtual string s_ConfirmedToHCTS
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ConfirmedToHCTS) ? string.Empty : base.GetboolAsString(ColumnNames.ConfirmedToHCTS);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ConfirmedToHCTS);
				else
					this.ConfirmedToHCTS = base.SetboolAsString(ColumnNames.ConfirmedToHCTS, value);
			}
		}

		public virtual string s_HCTSReferenceID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HCTSReferenceID) ? string.Empty : base.GetintAsString(ColumnNames.HCTSReferenceID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HCTSReferenceID);
				else
					this.HCTSReferenceID = base.SetintAsString(ColumnNames.HCTSReferenceID, value);
			}
		}

		public virtual string s_LicenseNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LicenseNo) ? string.Empty : base.GetstringAsString(ColumnNames.LicenseNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LicenseNo);
				else
					this.LicenseNo = base.SetstringAsString(ColumnNames.LicenseNo, value);
			}
		}

		public virtual string s_PaymentTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PaymentTypeID) ? string.Empty : base.GetintAsString(ColumnNames.PaymentTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PaymentTypeID);
				else
					this.PaymentTypeID = base.SetintAsString(ColumnNames.PaymentTypeID, value);
			}
		}

		public virtual string s_LetterNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LetterNo) ? string.Empty : base.GetstringAsString(ColumnNames.LetterNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LetterNo);
				else
					this.LetterNo = base.SetstringAsString(ColumnNames.LetterNo, value);
			}
		}

		public virtual string s_FilledBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FilledBy) ? string.Empty : base.GetintAsString(ColumnNames.FilledBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FilledBy);
				else
					this.FilledBy = base.SetintAsString(ColumnNames.FilledBy, value);
			}
		}

		public virtual string s_ApprovedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ApprovedBy) ? string.Empty : base.GetintAsString(ColumnNames.ApprovedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ApprovedBy);
				else
					this.ApprovedBy = base.SetintAsString(ColumnNames.ApprovedBy, value);
			}
		}

		public virtual string s_ContactPerson
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactPerson) ? string.Empty : base.GetstringAsString(ColumnNames.ContactPerson);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactPerson);
				else
					this.ContactPerson = base.SetstringAsString(ColumnNames.ContactPerson, value);
			}
		}

		public virtual string s_OrderTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderTypeID) ? string.Empty : base.GetintAsString(ColumnNames.OrderTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderTypeID);
				else
					this.OrderTypeID = base.SetintAsString(ColumnNames.OrderTypeID, value);
			}
		}

		public virtual string s_FiscalYearID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FiscalYearID) ? string.Empty : base.GetintAsString(ColumnNames.FiscalYearID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FiscalYearID);
				else
					this.FiscalYearID = base.SetintAsString(ColumnNames.FiscalYearID, value);
			}
		}

		public virtual string s_SyncModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SyncModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.SyncModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SyncModifiedDate);
				else
					this.SyncModifiedDate = base.SetDateTimeAsString(ColumnNames.SyncModifiedDate, value);
			}
		}

		public virtual string s_SyncCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SyncCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.SyncCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SyncCreatedDate);
				else
					this.SyncCreatedDate = base.SetDateTimeAsString(ColumnNames.SyncCreatedDate, value);
			}
		}

		public virtual string s_Rowguid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rowguid) ? string.Empty : base.GetGuidAsString(ColumnNames.Rowguid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rowguid);
				else
					this.Rowguid = base.SetGuidAsString(ColumnNames.Rowguid, value);
			}
		}

		public virtual string s_IsElectronic
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsElectronic) ? string.Empty : base.GetboolAsString(ColumnNames.IsElectronic);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsElectronic);
				else
					this.IsElectronic = base.SetboolAsString(ColumnNames.IsElectronic, value);
			}
		}

		public virtual string s_RequisitionTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RequisitionTypeID) ? string.Empty : base.GetintAsString(ColumnNames.RequisitionTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RequisitionTypeID);
				else
					this.RequisitionTypeID = base.SetintAsString(ColumnNames.RequisitionTypeID, value);
			}
		}

		public virtual string s_ApprovedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ApprovedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ApprovedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ApprovedDate);
				else
					this.ApprovedDate = base.SetDateTimeAsString(ColumnNames.ApprovedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrderStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderStatusID, Parameters.OrderStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RequestedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RequestedBy, Parameters.RequestedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Date
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Date, Parameters.Date);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EurDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EurDate, Parameters.EurDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RefNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RefNo, Parameters.RefNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Remark
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FromStore
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FromStore, Parameters.FromStore);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FromHCTS
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FromHCTS, Parameters.FromHCTS);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ConfirmedToHCTS
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ConfirmedToHCTS, Parameters.ConfirmedToHCTS);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HCTSReferenceID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HCTSReferenceID, Parameters.HCTSReferenceID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LicenseNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LicenseNo, Parameters.LicenseNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PaymentTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PaymentTypeID, Parameters.PaymentTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LetterNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LetterNo, Parameters.LetterNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FilledBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FilledBy, Parameters.FilledBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ApprovedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ApprovedBy, Parameters.ApprovedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactPerson
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactPerson, Parameters.ContactPerson);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrderTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderTypeID, Parameters.OrderTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FiscalYearID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FiscalYearID, Parameters.FiscalYearID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SyncModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SyncModifiedDate, Parameters.SyncModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SyncCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SyncCreatedDate, Parameters.SyncCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rowguid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rowguid, Parameters.Rowguid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsElectronic
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsElectronic, Parameters.IsElectronic);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RequisitionTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RequisitionTypeID, Parameters.RequisitionTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ApprovedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ApprovedDate, Parameters.ApprovedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter OrderStatusID
		    {
				get
		        {
					if(_OrderStatusID_W == null)
	        	    {
						_OrderStatusID_W = TearOff.OrderStatusID;
					}
					return _OrderStatusID_W;
				}
			}

			public WhereParameter RequestedBy
		    {
				get
		        {
					if(_RequestedBy_W == null)
	        	    {
						_RequestedBy_W = TearOff.RequestedBy;
					}
					return _RequestedBy_W;
				}
			}

			public WhereParameter Date
		    {
				get
		        {
					if(_Date_W == null)
	        	    {
						_Date_W = TearOff.Date;
					}
					return _Date_W;
				}
			}

			public WhereParameter EurDate
		    {
				get
		        {
					if(_EurDate_W == null)
	        	    {
						_EurDate_W = TearOff.EurDate;
					}
					return _EurDate_W;
				}
			}

			public WhereParameter RefNo
		    {
				get
		        {
					if(_RefNo_W == null)
	        	    {
						_RefNo_W = TearOff.RefNo;
					}
					return _RefNo_W;
				}
			}

			public WhereParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			public WhereParameter FromStore
		    {
				get
		        {
					if(_FromStore_W == null)
	        	    {
						_FromStore_W = TearOff.FromStore;
					}
					return _FromStore_W;
				}
			}

			public WhereParameter FromHCTS
		    {
				get
		        {
					if(_FromHCTS_W == null)
	        	    {
						_FromHCTS_W = TearOff.FromHCTS;
					}
					return _FromHCTS_W;
				}
			}

			public WhereParameter ConfirmedToHCTS
		    {
				get
		        {
					if(_ConfirmedToHCTS_W == null)
	        	    {
						_ConfirmedToHCTS_W = TearOff.ConfirmedToHCTS;
					}
					return _ConfirmedToHCTS_W;
				}
			}

			public WhereParameter HCTSReferenceID
		    {
				get
		        {
					if(_HCTSReferenceID_W == null)
	        	    {
						_HCTSReferenceID_W = TearOff.HCTSReferenceID;
					}
					return _HCTSReferenceID_W;
				}
			}

			public WhereParameter LicenseNo
		    {
				get
		        {
					if(_LicenseNo_W == null)
	        	    {
						_LicenseNo_W = TearOff.LicenseNo;
					}
					return _LicenseNo_W;
				}
			}

			public WhereParameter PaymentTypeID
		    {
				get
		        {
					if(_PaymentTypeID_W == null)
	        	    {
						_PaymentTypeID_W = TearOff.PaymentTypeID;
					}
					return _PaymentTypeID_W;
				}
			}

			public WhereParameter LetterNo
		    {
				get
		        {
					if(_LetterNo_W == null)
	        	    {
						_LetterNo_W = TearOff.LetterNo;
					}
					return _LetterNo_W;
				}
			}

			public WhereParameter FilledBy
		    {
				get
		        {
					if(_FilledBy_W == null)
	        	    {
						_FilledBy_W = TearOff.FilledBy;
					}
					return _FilledBy_W;
				}
			}

			public WhereParameter ApprovedBy
		    {
				get
		        {
					if(_ApprovedBy_W == null)
	        	    {
						_ApprovedBy_W = TearOff.ApprovedBy;
					}
					return _ApprovedBy_W;
				}
			}

			public WhereParameter ContactPerson
		    {
				get
		        {
					if(_ContactPerson_W == null)
	        	    {
						_ContactPerson_W = TearOff.ContactPerson;
					}
					return _ContactPerson_W;
				}
			}

			public WhereParameter OrderTypeID
		    {
				get
		        {
					if(_OrderTypeID_W == null)
	        	    {
						_OrderTypeID_W = TearOff.OrderTypeID;
					}
					return _OrderTypeID_W;
				}
			}

			public WhereParameter FiscalYearID
		    {
				get
		        {
					if(_FiscalYearID_W == null)
	        	    {
						_FiscalYearID_W = TearOff.FiscalYearID;
					}
					return _FiscalYearID_W;
				}
			}

			public WhereParameter SyncModifiedDate
		    {
				get
		        {
					if(_SyncModifiedDate_W == null)
	        	    {
						_SyncModifiedDate_W = TearOff.SyncModifiedDate;
					}
					return _SyncModifiedDate_W;
				}
			}

			public WhereParameter SyncCreatedDate
		    {
				get
		        {
					if(_SyncCreatedDate_W == null)
	        	    {
						_SyncCreatedDate_W = TearOff.SyncCreatedDate;
					}
					return _SyncCreatedDate_W;
				}
			}

			public WhereParameter Rowguid
		    {
				get
		        {
					if(_Rowguid_W == null)
	        	    {
						_Rowguid_W = TearOff.Rowguid;
					}
					return _Rowguid_W;
				}
			}

			public WhereParameter IsElectronic
		    {
				get
		        {
					if(_IsElectronic_W == null)
	        	    {
						_IsElectronic_W = TearOff.IsElectronic;
					}
					return _IsElectronic_W;
				}
			}

			public WhereParameter RequisitionTypeID
		    {
				get
		        {
					if(_RequisitionTypeID_W == null)
	        	    {
						_RequisitionTypeID_W = TearOff.RequisitionTypeID;
					}
					return _RequisitionTypeID_W;
				}
			}

			public WhereParameter ApprovedDate
		    {
				get
		        {
					if(_ApprovedDate_W == null)
	        	    {
						_ApprovedDate_W = TearOff.ApprovedDate;
					}
					return _ApprovedDate_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _OrderStatusID_W = null;
			private WhereParameter _RequestedBy_W = null;
			private WhereParameter _Date_W = null;
			private WhereParameter _EurDate_W = null;
			private WhereParameter _RefNo_W = null;
			private WhereParameter _Remark_W = null;
			private WhereParameter _FromStore_W = null;
			private WhereParameter _FromHCTS_W = null;
			private WhereParameter _ConfirmedToHCTS_W = null;
			private WhereParameter _HCTSReferenceID_W = null;
			private WhereParameter _LicenseNo_W = null;
			private WhereParameter _PaymentTypeID_W = null;
			private WhereParameter _LetterNo_W = null;
			private WhereParameter _FilledBy_W = null;
			private WhereParameter _ApprovedBy_W = null;
			private WhereParameter _ContactPerson_W = null;
			private WhereParameter _OrderTypeID_W = null;
			private WhereParameter _FiscalYearID_W = null;
			private WhereParameter _SyncModifiedDate_W = null;
			private WhereParameter _SyncCreatedDate_W = null;
			private WhereParameter _Rowguid_W = null;
			private WhereParameter _IsElectronic_W = null;
			private WhereParameter _RequisitionTypeID_W = null;
			private WhereParameter _ApprovedDate_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_OrderStatusID_W = null;
				_RequestedBy_W = null;
				_Date_W = null;
				_EurDate_W = null;
				_RefNo_W = null;
				_Remark_W = null;
				_FromStore_W = null;
				_FromHCTS_W = null;
				_ConfirmedToHCTS_W = null;
				_HCTSReferenceID_W = null;
				_LicenseNo_W = null;
				_PaymentTypeID_W = null;
				_LetterNo_W = null;
				_FilledBy_W = null;
				_ApprovedBy_W = null;
				_ContactPerson_W = null;
				_OrderTypeID_W = null;
				_FiscalYearID_W = null;
				_SyncModifiedDate_W = null;
				_SyncCreatedDate_W = null;
				_Rowguid_W = null;
				_IsElectronic_W = null;
				_RequisitionTypeID_W = null;
				_ApprovedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrderStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderStatusID, Parameters.OrderStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RequestedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequestedBy, Parameters.RequestedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Date
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Date, Parameters.Date);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EurDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EurDate, Parameters.EurDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RefNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RefNo, Parameters.RefNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Remark
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FromStore
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FromStore, Parameters.FromStore);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FromHCTS
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FromHCTS, Parameters.FromHCTS);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ConfirmedToHCTS
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ConfirmedToHCTS, Parameters.ConfirmedToHCTS);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HCTSReferenceID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HCTSReferenceID, Parameters.HCTSReferenceID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LicenseNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LicenseNo, Parameters.LicenseNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PaymentTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PaymentTypeID, Parameters.PaymentTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LetterNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LetterNo, Parameters.LetterNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FilledBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FilledBy, Parameters.FilledBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ApprovedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ApprovedBy, Parameters.ApprovedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactPerson
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactPerson, Parameters.ContactPerson);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrderTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderTypeID, Parameters.OrderTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FiscalYearID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FiscalYearID, Parameters.FiscalYearID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SyncModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SyncModifiedDate, Parameters.SyncModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SyncCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SyncCreatedDate, Parameters.SyncCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rowguid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rowguid, Parameters.Rowguid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsElectronic
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsElectronic, Parameters.IsElectronic);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RequisitionTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequisitionTypeID, Parameters.RequisitionTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ApprovedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ApprovedDate, Parameters.ApprovedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter OrderStatusID
		    {
				get
		        {
					if(_OrderStatusID_W == null)
	        	    {
						_OrderStatusID_W = TearOff.OrderStatusID;
					}
					return _OrderStatusID_W;
				}
			}

			public AggregateParameter RequestedBy
		    {
				get
		        {
					if(_RequestedBy_W == null)
	        	    {
						_RequestedBy_W = TearOff.RequestedBy;
					}
					return _RequestedBy_W;
				}
			}

			public AggregateParameter Date
		    {
				get
		        {
					if(_Date_W == null)
	        	    {
						_Date_W = TearOff.Date;
					}
					return _Date_W;
				}
			}

			public AggregateParameter EurDate
		    {
				get
		        {
					if(_EurDate_W == null)
	        	    {
						_EurDate_W = TearOff.EurDate;
					}
					return _EurDate_W;
				}
			}

			public AggregateParameter RefNo
		    {
				get
		        {
					if(_RefNo_W == null)
	        	    {
						_RefNo_W = TearOff.RefNo;
					}
					return _RefNo_W;
				}
			}

			public AggregateParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			public AggregateParameter FromStore
		    {
				get
		        {
					if(_FromStore_W == null)
	        	    {
						_FromStore_W = TearOff.FromStore;
					}
					return _FromStore_W;
				}
			}

			public AggregateParameter FromHCTS
		    {
				get
		        {
					if(_FromHCTS_W == null)
	        	    {
						_FromHCTS_W = TearOff.FromHCTS;
					}
					return _FromHCTS_W;
				}
			}

			public AggregateParameter ConfirmedToHCTS
		    {
				get
		        {
					if(_ConfirmedToHCTS_W == null)
	        	    {
						_ConfirmedToHCTS_W = TearOff.ConfirmedToHCTS;
					}
					return _ConfirmedToHCTS_W;
				}
			}

			public AggregateParameter HCTSReferenceID
		    {
				get
		        {
					if(_HCTSReferenceID_W == null)
	        	    {
						_HCTSReferenceID_W = TearOff.HCTSReferenceID;
					}
					return _HCTSReferenceID_W;
				}
			}

			public AggregateParameter LicenseNo
		    {
				get
		        {
					if(_LicenseNo_W == null)
	        	    {
						_LicenseNo_W = TearOff.LicenseNo;
					}
					return _LicenseNo_W;
				}
			}

			public AggregateParameter PaymentTypeID
		    {
				get
		        {
					if(_PaymentTypeID_W == null)
	        	    {
						_PaymentTypeID_W = TearOff.PaymentTypeID;
					}
					return _PaymentTypeID_W;
				}
			}

			public AggregateParameter LetterNo
		    {
				get
		        {
					if(_LetterNo_W == null)
	        	    {
						_LetterNo_W = TearOff.LetterNo;
					}
					return _LetterNo_W;
				}
			}

			public AggregateParameter FilledBy
		    {
				get
		        {
					if(_FilledBy_W == null)
	        	    {
						_FilledBy_W = TearOff.FilledBy;
					}
					return _FilledBy_W;
				}
			}

			public AggregateParameter ApprovedBy
		    {
				get
		        {
					if(_ApprovedBy_W == null)
	        	    {
						_ApprovedBy_W = TearOff.ApprovedBy;
					}
					return _ApprovedBy_W;
				}
			}

			public AggregateParameter ContactPerson
		    {
				get
		        {
					if(_ContactPerson_W == null)
	        	    {
						_ContactPerson_W = TearOff.ContactPerson;
					}
					return _ContactPerson_W;
				}
			}

			public AggregateParameter OrderTypeID
		    {
				get
		        {
					if(_OrderTypeID_W == null)
	        	    {
						_OrderTypeID_W = TearOff.OrderTypeID;
					}
					return _OrderTypeID_W;
				}
			}

			public AggregateParameter FiscalYearID
		    {
				get
		        {
					if(_FiscalYearID_W == null)
	        	    {
						_FiscalYearID_W = TearOff.FiscalYearID;
					}
					return _FiscalYearID_W;
				}
			}

			public AggregateParameter SyncModifiedDate
		    {
				get
		        {
					if(_SyncModifiedDate_W == null)
	        	    {
						_SyncModifiedDate_W = TearOff.SyncModifiedDate;
					}
					return _SyncModifiedDate_W;
				}
			}

			public AggregateParameter SyncCreatedDate
		    {
				get
		        {
					if(_SyncCreatedDate_W == null)
	        	    {
						_SyncCreatedDate_W = TearOff.SyncCreatedDate;
					}
					return _SyncCreatedDate_W;
				}
			}

			public AggregateParameter Rowguid
		    {
				get
		        {
					if(_Rowguid_W == null)
	        	    {
						_Rowguid_W = TearOff.Rowguid;
					}
					return _Rowguid_W;
				}
			}

			public AggregateParameter IsElectronic
		    {
				get
		        {
					if(_IsElectronic_W == null)
	        	    {
						_IsElectronic_W = TearOff.IsElectronic;
					}
					return _IsElectronic_W;
				}
			}

			public AggregateParameter RequisitionTypeID
		    {
				get
		        {
					if(_RequisitionTypeID_W == null)
	        	    {
						_RequisitionTypeID_W = TearOff.RequisitionTypeID;
					}
					return _RequisitionTypeID_W;
				}
			}

			public AggregateParameter ApprovedDate
		    {
				get
		        {
					if(_ApprovedDate_W == null)
	        	    {
						_ApprovedDate_W = TearOff.ApprovedDate;
					}
					return _ApprovedDate_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _OrderStatusID_W = null;
			private AggregateParameter _RequestedBy_W = null;
			private AggregateParameter _Date_W = null;
			private AggregateParameter _EurDate_W = null;
			private AggregateParameter _RefNo_W = null;
			private AggregateParameter _Remark_W = null;
			private AggregateParameter _FromStore_W = null;
			private AggregateParameter _FromHCTS_W = null;
			private AggregateParameter _ConfirmedToHCTS_W = null;
			private AggregateParameter _HCTSReferenceID_W = null;
			private AggregateParameter _LicenseNo_W = null;
			private AggregateParameter _PaymentTypeID_W = null;
			private AggregateParameter _LetterNo_W = null;
			private AggregateParameter _FilledBy_W = null;
			private AggregateParameter _ApprovedBy_W = null;
			private AggregateParameter _ContactPerson_W = null;
			private AggregateParameter _OrderTypeID_W = null;
			private AggregateParameter _FiscalYearID_W = null;
			private AggregateParameter _SyncModifiedDate_W = null;
			private AggregateParameter _SyncCreatedDate_W = null;
			private AggregateParameter _Rowguid_W = null;
			private AggregateParameter _IsElectronic_W = null;
			private AggregateParameter _RequisitionTypeID_W = null;
			private AggregateParameter _ApprovedDate_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_OrderStatusID_W = null;
				_RequestedBy_W = null;
				_Date_W = null;
				_EurDate_W = null;
				_RefNo_W = null;
				_Remark_W = null;
				_FromStore_W = null;
				_FromHCTS_W = null;
				_ConfirmedToHCTS_W = null;
				_HCTSReferenceID_W = null;
				_LicenseNo_W = null;
				_PaymentTypeID_W = null;
				_LetterNo_W = null;
				_FilledBy_W = null;
				_ApprovedBy_W = null;
				_ContactPerson_W = null;
				_OrderTypeID_W = null;
				_FiscalYearID_W = null;
				_SyncModifiedDate_W = null;
				_SyncCreatedDate_W = null;
				_Rowguid_W = null;
				_IsElectronic_W = null;
				_RequisitionTypeID_W = null;
				_ApprovedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_OrderInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_OrderUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_OrderDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrderStatusID);
			p.SourceColumn = ColumnNames.OrderStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RequestedBy);
			p.SourceColumn = ColumnNames.RequestedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Date);
			p.SourceColumn = ColumnNames.Date;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EurDate);
			p.SourceColumn = ColumnNames.EurDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RefNo);
			p.SourceColumn = ColumnNames.RefNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Remark);
			p.SourceColumn = ColumnNames.Remark;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FromStore);
			p.SourceColumn = ColumnNames.FromStore;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FromHCTS);
			p.SourceColumn = ColumnNames.FromHCTS;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ConfirmedToHCTS);
			p.SourceColumn = ColumnNames.ConfirmedToHCTS;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HCTSReferenceID);
			p.SourceColumn = ColumnNames.HCTSReferenceID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LicenseNo);
			p.SourceColumn = ColumnNames.LicenseNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PaymentTypeID);
			p.SourceColumn = ColumnNames.PaymentTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LetterNo);
			p.SourceColumn = ColumnNames.LetterNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FilledBy);
			p.SourceColumn = ColumnNames.FilledBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ApprovedBy);
			p.SourceColumn = ColumnNames.ApprovedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactPerson);
			p.SourceColumn = ColumnNames.ContactPerson;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrderTypeID);
			p.SourceColumn = ColumnNames.OrderTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FiscalYearID);
			p.SourceColumn = ColumnNames.FiscalYearID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RequisitionTypeID);
			p.SourceColumn = ColumnNames.RequisitionTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ApprovedDate);
			p.SourceColumn = ColumnNames.ApprovedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
