
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
    public abstract class _ReceiptInvoice : SqlClientEntity
    {
        public _ReceiptInvoice()
        {
            this.QuerySource = "ReceiptInvoice";
            this.MappingName = "ReceiptInvoice";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ReceiptInvoiceLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int ID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.ID, ID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ReceiptInvoiceLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter ID
            {
                get
                {
                    return new SqlParameter("@ID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter InvoiceTypeID
            {
                get
                {
                    return new SqlParameter("@InvoiceTypeID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter STVOrInvoiceNo
            {
                get
                {
                    return new SqlParameter("@STVOrInvoiceNo", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter WayBillNo
            {
                get
                {
                    return new SqlParameter("@WayBillNo", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter TransitTransferNo
            {
                get
                {
                    return new SqlParameter("@TransitTransferNo", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter InsurancePolicyNo
            {
                get
                {
                    return new SqlParameter("@InsurancePolicyNo", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter DateOfEntry
            {
                get
                {
                    return new SqlParameter("@DateOfEntry", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter ReceiptInvoiceType
            {
                get
                {
                    return new SqlParameter("@ReceiptInvoiceType", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter TotalValue
            {
                get
                {
                    return new SqlParameter("@TotalValue", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter Insurance
            {
                get
                {
                    return new SqlParameter("@Insurance", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter AirFreight
            {
                get
                {
                    return new SqlParameter("@AirFreight", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter SeaFreight
            {
                get
                {
                    return new SqlParameter("@SeaFreight", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter InlandFreight
            {
                get
                {
                    return new SqlParameter("@InlandFreight", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter NBE
            {
                get
                {
                    return new SqlParameter("@NBE", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter CBE
            {
                get
                {
                    return new SqlParameter("@CBE", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter CustomDutyTax
            {
                get
                {
                    return new SqlParameter("@CustomDutyTax", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter TransitServiceCharge
            {
                get
                {
                    return new SqlParameter("@TransitServiceCharge", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter Provision
            {
                get
                {
                    return new SqlParameter("@Provision", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter OtherExpense
            {
                get
                {
                    return new SqlParameter("@OtherExpense", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter ExchangeRate
            {
                get
                {
                    return new SqlParameter("@ExchangeRate", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter SavedByUserID
            {
                get
                {
                    return new SqlParameter("@SavedByUserID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter POID
            {
                get
                {
                    return new SqlParameter("@POID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Currency
            {
                get
                {
                    return new SqlParameter("@Currency", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter LCID
            {
                get
                {
                    return new SqlParameter("@LCID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Rowguid
            {
                get
                {
                    return new SqlParameter("@Rowguid", SqlDbType.UniqueIdentifier, 0);
                }
            }

            public static SqlParameter PrintedDate
            {
                get
                {
                    return new SqlParameter("@PrintedDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter ActivityID
            {
                get
                {
                    return new SqlParameter("@ActivityID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter IsReprintOf
            {
                get
                {
                    return new SqlParameter("@IsReprintOf", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter IsVoided
            {
                get
                {
                    return new SqlParameter("@IsVoided", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter IsDeliveryNote
            {
                get
                {
                    return new SqlParameter("@IsDeliveryNote", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter OriginalInvoiceNumber
            {
                get
                {
                    return new SqlParameter("@OriginalInvoiceNumber", SqlDbType.NVarChar, 100);
                }
            }

            public static SqlParameter IsConvertedFromDeliveryNote
            {
                get
                {
                    return new SqlParameter("@IsConvertedFromDeliveryNote", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter ShippingSite
            {
                get
                {
                    return new SqlParameter("@ShippingSite", SqlDbType.NVarChar, 100);
                }
            }

            public static SqlParameter DocumentTypeID
            {
                get
                {
                    return new SqlParameter("@DocumentTypeID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter IssuingWarehouseCode
            {
                get
                {
                    return new SqlParameter("@IssuingWarehouseCode", SqlDbType.NVarChar, 5);
                }
            }

            public static SqlParameter Note
            {
                get
                {
                    return new SqlParameter("@Note", SqlDbType.NVarChar, 400);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string ID = "ID";
            public const string InvoiceTypeID = "InvoiceTypeID";
            public const string STVOrInvoiceNo = "STVOrInvoiceNo";
            public const string WayBillNo = "WayBillNo";
            public const string TransitTransferNo = "TransitTransferNo";
            public const string InsurancePolicyNo = "InsurancePolicyNo";
            public const string DateOfEntry = "DateOfEntry";
            public const string ReceiptInvoiceType = "ReceiptInvoiceType";
            public const string TotalValue = "TotalValue";
            public const string Insurance = "Insurance";
            public const string AirFreight = "AirFreight";
            public const string SeaFreight = "SeaFreight";
            public const string InlandFreight = "InlandFreight";
            public const string NBE = "NBE";
            public const string CBE = "CBE";
            public const string CustomDutyTax = "CustomDutyTax";
            public const string TransitServiceCharge = "TransitServiceCharge";
            public const string Provision = "Provision";
            public const string OtherExpense = "OtherExpense";
            public const string ExchangeRate = "ExchangeRate";
            public const string SavedByUserID = "SavedByUserID";
            public const string POID = "POID";
            public const string Currency = "Currency";
            public const string LCID = "LCID";
            public const string Rowguid = "rowguid";
            public const string PrintedDate = "PrintedDate";
            public const string ActivityID = "ActivityID";
            public const string IsReprintOf = "IsReprintOf";
            public const string IsVoided = "IsVoided";
            public const string IsDeliveryNote = "IsDeliveryNote";
            public const string OriginalInvoiceNumber = "OriginalInvoiceNumber";
            public const string IsConvertedFromDeliveryNote = "IsConvertedFromDeliveryNote";
            public const string ShippingSite = "ShippingSite";
            public const string DocumentTypeID = "DocumentTypeID";
            public const string IssuingWarehouseCode = "IssuingWarehouseCode";
            public const string Note = "Note";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _ReceiptInvoice.PropertyNames.ID;
                    ht[InvoiceTypeID] = _ReceiptInvoice.PropertyNames.InvoiceTypeID;
                    ht[STVOrInvoiceNo] = _ReceiptInvoice.PropertyNames.STVOrInvoiceNo;
                    ht[WayBillNo] = _ReceiptInvoice.PropertyNames.WayBillNo;
                    ht[TransitTransferNo] = _ReceiptInvoice.PropertyNames.TransitTransferNo;
                    ht[InsurancePolicyNo] = _ReceiptInvoice.PropertyNames.InsurancePolicyNo;
                    ht[DateOfEntry] = _ReceiptInvoice.PropertyNames.DateOfEntry;
                    ht[ReceiptInvoiceType] = _ReceiptInvoice.PropertyNames.ReceiptInvoiceType;
                    ht[TotalValue] = _ReceiptInvoice.PropertyNames.TotalValue;
                    ht[Insurance] = _ReceiptInvoice.PropertyNames.Insurance;
                    ht[AirFreight] = _ReceiptInvoice.PropertyNames.AirFreight;
                    ht[SeaFreight] = _ReceiptInvoice.PropertyNames.SeaFreight;
                    ht[InlandFreight] = _ReceiptInvoice.PropertyNames.InlandFreight;
                    ht[NBE] = _ReceiptInvoice.PropertyNames.NBE;
                    ht[CBE] = _ReceiptInvoice.PropertyNames.CBE;
                    ht[CustomDutyTax] = _ReceiptInvoice.PropertyNames.CustomDutyTax;
                    ht[TransitServiceCharge] = _ReceiptInvoice.PropertyNames.TransitServiceCharge;
                    ht[Provision] = _ReceiptInvoice.PropertyNames.Provision;
                    ht[OtherExpense] = _ReceiptInvoice.PropertyNames.OtherExpense;
                    ht[ExchangeRate] = _ReceiptInvoice.PropertyNames.ExchangeRate;
                    ht[SavedByUserID] = _ReceiptInvoice.PropertyNames.SavedByUserID;
                    ht[POID] = _ReceiptInvoice.PropertyNames.POID;
                    ht[Currency] = _ReceiptInvoice.PropertyNames.Currency;
                    ht[LCID] = _ReceiptInvoice.PropertyNames.LCID;
                    ht[Rowguid] = _ReceiptInvoice.PropertyNames.Rowguid;
                    ht[PrintedDate] = _ReceiptInvoice.PropertyNames.PrintedDate;
                    ht[ActivityID] = _ReceiptInvoice.PropertyNames.ActivityID;
                    ht[IsReprintOf] = _ReceiptInvoice.PropertyNames.IsReprintOf;
                    ht[IsVoided] = _ReceiptInvoice.PropertyNames.IsVoided;
                    ht[IsDeliveryNote] = _ReceiptInvoice.PropertyNames.IsDeliveryNote;
                    ht[OriginalInvoiceNumber] = _ReceiptInvoice.PropertyNames.OriginalInvoiceNumber;
                    ht[IsConvertedFromDeliveryNote] = _ReceiptInvoice.PropertyNames.IsConvertedFromDeliveryNote;
                    ht[ShippingSite] = _ReceiptInvoice.PropertyNames.ShippingSite;
                    ht[DocumentTypeID] = _ReceiptInvoice.PropertyNames.DocumentTypeID;
                    ht[IssuingWarehouseCode] = _ReceiptInvoice.PropertyNames.IssuingWarehouseCode;
                    ht[Note] = _ReceiptInvoice.PropertyNames.Note;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string ID = "ID";
            public const string InvoiceTypeID = "InvoiceTypeID";
            public const string STVOrInvoiceNo = "STVOrInvoiceNo";
            public const string WayBillNo = "WayBillNo";
            public const string TransitTransferNo = "TransitTransferNo";
            public const string InsurancePolicyNo = "InsurancePolicyNo";
            public const string DateOfEntry = "DateOfEntry";
            public const string ReceiptInvoiceType = "ReceiptInvoiceType";
            public const string TotalValue = "TotalValue";
            public const string Insurance = "Insurance";
            public const string AirFreight = "AirFreight";
            public const string SeaFreight = "SeaFreight";
            public const string InlandFreight = "InlandFreight";
            public const string NBE = "NBE";
            public const string CBE = "CBE";
            public const string CustomDutyTax = "CustomDutyTax";
            public const string TransitServiceCharge = "TransitServiceCharge";
            public const string Provision = "Provision";
            public const string OtherExpense = "OtherExpense";
            public const string ExchangeRate = "ExchangeRate";
            public const string SavedByUserID = "SavedByUserID";
            public const string POID = "POID";
            public const string Currency = "Currency";
            public const string LCID = "LCID";
            public const string Rowguid = "Rowguid";
            public const string PrintedDate = "PrintedDate";
            public const string ActivityID = "ActivityID";
            public const string IsReprintOf = "IsReprintOf";
            public const string IsVoided = "IsVoided";
            public const string IsDeliveryNote = "IsDeliveryNote";
            public const string OriginalInvoiceNumber = "OriginalInvoiceNumber";
            public const string IsConvertedFromDeliveryNote = "IsConvertedFromDeliveryNote";
            public const string ShippingSite = "ShippingSite";
            public const string DocumentTypeID = "DocumentTypeID";
            public const string IssuingWarehouseCode = "IssuingWarehouseCode";
            public const string Note = "Note";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _ReceiptInvoice.ColumnNames.ID;
                    ht[InvoiceTypeID] = _ReceiptInvoice.ColumnNames.InvoiceTypeID;
                    ht[STVOrInvoiceNo] = _ReceiptInvoice.ColumnNames.STVOrInvoiceNo;
                    ht[WayBillNo] = _ReceiptInvoice.ColumnNames.WayBillNo;
                    ht[TransitTransferNo] = _ReceiptInvoice.ColumnNames.TransitTransferNo;
                    ht[InsurancePolicyNo] = _ReceiptInvoice.ColumnNames.InsurancePolicyNo;
                    ht[DateOfEntry] = _ReceiptInvoice.ColumnNames.DateOfEntry;
                    ht[ReceiptInvoiceType] = _ReceiptInvoice.ColumnNames.ReceiptInvoiceType;
                    ht[TotalValue] = _ReceiptInvoice.ColumnNames.TotalValue;
                    ht[Insurance] = _ReceiptInvoice.ColumnNames.Insurance;
                    ht[AirFreight] = _ReceiptInvoice.ColumnNames.AirFreight;
                    ht[SeaFreight] = _ReceiptInvoice.ColumnNames.SeaFreight;
                    ht[InlandFreight] = _ReceiptInvoice.ColumnNames.InlandFreight;
                    ht[NBE] = _ReceiptInvoice.ColumnNames.NBE;
                    ht[CBE] = _ReceiptInvoice.ColumnNames.CBE;
                    ht[CustomDutyTax] = _ReceiptInvoice.ColumnNames.CustomDutyTax;
                    ht[TransitServiceCharge] = _ReceiptInvoice.ColumnNames.TransitServiceCharge;
                    ht[Provision] = _ReceiptInvoice.ColumnNames.Provision;
                    ht[OtherExpense] = _ReceiptInvoice.ColumnNames.OtherExpense;
                    ht[ExchangeRate] = _ReceiptInvoice.ColumnNames.ExchangeRate;
                    ht[SavedByUserID] = _ReceiptInvoice.ColumnNames.SavedByUserID;
                    ht[POID] = _ReceiptInvoice.ColumnNames.POID;
                    ht[Currency] = _ReceiptInvoice.ColumnNames.Currency;
                    ht[LCID] = _ReceiptInvoice.ColumnNames.LCID;
                    ht[Rowguid] = _ReceiptInvoice.ColumnNames.Rowguid;
                    ht[PrintedDate] = _ReceiptInvoice.ColumnNames.PrintedDate;
                    ht[ActivityID] = _ReceiptInvoice.ColumnNames.ActivityID;
                    ht[IsReprintOf] = _ReceiptInvoice.ColumnNames.IsReprintOf;
                    ht[IsVoided] = _ReceiptInvoice.ColumnNames.IsVoided;
                    ht[IsDeliveryNote] = _ReceiptInvoice.ColumnNames.IsDeliveryNote;
                    ht[OriginalInvoiceNumber] = _ReceiptInvoice.ColumnNames.OriginalInvoiceNumber;
                    ht[IsConvertedFromDeliveryNote] = _ReceiptInvoice.ColumnNames.IsConvertedFromDeliveryNote;
                    ht[ShippingSite] = _ReceiptInvoice.ColumnNames.ShippingSite;
                    ht[DocumentTypeID] = _ReceiptInvoice.ColumnNames.DocumentTypeID;
                    ht[IssuingWarehouseCode] = _ReceiptInvoice.ColumnNames.IssuingWarehouseCode;
                    ht[Note] = _ReceiptInvoice.ColumnNames.Note;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string ID = "s_ID";
            public const string InvoiceTypeID = "s_InvoiceTypeID";
            public const string STVOrInvoiceNo = "s_STVOrInvoiceNo";
            public const string WayBillNo = "s_WayBillNo";
            public const string TransitTransferNo = "s_TransitTransferNo";
            public const string InsurancePolicyNo = "s_InsurancePolicyNo";
            public const string DateOfEntry = "s_DateOfEntry";
            public const string ReceiptInvoiceType = "s_ReceiptInvoiceType";
            public const string TotalValue = "s_TotalValue";
            public const string Insurance = "s_Insurance";
            public const string AirFreight = "s_AirFreight";
            public const string SeaFreight = "s_SeaFreight";
            public const string InlandFreight = "s_InlandFreight";
            public const string NBE = "s_NBE";
            public const string CBE = "s_CBE";
            public const string CustomDutyTax = "s_CustomDutyTax";
            public const string TransitServiceCharge = "s_TransitServiceCharge";
            public const string Provision = "s_Provision";
            public const string OtherExpense = "s_OtherExpense";
            public const string ExchangeRate = "s_ExchangeRate";
            public const string SavedByUserID = "s_SavedByUserID";
            public const string POID = "s_POID";
            public const string Currency = "s_Currency";
            public const string LCID = "s_LCID";
            public const string Rowguid = "s_Rowguid";
            public const string PrintedDate = "s_PrintedDate";
            public const string ActivityID = "s_ActivityID";
            public const string IsReprintOf = "s_IsReprintOf";
            public const string IsVoided = "s_IsVoided";
            public const string IsDeliveryNote = "s_IsDeliveryNote";
            public const string OriginalInvoiceNumber = "s_OriginalInvoiceNumber";
            public const string IsConvertedFromDeliveryNote = "s_IsConvertedFromDeliveryNote";
            public const string ShippingSite = "s_ShippingSite";
            public const string DocumentTypeID = "s_DocumentTypeID";
            public const string IssuingWarehouseCode = "s_IssuingWarehouseCode";
            public const string Note = "s_Note";

        }
        #endregion

        #region Properties

        public virtual int ID
        {
            get
            {
                return base.Getint(ColumnNames.ID);
            }
            set
            {
                base.Setint(ColumnNames.ID, value);
            }
        }

        public virtual int InvoiceTypeID
        {
            get
            {
                return base.Getint(ColumnNames.InvoiceTypeID);
            }
            set
            {
                base.Setint(ColumnNames.InvoiceTypeID, value);
            }
        }

        public virtual string STVOrInvoiceNo
        {
            get
            {
                return base.Getstring(ColumnNames.STVOrInvoiceNo);
            }
            set
            {
                base.Setstring(ColumnNames.STVOrInvoiceNo, value);
            }
        }

        public virtual string WayBillNo
        {
            get
            {
                return base.Getstring(ColumnNames.WayBillNo);
            }
            set
            {
                base.Setstring(ColumnNames.WayBillNo, value);
            }
        }

        public virtual string TransitTransferNo
        {
            get
            {
                return base.Getstring(ColumnNames.TransitTransferNo);
            }
            set
            {
                base.Setstring(ColumnNames.TransitTransferNo, value);
            }
        }

        public virtual string InsurancePolicyNo
        {
            get
            {
                return base.Getstring(ColumnNames.InsurancePolicyNo);
            }
            set
            {
                base.Setstring(ColumnNames.InsurancePolicyNo, value);
            }
        }

        public virtual DateTime DateOfEntry
        {
            get
            {
                return base.GetDateTime(ColumnNames.DateOfEntry);
            }
            set
            {
                base.SetDateTime(ColumnNames.DateOfEntry, value);
            }
        }

        public virtual int ReceiptInvoiceType
        {
            get
            {
                return base.Getint(ColumnNames.ReceiptInvoiceType);
            }
            set
            {
                base.Setint(ColumnNames.ReceiptInvoiceType, value);
            }
        }

        public virtual double TotalValue
        {
            get
            {
                return base.Getdouble(ColumnNames.TotalValue);
            }
            set
            {
                base.Setdouble(ColumnNames.TotalValue, value);
            }
        }

        public virtual double Insurance
        {
            get
            {
                return base.Getdouble(ColumnNames.Insurance);
            }
            set
            {
                base.Setdouble(ColumnNames.Insurance, value);
            }
        }

        public virtual double AirFreight
        {
            get
            {
                return base.Getdouble(ColumnNames.AirFreight);
            }
            set
            {
                base.Setdouble(ColumnNames.AirFreight, value);
            }
        }

        public virtual double SeaFreight
        {
            get
            {
                return base.Getdouble(ColumnNames.SeaFreight);
            }
            set
            {
                base.Setdouble(ColumnNames.SeaFreight, value);
            }
        }

        public virtual double InlandFreight
        {
            get
            {
                return base.Getdouble(ColumnNames.InlandFreight);
            }
            set
            {
                base.Setdouble(ColumnNames.InlandFreight, value);
            }
        }

        public virtual double NBE
        {
            get
            {
                return base.Getdouble(ColumnNames.NBE);
            }
            set
            {
                base.Setdouble(ColumnNames.NBE, value);
            }
        }

        public virtual double CBE
        {
            get
            {
                return base.Getdouble(ColumnNames.CBE);
            }
            set
            {
                base.Setdouble(ColumnNames.CBE, value);
            }
        }

        public virtual double CustomDutyTax
        {
            get
            {
                return base.Getdouble(ColumnNames.CustomDutyTax);
            }
            set
            {
                base.Setdouble(ColumnNames.CustomDutyTax, value);
            }
        }

        public virtual double TransitServiceCharge
        {
            get
            {
                return base.Getdouble(ColumnNames.TransitServiceCharge);
            }
            set
            {
                base.Setdouble(ColumnNames.TransitServiceCharge, value);
            }
        }

        public virtual double Provision
        {
            get
            {
                return base.Getdouble(ColumnNames.Provision);
            }
            set
            {
                base.Setdouble(ColumnNames.Provision, value);
            }
        }

        public virtual double OtherExpense
        {
            get
            {
                return base.Getdouble(ColumnNames.OtherExpense);
            }
            set
            {
                base.Setdouble(ColumnNames.OtherExpense, value);
            }
        }

        public virtual double ExchangeRate
        {
            get
            {
                return base.Getdouble(ColumnNames.ExchangeRate);
            }
            set
            {
                base.Setdouble(ColumnNames.ExchangeRate, value);
            }
        }

        public virtual int SavedByUserID
        {
            get
            {
                return base.Getint(ColumnNames.SavedByUserID);
            }
            set
            {
                base.Setint(ColumnNames.SavedByUserID, value);
            }
        }

        public virtual int POID
        {
            get
            {
                return base.Getint(ColumnNames.POID);
            }
            set
            {
                base.Setint(ColumnNames.POID, value);
            }
        }

        public virtual string Currency
        {
            get
            {
                return base.Getstring(ColumnNames.Currency);
            }
            set
            {
                base.Setstring(ColumnNames.Currency, value);
            }
        }

        public virtual int LCID
        {
            get
            {
                return base.Getint(ColumnNames.LCID);
            }
            set
            {
                base.Setint(ColumnNames.LCID, value);
            }
        }

        public virtual Guid Rowguid
        {
            get
            {
                return base.GetGuid(ColumnNames.Rowguid);
            }
            set
            {
                base.SetGuid(ColumnNames.Rowguid, value);
            }
        }

        public virtual DateTime PrintedDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.PrintedDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.PrintedDate, value);
            }
        }

        public virtual int ActivityID
        {
            get
            {
                return base.Getint(ColumnNames.ActivityID);
            }
            set
            {
                base.Setint(ColumnNames.ActivityID, value);
            }
        }

        public virtual int IsReprintOf
        {
            get
            {
                return base.Getint(ColumnNames.IsReprintOf);
            }
            set
            {
                base.Setint(ColumnNames.IsReprintOf, value);
            }
        }

        public virtual bool IsVoided
        {
            get
            {
                return base.Getbool(ColumnNames.IsVoided);
            }
            set
            {
                base.Setbool(ColumnNames.IsVoided, value);
            }
        }

        public virtual bool IsDeliveryNote
        {
            get
            {
                return base.Getbool(ColumnNames.IsDeliveryNote);
            }
            set
            {
                base.Setbool(ColumnNames.IsDeliveryNote, value);
            }
        }

        public virtual string OriginalInvoiceNumber
        {
            get
            {
                return base.Getstring(ColumnNames.OriginalInvoiceNumber);
            }
            set
            {
                base.Setstring(ColumnNames.OriginalInvoiceNumber, value);
            }
        }

        public virtual bool IsConvertedFromDeliveryNote
        {
            get
            {
                return base.Getbool(ColumnNames.IsConvertedFromDeliveryNote);
            }
            set
            {
                base.Setbool(ColumnNames.IsConvertedFromDeliveryNote, value);
            }
        }

        public virtual string ShippingSite
        {
            get
            {
                return base.Getstring(ColumnNames.ShippingSite);
            }
            set
            {
                base.Setstring(ColumnNames.ShippingSite, value);
            }
        }

        public virtual int DocumentTypeID
        {
            get
            {
                return base.Getint(ColumnNames.DocumentTypeID);
            }
            set
            {
                base.Setint(ColumnNames.DocumentTypeID, value);
            }
        }

        public virtual string IssuingWarehouseCode
        {
            get
            {
                return base.Getstring(ColumnNames.IssuingWarehouseCode);
            }
            set
            {
                base.Setstring(ColumnNames.IssuingWarehouseCode, value);
            }
        }

        public virtual string Note
        {
            get
            {
                return base.Getstring(ColumnNames.Note);
            }
            set
            {
                base.Setstring(ColumnNames.Note, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_ID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ID);
                else
                    this.ID = base.SetintAsString(ColumnNames.ID, value);
            }
        }

        public virtual string s_InvoiceTypeID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.InvoiceTypeID) ? string.Empty : base.GetintAsString(ColumnNames.InvoiceTypeID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.InvoiceTypeID);
                else
                    this.InvoiceTypeID = base.SetintAsString(ColumnNames.InvoiceTypeID, value);
            }
        }

        public virtual string s_STVOrInvoiceNo
        {
            get
            {
                return this.IsColumnNull(ColumnNames.STVOrInvoiceNo) ? string.Empty : base.GetstringAsString(ColumnNames.STVOrInvoiceNo);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.STVOrInvoiceNo);
                else
                    this.STVOrInvoiceNo = base.SetstringAsString(ColumnNames.STVOrInvoiceNo, value);
            }
        }

        public virtual string s_WayBillNo
        {
            get
            {
                return this.IsColumnNull(ColumnNames.WayBillNo) ? string.Empty : base.GetstringAsString(ColumnNames.WayBillNo);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.WayBillNo);
                else
                    this.WayBillNo = base.SetstringAsString(ColumnNames.WayBillNo, value);
            }
        }

        public virtual string s_TransitTransferNo
        {
            get
            {
                return this.IsColumnNull(ColumnNames.TransitTransferNo) ? string.Empty : base.GetstringAsString(ColumnNames.TransitTransferNo);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.TransitTransferNo);
                else
                    this.TransitTransferNo = base.SetstringAsString(ColumnNames.TransitTransferNo, value);
            }
        }

        public virtual string s_InsurancePolicyNo
        {
            get
            {
                return this.IsColumnNull(ColumnNames.InsurancePolicyNo) ? string.Empty : base.GetstringAsString(ColumnNames.InsurancePolicyNo);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.InsurancePolicyNo);
                else
                    this.InsurancePolicyNo = base.SetstringAsString(ColumnNames.InsurancePolicyNo, value);
            }
        }

        public virtual string s_DateOfEntry
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DateOfEntry) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateOfEntry);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DateOfEntry);
                else
                    this.DateOfEntry = base.SetDateTimeAsString(ColumnNames.DateOfEntry, value);
            }
        }

        public virtual string s_ReceiptInvoiceType
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ReceiptInvoiceType) ? string.Empty : base.GetintAsString(ColumnNames.ReceiptInvoiceType);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ReceiptInvoiceType);
                else
                    this.ReceiptInvoiceType = base.SetintAsString(ColumnNames.ReceiptInvoiceType, value);
            }
        }

        public virtual string s_TotalValue
        {
            get
            {
                return this.IsColumnNull(ColumnNames.TotalValue) ? string.Empty : base.GetdoubleAsString(ColumnNames.TotalValue);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.TotalValue);
                else
                    this.TotalValue = base.SetdoubleAsString(ColumnNames.TotalValue, value);
            }
        }

        public virtual string s_Insurance
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Insurance) ? string.Empty : base.GetdoubleAsString(ColumnNames.Insurance);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Insurance);
                else
                    this.Insurance = base.SetdoubleAsString(ColumnNames.Insurance, value);
            }
        }

        public virtual string s_AirFreight
        {
            get
            {
                return this.IsColumnNull(ColumnNames.AirFreight) ? string.Empty : base.GetdoubleAsString(ColumnNames.AirFreight);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.AirFreight);
                else
                    this.AirFreight = base.SetdoubleAsString(ColumnNames.AirFreight, value);
            }
        }

        public virtual string s_SeaFreight
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SeaFreight) ? string.Empty : base.GetdoubleAsString(ColumnNames.SeaFreight);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SeaFreight);
                else
                    this.SeaFreight = base.SetdoubleAsString(ColumnNames.SeaFreight, value);
            }
        }

        public virtual string s_InlandFreight
        {
            get
            {
                return this.IsColumnNull(ColumnNames.InlandFreight) ? string.Empty : base.GetdoubleAsString(ColumnNames.InlandFreight);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.InlandFreight);
                else
                    this.InlandFreight = base.SetdoubleAsString(ColumnNames.InlandFreight, value);
            }
        }

        public virtual string s_NBE
        {
            get
            {
                return this.IsColumnNull(ColumnNames.NBE) ? string.Empty : base.GetdoubleAsString(ColumnNames.NBE);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.NBE);
                else
                    this.NBE = base.SetdoubleAsString(ColumnNames.NBE, value);
            }
        }

        public virtual string s_CBE
        {
            get
            {
                return this.IsColumnNull(ColumnNames.CBE) ? string.Empty : base.GetdoubleAsString(ColumnNames.CBE);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.CBE);
                else
                    this.CBE = base.SetdoubleAsString(ColumnNames.CBE, value);
            }
        }

        public virtual string s_CustomDutyTax
        {
            get
            {
                return this.IsColumnNull(ColumnNames.CustomDutyTax) ? string.Empty : base.GetdoubleAsString(ColumnNames.CustomDutyTax);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.CustomDutyTax);
                else
                    this.CustomDutyTax = base.SetdoubleAsString(ColumnNames.CustomDutyTax, value);
            }
        }

        public virtual string s_TransitServiceCharge
        {
            get
            {
                return this.IsColumnNull(ColumnNames.TransitServiceCharge) ? string.Empty : base.GetdoubleAsString(ColumnNames.TransitServiceCharge);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.TransitServiceCharge);
                else
                    this.TransitServiceCharge = base.SetdoubleAsString(ColumnNames.TransitServiceCharge, value);
            }
        }

        public virtual string s_Provision
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Provision) ? string.Empty : base.GetdoubleAsString(ColumnNames.Provision);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Provision);
                else
                    this.Provision = base.SetdoubleAsString(ColumnNames.Provision, value);
            }
        }

        public virtual string s_OtherExpense
        {
            get
            {
                return this.IsColumnNull(ColumnNames.OtherExpense) ? string.Empty : base.GetdoubleAsString(ColumnNames.OtherExpense);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.OtherExpense);
                else
                    this.OtherExpense = base.SetdoubleAsString(ColumnNames.OtherExpense, value);
            }
        }

        public virtual string s_ExchangeRate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ExchangeRate) ? string.Empty : base.GetdoubleAsString(ColumnNames.ExchangeRate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ExchangeRate);
                else
                    this.ExchangeRate = base.SetdoubleAsString(ColumnNames.ExchangeRate, value);
            }
        }

        public virtual string s_SavedByUserID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SavedByUserID) ? string.Empty : base.GetintAsString(ColumnNames.SavedByUserID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SavedByUserID);
                else
                    this.SavedByUserID = base.SetintAsString(ColumnNames.SavedByUserID, value);
            }
        }

        public virtual string s_POID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.POID) ? string.Empty : base.GetintAsString(ColumnNames.POID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.POID);
                else
                    this.POID = base.SetintAsString(ColumnNames.POID, value);
            }
        }

        public virtual string s_Currency
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Currency) ? string.Empty : base.GetstringAsString(ColumnNames.Currency);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Currency);
                else
                    this.Currency = base.SetstringAsString(ColumnNames.Currency, value);
            }
        }

        public virtual string s_LCID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.LCID) ? string.Empty : base.GetintAsString(ColumnNames.LCID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.LCID);
                else
                    this.LCID = base.SetintAsString(ColumnNames.LCID, value);
            }
        }

        public virtual string s_Rowguid
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Rowguid) ? string.Empty : base.GetGuidAsString(ColumnNames.Rowguid);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Rowguid);
                else
                    this.Rowguid = base.SetGuidAsString(ColumnNames.Rowguid, value);
            }
        }

        public virtual string s_PrintedDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PrintedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.PrintedDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PrintedDate);
                else
                    this.PrintedDate = base.SetDateTimeAsString(ColumnNames.PrintedDate, value);
            }
        }

        public virtual string s_ActivityID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ActivityID) ? string.Empty : base.GetintAsString(ColumnNames.ActivityID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ActivityID);
                else
                    this.ActivityID = base.SetintAsString(ColumnNames.ActivityID, value);
            }
        }

        public virtual string s_IsReprintOf
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IsReprintOf) ? string.Empty : base.GetintAsString(ColumnNames.IsReprintOf);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IsReprintOf);
                else
                    this.IsReprintOf = base.SetintAsString(ColumnNames.IsReprintOf, value);
            }
        }

        public virtual string s_IsVoided
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IsVoided) ? string.Empty : base.GetboolAsString(ColumnNames.IsVoided);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IsVoided);
                else
                    this.IsVoided = base.SetboolAsString(ColumnNames.IsVoided, value);
            }
        }

        public virtual string s_IsDeliveryNote
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IsDeliveryNote) ? string.Empty : base.GetboolAsString(ColumnNames.IsDeliveryNote);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IsDeliveryNote);
                else
                    this.IsDeliveryNote = base.SetboolAsString(ColumnNames.IsDeliveryNote, value);
            }
        }

        public virtual string s_OriginalInvoiceNumber
        {
            get
            {
                return this.IsColumnNull(ColumnNames.OriginalInvoiceNumber) ? string.Empty : base.GetstringAsString(ColumnNames.OriginalInvoiceNumber);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.OriginalInvoiceNumber);
                else
                    this.OriginalInvoiceNumber = base.SetstringAsString(ColumnNames.OriginalInvoiceNumber, value);
            }
        }

        public virtual string s_IsConvertedFromDeliveryNote
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IsConvertedFromDeliveryNote) ? string.Empty : base.GetboolAsString(ColumnNames.IsConvertedFromDeliveryNote);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IsConvertedFromDeliveryNote);
                else
                    this.IsConvertedFromDeliveryNote = base.SetboolAsString(ColumnNames.IsConvertedFromDeliveryNote, value);
            }
        }

        public virtual string s_ShippingSite
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ShippingSite) ? string.Empty : base.GetstringAsString(ColumnNames.ShippingSite);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ShippingSite);
                else
                    this.ShippingSite = base.SetstringAsString(ColumnNames.ShippingSite, value);
            }
        }

        public virtual string s_DocumentTypeID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DocumentTypeID) ? string.Empty : base.GetintAsString(ColumnNames.DocumentTypeID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DocumentTypeID);
                else
                    this.DocumentTypeID = base.SetintAsString(ColumnNames.DocumentTypeID, value);
            }
        }

        public virtual string s_IssuingWarehouseCode
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IssuingWarehouseCode) ? string.Empty : base.GetstringAsString(ColumnNames.IssuingWarehouseCode);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IssuingWarehouseCode);
                else
                    this.IssuingWarehouseCode = base.SetstringAsString(ColumnNames.IssuingWarehouseCode, value);
            }
        }

        public virtual string s_Note
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Note) ? string.Empty : base.GetstringAsString(ColumnNames.Note);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Note);
                else
                    this.Note = base.SetstringAsString(ColumnNames.Note, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter ID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter InvoiceTypeID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.InvoiceTypeID, Parameters.InvoiceTypeID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter STVOrInvoiceNo
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.STVOrInvoiceNo, Parameters.STVOrInvoiceNo);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter WayBillNo
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.WayBillNo, Parameters.WayBillNo);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter TransitTransferNo
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.TransitTransferNo, Parameters.TransitTransferNo);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter InsurancePolicyNo
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.InsurancePolicyNo, Parameters.InsurancePolicyNo);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DateOfEntry
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DateOfEntry, Parameters.DateOfEntry);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ReceiptInvoiceType
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ReceiptInvoiceType, Parameters.ReceiptInvoiceType);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter TotalValue
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.TotalValue, Parameters.TotalValue);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Insurance
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Insurance, Parameters.Insurance);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter AirFreight
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.AirFreight, Parameters.AirFreight);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SeaFreight
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SeaFreight, Parameters.SeaFreight);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter InlandFreight
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.InlandFreight, Parameters.InlandFreight);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter NBE
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.NBE, Parameters.NBE);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter CBE
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.CBE, Parameters.CBE);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter CustomDutyTax
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.CustomDutyTax, Parameters.CustomDutyTax);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter TransitServiceCharge
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.TransitServiceCharge, Parameters.TransitServiceCharge);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Provision
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Provision, Parameters.Provision);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter OtherExpense
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.OtherExpense, Parameters.OtherExpense);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ExchangeRate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ExchangeRate, Parameters.ExchangeRate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SavedByUserID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SavedByUserID, Parameters.SavedByUserID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter POID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.POID, Parameters.POID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Currency
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Currency, Parameters.Currency);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter LCID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.LCID, Parameters.LCID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Rowguid
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Rowguid, Parameters.Rowguid);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PrintedDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PrintedDate, Parameters.PrintedDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ActivityID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ActivityID, Parameters.ActivityID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IsReprintOf
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IsReprintOf, Parameters.IsReprintOf);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IsVoided
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IsVoided, Parameters.IsVoided);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IsDeliveryNote
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IsDeliveryNote, Parameters.IsDeliveryNote);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter OriginalInvoiceNumber
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.OriginalInvoiceNumber, Parameters.OriginalInvoiceNumber);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IsConvertedFromDeliveryNote
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IsConvertedFromDeliveryNote, Parameters.IsConvertedFromDeliveryNote);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ShippingSite
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ShippingSite, Parameters.ShippingSite);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DocumentTypeID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DocumentTypeID, Parameters.DocumentTypeID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IssuingWarehouseCode
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IssuingWarehouseCode, Parameters.IssuingWarehouseCode);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Note
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Note, Parameters.Note);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public WhereParameter InvoiceTypeID
            {
                get
                {
                    if (_InvoiceTypeID_W == null)
                    {
                        _InvoiceTypeID_W = TearOff.InvoiceTypeID;
                    }
                    return _InvoiceTypeID_W;
                }
            }

            public WhereParameter STVOrInvoiceNo
            {
                get
                {
                    if (_STVOrInvoiceNo_W == null)
                    {
                        _STVOrInvoiceNo_W = TearOff.STVOrInvoiceNo;
                    }
                    return _STVOrInvoiceNo_W;
                }
            }

            public WhereParameter WayBillNo
            {
                get
                {
                    if (_WayBillNo_W == null)
                    {
                        _WayBillNo_W = TearOff.WayBillNo;
                    }
                    return _WayBillNo_W;
                }
            }

            public WhereParameter TransitTransferNo
            {
                get
                {
                    if (_TransitTransferNo_W == null)
                    {
                        _TransitTransferNo_W = TearOff.TransitTransferNo;
                    }
                    return _TransitTransferNo_W;
                }
            }

            public WhereParameter InsurancePolicyNo
            {
                get
                {
                    if (_InsurancePolicyNo_W == null)
                    {
                        _InsurancePolicyNo_W = TearOff.InsurancePolicyNo;
                    }
                    return _InsurancePolicyNo_W;
                }
            }

            public WhereParameter DateOfEntry
            {
                get
                {
                    if (_DateOfEntry_W == null)
                    {
                        _DateOfEntry_W = TearOff.DateOfEntry;
                    }
                    return _DateOfEntry_W;
                }
            }

            public WhereParameter ReceiptInvoiceType
            {
                get
                {
                    if (_ReceiptInvoiceType_W == null)
                    {
                        _ReceiptInvoiceType_W = TearOff.ReceiptInvoiceType;
                    }
                    return _ReceiptInvoiceType_W;
                }
            }

            public WhereParameter TotalValue
            {
                get
                {
                    if (_TotalValue_W == null)
                    {
                        _TotalValue_W = TearOff.TotalValue;
                    }
                    return _TotalValue_W;
                }
            }

            public WhereParameter Insurance
            {
                get
                {
                    if (_Insurance_W == null)
                    {
                        _Insurance_W = TearOff.Insurance;
                    }
                    return _Insurance_W;
                }
            }

            public WhereParameter AirFreight
            {
                get
                {
                    if (_AirFreight_W == null)
                    {
                        _AirFreight_W = TearOff.AirFreight;
                    }
                    return _AirFreight_W;
                }
            }

            public WhereParameter SeaFreight
            {
                get
                {
                    if (_SeaFreight_W == null)
                    {
                        _SeaFreight_W = TearOff.SeaFreight;
                    }
                    return _SeaFreight_W;
                }
            }

            public WhereParameter InlandFreight
            {
                get
                {
                    if (_InlandFreight_W == null)
                    {
                        _InlandFreight_W = TearOff.InlandFreight;
                    }
                    return _InlandFreight_W;
                }
            }

            public WhereParameter NBE
            {
                get
                {
                    if (_NBE_W == null)
                    {
                        _NBE_W = TearOff.NBE;
                    }
                    return _NBE_W;
                }
            }

            public WhereParameter CBE
            {
                get
                {
                    if (_CBE_W == null)
                    {
                        _CBE_W = TearOff.CBE;
                    }
                    return _CBE_W;
                }
            }

            public WhereParameter CustomDutyTax
            {
                get
                {
                    if (_CustomDutyTax_W == null)
                    {
                        _CustomDutyTax_W = TearOff.CustomDutyTax;
                    }
                    return _CustomDutyTax_W;
                }
            }

            public WhereParameter TransitServiceCharge
            {
                get
                {
                    if (_TransitServiceCharge_W == null)
                    {
                        _TransitServiceCharge_W = TearOff.TransitServiceCharge;
                    }
                    return _TransitServiceCharge_W;
                }
            }

            public WhereParameter Provision
            {
                get
                {
                    if (_Provision_W == null)
                    {
                        _Provision_W = TearOff.Provision;
                    }
                    return _Provision_W;
                }
            }

            public WhereParameter OtherExpense
            {
                get
                {
                    if (_OtherExpense_W == null)
                    {
                        _OtherExpense_W = TearOff.OtherExpense;
                    }
                    return _OtherExpense_W;
                }
            }

            public WhereParameter ExchangeRate
            {
                get
                {
                    if (_ExchangeRate_W == null)
                    {
                        _ExchangeRate_W = TearOff.ExchangeRate;
                    }
                    return _ExchangeRate_W;
                }
            }

            public WhereParameter SavedByUserID
            {
                get
                {
                    if (_SavedByUserID_W == null)
                    {
                        _SavedByUserID_W = TearOff.SavedByUserID;
                    }
                    return _SavedByUserID_W;
                }
            }

            public WhereParameter POID
            {
                get
                {
                    if (_POID_W == null)
                    {
                        _POID_W = TearOff.POID;
                    }
                    return _POID_W;
                }
            }

            public WhereParameter Currency
            {
                get
                {
                    if (_Currency_W == null)
                    {
                        _Currency_W = TearOff.Currency;
                    }
                    return _Currency_W;
                }
            }

            public WhereParameter LCID
            {
                get
                {
                    if (_LCID_W == null)
                    {
                        _LCID_W = TearOff.LCID;
                    }
                    return _LCID_W;
                }
            }

            public WhereParameter Rowguid
            {
                get
                {
                    if (_Rowguid_W == null)
                    {
                        _Rowguid_W = TearOff.Rowguid;
                    }
                    return _Rowguid_W;
                }
            }

            public WhereParameter PrintedDate
            {
                get
                {
                    if (_PrintedDate_W == null)
                    {
                        _PrintedDate_W = TearOff.PrintedDate;
                    }
                    return _PrintedDate_W;
                }
            }

            public WhereParameter ActivityID
            {
                get
                {
                    if (_ActivityID_W == null)
                    {
                        _ActivityID_W = TearOff.ActivityID;
                    }
                    return _ActivityID_W;
                }
            }

            public WhereParameter IsReprintOf
            {
                get
                {
                    if (_IsReprintOf_W == null)
                    {
                        _IsReprintOf_W = TearOff.IsReprintOf;
                    }
                    return _IsReprintOf_W;
                }
            }

            public WhereParameter IsVoided
            {
                get
                {
                    if (_IsVoided_W == null)
                    {
                        _IsVoided_W = TearOff.IsVoided;
                    }
                    return _IsVoided_W;
                }
            }

            public WhereParameter IsDeliveryNote
            {
                get
                {
                    if (_IsDeliveryNote_W == null)
                    {
                        _IsDeliveryNote_W = TearOff.IsDeliveryNote;
                    }
                    return _IsDeliveryNote_W;
                }
            }

            public WhereParameter OriginalInvoiceNumber
            {
                get
                {
                    if (_OriginalInvoiceNumber_W == null)
                    {
                        _OriginalInvoiceNumber_W = TearOff.OriginalInvoiceNumber;
                    }
                    return _OriginalInvoiceNumber_W;
                }
            }

            public WhereParameter IsConvertedFromDeliveryNote
            {
                get
                {
                    if (_IsConvertedFromDeliveryNote_W == null)
                    {
                        _IsConvertedFromDeliveryNote_W = TearOff.IsConvertedFromDeliveryNote;
                    }
                    return _IsConvertedFromDeliveryNote_W;
                }
            }

            public WhereParameter ShippingSite
            {
                get
                {
                    if (_ShippingSite_W == null)
                    {
                        _ShippingSite_W = TearOff.ShippingSite;
                    }
                    return _ShippingSite_W;
                }
            }

            public WhereParameter DocumentTypeID
            {
                get
                {
                    if (_DocumentTypeID_W == null)
                    {
                        _DocumentTypeID_W = TearOff.DocumentTypeID;
                    }
                    return _DocumentTypeID_W;
                }
            }

            public WhereParameter IssuingWarehouseCode
            {
                get
                {
                    if (_IssuingWarehouseCode_W == null)
                    {
                        _IssuingWarehouseCode_W = TearOff.IssuingWarehouseCode;
                    }
                    return _IssuingWarehouseCode_W;
                }
            }

            public WhereParameter Note
            {
                get
                {
                    if (_Note_W == null)
                    {
                        _Note_W = TearOff.Note;
                    }
                    return _Note_W;
                }
            }

            private WhereParameter _ID_W = null;
            private WhereParameter _InvoiceTypeID_W = null;
            private WhereParameter _STVOrInvoiceNo_W = null;
            private WhereParameter _WayBillNo_W = null;
            private WhereParameter _TransitTransferNo_W = null;
            private WhereParameter _InsurancePolicyNo_W = null;
            private WhereParameter _DateOfEntry_W = null;
            private WhereParameter _ReceiptInvoiceType_W = null;
            private WhereParameter _TotalValue_W = null;
            private WhereParameter _Insurance_W = null;
            private WhereParameter _AirFreight_W = null;
            private WhereParameter _SeaFreight_W = null;
            private WhereParameter _InlandFreight_W = null;
            private WhereParameter _NBE_W = null;
            private WhereParameter _CBE_W = null;
            private WhereParameter _CustomDutyTax_W = null;
            private WhereParameter _TransitServiceCharge_W = null;
            private WhereParameter _Provision_W = null;
            private WhereParameter _OtherExpense_W = null;
            private WhereParameter _ExchangeRate_W = null;
            private WhereParameter _SavedByUserID_W = null;
            private WhereParameter _POID_W = null;
            private WhereParameter _Currency_W = null;
            private WhereParameter _LCID_W = null;
            private WhereParameter _Rowguid_W = null;
            private WhereParameter _PrintedDate_W = null;
            private WhereParameter _ActivityID_W = null;
            private WhereParameter _IsReprintOf_W = null;
            private WhereParameter _IsVoided_W = null;
            private WhereParameter _IsDeliveryNote_W = null;
            private WhereParameter _OriginalInvoiceNumber_W = null;
            private WhereParameter _IsConvertedFromDeliveryNote_W = null;
            private WhereParameter _ShippingSite_W = null;
            private WhereParameter _DocumentTypeID_W = null;
            private WhereParameter _IssuingWarehouseCode_W = null;
            private WhereParameter _Note_W = null;

            public void WhereClauseReset()
            {
                _ID_W = null;
                _InvoiceTypeID_W = null;
                _STVOrInvoiceNo_W = null;
                _WayBillNo_W = null;
                _TransitTransferNo_W = null;
                _InsurancePolicyNo_W = null;
                _DateOfEntry_W = null;
                _ReceiptInvoiceType_W = null;
                _TotalValue_W = null;
                _Insurance_W = null;
                _AirFreight_W = null;
                _SeaFreight_W = null;
                _InlandFreight_W = null;
                _NBE_W = null;
                _CBE_W = null;
                _CustomDutyTax_W = null;
                _TransitServiceCharge_W = null;
                _Provision_W = null;
                _OtherExpense_W = null;
                _ExchangeRate_W = null;
                _SavedByUserID_W = null;
                _POID_W = null;
                _Currency_W = null;
                _LCID_W = null;
                _Rowguid_W = null;
                _PrintedDate_W = null;
                _ActivityID_W = null;
                _IsReprintOf_W = null;
                _IsVoided_W = null;
                _IsDeliveryNote_W = null;
                _OriginalInvoiceNumber_W = null;
                _IsConvertedFromDeliveryNote_W = null;
                _ShippingSite_W = null;
                _DocumentTypeID_W = null;
                _IssuingWarehouseCode_W = null;
                _Note_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter ID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter InvoiceTypeID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.InvoiceTypeID, Parameters.InvoiceTypeID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter STVOrInvoiceNo
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.STVOrInvoiceNo, Parameters.STVOrInvoiceNo);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter WayBillNo
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.WayBillNo, Parameters.WayBillNo);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter TransitTransferNo
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.TransitTransferNo, Parameters.TransitTransferNo);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter InsurancePolicyNo
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.InsurancePolicyNo, Parameters.InsurancePolicyNo);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DateOfEntry
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateOfEntry, Parameters.DateOfEntry);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ReceiptInvoiceType
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceiptInvoiceType, Parameters.ReceiptInvoiceType);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter TotalValue
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.TotalValue, Parameters.TotalValue);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Insurance
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Insurance, Parameters.Insurance);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter AirFreight
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.AirFreight, Parameters.AirFreight);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SeaFreight
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SeaFreight, Parameters.SeaFreight);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter InlandFreight
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.InlandFreight, Parameters.InlandFreight);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter NBE
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.NBE, Parameters.NBE);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter CBE
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.CBE, Parameters.CBE);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter CustomDutyTax
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.CustomDutyTax, Parameters.CustomDutyTax);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter TransitServiceCharge
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.TransitServiceCharge, Parameters.TransitServiceCharge);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Provision
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Provision, Parameters.Provision);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter OtherExpense
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.OtherExpense, Parameters.OtherExpense);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ExchangeRate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExchangeRate, Parameters.ExchangeRate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SavedByUserID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SavedByUserID, Parameters.SavedByUserID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter POID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.POID, Parameters.POID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Currency
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Currency, Parameters.Currency);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter LCID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.LCID, Parameters.LCID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Rowguid
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rowguid, Parameters.Rowguid);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PrintedDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PrintedDate, Parameters.PrintedDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ActivityID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ActivityID, Parameters.ActivityID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IsReprintOf
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsReprintOf, Parameters.IsReprintOf);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IsVoided
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsVoided, Parameters.IsVoided);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IsDeliveryNote
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsDeliveryNote, Parameters.IsDeliveryNote);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter OriginalInvoiceNumber
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.OriginalInvoiceNumber, Parameters.OriginalInvoiceNumber);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IsConvertedFromDeliveryNote
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsConvertedFromDeliveryNote, Parameters.IsConvertedFromDeliveryNote);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ShippingSite
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShippingSite, Parameters.ShippingSite);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DocumentTypeID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DocumentTypeID, Parameters.DocumentTypeID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IssuingWarehouseCode
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IssuingWarehouseCode, Parameters.IssuingWarehouseCode);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Note
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Note, Parameters.Note);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public AggregateParameter InvoiceTypeID
            {
                get
                {
                    if (_InvoiceTypeID_W == null)
                    {
                        _InvoiceTypeID_W = TearOff.InvoiceTypeID;
                    }
                    return _InvoiceTypeID_W;
                }
            }

            public AggregateParameter STVOrInvoiceNo
            {
                get
                {
                    if (_STVOrInvoiceNo_W == null)
                    {
                        _STVOrInvoiceNo_W = TearOff.STVOrInvoiceNo;
                    }
                    return _STVOrInvoiceNo_W;
                }
            }

            public AggregateParameter WayBillNo
            {
                get
                {
                    if (_WayBillNo_W == null)
                    {
                        _WayBillNo_W = TearOff.WayBillNo;
                    }
                    return _WayBillNo_W;
                }
            }

            public AggregateParameter TransitTransferNo
            {
                get
                {
                    if (_TransitTransferNo_W == null)
                    {
                        _TransitTransferNo_W = TearOff.TransitTransferNo;
                    }
                    return _TransitTransferNo_W;
                }
            }

            public AggregateParameter InsurancePolicyNo
            {
                get
                {
                    if (_InsurancePolicyNo_W == null)
                    {
                        _InsurancePolicyNo_W = TearOff.InsurancePolicyNo;
                    }
                    return _InsurancePolicyNo_W;
                }
            }

            public AggregateParameter DateOfEntry
            {
                get
                {
                    if (_DateOfEntry_W == null)
                    {
                        _DateOfEntry_W = TearOff.DateOfEntry;
                    }
                    return _DateOfEntry_W;
                }
            }

            public AggregateParameter ReceiptInvoiceType
            {
                get
                {
                    if (_ReceiptInvoiceType_W == null)
                    {
                        _ReceiptInvoiceType_W = TearOff.ReceiptInvoiceType;
                    }
                    return _ReceiptInvoiceType_W;
                }
            }

            public AggregateParameter TotalValue
            {
                get
                {
                    if (_TotalValue_W == null)
                    {
                        _TotalValue_W = TearOff.TotalValue;
                    }
                    return _TotalValue_W;
                }
            }

            public AggregateParameter Insurance
            {
                get
                {
                    if (_Insurance_W == null)
                    {
                        _Insurance_W = TearOff.Insurance;
                    }
                    return _Insurance_W;
                }
            }

            public AggregateParameter AirFreight
            {
                get
                {
                    if (_AirFreight_W == null)
                    {
                        _AirFreight_W = TearOff.AirFreight;
                    }
                    return _AirFreight_W;
                }
            }

            public AggregateParameter SeaFreight
            {
                get
                {
                    if (_SeaFreight_W == null)
                    {
                        _SeaFreight_W = TearOff.SeaFreight;
                    }
                    return _SeaFreight_W;
                }
            }

            public AggregateParameter InlandFreight
            {
                get
                {
                    if (_InlandFreight_W == null)
                    {
                        _InlandFreight_W = TearOff.InlandFreight;
                    }
                    return _InlandFreight_W;
                }
            }

            public AggregateParameter NBE
            {
                get
                {
                    if (_NBE_W == null)
                    {
                        _NBE_W = TearOff.NBE;
                    }
                    return _NBE_W;
                }
            }

            public AggregateParameter CBE
            {
                get
                {
                    if (_CBE_W == null)
                    {
                        _CBE_W = TearOff.CBE;
                    }
                    return _CBE_W;
                }
            }

            public AggregateParameter CustomDutyTax
            {
                get
                {
                    if (_CustomDutyTax_W == null)
                    {
                        _CustomDutyTax_W = TearOff.CustomDutyTax;
                    }
                    return _CustomDutyTax_W;
                }
            }

            public AggregateParameter TransitServiceCharge
            {
                get
                {
                    if (_TransitServiceCharge_W == null)
                    {
                        _TransitServiceCharge_W = TearOff.TransitServiceCharge;
                    }
                    return _TransitServiceCharge_W;
                }
            }

            public AggregateParameter Provision
            {
                get
                {
                    if (_Provision_W == null)
                    {
                        _Provision_W = TearOff.Provision;
                    }
                    return _Provision_W;
                }
            }

            public AggregateParameter OtherExpense
            {
                get
                {
                    if (_OtherExpense_W == null)
                    {
                        _OtherExpense_W = TearOff.OtherExpense;
                    }
                    return _OtherExpense_W;
                }
            }

            public AggregateParameter ExchangeRate
            {
                get
                {
                    if (_ExchangeRate_W == null)
                    {
                        _ExchangeRate_W = TearOff.ExchangeRate;
                    }
                    return _ExchangeRate_W;
                }
            }

            public AggregateParameter SavedByUserID
            {
                get
                {
                    if (_SavedByUserID_W == null)
                    {
                        _SavedByUserID_W = TearOff.SavedByUserID;
                    }
                    return _SavedByUserID_W;
                }
            }

            public AggregateParameter POID
            {
                get
                {
                    if (_POID_W == null)
                    {
                        _POID_W = TearOff.POID;
                    }
                    return _POID_W;
                }
            }

            public AggregateParameter Currency
            {
                get
                {
                    if (_Currency_W == null)
                    {
                        _Currency_W = TearOff.Currency;
                    }
                    return _Currency_W;
                }
            }

            public AggregateParameter LCID
            {
                get
                {
                    if (_LCID_W == null)
                    {
                        _LCID_W = TearOff.LCID;
                    }
                    return _LCID_W;
                }
            }

            public AggregateParameter Rowguid
            {
                get
                {
                    if (_Rowguid_W == null)
                    {
                        _Rowguid_W = TearOff.Rowguid;
                    }
                    return _Rowguid_W;
                }
            }

            public AggregateParameter PrintedDate
            {
                get
                {
                    if (_PrintedDate_W == null)
                    {
                        _PrintedDate_W = TearOff.PrintedDate;
                    }
                    return _PrintedDate_W;
                }
            }

            public AggregateParameter ActivityID
            {
                get
                {
                    if (_ActivityID_W == null)
                    {
                        _ActivityID_W = TearOff.ActivityID;
                    }
                    return _ActivityID_W;
                }
            }

            public AggregateParameter IsReprintOf
            {
                get
                {
                    if (_IsReprintOf_W == null)
                    {
                        _IsReprintOf_W = TearOff.IsReprintOf;
                    }
                    return _IsReprintOf_W;
                }
            }

            public AggregateParameter IsVoided
            {
                get
                {
                    if (_IsVoided_W == null)
                    {
                        _IsVoided_W = TearOff.IsVoided;
                    }
                    return _IsVoided_W;
                }
            }

            public AggregateParameter IsDeliveryNote
            {
                get
                {
                    if (_IsDeliveryNote_W == null)
                    {
                        _IsDeliveryNote_W = TearOff.IsDeliveryNote;
                    }
                    return _IsDeliveryNote_W;
                }
            }

            public AggregateParameter OriginalInvoiceNumber
            {
                get
                {
                    if (_OriginalInvoiceNumber_W == null)
                    {
                        _OriginalInvoiceNumber_W = TearOff.OriginalInvoiceNumber;
                    }
                    return _OriginalInvoiceNumber_W;
                }
            }

            public AggregateParameter IsConvertedFromDeliveryNote
            {
                get
                {
                    if (_IsConvertedFromDeliveryNote_W == null)
                    {
                        _IsConvertedFromDeliveryNote_W = TearOff.IsConvertedFromDeliveryNote;
                    }
                    return _IsConvertedFromDeliveryNote_W;
                }
            }

            public AggregateParameter ShippingSite
            {
                get
                {
                    if (_ShippingSite_W == null)
                    {
                        _ShippingSite_W = TearOff.ShippingSite;
                    }
                    return _ShippingSite_W;
                }
            }

            public AggregateParameter DocumentTypeID
            {
                get
                {
                    if (_DocumentTypeID_W == null)
                    {
                        _DocumentTypeID_W = TearOff.DocumentTypeID;
                    }
                    return _DocumentTypeID_W;
                }
            }

            public AggregateParameter IssuingWarehouseCode
            {
                get
                {
                    if (_IssuingWarehouseCode_W == null)
                    {
                        _IssuingWarehouseCode_W = TearOff.IssuingWarehouseCode;
                    }
                    return _IssuingWarehouseCode_W;
                }
            }

            public AggregateParameter Note
            {
                get
                {
                    if (_Note_W == null)
                    {
                        _Note_W = TearOff.Note;
                    }
                    return _Note_W;
                }
            }

            private AggregateParameter _ID_W = null;
            private AggregateParameter _InvoiceTypeID_W = null;
            private AggregateParameter _STVOrInvoiceNo_W = null;
            private AggregateParameter _WayBillNo_W = null;
            private AggregateParameter _TransitTransferNo_W = null;
            private AggregateParameter _InsurancePolicyNo_W = null;
            private AggregateParameter _DateOfEntry_W = null;
            private AggregateParameter _ReceiptInvoiceType_W = null;
            private AggregateParameter _TotalValue_W = null;
            private AggregateParameter _Insurance_W = null;
            private AggregateParameter _AirFreight_W = null;
            private AggregateParameter _SeaFreight_W = null;
            private AggregateParameter _InlandFreight_W = null;
            private AggregateParameter _NBE_W = null;
            private AggregateParameter _CBE_W = null;
            private AggregateParameter _CustomDutyTax_W = null;
            private AggregateParameter _TransitServiceCharge_W = null;
            private AggregateParameter _Provision_W = null;
            private AggregateParameter _OtherExpense_W = null;
            private AggregateParameter _ExchangeRate_W = null;
            private AggregateParameter _SavedByUserID_W = null;
            private AggregateParameter _POID_W = null;
            private AggregateParameter _Currency_W = null;
            private AggregateParameter _LCID_W = null;
            private AggregateParameter _Rowguid_W = null;
            private AggregateParameter _PrintedDate_W = null;
            private AggregateParameter _ActivityID_W = null;
            private AggregateParameter _IsReprintOf_W = null;
            private AggregateParameter _IsVoided_W = null;
            private AggregateParameter _IsDeliveryNote_W = null;
            private AggregateParameter _OriginalInvoiceNumber_W = null;
            private AggregateParameter _IsConvertedFromDeliveryNote_W = null;
            private AggregateParameter _ShippingSite_W = null;
            private AggregateParameter _DocumentTypeID_W = null;
            private AggregateParameter _IssuingWarehouseCode_W = null;
            private AggregateParameter _Note_W = null;

            public void AggregateClauseReset()
            {
                _ID_W = null;
                _InvoiceTypeID_W = null;
                _STVOrInvoiceNo_W = null;
                _WayBillNo_W = null;
                _TransitTransferNo_W = null;
                _InsurancePolicyNo_W = null;
                _DateOfEntry_W = null;
                _ReceiptInvoiceType_W = null;
                _TotalValue_W = null;
                _Insurance_W = null;
                _AirFreight_W = null;
                _SeaFreight_W = null;
                _InlandFreight_W = null;
                _NBE_W = null;
                _CBE_W = null;
                _CustomDutyTax_W = null;
                _TransitServiceCharge_W = null;
                _Provision_W = null;
                _OtherExpense_W = null;
                _ExchangeRate_W = null;
                _SavedByUserID_W = null;
                _POID_W = null;
                _Currency_W = null;
                _LCID_W = null;
                _Rowguid_W = null;
                _PrintedDate_W = null;
                _ActivityID_W = null;
                _IsReprintOf_W = null;
                _IsVoided_W = null;
                _IsDeliveryNote_W = null;
                _OriginalInvoiceNumber_W = null;
                _IsConvertedFromDeliveryNote_W = null;
                _ShippingSite_W = null;
                _DocumentTypeID_W = null;
                _IssuingWarehouseCode_W = null;
                _Note_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ReceiptInvoiceInsert]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.ID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ReceiptInvoiceUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ReceiptInvoiceDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.InvoiceTypeID);
            p.SourceColumn = ColumnNames.InvoiceTypeID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.STVOrInvoiceNo);
            p.SourceColumn = ColumnNames.STVOrInvoiceNo;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.WayBillNo);
            p.SourceColumn = ColumnNames.WayBillNo;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.TransitTransferNo);
            p.SourceColumn = ColumnNames.TransitTransferNo;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.InsurancePolicyNo);
            p.SourceColumn = ColumnNames.InsurancePolicyNo;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DateOfEntry);
            p.SourceColumn = ColumnNames.DateOfEntry;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ReceiptInvoiceType);
            p.SourceColumn = ColumnNames.ReceiptInvoiceType;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.TotalValue);
            p.SourceColumn = ColumnNames.TotalValue;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Insurance);
            p.SourceColumn = ColumnNames.Insurance;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.AirFreight);
            p.SourceColumn = ColumnNames.AirFreight;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SeaFreight);
            p.SourceColumn = ColumnNames.SeaFreight;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.InlandFreight);
            p.SourceColumn = ColumnNames.InlandFreight;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.NBE);
            p.SourceColumn = ColumnNames.NBE;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.CBE);
            p.SourceColumn = ColumnNames.CBE;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.CustomDutyTax);
            p.SourceColumn = ColumnNames.CustomDutyTax;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.TransitServiceCharge);
            p.SourceColumn = ColumnNames.TransitServiceCharge;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Provision);
            p.SourceColumn = ColumnNames.Provision;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.OtherExpense);
            p.SourceColumn = ColumnNames.OtherExpense;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ExchangeRate);
            p.SourceColumn = ColumnNames.ExchangeRate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SavedByUserID);
            p.SourceColumn = ColumnNames.SavedByUserID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.POID);
            p.SourceColumn = ColumnNames.POID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Currency);
            p.SourceColumn = ColumnNames.Currency;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.LCID);
            p.SourceColumn = ColumnNames.LCID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Rowguid);
            p.SourceColumn = ColumnNames.Rowguid;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PrintedDate);
            p.SourceColumn = ColumnNames.PrintedDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ActivityID);
            p.SourceColumn = ColumnNames.ActivityID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IsReprintOf);
            p.SourceColumn = ColumnNames.IsReprintOf;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IsVoided);
            p.SourceColumn = ColumnNames.IsVoided;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IsDeliveryNote);
            p.SourceColumn = ColumnNames.IsDeliveryNote;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.OriginalInvoiceNumber);
            p.SourceColumn = ColumnNames.OriginalInvoiceNumber;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IsConvertedFromDeliveryNote);
            p.SourceColumn = ColumnNames.IsConvertedFromDeliveryNote;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ShippingSite);
            p.SourceColumn = ColumnNames.ShippingSite;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DocumentTypeID);
            p.SourceColumn = ColumnNames.DocumentTypeID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IssuingWarehouseCode);
            p.SourceColumn = ColumnNames.IssuingWarehouseCode;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Note);
            p.SourceColumn = ColumnNames.Note;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}