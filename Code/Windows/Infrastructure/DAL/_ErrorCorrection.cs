
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
    public abstract class _ErrorCorrection : SqlClientEntity
    {
        public _ErrorCorrection()
        {
            this.QuerySource = "ErrorCorrection";
            this.MappingName = "ErrorCorrection";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ErrorCorrectionLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int ID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.ID, ID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ErrorCorrectionLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter ID
            {
                get
                {
                    return new SqlParameter("@ID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter UserID
            {
                get
                {
                    return new SqlParameter("@UserID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Reason
            {
                get
                {
                    return new SqlParameter("@Reason", SqlDbType.VarChar, 4000);
                }
            }

            public static SqlParameter LetterNumber
            {
                get
                {
                    return new SqlParameter("@LetterNumber", SqlDbType.VarChar, 255);
                }
            }

            public static SqlParameter IssueID
            {
                get
                {
                    return new SqlParameter("@IssueID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ReceiptID
            {
                get
                {
                    return new SqlParameter("@ReceiptID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ConversionFactor
            {
                get
                {
                    return new SqlParameter("@ConversionFactor", SqlDbType.Decimal, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string ID = "ID";
            public const string UserID = "UserID";
            public const string Reason = "Reason";
            public const string LetterNumber = "LetterNumber";
            public const string IssueID = "IssueID";
            public const string ReceiptID = "ReceiptID";
            public const string ConversionFactor = "ConversionFactor";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _ErrorCorrection.PropertyNames.ID;
                    ht[UserID] = _ErrorCorrection.PropertyNames.UserID;
                    ht[Reason] = _ErrorCorrection.PropertyNames.Reason;
                    ht[LetterNumber] = _ErrorCorrection.PropertyNames.LetterNumber;
                    ht[IssueID] = _ErrorCorrection.PropertyNames.IssueID;
                    ht[ReceiptID] = _ErrorCorrection.PropertyNames.ReceiptID;
                    ht[ConversionFactor] = _ErrorCorrection.PropertyNames.ConversionFactor;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string ID = "ID";
            public const string UserID = "UserID";
            public const string Reason = "Reason";
            public const string LetterNumber = "LetterNumber";
            public const string IssueID = "IssueID";
            public const string ReceiptID = "ReceiptID";
            public const string ConversionFactor = "ConversionFactor";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _ErrorCorrection.ColumnNames.ID;
                    ht[UserID] = _ErrorCorrection.ColumnNames.UserID;
                    ht[Reason] = _ErrorCorrection.ColumnNames.Reason;
                    ht[LetterNumber] = _ErrorCorrection.ColumnNames.LetterNumber;
                    ht[IssueID] = _ErrorCorrection.ColumnNames.IssueID;
                    ht[ReceiptID] = _ErrorCorrection.ColumnNames.ReceiptID;
                    ht[ConversionFactor] = _ErrorCorrection.ColumnNames.ConversionFactor;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string ID = "s_ID";
            public const string UserID = "s_UserID";
            public const string Reason = "s_Reason";
            public const string LetterNumber = "s_LetterNumber";
            public const string IssueID = "s_IssueID";
            public const string ReceiptID = "s_ReceiptID";
            public const string ConversionFactor = "s_ConversionFactor";

        }
        #endregion

        #region Properties

        public virtual int ID
        {
            get
            {
                return base.Getint(ColumnNames.ID);
            }
            set
            {
                base.Setint(ColumnNames.ID, value);
            }
        }

        public virtual int UserID
        {
            get
            {
                return base.Getint(ColumnNames.UserID);
            }
            set
            {
                base.Setint(ColumnNames.UserID, value);
            }
        }

        public virtual string Reason
        {
            get
            {
                return base.Getstring(ColumnNames.Reason);
            }
            set
            {
                base.Setstring(ColumnNames.Reason, value);
            }
        }

        public virtual string LetterNumber
        {
            get
            {
                return base.Getstring(ColumnNames.LetterNumber);
            }
            set
            {
                base.Setstring(ColumnNames.LetterNumber, value);
            }
        }

        public virtual int IssueID
        {
            get
            {
                return base.Getint(ColumnNames.IssueID);
            }
            set
            {
                base.Setint(ColumnNames.IssueID, value);
            }
        }

        public virtual int ReceiptID
        {
            get
            {
                return base.Getint(ColumnNames.ReceiptID);
            }
            set
            {
                base.Setint(ColumnNames.ReceiptID, value);
            }
        }

        public virtual decimal ConversionFactor
        {
            get
            {
                return base.Getdecimal(ColumnNames.ConversionFactor);
            }
            set
            {
                base.Setdecimal(ColumnNames.ConversionFactor, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_ID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ID);
                else
                    this.ID = base.SetintAsString(ColumnNames.ID, value);
            }
        }

        public virtual string s_UserID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.UserID);
                else
                    this.UserID = base.SetintAsString(ColumnNames.UserID, value);
            }
        }

        public virtual string s_Reason
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Reason) ? string.Empty : base.GetstringAsString(ColumnNames.Reason);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Reason);
                else
                    this.Reason = base.SetstringAsString(ColumnNames.Reason, value);
            }
        }

        public virtual string s_LetterNumber
        {
            get
            {
                return this.IsColumnNull(ColumnNames.LetterNumber) ? string.Empty : base.GetstringAsString(ColumnNames.LetterNumber);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.LetterNumber);
                else
                    this.LetterNumber = base.SetstringAsString(ColumnNames.LetterNumber, value);
            }
        }

        public virtual string s_IssueID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IssueID) ? string.Empty : base.GetintAsString(ColumnNames.IssueID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IssueID);
                else
                    this.IssueID = base.SetintAsString(ColumnNames.IssueID, value);
            }
        }

        public virtual string s_ReceiptID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ReceiptID) ? string.Empty : base.GetintAsString(ColumnNames.ReceiptID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ReceiptID);
                else
                    this.ReceiptID = base.SetintAsString(ColumnNames.ReceiptID, value);
            }
        }

        public virtual string s_ConversionFactor
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ConversionFactor) ? string.Empty : base.GetdecimalAsString(ColumnNames.ConversionFactor);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ConversionFactor);
                else
                    this.ConversionFactor = base.SetdecimalAsString(ColumnNames.ConversionFactor, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter ID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter UserID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Reason
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Reason, Parameters.Reason);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter LetterNumber
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.LetterNumber, Parameters.LetterNumber);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IssueID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IssueID, Parameters.IssueID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ReceiptID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ReceiptID, Parameters.ReceiptID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ConversionFactor
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ConversionFactor, Parameters.ConversionFactor);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public WhereParameter UserID
            {
                get
                {
                    if (_UserID_W == null)
                    {
                        _UserID_W = TearOff.UserID;
                    }
                    return _UserID_W;
                }
            }

            public WhereParameter Reason
            {
                get
                {
                    if (_Reason_W == null)
                    {
                        _Reason_W = TearOff.Reason;
                    }
                    return _Reason_W;
                }
            }

            public WhereParameter LetterNumber
            {
                get
                {
                    if (_LetterNumber_W == null)
                    {
                        _LetterNumber_W = TearOff.LetterNumber;
                    }
                    return _LetterNumber_W;
                }
            }

            public WhereParameter IssueID
            {
                get
                {
                    if (_IssueID_W == null)
                    {
                        _IssueID_W = TearOff.IssueID;
                    }
                    return _IssueID_W;
                }
            }

            public WhereParameter ReceiptID
            {
                get
                {
                    if (_ReceiptID_W == null)
                    {
                        _ReceiptID_W = TearOff.ReceiptID;
                    }
                    return _ReceiptID_W;
                }
            }

            public WhereParameter ConversionFactor
            {
                get
                {
                    if (_ConversionFactor_W == null)
                    {
                        _ConversionFactor_W = TearOff.ConversionFactor;
                    }
                    return _ConversionFactor_W;
                }
            }

            private WhereParameter _ID_W = null;
            private WhereParameter _UserID_W = null;
            private WhereParameter _Reason_W = null;
            private WhereParameter _LetterNumber_W = null;
            private WhereParameter _IssueID_W = null;
            private WhereParameter _ReceiptID_W = null;
            private WhereParameter _ConversionFactor_W = null;

            public void WhereClauseReset()
            {
                _ID_W = null;
                _UserID_W = null;
                _Reason_W = null;
                _LetterNumber_W = null;
                _IssueID_W = null;
                _ReceiptID_W = null;
                _ConversionFactor_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter ID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter UserID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Reason
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Reason, Parameters.Reason);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter LetterNumber
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.LetterNumber, Parameters.LetterNumber);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IssueID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IssueID, Parameters.IssueID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ReceiptID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceiptID, Parameters.ReceiptID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ConversionFactor
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ConversionFactor, Parameters.ConversionFactor);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public AggregateParameter UserID
            {
                get
                {
                    if (_UserID_W == null)
                    {
                        _UserID_W = TearOff.UserID;
                    }
                    return _UserID_W;
                }
            }

            public AggregateParameter Reason
            {
                get
                {
                    if (_Reason_W == null)
                    {
                        _Reason_W = TearOff.Reason;
                    }
                    return _Reason_W;
                }
            }

            public AggregateParameter LetterNumber
            {
                get
                {
                    if (_LetterNumber_W == null)
                    {
                        _LetterNumber_W = TearOff.LetterNumber;
                    }
                    return _LetterNumber_W;
                }
            }

            public AggregateParameter IssueID
            {
                get
                {
                    if (_IssueID_W == null)
                    {
                        _IssueID_W = TearOff.IssueID;
                    }
                    return _IssueID_W;
                }
            }

            public AggregateParameter ReceiptID
            {
                get
                {
                    if (_ReceiptID_W == null)
                    {
                        _ReceiptID_W = TearOff.ReceiptID;
                    }
                    return _ReceiptID_W;
                }
            }

            public AggregateParameter ConversionFactor
            {
                get
                {
                    if (_ConversionFactor_W == null)
                    {
                        _ConversionFactor_W = TearOff.ConversionFactor;
                    }
                    return _ConversionFactor_W;
                }
            }

            private AggregateParameter _ID_W = null;
            private AggregateParameter _UserID_W = null;
            private AggregateParameter _Reason_W = null;
            private AggregateParameter _LetterNumber_W = null;
            private AggregateParameter _IssueID_W = null;
            private AggregateParameter _ReceiptID_W = null;
            private AggregateParameter _ConversionFactor_W = null;

            public void AggregateClauseReset()
            {
                _ID_W = null;
                _UserID_W = null;
                _Reason_W = null;
                _LetterNumber_W = null;
                _IssueID_W = null;
                _ReceiptID_W = null;
                _ConversionFactor_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ErrorCorrectionInsert]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.ID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ErrorCorrectionUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ErrorCorrectionDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.UserID);
            p.SourceColumn = ColumnNames.UserID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Reason);
            p.SourceColumn = ColumnNames.Reason;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.LetterNumber);
            p.SourceColumn = ColumnNames.LetterNumber;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IssueID);
            p.SourceColumn = ColumnNames.IssueID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ReceiptID);
            p.SourceColumn = ColumnNames.ReceiptID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ConversionFactor);
            p.SourceColumn = ColumnNames.ConversionFactor;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}


