
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _YearEnd : SqlClientEntity
	{
		public _YearEnd()
		{
			this.QuerySource = "YearEnd";
			this.MappingName = "YearEnd";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_YearEndLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_YearEndLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ItemID
			{
				get
				{
					return new SqlParameter("@ItemID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StoreID
			{
				get
				{
					return new SqlParameter("@StoreID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Year
			{
				get
				{
					return new SqlParameter("@Year", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter BBalance
			{
				get
				{
					return new SqlParameter("@BBalance", SqlDbType.BigInt, 0);
				}
			}
			
			public static SqlParameter EBalance
			{
				get
				{
					return new SqlParameter("@EBalance", SqlDbType.BigInt, 0);
				}
			}
			
			public static SqlParameter PhysicalInventory
			{
				get
				{
					return new SqlParameter("@PhysicalInventory", SqlDbType.BigInt, 0);
				}
			}
			
			public static SqlParameter Remark
			{
				get
				{
					return new SqlParameter("@Remark", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Month
			{
				get
				{
					return new SqlParameter("@Month", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter EndingPrice
			{
				get
				{
					return new SqlParameter("@EndingPrice", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter PhysicalInventoryPrice
			{
				get
				{
					return new SqlParameter("@PhysicalInventoryPrice", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter BBPrice
			{
				get
				{
					return new SqlParameter("@BBPrice", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter UnitID
			{
				get
				{
					return new SqlParameter("@UnitID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PhysicalStoreID
			{
				get
				{
					return new SqlParameter("@PhysicalStoreID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string ItemID = "ItemID";
            public const string StoreID = "StoreID";
            public const string Year = "Year";
            public const string BBalance = "BBalance";
            public const string EBalance = "EBalance";
            public const string PhysicalInventory = "PhysicalInventory";
            public const string Remark = "Remark";
            public const string Month = "Month";
            public const string EndingPrice = "EndingPrice";
            public const string PhysicalInventoryPrice = "PhysicalInventoryPrice";
            public const string BBPrice = "BBPrice";
            public const string UnitID = "UnitID";
            public const string PhysicalStoreID = "PhysicalStoreID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _YearEnd.PropertyNames.ID;
					ht[ItemID] = _YearEnd.PropertyNames.ItemID;
					ht[StoreID] = _YearEnd.PropertyNames.StoreID;
					ht[Year] = _YearEnd.PropertyNames.Year;
					ht[BBalance] = _YearEnd.PropertyNames.BBalance;
					ht[EBalance] = _YearEnd.PropertyNames.EBalance;
					ht[PhysicalInventory] = _YearEnd.PropertyNames.PhysicalInventory;
					ht[Remark] = _YearEnd.PropertyNames.Remark;
					ht[Month] = _YearEnd.PropertyNames.Month;
					ht[EndingPrice] = _YearEnd.PropertyNames.EndingPrice;
					ht[PhysicalInventoryPrice] = _YearEnd.PropertyNames.PhysicalInventoryPrice;
					ht[BBPrice] = _YearEnd.PropertyNames.BBPrice;
					ht[UnitID] = _YearEnd.PropertyNames.UnitID;
					ht[PhysicalStoreID] = _YearEnd.PropertyNames.PhysicalStoreID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string ItemID = "ItemID";
            public const string StoreID = "StoreID";
            public const string Year = "Year";
            public const string BBalance = "BBalance";
            public const string EBalance = "EBalance";
            public const string PhysicalInventory = "PhysicalInventory";
            public const string Remark = "Remark";
            public const string Month = "Month";
            public const string EndingPrice = "EndingPrice";
            public const string PhysicalInventoryPrice = "PhysicalInventoryPrice";
            public const string BBPrice = "BBPrice";
            public const string UnitID = "UnitID";
            public const string PhysicalStoreID = "PhysicalStoreID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _YearEnd.ColumnNames.ID;
					ht[ItemID] = _YearEnd.ColumnNames.ItemID;
					ht[StoreID] = _YearEnd.ColumnNames.StoreID;
					ht[Year] = _YearEnd.ColumnNames.Year;
					ht[BBalance] = _YearEnd.ColumnNames.BBalance;
					ht[EBalance] = _YearEnd.ColumnNames.EBalance;
					ht[PhysicalInventory] = _YearEnd.ColumnNames.PhysicalInventory;
					ht[Remark] = _YearEnd.ColumnNames.Remark;
					ht[Month] = _YearEnd.ColumnNames.Month;
					ht[EndingPrice] = _YearEnd.ColumnNames.EndingPrice;
					ht[PhysicalInventoryPrice] = _YearEnd.ColumnNames.PhysicalInventoryPrice;
					ht[BBPrice] = _YearEnd.ColumnNames.BBPrice;
					ht[UnitID] = _YearEnd.ColumnNames.UnitID;
					ht[PhysicalStoreID] = _YearEnd.ColumnNames.PhysicalStoreID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string ItemID = "s_ItemID";
            public const string StoreID = "s_StoreID";
            public const string Year = "s_Year";
            public const string BBalance = "s_BBalance";
            public const string EBalance = "s_EBalance";
            public const string PhysicalInventory = "s_PhysicalInventory";
            public const string Remark = "s_Remark";
            public const string Month = "s_Month";
            public const string EndingPrice = "s_EndingPrice";
            public const string PhysicalInventoryPrice = "s_PhysicalInventoryPrice";
            public const string BBPrice = "s_BBPrice";
            public const string UnitID = "s_UnitID";
            public const string PhysicalStoreID = "s_PhysicalStoreID";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual int ItemID
	    {
			get
	        {
				return base.Getint(ColumnNames.ItemID);
			}
			set
	        {
				base.Setint(ColumnNames.ItemID, value);
			}
		}

		public virtual int StoreID
	    {
			get
	        {
				return base.Getint(ColumnNames.StoreID);
			}
			set
	        {
				base.Setint(ColumnNames.StoreID, value);
			}
		}

		public virtual int Year
	    {
			get
	        {
				return base.Getint(ColumnNames.Year);
			}
			set
	        {
				base.Setint(ColumnNames.Year, value);
			}
		}

		public virtual long BBalance
	    {
			get
	        {
				return base.Getlong(ColumnNames.BBalance);
			}
			set
	        {
				base.Setlong(ColumnNames.BBalance, value);
			}
		}

		public virtual long EBalance
	    {
			get
	        {
				return base.Getlong(ColumnNames.EBalance);
			}
			set
	        {
				base.Setlong(ColumnNames.EBalance, value);
			}
		}

		public virtual long PhysicalInventory
	    {
			get
	        {
				return base.Getlong(ColumnNames.PhysicalInventory);
			}
			set
	        {
				base.Setlong(ColumnNames.PhysicalInventory, value);
			}
		}

		public virtual string Remark
	    {
			get
	        {
				return base.Getstring(ColumnNames.Remark);
			}
			set
	        {
				base.Setstring(ColumnNames.Remark, value);
			}
		}

		public virtual int Month
	    {
			get
	        {
				return base.Getint(ColumnNames.Month);
			}
			set
	        {
				base.Setint(ColumnNames.Month, value);
			}
		}

		public virtual decimal EndingPrice
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.EndingPrice);
			}
			set
	        {
				base.Setdecimal(ColumnNames.EndingPrice, value);
			}
		}

		public virtual decimal PhysicalInventoryPrice
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.PhysicalInventoryPrice);
			}
			set
	        {
				base.Setdecimal(ColumnNames.PhysicalInventoryPrice, value);
			}
		}

		public virtual decimal BBPrice
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.BBPrice);
			}
			set
	        {
				base.Setdecimal(ColumnNames.BBPrice, value);
			}
		}

		public virtual int UnitID
	    {
			get
	        {
				return base.Getint(ColumnNames.UnitID);
			}
			set
	        {
				base.Setint(ColumnNames.UnitID, value);
			}
		}

		public virtual int PhysicalStoreID
	    {
			get
	        {
				return base.Getint(ColumnNames.PhysicalStoreID);
			}
			set
	        {
				base.Setint(ColumnNames.PhysicalStoreID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_ItemID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ItemID) ? string.Empty : base.GetintAsString(ColumnNames.ItemID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ItemID);
				else
					this.ItemID = base.SetintAsString(ColumnNames.ItemID, value);
			}
		}

		public virtual string s_StoreID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StoreID) ? string.Empty : base.GetintAsString(ColumnNames.StoreID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StoreID);
				else
					this.StoreID = base.SetintAsString(ColumnNames.StoreID, value);
			}
		}

		public virtual string s_Year
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Year) ? string.Empty : base.GetintAsString(ColumnNames.Year);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Year);
				else
					this.Year = base.SetintAsString(ColumnNames.Year, value);
			}
		}

		public virtual string s_BBalance
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BBalance) ? string.Empty : base.GetlongAsString(ColumnNames.BBalance);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BBalance);
				else
					this.BBalance = base.SetlongAsString(ColumnNames.BBalance, value);
			}
		}

		public virtual string s_EBalance
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EBalance) ? string.Empty : base.GetlongAsString(ColumnNames.EBalance);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EBalance);
				else
					this.EBalance = base.SetlongAsString(ColumnNames.EBalance, value);
			}
		}

		public virtual string s_PhysicalInventory
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PhysicalInventory) ? string.Empty : base.GetlongAsString(ColumnNames.PhysicalInventory);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PhysicalInventory);
				else
					this.PhysicalInventory = base.SetlongAsString(ColumnNames.PhysicalInventory, value);
			}
		}

		public virtual string s_Remark
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Remark) ? string.Empty : base.GetstringAsString(ColumnNames.Remark);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Remark);
				else
					this.Remark = base.SetstringAsString(ColumnNames.Remark, value);
			}
		}

		public virtual string s_Month
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Month) ? string.Empty : base.GetintAsString(ColumnNames.Month);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Month);
				else
					this.Month = base.SetintAsString(ColumnNames.Month, value);
			}
		}

		public virtual string s_EndingPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EndingPrice) ? string.Empty : base.GetdecimalAsString(ColumnNames.EndingPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EndingPrice);
				else
					this.EndingPrice = base.SetdecimalAsString(ColumnNames.EndingPrice, value);
			}
		}

		public virtual string s_PhysicalInventoryPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PhysicalInventoryPrice) ? string.Empty : base.GetdecimalAsString(ColumnNames.PhysicalInventoryPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PhysicalInventoryPrice);
				else
					this.PhysicalInventoryPrice = base.SetdecimalAsString(ColumnNames.PhysicalInventoryPrice, value);
			}
		}

		public virtual string s_BBPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BBPrice) ? string.Empty : base.GetdecimalAsString(ColumnNames.BBPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BBPrice);
				else
					this.BBPrice = base.SetdecimalAsString(ColumnNames.BBPrice, value);
			}
		}

		public virtual string s_UnitID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UnitID) ? string.Empty : base.GetintAsString(ColumnNames.UnitID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnitID);
				else
					this.UnitID = base.SetintAsString(ColumnNames.UnitID, value);
			}
		}

		public virtual string s_PhysicalStoreID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PhysicalStoreID) ? string.Empty : base.GetintAsString(ColumnNames.PhysicalStoreID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PhysicalStoreID);
				else
					this.PhysicalStoreID = base.SetintAsString(ColumnNames.PhysicalStoreID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ItemID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StoreID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StoreID, Parameters.StoreID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Year
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Year, Parameters.Year);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BBalance
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BBalance, Parameters.BBalance);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EBalance
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EBalance, Parameters.EBalance);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PhysicalInventory
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PhysicalInventory, Parameters.PhysicalInventory);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Remark
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Month
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Month, Parameters.Month);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EndingPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EndingPrice, Parameters.EndingPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PhysicalInventoryPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PhysicalInventoryPrice, Parameters.PhysicalInventoryPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BBPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BBPrice, Parameters.BBPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UnitID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UnitID, Parameters.UnitID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PhysicalStoreID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PhysicalStoreID, Parameters.PhysicalStoreID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public WhereParameter StoreID
		    {
				get
		        {
					if(_StoreID_W == null)
	        	    {
						_StoreID_W = TearOff.StoreID;
					}
					return _StoreID_W;
				}
			}

			public WhereParameter Year
		    {
				get
		        {
					if(_Year_W == null)
	        	    {
						_Year_W = TearOff.Year;
					}
					return _Year_W;
				}
			}

			public WhereParameter BBalance
		    {
				get
		        {
					if(_BBalance_W == null)
	        	    {
						_BBalance_W = TearOff.BBalance;
					}
					return _BBalance_W;
				}
			}

			public WhereParameter EBalance
		    {
				get
		        {
					if(_EBalance_W == null)
	        	    {
						_EBalance_W = TearOff.EBalance;
					}
					return _EBalance_W;
				}
			}

			public WhereParameter PhysicalInventory
		    {
				get
		        {
					if(_PhysicalInventory_W == null)
	        	    {
						_PhysicalInventory_W = TearOff.PhysicalInventory;
					}
					return _PhysicalInventory_W;
				}
			}

			public WhereParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			public WhereParameter Month
		    {
				get
		        {
					if(_Month_W == null)
	        	    {
						_Month_W = TearOff.Month;
					}
					return _Month_W;
				}
			}

			public WhereParameter EndingPrice
		    {
				get
		        {
					if(_EndingPrice_W == null)
	        	    {
						_EndingPrice_W = TearOff.EndingPrice;
					}
					return _EndingPrice_W;
				}
			}

			public WhereParameter PhysicalInventoryPrice
		    {
				get
		        {
					if(_PhysicalInventoryPrice_W == null)
	        	    {
						_PhysicalInventoryPrice_W = TearOff.PhysicalInventoryPrice;
					}
					return _PhysicalInventoryPrice_W;
				}
			}

			public WhereParameter BBPrice
		    {
				get
		        {
					if(_BBPrice_W == null)
	        	    {
						_BBPrice_W = TearOff.BBPrice;
					}
					return _BBPrice_W;
				}
			}

			public WhereParameter UnitID
		    {
				get
		        {
					if(_UnitID_W == null)
	        	    {
						_UnitID_W = TearOff.UnitID;
					}
					return _UnitID_W;
				}
			}

			public WhereParameter PhysicalStoreID
		    {
				get
		        {
					if(_PhysicalStoreID_W == null)
	        	    {
						_PhysicalStoreID_W = TearOff.PhysicalStoreID;
					}
					return _PhysicalStoreID_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _ItemID_W = null;
			private WhereParameter _StoreID_W = null;
			private WhereParameter _Year_W = null;
			private WhereParameter _BBalance_W = null;
			private WhereParameter _EBalance_W = null;
			private WhereParameter _PhysicalInventory_W = null;
			private WhereParameter _Remark_W = null;
			private WhereParameter _Month_W = null;
			private WhereParameter _EndingPrice_W = null;
			private WhereParameter _PhysicalInventoryPrice_W = null;
			private WhereParameter _BBPrice_W = null;
			private WhereParameter _UnitID_W = null;
			private WhereParameter _PhysicalStoreID_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_ItemID_W = null;
				_StoreID_W = null;
				_Year_W = null;
				_BBalance_W = null;
				_EBalance_W = null;
				_PhysicalInventory_W = null;
				_Remark_W = null;
				_Month_W = null;
				_EndingPrice_W = null;
				_PhysicalInventoryPrice_W = null;
				_BBPrice_W = null;
				_UnitID_W = null;
				_PhysicalStoreID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ItemID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StoreID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StoreID, Parameters.StoreID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Year
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Year, Parameters.Year);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BBalance
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BBalance, Parameters.BBalance);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EBalance
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EBalance, Parameters.EBalance);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PhysicalInventory
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PhysicalInventory, Parameters.PhysicalInventory);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Remark
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Month
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Month, Parameters.Month);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EndingPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EndingPrice, Parameters.EndingPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PhysicalInventoryPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PhysicalInventoryPrice, Parameters.PhysicalInventoryPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BBPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BBPrice, Parameters.BBPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UnitID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitID, Parameters.UnitID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PhysicalStoreID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PhysicalStoreID, Parameters.PhysicalStoreID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public AggregateParameter StoreID
		    {
				get
		        {
					if(_StoreID_W == null)
	        	    {
						_StoreID_W = TearOff.StoreID;
					}
					return _StoreID_W;
				}
			}

			public AggregateParameter Year
		    {
				get
		        {
					if(_Year_W == null)
	        	    {
						_Year_W = TearOff.Year;
					}
					return _Year_W;
				}
			}

			public AggregateParameter BBalance
		    {
				get
		        {
					if(_BBalance_W == null)
	        	    {
						_BBalance_W = TearOff.BBalance;
					}
					return _BBalance_W;
				}
			}

			public AggregateParameter EBalance
		    {
				get
		        {
					if(_EBalance_W == null)
	        	    {
						_EBalance_W = TearOff.EBalance;
					}
					return _EBalance_W;
				}
			}

			public AggregateParameter PhysicalInventory
		    {
				get
		        {
					if(_PhysicalInventory_W == null)
	        	    {
						_PhysicalInventory_W = TearOff.PhysicalInventory;
					}
					return _PhysicalInventory_W;
				}
			}

			public AggregateParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			public AggregateParameter Month
		    {
				get
		        {
					if(_Month_W == null)
	        	    {
						_Month_W = TearOff.Month;
					}
					return _Month_W;
				}
			}

			public AggregateParameter EndingPrice
		    {
				get
		        {
					if(_EndingPrice_W == null)
	        	    {
						_EndingPrice_W = TearOff.EndingPrice;
					}
					return _EndingPrice_W;
				}
			}

			public AggregateParameter PhysicalInventoryPrice
		    {
				get
		        {
					if(_PhysicalInventoryPrice_W == null)
	        	    {
						_PhysicalInventoryPrice_W = TearOff.PhysicalInventoryPrice;
					}
					return _PhysicalInventoryPrice_W;
				}
			}

			public AggregateParameter BBPrice
		    {
				get
		        {
					if(_BBPrice_W == null)
	        	    {
						_BBPrice_W = TearOff.BBPrice;
					}
					return _BBPrice_W;
				}
			}

			public AggregateParameter UnitID
		    {
				get
		        {
					if(_UnitID_W == null)
	        	    {
						_UnitID_W = TearOff.UnitID;
					}
					return _UnitID_W;
				}
			}

			public AggregateParameter PhysicalStoreID
		    {
				get
		        {
					if(_PhysicalStoreID_W == null)
	        	    {
						_PhysicalStoreID_W = TearOff.PhysicalStoreID;
					}
					return _PhysicalStoreID_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _ItemID_W = null;
			private AggregateParameter _StoreID_W = null;
			private AggregateParameter _Year_W = null;
			private AggregateParameter _BBalance_W = null;
			private AggregateParameter _EBalance_W = null;
			private AggregateParameter _PhysicalInventory_W = null;
			private AggregateParameter _Remark_W = null;
			private AggregateParameter _Month_W = null;
			private AggregateParameter _EndingPrice_W = null;
			private AggregateParameter _PhysicalInventoryPrice_W = null;
			private AggregateParameter _BBPrice_W = null;
			private AggregateParameter _UnitID_W = null;
			private AggregateParameter _PhysicalStoreID_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_ItemID_W = null;
				_StoreID_W = null;
				_Year_W = null;
				_BBalance_W = null;
				_EBalance_W = null;
				_PhysicalInventory_W = null;
				_Remark_W = null;
				_Month_W = null;
				_EndingPrice_W = null;
				_PhysicalInventoryPrice_W = null;
				_BBPrice_W = null;
				_UnitID_W = null;
				_PhysicalStoreID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_YearEndInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_YearEndUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_YearEndDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ItemID);
			p.SourceColumn = ColumnNames.ItemID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StoreID);
			p.SourceColumn = ColumnNames.StoreID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Year);
			p.SourceColumn = ColumnNames.Year;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BBalance);
			p.SourceColumn = ColumnNames.BBalance;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EBalance);
			p.SourceColumn = ColumnNames.EBalance;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PhysicalInventory);
			p.SourceColumn = ColumnNames.PhysicalInventory;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Remark);
			p.SourceColumn = ColumnNames.Remark;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Month);
			p.SourceColumn = ColumnNames.Month;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EndingPrice);
			p.SourceColumn = ColumnNames.EndingPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PhysicalInventoryPrice);
			p.SourceColumn = ColumnNames.PhysicalInventoryPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BBPrice);
			p.SourceColumn = ColumnNames.BBPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UnitID);
			p.SourceColumn = ColumnNames.UnitID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PhysicalStoreID);
			p.SourceColumn = ColumnNames.PhysicalStoreID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
