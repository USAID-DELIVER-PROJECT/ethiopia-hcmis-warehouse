
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _Requisition : SqlClientEntity
	{
		public _Requisition()
		{
			this.QuerySource = "Requisition";
			this.MappingName = "Requisition";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_RequisitionLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_RequisitionLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Identifier
			{
				get
				{
					return new SqlParameter("@Identifier", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter BranchIdentifier
			{
				get
				{
					return new SqlParameter("@BranchIdentifier", SqlDbType.NVarChar, 1);
				}
			}
			
			public static SqlParameter ModeID
			{
				get
				{
					return new SqlParameter("@ModeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter BranchID
			{
				get
				{
					return new SqlParameter("@BranchID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ToBranchID
			{
				get
				{
					return new SqlParameter("@ToBranchID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RequisitionDate
			{
				get
				{
					return new SqlParameter("@RequisitionDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter RequisitionTypeID
			{
				get
				{
					return new SqlParameter("@RequisitionTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RequisitionPriorityID
			{
				get
				{
					return new SqlParameter("@RequisitionPriorityID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RequisitionStatusID
			{
				get
				{
					return new SqlParameter("@RequisitionStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Remark
			{
				get
				{
					return new SqlParameter("@Remark", SqlDbType.NVarChar, 1);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string Identifier = "Identifier";
            public const string BranchIdentifier = "BranchIdentifier";
            public const string ModeID = "ModeID";
            public const string BranchID = "BranchID";
            public const string ToBranchID = "ToBranchID";
            public const string RequisitionDate = "RequisitionDate";
            public const string RequisitionTypeID = "RequisitionTypeID";
            public const string RequisitionPriorityID = "RequisitionPriorityID";
            public const string RequisitionStatusID = "RequisitionStatusID";
            public const string Remark = "Remark";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _Requisition.PropertyNames.ID;
					ht[Identifier] = _Requisition.PropertyNames.Identifier;
					ht[BranchIdentifier] = _Requisition.PropertyNames.BranchIdentifier;
					ht[ModeID] = _Requisition.PropertyNames.ModeID;
					ht[BranchID] = _Requisition.PropertyNames.BranchID;
					ht[ToBranchID] = _Requisition.PropertyNames.ToBranchID;
					ht[RequisitionDate] = _Requisition.PropertyNames.RequisitionDate;
					ht[RequisitionTypeID] = _Requisition.PropertyNames.RequisitionTypeID;
					ht[RequisitionPriorityID] = _Requisition.PropertyNames.RequisitionPriorityID;
					ht[RequisitionStatusID] = _Requisition.PropertyNames.RequisitionStatusID;
					ht[Remark] = _Requisition.PropertyNames.Remark;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string Identifier = "Identifier";
            public const string BranchIdentifier = "BranchIdentifier";
            public const string ModeID = "ModeID";
            public const string BranchID = "BranchID";
            public const string ToBranchID = "ToBranchID";
            public const string RequisitionDate = "RequisitionDate";
            public const string RequisitionTypeID = "RequisitionTypeID";
            public const string RequisitionPriorityID = "RequisitionPriorityID";
            public const string RequisitionStatusID = "RequisitionStatusID";
            public const string Remark = "Remark";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _Requisition.ColumnNames.ID;
					ht[Identifier] = _Requisition.ColumnNames.Identifier;
					ht[BranchIdentifier] = _Requisition.ColumnNames.BranchIdentifier;
					ht[ModeID] = _Requisition.ColumnNames.ModeID;
					ht[BranchID] = _Requisition.ColumnNames.BranchID;
					ht[ToBranchID] = _Requisition.ColumnNames.ToBranchID;
					ht[RequisitionDate] = _Requisition.ColumnNames.RequisitionDate;
					ht[RequisitionTypeID] = _Requisition.ColumnNames.RequisitionTypeID;
					ht[RequisitionPriorityID] = _Requisition.ColumnNames.RequisitionPriorityID;
					ht[RequisitionStatusID] = _Requisition.ColumnNames.RequisitionStatusID;
					ht[Remark] = _Requisition.ColumnNames.Remark;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string Identifier = "s_Identifier";
            public const string BranchIdentifier = "s_BranchIdentifier";
            public const string ModeID = "s_ModeID";
            public const string BranchID = "s_BranchID";
            public const string ToBranchID = "s_ToBranchID";
            public const string RequisitionDate = "s_RequisitionDate";
            public const string RequisitionTypeID = "s_RequisitionTypeID";
            public const string RequisitionPriorityID = "s_RequisitionPriorityID";
            public const string RequisitionStatusID = "s_RequisitionStatusID";
            public const string Remark = "s_Remark";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual Guid Identifier
	    {
			get
	        {
				return base.GetGuid(ColumnNames.Identifier);
			}
			set
	        {
				base.SetGuid(ColumnNames.Identifier, value);
			}
		}

		public virtual string BranchIdentifier
	    {
			get
	        {
				return base.Getstring(ColumnNames.BranchIdentifier);
			}
			set
	        {
				base.Setstring(ColumnNames.BranchIdentifier, value);
			}
		}

		public virtual int ModeID
	    {
			get
	        {
				return base.Getint(ColumnNames.ModeID);
			}
			set
	        {
				base.Setint(ColumnNames.ModeID, value);
			}
		}

		public virtual int BranchID
	    {
			get
	        {
				return base.Getint(ColumnNames.BranchID);
			}
			set
	        {
				base.Setint(ColumnNames.BranchID, value);
			}
		}

		public virtual int ToBranchID
	    {
			get
	        {
				return base.Getint(ColumnNames.ToBranchID);
			}
			set
	        {
				base.Setint(ColumnNames.ToBranchID, value);
			}
		}

		public virtual DateTime RequisitionDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.RequisitionDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.RequisitionDate, value);
			}
		}

		public virtual int RequisitionTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.RequisitionTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.RequisitionTypeID, value);
			}
		}

		public virtual int RequisitionPriorityID
	    {
			get
	        {
				return base.Getint(ColumnNames.RequisitionPriorityID);
			}
			set
	        {
				base.Setint(ColumnNames.RequisitionPriorityID, value);
			}
		}

		public virtual int RequisitionStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.RequisitionStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.RequisitionStatusID, value);
			}
		}

		public virtual string Remark
	    {
			get
	        {
				return base.Getstring(ColumnNames.Remark);
			}
			set
	        {
				base.Setstring(ColumnNames.Remark, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_Identifier
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Identifier) ? string.Empty : base.GetGuidAsString(ColumnNames.Identifier);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Identifier);
				else
					this.Identifier = base.SetGuidAsString(ColumnNames.Identifier, value);
			}
		}

		public virtual string s_BranchIdentifier
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BranchIdentifier) ? string.Empty : base.GetstringAsString(ColumnNames.BranchIdentifier);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BranchIdentifier);
				else
					this.BranchIdentifier = base.SetstringAsString(ColumnNames.BranchIdentifier, value);
			}
		}

		public virtual string s_ModeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModeID) ? string.Empty : base.GetintAsString(ColumnNames.ModeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModeID);
				else
					this.ModeID = base.SetintAsString(ColumnNames.ModeID, value);
			}
		}

		public virtual string s_BranchID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BranchID) ? string.Empty : base.GetintAsString(ColumnNames.BranchID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BranchID);
				else
					this.BranchID = base.SetintAsString(ColumnNames.BranchID, value);
			}
		}

		public virtual string s_ToBranchID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ToBranchID) ? string.Empty : base.GetintAsString(ColumnNames.ToBranchID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ToBranchID);
				else
					this.ToBranchID = base.SetintAsString(ColumnNames.ToBranchID, value);
			}
		}

		public virtual string s_RequisitionDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RequisitionDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.RequisitionDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RequisitionDate);
				else
					this.RequisitionDate = base.SetDateTimeAsString(ColumnNames.RequisitionDate, value);
			}
		}

		public virtual string s_RequisitionTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RequisitionTypeID) ? string.Empty : base.GetintAsString(ColumnNames.RequisitionTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RequisitionTypeID);
				else
					this.RequisitionTypeID = base.SetintAsString(ColumnNames.RequisitionTypeID, value);
			}
		}

		public virtual string s_RequisitionPriorityID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RequisitionPriorityID) ? string.Empty : base.GetintAsString(ColumnNames.RequisitionPriorityID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RequisitionPriorityID);
				else
					this.RequisitionPriorityID = base.SetintAsString(ColumnNames.RequisitionPriorityID, value);
			}
		}

		public virtual string s_RequisitionStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RequisitionStatusID) ? string.Empty : base.GetintAsString(ColumnNames.RequisitionStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RequisitionStatusID);
				else
					this.RequisitionStatusID = base.SetintAsString(ColumnNames.RequisitionStatusID, value);
			}
		}

		public virtual string s_Remark
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Remark) ? string.Empty : base.GetstringAsString(ColumnNames.Remark);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Remark);
				else
					this.Remark = base.SetstringAsString(ColumnNames.Remark, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Identifier
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Identifier, Parameters.Identifier);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BranchIdentifier
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BranchIdentifier, Parameters.BranchIdentifier);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModeID, Parameters.ModeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BranchID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BranchID, Parameters.BranchID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ToBranchID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ToBranchID, Parameters.ToBranchID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RequisitionDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RequisitionDate, Parameters.RequisitionDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RequisitionTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RequisitionTypeID, Parameters.RequisitionTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RequisitionPriorityID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RequisitionPriorityID, Parameters.RequisitionPriorityID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RequisitionStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RequisitionStatusID, Parameters.RequisitionStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Remark
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter Identifier
		    {
				get
		        {
					if(_Identifier_W == null)
	        	    {
						_Identifier_W = TearOff.Identifier;
					}
					return _Identifier_W;
				}
			}

			public WhereParameter BranchIdentifier
		    {
				get
		        {
					if(_BranchIdentifier_W == null)
	        	    {
						_BranchIdentifier_W = TearOff.BranchIdentifier;
					}
					return _BranchIdentifier_W;
				}
			}

			public WhereParameter ModeID
		    {
				get
		        {
					if(_ModeID_W == null)
	        	    {
						_ModeID_W = TearOff.ModeID;
					}
					return _ModeID_W;
				}
			}

			public WhereParameter BranchID
		    {
				get
		        {
					if(_BranchID_W == null)
	        	    {
						_BranchID_W = TearOff.BranchID;
					}
					return _BranchID_W;
				}
			}

			public WhereParameter ToBranchID
		    {
				get
		        {
					if(_ToBranchID_W == null)
	        	    {
						_ToBranchID_W = TearOff.ToBranchID;
					}
					return _ToBranchID_W;
				}
			}

			public WhereParameter RequisitionDate
		    {
				get
		        {
					if(_RequisitionDate_W == null)
	        	    {
						_RequisitionDate_W = TearOff.RequisitionDate;
					}
					return _RequisitionDate_W;
				}
			}

			public WhereParameter RequisitionTypeID
		    {
				get
		        {
					if(_RequisitionTypeID_W == null)
	        	    {
						_RequisitionTypeID_W = TearOff.RequisitionTypeID;
					}
					return _RequisitionTypeID_W;
				}
			}

			public WhereParameter RequisitionPriorityID
		    {
				get
		        {
					if(_RequisitionPriorityID_W == null)
	        	    {
						_RequisitionPriorityID_W = TearOff.RequisitionPriorityID;
					}
					return _RequisitionPriorityID_W;
				}
			}

			public WhereParameter RequisitionStatusID
		    {
				get
		        {
					if(_RequisitionStatusID_W == null)
	        	    {
						_RequisitionStatusID_W = TearOff.RequisitionStatusID;
					}
					return _RequisitionStatusID_W;
				}
			}

			public WhereParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _Identifier_W = null;
			private WhereParameter _BranchIdentifier_W = null;
			private WhereParameter _ModeID_W = null;
			private WhereParameter _BranchID_W = null;
			private WhereParameter _ToBranchID_W = null;
			private WhereParameter _RequisitionDate_W = null;
			private WhereParameter _RequisitionTypeID_W = null;
			private WhereParameter _RequisitionPriorityID_W = null;
			private WhereParameter _RequisitionStatusID_W = null;
			private WhereParameter _Remark_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_Identifier_W = null;
				_BranchIdentifier_W = null;
				_ModeID_W = null;
				_BranchID_W = null;
				_ToBranchID_W = null;
				_RequisitionDate_W = null;
				_RequisitionTypeID_W = null;
				_RequisitionPriorityID_W = null;
				_RequisitionStatusID_W = null;
				_Remark_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Identifier
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Identifier, Parameters.Identifier);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BranchIdentifier
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BranchIdentifier, Parameters.BranchIdentifier);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModeID, Parameters.ModeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BranchID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BranchID, Parameters.BranchID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ToBranchID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ToBranchID, Parameters.ToBranchID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RequisitionDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequisitionDate, Parameters.RequisitionDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RequisitionTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequisitionTypeID, Parameters.RequisitionTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RequisitionPriorityID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequisitionPriorityID, Parameters.RequisitionPriorityID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RequisitionStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequisitionStatusID, Parameters.RequisitionStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Remark
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter Identifier
		    {
				get
		        {
					if(_Identifier_W == null)
	        	    {
						_Identifier_W = TearOff.Identifier;
					}
					return _Identifier_W;
				}
			}

			public AggregateParameter BranchIdentifier
		    {
				get
		        {
					if(_BranchIdentifier_W == null)
	        	    {
						_BranchIdentifier_W = TearOff.BranchIdentifier;
					}
					return _BranchIdentifier_W;
				}
			}

			public AggregateParameter ModeID
		    {
				get
		        {
					if(_ModeID_W == null)
	        	    {
						_ModeID_W = TearOff.ModeID;
					}
					return _ModeID_W;
				}
			}

			public AggregateParameter BranchID
		    {
				get
		        {
					if(_BranchID_W == null)
	        	    {
						_BranchID_W = TearOff.BranchID;
					}
					return _BranchID_W;
				}
			}

			public AggregateParameter ToBranchID
		    {
				get
		        {
					if(_ToBranchID_W == null)
	        	    {
						_ToBranchID_W = TearOff.ToBranchID;
					}
					return _ToBranchID_W;
				}
			}

			public AggregateParameter RequisitionDate
		    {
				get
		        {
					if(_RequisitionDate_W == null)
	        	    {
						_RequisitionDate_W = TearOff.RequisitionDate;
					}
					return _RequisitionDate_W;
				}
			}

			public AggregateParameter RequisitionTypeID
		    {
				get
		        {
					if(_RequisitionTypeID_W == null)
	        	    {
						_RequisitionTypeID_W = TearOff.RequisitionTypeID;
					}
					return _RequisitionTypeID_W;
				}
			}

			public AggregateParameter RequisitionPriorityID
		    {
				get
		        {
					if(_RequisitionPriorityID_W == null)
	        	    {
						_RequisitionPriorityID_W = TearOff.RequisitionPriorityID;
					}
					return _RequisitionPriorityID_W;
				}
			}

			public AggregateParameter RequisitionStatusID
		    {
				get
		        {
					if(_RequisitionStatusID_W == null)
	        	    {
						_RequisitionStatusID_W = TearOff.RequisitionStatusID;
					}
					return _RequisitionStatusID_W;
				}
			}

			public AggregateParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _Identifier_W = null;
			private AggregateParameter _BranchIdentifier_W = null;
			private AggregateParameter _ModeID_W = null;
			private AggregateParameter _BranchID_W = null;
			private AggregateParameter _ToBranchID_W = null;
			private AggregateParameter _RequisitionDate_W = null;
			private AggregateParameter _RequisitionTypeID_W = null;
			private AggregateParameter _RequisitionPriorityID_W = null;
			private AggregateParameter _RequisitionStatusID_W = null;
			private AggregateParameter _Remark_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_Identifier_W = null;
				_BranchIdentifier_W = null;
				_ModeID_W = null;
				_BranchID_W = null;
				_ToBranchID_W = null;
				_RequisitionDate_W = null;
				_RequisitionTypeID_W = null;
				_RequisitionPriorityID_W = null;
				_RequisitionStatusID_W = null;
				_Remark_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RequisitionInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RequisitionUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RequisitionDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Identifier);
			p.SourceColumn = ColumnNames.Identifier;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BranchIdentifier);
			p.SourceColumn = ColumnNames.BranchIdentifier;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModeID);
			p.SourceColumn = ColumnNames.ModeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BranchID);
			p.SourceColumn = ColumnNames.BranchID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ToBranchID);
			p.SourceColumn = ColumnNames.ToBranchID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RequisitionDate);
			p.SourceColumn = ColumnNames.RequisitionDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RequisitionTypeID);
			p.SourceColumn = ColumnNames.RequisitionTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RequisitionPriorityID);
			p.SourceColumn = ColumnNames.RequisitionPriorityID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RequisitionStatusID);
			p.SourceColumn = ColumnNames.RequisitionStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Remark);
			p.SourceColumn = ColumnNames.Remark;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
