
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _LogReceiptChange : SqlClientEntity
	{
		public _LogReceiptChange()
		{
			this.QuerySource = "LogReceiptChange";
			this.MappingName = "LogReceiptChange";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_LogReceiptChangeLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_LogReceiptChangeLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TableName
			{
				get
				{
					return new SqlParameter("@TableName", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter ColumnName
			{
				get
				{
					return new SqlParameter("@ColumnName", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter OldValue
			{
				get
				{
					return new SqlParameter("@OldValue", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter NewValue
			{
				get
				{
					return new SqlParameter("@NewValue", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter ChangedBy
			{
				get
				{
					return new SqlParameter("@ChangedBy", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DateChanged
			{
				get
				{
					return new SqlParameter("@DateChanged", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter RefID
			{
				get
				{
					return new SqlParameter("@RefID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string TableName = "TableName";
            public const string ColumnName = "ColumnName";
            public const string OldValue = "OldValue";
            public const string NewValue = "NewValue";
            public const string ChangedBy = "ChangedBy";
            public const string DateChanged = "DateChanged";
            public const string RefID = "RefID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _LogReceiptChange.PropertyNames.ID;
					ht[TableName] = _LogReceiptChange.PropertyNames.TableName;
					ht[ColumnName] = _LogReceiptChange.PropertyNames.ColumnName;
					ht[OldValue] = _LogReceiptChange.PropertyNames.OldValue;
					ht[NewValue] = _LogReceiptChange.PropertyNames.NewValue;
					ht[ChangedBy] = _LogReceiptChange.PropertyNames.ChangedBy;
					ht[DateChanged] = _LogReceiptChange.PropertyNames.DateChanged;
					ht[RefID] = _LogReceiptChange.PropertyNames.RefID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string TableName = "TableName";
            public const string ColumnName = "ColumnName";
            public const string OldValue = "OldValue";
            public const string NewValue = "NewValue";
            public const string ChangedBy = "ChangedBy";
            public const string DateChanged = "DateChanged";
            public const string RefID = "RefID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _LogReceiptChange.ColumnNames.ID;
					ht[TableName] = _LogReceiptChange.ColumnNames.TableName;
					ht[ColumnName] = _LogReceiptChange.ColumnNames.ColumnName;
					ht[OldValue] = _LogReceiptChange.ColumnNames.OldValue;
					ht[NewValue] = _LogReceiptChange.ColumnNames.NewValue;
					ht[ChangedBy] = _LogReceiptChange.ColumnNames.ChangedBy;
					ht[DateChanged] = _LogReceiptChange.ColumnNames.DateChanged;
					ht[RefID] = _LogReceiptChange.ColumnNames.RefID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string TableName = "s_TableName";
            public const string ColumnName = "s_ColumnName";
            public const string OldValue = "s_OldValue";
            public const string NewValue = "s_NewValue";
            public const string ChangedBy = "s_ChangedBy";
            public const string DateChanged = "s_DateChanged";
            public const string RefID = "s_RefID";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual string TableName
	    {
			get
	        {
				return base.Getstring(ColumnNames.TableName);
			}
			set
	        {
				base.Setstring(ColumnNames.TableName, value);
			}
		}

		public virtual string ColumnName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ColumnName);
			}
			set
	        {
				base.Setstring(ColumnNames.ColumnName, value);
			}
		}

		public virtual string OldValue
	    {
			get
	        {
				return base.Getstring(ColumnNames.OldValue);
			}
			set
	        {
				base.Setstring(ColumnNames.OldValue, value);
			}
		}

		public virtual string NewValue
	    {
			get
	        {
				return base.Getstring(ColumnNames.NewValue);
			}
			set
	        {
				base.Setstring(ColumnNames.NewValue, value);
			}
		}

		public virtual int ChangedBy
	    {
			get
	        {
				return base.Getint(ColumnNames.ChangedBy);
			}
			set
	        {
				base.Setint(ColumnNames.ChangedBy, value);
			}
		}

		public virtual DateTime DateChanged
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DateChanged);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DateChanged, value);
			}
		}

		public virtual int RefID
	    {
			get
	        {
				return base.Getint(ColumnNames.RefID);
			}
			set
	        {
				base.Setint(ColumnNames.RefID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_TableName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TableName) ? string.Empty : base.GetstringAsString(ColumnNames.TableName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TableName);
				else
					this.TableName = base.SetstringAsString(ColumnNames.TableName, value);
			}
		}

		public virtual string s_ColumnName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ColumnName) ? string.Empty : base.GetstringAsString(ColumnNames.ColumnName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ColumnName);
				else
					this.ColumnName = base.SetstringAsString(ColumnNames.ColumnName, value);
			}
		}

		public virtual string s_OldValue
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OldValue) ? string.Empty : base.GetstringAsString(ColumnNames.OldValue);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OldValue);
				else
					this.OldValue = base.SetstringAsString(ColumnNames.OldValue, value);
			}
		}

		public virtual string s_NewValue
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NewValue) ? string.Empty : base.GetstringAsString(ColumnNames.NewValue);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NewValue);
				else
					this.NewValue = base.SetstringAsString(ColumnNames.NewValue, value);
			}
		}

		public virtual string s_ChangedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ChangedBy) ? string.Empty : base.GetintAsString(ColumnNames.ChangedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ChangedBy);
				else
					this.ChangedBy = base.SetintAsString(ColumnNames.ChangedBy, value);
			}
		}

		public virtual string s_DateChanged
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DateChanged) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateChanged);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DateChanged);
				else
					this.DateChanged = base.SetDateTimeAsString(ColumnNames.DateChanged, value);
			}
		}

		public virtual string s_RefID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RefID) ? string.Empty : base.GetintAsString(ColumnNames.RefID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RefID);
				else
					this.RefID = base.SetintAsString(ColumnNames.RefID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TableName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TableName, Parameters.TableName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ColumnName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ColumnName, Parameters.ColumnName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OldValue
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OldValue, Parameters.OldValue);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NewValue
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NewValue, Parameters.NewValue);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ChangedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ChangedBy, Parameters.ChangedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DateChanged
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DateChanged, Parameters.DateChanged);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RefID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RefID, Parameters.RefID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter TableName
		    {
				get
		        {
					if(_TableName_W == null)
	        	    {
						_TableName_W = TearOff.TableName;
					}
					return _TableName_W;
				}
			}

			public WhereParameter ColumnName
		    {
				get
		        {
					if(_ColumnName_W == null)
	        	    {
						_ColumnName_W = TearOff.ColumnName;
					}
					return _ColumnName_W;
				}
			}

			public WhereParameter OldValue
		    {
				get
		        {
					if(_OldValue_W == null)
	        	    {
						_OldValue_W = TearOff.OldValue;
					}
					return _OldValue_W;
				}
			}

			public WhereParameter NewValue
		    {
				get
		        {
					if(_NewValue_W == null)
	        	    {
						_NewValue_W = TearOff.NewValue;
					}
					return _NewValue_W;
				}
			}

			public WhereParameter ChangedBy
		    {
				get
		        {
					if(_ChangedBy_W == null)
	        	    {
						_ChangedBy_W = TearOff.ChangedBy;
					}
					return _ChangedBy_W;
				}
			}

			public WhereParameter DateChanged
		    {
				get
		        {
					if(_DateChanged_W == null)
	        	    {
						_DateChanged_W = TearOff.DateChanged;
					}
					return _DateChanged_W;
				}
			}

			public WhereParameter RefID
		    {
				get
		        {
					if(_RefID_W == null)
	        	    {
						_RefID_W = TearOff.RefID;
					}
					return _RefID_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _TableName_W = null;
			private WhereParameter _ColumnName_W = null;
			private WhereParameter _OldValue_W = null;
			private WhereParameter _NewValue_W = null;
			private WhereParameter _ChangedBy_W = null;
			private WhereParameter _DateChanged_W = null;
			private WhereParameter _RefID_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_TableName_W = null;
				_ColumnName_W = null;
				_OldValue_W = null;
				_NewValue_W = null;
				_ChangedBy_W = null;
				_DateChanged_W = null;
				_RefID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TableName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TableName, Parameters.TableName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ColumnName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ColumnName, Parameters.ColumnName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OldValue
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OldValue, Parameters.OldValue);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NewValue
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NewValue, Parameters.NewValue);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ChangedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ChangedBy, Parameters.ChangedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DateChanged
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateChanged, Parameters.DateChanged);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RefID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RefID, Parameters.RefID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter TableName
		    {
				get
		        {
					if(_TableName_W == null)
	        	    {
						_TableName_W = TearOff.TableName;
					}
					return _TableName_W;
				}
			}

			public AggregateParameter ColumnName
		    {
				get
		        {
					if(_ColumnName_W == null)
	        	    {
						_ColumnName_W = TearOff.ColumnName;
					}
					return _ColumnName_W;
				}
			}

			public AggregateParameter OldValue
		    {
				get
		        {
					if(_OldValue_W == null)
	        	    {
						_OldValue_W = TearOff.OldValue;
					}
					return _OldValue_W;
				}
			}

			public AggregateParameter NewValue
		    {
				get
		        {
					if(_NewValue_W == null)
	        	    {
						_NewValue_W = TearOff.NewValue;
					}
					return _NewValue_W;
				}
			}

			public AggregateParameter ChangedBy
		    {
				get
		        {
					if(_ChangedBy_W == null)
	        	    {
						_ChangedBy_W = TearOff.ChangedBy;
					}
					return _ChangedBy_W;
				}
			}

			public AggregateParameter DateChanged
		    {
				get
		        {
					if(_DateChanged_W == null)
	        	    {
						_DateChanged_W = TearOff.DateChanged;
					}
					return _DateChanged_W;
				}
			}

			public AggregateParameter RefID
		    {
				get
		        {
					if(_RefID_W == null)
	        	    {
						_RefID_W = TearOff.RefID;
					}
					return _RefID_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _TableName_W = null;
			private AggregateParameter _ColumnName_W = null;
			private AggregateParameter _OldValue_W = null;
			private AggregateParameter _NewValue_W = null;
			private AggregateParameter _ChangedBy_W = null;
			private AggregateParameter _DateChanged_W = null;
			private AggregateParameter _RefID_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_TableName_W = null;
				_ColumnName_W = null;
				_OldValue_W = null;
				_NewValue_W = null;
				_ChangedBy_W = null;
				_DateChanged_W = null;
				_RefID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_LogReceiptChangeInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_LogReceiptChangeUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_LogReceiptChangeDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TableName);
			p.SourceColumn = ColumnNames.TableName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ColumnName);
			p.SourceColumn = ColumnNames.ColumnName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OldValue);
			p.SourceColumn = ColumnNames.OldValue;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NewValue);
			p.SourceColumn = ColumnNames.NewValue;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ChangedBy);
			p.SourceColumn = ColumnNames.ChangedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DateChanged);
			p.SourceColumn = ColumnNames.DateChanged;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RefID);
			p.SourceColumn = ColumnNames.RefID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
