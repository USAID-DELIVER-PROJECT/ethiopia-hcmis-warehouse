
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _PickList : SqlClientEntity
	{
		public _PickList()
		{
			this.QuerySource = "PickList";
			this.MappingName = "PickList";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PickListLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PickListLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OrderID
			{
				get
				{
					return new SqlParameter("@OrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PickType
			{
				get
				{
					return new SqlParameter("@PickType", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter IssuedDate
			{
				get
				{
					return new SqlParameter("@IssuedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IsConfirmed
			{
				get
				{
					return new SqlParameter("@IsConfirmed", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter Remark
			{
				get
				{
					return new SqlParameter("@Remark", SqlDbType.Text, 2147483647);
				}
			}
			
			public static SqlParameter SavedDate
			{
				get
				{
					return new SqlParameter("@SavedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter PickedDate
			{
				get
				{
					return new SqlParameter("@PickedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter PickedBy
			{
				get
				{
					return new SqlParameter("@PickedBy", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PrintedBy
			{
				get
				{
					return new SqlParameter("@PrintedBy", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PickListTypeID
			{
				get
				{
					return new SqlParameter("@PickListTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter WarehouseID
			{
				get
				{
					return new SqlParameter("@WarehouseID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsWarehouseConfirmed
			{
				get
				{
					return new SqlParameter("@IsWarehouseConfirmed", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter WarehouseConfirmedByUserID
			{
				get
				{
					return new SqlParameter("@WarehouseConfirmedByUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PrintedID
			{
				get
				{
					return new SqlParameter("@PrintedID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter WarehouseConfirmedDate
			{
				get
				{
					return new SqlParameter("@WarehouseConfirmedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string OrderID = "OrderID";
            public const string PickType = "PickType";
            public const string IssuedDate = "IssuedDate";
            public const string IsConfirmed = "IsConfirmed";
            public const string Remark = "Remark";
            public const string SavedDate = "SavedDate";
            public const string PickedDate = "PickedDate";
            public const string PickedBy = "PickedBy";
            public const string PrintedBy = "PrintedBy";
            public const string PickListTypeID = "PickListTypeID";
            public const string WarehouseID = "WarehouseID";
            public const string IsWarehouseConfirmed = "IsWarehouseConfirmed";
            public const string WarehouseConfirmedByUserID = "WarehouseConfirmedByUserID";
            public const string PrintedID = "PrintedID";
            public const string WarehouseConfirmedDate = "WarehouseConfirmedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _PickList.PropertyNames.ID;
					ht[OrderID] = _PickList.PropertyNames.OrderID;
					ht[PickType] = _PickList.PropertyNames.PickType;
					ht[IssuedDate] = _PickList.PropertyNames.IssuedDate;
					ht[IsConfirmed] = _PickList.PropertyNames.IsConfirmed;
					ht[Remark] = _PickList.PropertyNames.Remark;
					ht[SavedDate] = _PickList.PropertyNames.SavedDate;
					ht[PickedDate] = _PickList.PropertyNames.PickedDate;
					ht[PickedBy] = _PickList.PropertyNames.PickedBy;
					ht[PrintedBy] = _PickList.PropertyNames.PrintedBy;
					ht[PickListTypeID] = _PickList.PropertyNames.PickListTypeID;
					ht[WarehouseID] = _PickList.PropertyNames.WarehouseID;
					ht[IsWarehouseConfirmed] = _PickList.PropertyNames.IsWarehouseConfirmed;
					ht[WarehouseConfirmedByUserID] = _PickList.PropertyNames.WarehouseConfirmedByUserID;
					ht[PrintedID] = _PickList.PropertyNames.PrintedID;
					ht[WarehouseConfirmedDate] = _PickList.PropertyNames.WarehouseConfirmedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string OrderID = "OrderID";
            public const string PickType = "PickType";
            public const string IssuedDate = "IssuedDate";
            public const string IsConfirmed = "IsConfirmed";
            public const string Remark = "Remark";
            public const string SavedDate = "SavedDate";
            public const string PickedDate = "PickedDate";
            public const string PickedBy = "PickedBy";
            public const string PrintedBy = "PrintedBy";
            public const string PickListTypeID = "PickListTypeID";
            public const string WarehouseID = "WarehouseID";
            public const string IsWarehouseConfirmed = "IsWarehouseConfirmed";
            public const string WarehouseConfirmedByUserID = "WarehouseConfirmedByUserID";
            public const string PrintedID = "PrintedID";
            public const string WarehouseConfirmedDate = "WarehouseConfirmedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _PickList.ColumnNames.ID;
					ht[OrderID] = _PickList.ColumnNames.OrderID;
					ht[PickType] = _PickList.ColumnNames.PickType;
					ht[IssuedDate] = _PickList.ColumnNames.IssuedDate;
					ht[IsConfirmed] = _PickList.ColumnNames.IsConfirmed;
					ht[Remark] = _PickList.ColumnNames.Remark;
					ht[SavedDate] = _PickList.ColumnNames.SavedDate;
					ht[PickedDate] = _PickList.ColumnNames.PickedDate;
					ht[PickedBy] = _PickList.ColumnNames.PickedBy;
					ht[PrintedBy] = _PickList.ColumnNames.PrintedBy;
					ht[PickListTypeID] = _PickList.ColumnNames.PickListTypeID;
					ht[WarehouseID] = _PickList.ColumnNames.WarehouseID;
					ht[IsWarehouseConfirmed] = _PickList.ColumnNames.IsWarehouseConfirmed;
					ht[WarehouseConfirmedByUserID] = _PickList.ColumnNames.WarehouseConfirmedByUserID;
					ht[PrintedID] = _PickList.ColumnNames.PrintedID;
					ht[WarehouseConfirmedDate] = _PickList.ColumnNames.WarehouseConfirmedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string OrderID = "s_OrderID";
            public const string PickType = "s_PickType";
            public const string IssuedDate = "s_IssuedDate";
            public const string IsConfirmed = "s_IsConfirmed";
            public const string Remark = "s_Remark";
            public const string SavedDate = "s_SavedDate";
            public const string PickedDate = "s_PickedDate";
            public const string PickedBy = "s_PickedBy";
            public const string PrintedBy = "s_PrintedBy";
            public const string PickListTypeID = "s_PickListTypeID";
            public const string WarehouseID = "s_WarehouseID";
            public const string IsWarehouseConfirmed = "s_IsWarehouseConfirmed";
            public const string WarehouseConfirmedByUserID = "s_WarehouseConfirmedByUserID";
            public const string PrintedID = "s_PrintedID";
            public const string WarehouseConfirmedDate = "s_WarehouseConfirmedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual int OrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.OrderID);
			}
			set
	        {
				base.Setint(ColumnNames.OrderID, value);
			}
		}

		public virtual string PickType
	    {
			get
	        {
				return base.Getstring(ColumnNames.PickType);
			}
			set
	        {
				base.Setstring(ColumnNames.PickType, value);
			}
		}

		public virtual DateTime IssuedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.IssuedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.IssuedDate, value);
			}
		}

		public virtual bool IsConfirmed
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsConfirmed);
			}
			set
	        {
				base.Setbool(ColumnNames.IsConfirmed, value);
			}
		}

		public virtual string Remark
	    {
			get
	        {
				return base.Getstring(ColumnNames.Remark);
			}
			set
	        {
				base.Setstring(ColumnNames.Remark, value);
			}
		}

		public virtual DateTime SavedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.SavedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.SavedDate, value);
			}
		}

		public virtual DateTime PickedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.PickedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.PickedDate, value);
			}
		}

		public virtual int PickedBy
	    {
			get
	        {
				return base.Getint(ColumnNames.PickedBy);
			}
			set
	        {
				base.Setint(ColumnNames.PickedBy, value);
			}
		}

		public virtual int PrintedBy
	    {
			get
	        {
				return base.Getint(ColumnNames.PrintedBy);
			}
			set
	        {
				base.Setint(ColumnNames.PrintedBy, value);
			}
		}

		public virtual int PickListTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.PickListTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.PickListTypeID, value);
			}
		}

		public virtual int WarehouseID
	    {
			get
	        {
				return base.Getint(ColumnNames.WarehouseID);
			}
			set
	        {
				base.Setint(ColumnNames.WarehouseID, value);
			}
		}

		public virtual int IsWarehouseConfirmed
	    {
			get
	        {
				return base.Getint(ColumnNames.IsWarehouseConfirmed);
			}
			set
	        {
				base.Setint(ColumnNames.IsWarehouseConfirmed, value);
			}
		}

		public virtual int WarehouseConfirmedByUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.WarehouseConfirmedByUserID);
			}
			set
	        {
				base.Setint(ColumnNames.WarehouseConfirmedByUserID, value);
			}
		}

		public virtual int PrintedID
	    {
			get
	        {
				return base.Getint(ColumnNames.PrintedID);
			}
			set
	        {
				base.Setint(ColumnNames.PrintedID, value);
			}
		}

		public virtual DateTime WarehouseConfirmedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.WarehouseConfirmedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.WarehouseConfirmedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_OrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderID) ? string.Empty : base.GetintAsString(ColumnNames.OrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderID);
				else
					this.OrderID = base.SetintAsString(ColumnNames.OrderID, value);
			}
		}

		public virtual string s_PickType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PickType) ? string.Empty : base.GetstringAsString(ColumnNames.PickType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PickType);
				else
					this.PickType = base.SetstringAsString(ColumnNames.PickType, value);
			}
		}

		public virtual string s_IssuedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IssuedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.IssuedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IssuedDate);
				else
					this.IssuedDate = base.SetDateTimeAsString(ColumnNames.IssuedDate, value);
			}
		}

		public virtual string s_IsConfirmed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsConfirmed) ? string.Empty : base.GetboolAsString(ColumnNames.IsConfirmed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsConfirmed);
				else
					this.IsConfirmed = base.SetboolAsString(ColumnNames.IsConfirmed, value);
			}
		}

		public virtual string s_Remark
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Remark) ? string.Empty : base.GetstringAsString(ColumnNames.Remark);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Remark);
				else
					this.Remark = base.SetstringAsString(ColumnNames.Remark, value);
			}
		}

		public virtual string s_SavedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SavedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.SavedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SavedDate);
				else
					this.SavedDate = base.SetDateTimeAsString(ColumnNames.SavedDate, value);
			}
		}

		public virtual string s_PickedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PickedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.PickedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PickedDate);
				else
					this.PickedDate = base.SetDateTimeAsString(ColumnNames.PickedDate, value);
			}
		}

		public virtual string s_PickedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PickedBy) ? string.Empty : base.GetintAsString(ColumnNames.PickedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PickedBy);
				else
					this.PickedBy = base.SetintAsString(ColumnNames.PickedBy, value);
			}
		}

		public virtual string s_PrintedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PrintedBy) ? string.Empty : base.GetintAsString(ColumnNames.PrintedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PrintedBy);
				else
					this.PrintedBy = base.SetintAsString(ColumnNames.PrintedBy, value);
			}
		}

		public virtual string s_PickListTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PickListTypeID) ? string.Empty : base.GetintAsString(ColumnNames.PickListTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PickListTypeID);
				else
					this.PickListTypeID = base.SetintAsString(ColumnNames.PickListTypeID, value);
			}
		}

		public virtual string s_WarehouseID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WarehouseID) ? string.Empty : base.GetintAsString(ColumnNames.WarehouseID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WarehouseID);
				else
					this.WarehouseID = base.SetintAsString(ColumnNames.WarehouseID, value);
			}
		}

		public virtual string s_IsWarehouseConfirmed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsWarehouseConfirmed) ? string.Empty : base.GetintAsString(ColumnNames.IsWarehouseConfirmed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsWarehouseConfirmed);
				else
					this.IsWarehouseConfirmed = base.SetintAsString(ColumnNames.IsWarehouseConfirmed, value);
			}
		}

		public virtual string s_WarehouseConfirmedByUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WarehouseConfirmedByUserID) ? string.Empty : base.GetintAsString(ColumnNames.WarehouseConfirmedByUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WarehouseConfirmedByUserID);
				else
					this.WarehouseConfirmedByUserID = base.SetintAsString(ColumnNames.WarehouseConfirmedByUserID, value);
			}
		}

		public virtual string s_PrintedID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PrintedID) ? string.Empty : base.GetintAsString(ColumnNames.PrintedID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PrintedID);
				else
					this.PrintedID = base.SetintAsString(ColumnNames.PrintedID, value);
			}
		}

		public virtual string s_WarehouseConfirmedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WarehouseConfirmedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.WarehouseConfirmedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WarehouseConfirmedDate);
				else
					this.WarehouseConfirmedDate = base.SetDateTimeAsString(ColumnNames.WarehouseConfirmedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderID, Parameters.OrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PickType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PickType, Parameters.PickType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IssuedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IssuedDate, Parameters.IssuedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsConfirmed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsConfirmed, Parameters.IsConfirmed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Remark
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SavedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SavedDate, Parameters.SavedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PickedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PickedDate, Parameters.PickedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PickedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PickedBy, Parameters.PickedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PrintedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PrintedBy, Parameters.PrintedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PickListTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PickListTypeID, Parameters.PickListTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WarehouseID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WarehouseID, Parameters.WarehouseID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsWarehouseConfirmed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsWarehouseConfirmed, Parameters.IsWarehouseConfirmed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WarehouseConfirmedByUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WarehouseConfirmedByUserID, Parameters.WarehouseConfirmedByUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PrintedID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PrintedID, Parameters.PrintedID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WarehouseConfirmedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WarehouseConfirmedDate, Parameters.WarehouseConfirmedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter OrderID
		    {
				get
		        {
					if(_OrderID_W == null)
	        	    {
						_OrderID_W = TearOff.OrderID;
					}
					return _OrderID_W;
				}
			}

			public WhereParameter PickType
		    {
				get
		        {
					if(_PickType_W == null)
	        	    {
						_PickType_W = TearOff.PickType;
					}
					return _PickType_W;
				}
			}

			public WhereParameter IssuedDate
		    {
				get
		        {
					if(_IssuedDate_W == null)
	        	    {
						_IssuedDate_W = TearOff.IssuedDate;
					}
					return _IssuedDate_W;
				}
			}

			public WhereParameter IsConfirmed
		    {
				get
		        {
					if(_IsConfirmed_W == null)
	        	    {
						_IsConfirmed_W = TearOff.IsConfirmed;
					}
					return _IsConfirmed_W;
				}
			}

			public WhereParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			public WhereParameter SavedDate
		    {
				get
		        {
					if(_SavedDate_W == null)
	        	    {
						_SavedDate_W = TearOff.SavedDate;
					}
					return _SavedDate_W;
				}
			}

			public WhereParameter PickedDate
		    {
				get
		        {
					if(_PickedDate_W == null)
	        	    {
						_PickedDate_W = TearOff.PickedDate;
					}
					return _PickedDate_W;
				}
			}

			public WhereParameter PickedBy
		    {
				get
		        {
					if(_PickedBy_W == null)
	        	    {
						_PickedBy_W = TearOff.PickedBy;
					}
					return _PickedBy_W;
				}
			}

			public WhereParameter PrintedBy
		    {
				get
		        {
					if(_PrintedBy_W == null)
	        	    {
						_PrintedBy_W = TearOff.PrintedBy;
					}
					return _PrintedBy_W;
				}
			}

			public WhereParameter PickListTypeID
		    {
				get
		        {
					if(_PickListTypeID_W == null)
	        	    {
						_PickListTypeID_W = TearOff.PickListTypeID;
					}
					return _PickListTypeID_W;
				}
			}

			public WhereParameter WarehouseID
		    {
				get
		        {
					if(_WarehouseID_W == null)
	        	    {
						_WarehouseID_W = TearOff.WarehouseID;
					}
					return _WarehouseID_W;
				}
			}

			public WhereParameter IsWarehouseConfirmed
		    {
				get
		        {
					if(_IsWarehouseConfirmed_W == null)
	        	    {
						_IsWarehouseConfirmed_W = TearOff.IsWarehouseConfirmed;
					}
					return _IsWarehouseConfirmed_W;
				}
			}

			public WhereParameter WarehouseConfirmedByUserID
		    {
				get
		        {
					if(_WarehouseConfirmedByUserID_W == null)
	        	    {
						_WarehouseConfirmedByUserID_W = TearOff.WarehouseConfirmedByUserID;
					}
					return _WarehouseConfirmedByUserID_W;
				}
			}

			public WhereParameter PrintedID
		    {
				get
		        {
					if(_PrintedID_W == null)
	        	    {
						_PrintedID_W = TearOff.PrintedID;
					}
					return _PrintedID_W;
				}
			}

			public WhereParameter WarehouseConfirmedDate
		    {
				get
		        {
					if(_WarehouseConfirmedDate_W == null)
	        	    {
						_WarehouseConfirmedDate_W = TearOff.WarehouseConfirmedDate;
					}
					return _WarehouseConfirmedDate_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _OrderID_W = null;
			private WhereParameter _PickType_W = null;
			private WhereParameter _IssuedDate_W = null;
			private WhereParameter _IsConfirmed_W = null;
			private WhereParameter _Remark_W = null;
			private WhereParameter _SavedDate_W = null;
			private WhereParameter _PickedDate_W = null;
			private WhereParameter _PickedBy_W = null;
			private WhereParameter _PrintedBy_W = null;
			private WhereParameter _PickListTypeID_W = null;
			private WhereParameter _WarehouseID_W = null;
			private WhereParameter _IsWarehouseConfirmed_W = null;
			private WhereParameter _WarehouseConfirmedByUserID_W = null;
			private WhereParameter _PrintedID_W = null;
			private WhereParameter _WarehouseConfirmedDate_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_OrderID_W = null;
				_PickType_W = null;
				_IssuedDate_W = null;
				_IsConfirmed_W = null;
				_Remark_W = null;
				_SavedDate_W = null;
				_PickedDate_W = null;
				_PickedBy_W = null;
				_PrintedBy_W = null;
				_PickListTypeID_W = null;
				_WarehouseID_W = null;
				_IsWarehouseConfirmed_W = null;
				_WarehouseConfirmedByUserID_W = null;
				_PrintedID_W = null;
				_WarehouseConfirmedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderID, Parameters.OrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PickType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PickType, Parameters.PickType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IssuedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IssuedDate, Parameters.IssuedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsConfirmed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsConfirmed, Parameters.IsConfirmed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Remark
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SavedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SavedDate, Parameters.SavedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PickedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PickedDate, Parameters.PickedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PickedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PickedBy, Parameters.PickedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PrintedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PrintedBy, Parameters.PrintedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PickListTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PickListTypeID, Parameters.PickListTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WarehouseID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WarehouseID, Parameters.WarehouseID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsWarehouseConfirmed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsWarehouseConfirmed, Parameters.IsWarehouseConfirmed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WarehouseConfirmedByUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WarehouseConfirmedByUserID, Parameters.WarehouseConfirmedByUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PrintedID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PrintedID, Parameters.PrintedID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WarehouseConfirmedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WarehouseConfirmedDate, Parameters.WarehouseConfirmedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter OrderID
		    {
				get
		        {
					if(_OrderID_W == null)
	        	    {
						_OrderID_W = TearOff.OrderID;
					}
					return _OrderID_W;
				}
			}

			public AggregateParameter PickType
		    {
				get
		        {
					if(_PickType_W == null)
	        	    {
						_PickType_W = TearOff.PickType;
					}
					return _PickType_W;
				}
			}

			public AggregateParameter IssuedDate
		    {
				get
		        {
					if(_IssuedDate_W == null)
	        	    {
						_IssuedDate_W = TearOff.IssuedDate;
					}
					return _IssuedDate_W;
				}
			}

			public AggregateParameter IsConfirmed
		    {
				get
		        {
					if(_IsConfirmed_W == null)
	        	    {
						_IsConfirmed_W = TearOff.IsConfirmed;
					}
					return _IsConfirmed_W;
				}
			}

			public AggregateParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			public AggregateParameter SavedDate
		    {
				get
		        {
					if(_SavedDate_W == null)
	        	    {
						_SavedDate_W = TearOff.SavedDate;
					}
					return _SavedDate_W;
				}
			}

			public AggregateParameter PickedDate
		    {
				get
		        {
					if(_PickedDate_W == null)
	        	    {
						_PickedDate_W = TearOff.PickedDate;
					}
					return _PickedDate_W;
				}
			}

			public AggregateParameter PickedBy
		    {
				get
		        {
					if(_PickedBy_W == null)
	        	    {
						_PickedBy_W = TearOff.PickedBy;
					}
					return _PickedBy_W;
				}
			}

			public AggregateParameter PrintedBy
		    {
				get
		        {
					if(_PrintedBy_W == null)
	        	    {
						_PrintedBy_W = TearOff.PrintedBy;
					}
					return _PrintedBy_W;
				}
			}

			public AggregateParameter PickListTypeID
		    {
				get
		        {
					if(_PickListTypeID_W == null)
	        	    {
						_PickListTypeID_W = TearOff.PickListTypeID;
					}
					return _PickListTypeID_W;
				}
			}

			public AggregateParameter WarehouseID
		    {
				get
		        {
					if(_WarehouseID_W == null)
	        	    {
						_WarehouseID_W = TearOff.WarehouseID;
					}
					return _WarehouseID_W;
				}
			}

			public AggregateParameter IsWarehouseConfirmed
		    {
				get
		        {
					if(_IsWarehouseConfirmed_W == null)
	        	    {
						_IsWarehouseConfirmed_W = TearOff.IsWarehouseConfirmed;
					}
					return _IsWarehouseConfirmed_W;
				}
			}

			public AggregateParameter WarehouseConfirmedByUserID
		    {
				get
		        {
					if(_WarehouseConfirmedByUserID_W == null)
	        	    {
						_WarehouseConfirmedByUserID_W = TearOff.WarehouseConfirmedByUserID;
					}
					return _WarehouseConfirmedByUserID_W;
				}
			}

			public AggregateParameter PrintedID
		    {
				get
		        {
					if(_PrintedID_W == null)
	        	    {
						_PrintedID_W = TearOff.PrintedID;
					}
					return _PrintedID_W;
				}
			}

			public AggregateParameter WarehouseConfirmedDate
		    {
				get
		        {
					if(_WarehouseConfirmedDate_W == null)
	        	    {
						_WarehouseConfirmedDate_W = TearOff.WarehouseConfirmedDate;
					}
					return _WarehouseConfirmedDate_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _OrderID_W = null;
			private AggregateParameter _PickType_W = null;
			private AggregateParameter _IssuedDate_W = null;
			private AggregateParameter _IsConfirmed_W = null;
			private AggregateParameter _Remark_W = null;
			private AggregateParameter _SavedDate_W = null;
			private AggregateParameter _PickedDate_W = null;
			private AggregateParameter _PickedBy_W = null;
			private AggregateParameter _PrintedBy_W = null;
			private AggregateParameter _PickListTypeID_W = null;
			private AggregateParameter _WarehouseID_W = null;
			private AggregateParameter _IsWarehouseConfirmed_W = null;
			private AggregateParameter _WarehouseConfirmedByUserID_W = null;
			private AggregateParameter _PrintedID_W = null;
			private AggregateParameter _WarehouseConfirmedDate_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_OrderID_W = null;
				_PickType_W = null;
				_IssuedDate_W = null;
				_IsConfirmed_W = null;
				_Remark_W = null;
				_SavedDate_W = null;
				_PickedDate_W = null;
				_PickedBy_W = null;
				_PrintedBy_W = null;
				_PickListTypeID_W = null;
				_WarehouseID_W = null;
				_IsWarehouseConfirmed_W = null;
				_WarehouseConfirmedByUserID_W = null;
				_PrintedID_W = null;
				_WarehouseConfirmedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PickListInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PickListUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PickListDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrderID);
			p.SourceColumn = ColumnNames.OrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PickType);
			p.SourceColumn = ColumnNames.PickType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IssuedDate);
			p.SourceColumn = ColumnNames.IssuedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsConfirmed);
			p.SourceColumn = ColumnNames.IsConfirmed;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Remark);
			p.SourceColumn = ColumnNames.Remark;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SavedDate);
			p.SourceColumn = ColumnNames.SavedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PickedDate);
			p.SourceColumn = ColumnNames.PickedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PickedBy);
			p.SourceColumn = ColumnNames.PickedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PrintedBy);
			p.SourceColumn = ColumnNames.PrintedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PickListTypeID);
			p.SourceColumn = ColumnNames.PickListTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WarehouseID);
			p.SourceColumn = ColumnNames.WarehouseID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsWarehouseConfirmed);
			p.SourceColumn = ColumnNames.IsWarehouseConfirmed;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WarehouseConfirmedByUserID);
			p.SourceColumn = ColumnNames.WarehouseConfirmedByUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PrintedID);
			p.SourceColumn = ColumnNames.PrintedID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WarehouseConfirmedDate);
			p.SourceColumn = ColumnNames.WarehouseConfirmedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
