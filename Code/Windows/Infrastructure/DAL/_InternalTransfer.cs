
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _InternalTransfer : SqlClientEntity
	{
		public _InternalTransfer()
		{
			this.QuerySource = "InternalTransfer";
			this.MappingName = "InternalTransfer";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InternalTransferLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InternalTransferLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ItemID
			{
				get
				{
					return new SqlParameter("@ItemID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FromPalletLocationID
			{
				get
				{
					return new SqlParameter("@FromPalletLocationID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ToPalletLocationID
			{
				get
				{
					return new SqlParameter("@ToPalletLocationID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter BatchNumber
			{
				get
				{
					return new SqlParameter("@BatchNumber", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter ExpireDate
			{
				get
				{
					return new SqlParameter("@ExpireDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ReceiveDocID
			{
				get
				{
					return new SqlParameter("@ReceiveDocID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ManufacturerID
			{
				get
				{
					return new SqlParameter("@ManufacturerID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter BoxLevel
			{
				get
				{
					return new SqlParameter("@BoxLevel", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter QtyPerPack
			{
				get
				{
					return new SqlParameter("@QtyPerPack", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Packs
			{
				get
				{
					return new SqlParameter("@Packs", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter QuantityInBU
			{
				get
				{
					return new SqlParameter("@QuantityInBU", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter Type
			{
				get
				{
					return new SqlParameter("@Type", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter IssuedDate
			{
				get
				{
					return new SqlParameter("@IssuedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ConfirmedDate
			{
				get
				{
					return new SqlParameter("@ConfirmedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Status
			{
				get
				{
					return new SqlParameter("@Status", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PrintNumber
			{
				get
				{
					return new SqlParameter("@PrintNumber", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string ItemID = "ItemID";
            public const string FromPalletLocationID = "FromPalletLocationID";
            public const string ToPalletLocationID = "ToPalletLocationID";
            public const string BatchNumber = "BatchNumber";
            public const string ExpireDate = "ExpireDate";
            public const string ReceiveDocID = "ReceiveDocID";
            public const string ManufacturerID = "ManufacturerID";
            public const string BoxLevel = "BoxLevel";
            public const string QtyPerPack = "QtyPerPack";
            public const string Packs = "Packs";
            public const string QuantityInBU = "QuantityInBU";
            public const string Type = "Type";
            public const string IssuedDate = "IssuedDate";
            public const string ConfirmedDate = "ConfirmedDate";
            public const string Status = "Status";
            public const string PrintNumber = "PrintNumber";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _InternalTransfer.PropertyNames.ID;
					ht[ItemID] = _InternalTransfer.PropertyNames.ItemID;
					ht[FromPalletLocationID] = _InternalTransfer.PropertyNames.FromPalletLocationID;
					ht[ToPalletLocationID] = _InternalTransfer.PropertyNames.ToPalletLocationID;
					ht[BatchNumber] = _InternalTransfer.PropertyNames.BatchNumber;
					ht[ExpireDate] = _InternalTransfer.PropertyNames.ExpireDate;
					ht[ReceiveDocID] = _InternalTransfer.PropertyNames.ReceiveDocID;
					ht[ManufacturerID] = _InternalTransfer.PropertyNames.ManufacturerID;
					ht[BoxLevel] = _InternalTransfer.PropertyNames.BoxLevel;
					ht[QtyPerPack] = _InternalTransfer.PropertyNames.QtyPerPack;
					ht[Packs] = _InternalTransfer.PropertyNames.Packs;
					ht[QuantityInBU] = _InternalTransfer.PropertyNames.QuantityInBU;
					ht[Type] = _InternalTransfer.PropertyNames.Type;
					ht[IssuedDate] = _InternalTransfer.PropertyNames.IssuedDate;
					ht[ConfirmedDate] = _InternalTransfer.PropertyNames.ConfirmedDate;
					ht[Status] = _InternalTransfer.PropertyNames.Status;
					ht[PrintNumber] = _InternalTransfer.PropertyNames.PrintNumber;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string ItemID = "ItemID";
            public const string FromPalletLocationID = "FromPalletLocationID";
            public const string ToPalletLocationID = "ToPalletLocationID";
            public const string BatchNumber = "BatchNumber";
            public const string ExpireDate = "ExpireDate";
            public const string ReceiveDocID = "ReceiveDocID";
            public const string ManufacturerID = "ManufacturerID";
            public const string BoxLevel = "BoxLevel";
            public const string QtyPerPack = "QtyPerPack";
            public const string Packs = "Packs";
            public const string QuantityInBU = "QuantityInBU";
            public const string Type = "Type";
            public const string IssuedDate = "IssuedDate";
            public const string ConfirmedDate = "ConfirmedDate";
            public const string Status = "Status";
            public const string PrintNumber = "PrintNumber";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _InternalTransfer.ColumnNames.ID;
					ht[ItemID] = _InternalTransfer.ColumnNames.ItemID;
					ht[FromPalletLocationID] = _InternalTransfer.ColumnNames.FromPalletLocationID;
					ht[ToPalletLocationID] = _InternalTransfer.ColumnNames.ToPalletLocationID;
					ht[BatchNumber] = _InternalTransfer.ColumnNames.BatchNumber;
					ht[ExpireDate] = _InternalTransfer.ColumnNames.ExpireDate;
					ht[ReceiveDocID] = _InternalTransfer.ColumnNames.ReceiveDocID;
					ht[ManufacturerID] = _InternalTransfer.ColumnNames.ManufacturerID;
					ht[BoxLevel] = _InternalTransfer.ColumnNames.BoxLevel;
					ht[QtyPerPack] = _InternalTransfer.ColumnNames.QtyPerPack;
					ht[Packs] = _InternalTransfer.ColumnNames.Packs;
					ht[QuantityInBU] = _InternalTransfer.ColumnNames.QuantityInBU;
					ht[Type] = _InternalTransfer.ColumnNames.Type;
					ht[IssuedDate] = _InternalTransfer.ColumnNames.IssuedDate;
					ht[ConfirmedDate] = _InternalTransfer.ColumnNames.ConfirmedDate;
					ht[Status] = _InternalTransfer.ColumnNames.Status;
					ht[PrintNumber] = _InternalTransfer.ColumnNames.PrintNumber;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string ItemID = "s_ItemID";
            public const string FromPalletLocationID = "s_FromPalletLocationID";
            public const string ToPalletLocationID = "s_ToPalletLocationID";
            public const string BatchNumber = "s_BatchNumber";
            public const string ExpireDate = "s_ExpireDate";
            public const string ReceiveDocID = "s_ReceiveDocID";
            public const string ManufacturerID = "s_ManufacturerID";
            public const string BoxLevel = "s_BoxLevel";
            public const string QtyPerPack = "s_QtyPerPack";
            public const string Packs = "s_Packs";
            public const string QuantityInBU = "s_QuantityInBU";
            public const string Type = "s_Type";
            public const string IssuedDate = "s_IssuedDate";
            public const string ConfirmedDate = "s_ConfirmedDate";
            public const string Status = "s_Status";
            public const string PrintNumber = "s_PrintNumber";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual int ItemID
	    {
			get
	        {
				return base.Getint(ColumnNames.ItemID);
			}
			set
	        {
				base.Setint(ColumnNames.ItemID, value);
			}
		}

		public virtual int FromPalletLocationID
	    {
			get
	        {
				return base.Getint(ColumnNames.FromPalletLocationID);
			}
			set
	        {
				base.Setint(ColumnNames.FromPalletLocationID, value);
			}
		}

		public virtual int ToPalletLocationID
	    {
			get
	        {
				return base.Getint(ColumnNames.ToPalletLocationID);
			}
			set
	        {
				base.Setint(ColumnNames.ToPalletLocationID, value);
			}
		}

		public virtual string BatchNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.BatchNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.BatchNumber, value);
			}
		}

		public virtual DateTime ExpireDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ExpireDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ExpireDate, value);
			}
		}

		public virtual int ReceiveDocID
	    {
			get
	        {
				return base.Getint(ColumnNames.ReceiveDocID);
			}
			set
	        {
				base.Setint(ColumnNames.ReceiveDocID, value);
			}
		}

		public virtual int ManufacturerID
	    {
			get
	        {
				return base.Getint(ColumnNames.ManufacturerID);
			}
			set
	        {
				base.Setint(ColumnNames.ManufacturerID, value);
			}
		}

		public virtual int BoxLevel
	    {
			get
	        {
				return base.Getint(ColumnNames.BoxLevel);
			}
			set
	        {
				base.Setint(ColumnNames.BoxLevel, value);
			}
		}

		public virtual int QtyPerPack
	    {
			get
	        {
				return base.Getint(ColumnNames.QtyPerPack);
			}
			set
	        {
				base.Setint(ColumnNames.QtyPerPack, value);
			}
		}

		public virtual decimal Packs
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Packs);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Packs, value);
			}
		}

		public virtual decimal QuantityInBU
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.QuantityInBU);
			}
			set
	        {
				base.Setdecimal(ColumnNames.QuantityInBU, value);
			}
		}

		public virtual string Type
	    {
			get
	        {
				return base.Getstring(ColumnNames.Type);
			}
			set
	        {
				base.Setstring(ColumnNames.Type, value);
			}
		}

		public virtual DateTime IssuedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.IssuedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.IssuedDate, value);
			}
		}

		public virtual DateTime ConfirmedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ConfirmedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ConfirmedDate, value);
			}
		}

		public virtual int Status
	    {
			get
	        {
				return base.Getint(ColumnNames.Status);
			}
			set
	        {
				base.Setint(ColumnNames.Status, value);
			}
		}

		public virtual int PrintNumber
	    {
			get
	        {
				return base.Getint(ColumnNames.PrintNumber);
			}
			set
	        {
				base.Setint(ColumnNames.PrintNumber, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_ItemID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ItemID) ? string.Empty : base.GetintAsString(ColumnNames.ItemID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ItemID);
				else
					this.ItemID = base.SetintAsString(ColumnNames.ItemID, value);
			}
		}

		public virtual string s_FromPalletLocationID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FromPalletLocationID) ? string.Empty : base.GetintAsString(ColumnNames.FromPalletLocationID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FromPalletLocationID);
				else
					this.FromPalletLocationID = base.SetintAsString(ColumnNames.FromPalletLocationID, value);
			}
		}

		public virtual string s_ToPalletLocationID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ToPalletLocationID) ? string.Empty : base.GetintAsString(ColumnNames.ToPalletLocationID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ToPalletLocationID);
				else
					this.ToPalletLocationID = base.SetintAsString(ColumnNames.ToPalletLocationID, value);
			}
		}

		public virtual string s_BatchNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BatchNumber) ? string.Empty : base.GetstringAsString(ColumnNames.BatchNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BatchNumber);
				else
					this.BatchNumber = base.SetstringAsString(ColumnNames.BatchNumber, value);
			}
		}

		public virtual string s_ExpireDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ExpireDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ExpireDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ExpireDate);
				else
					this.ExpireDate = base.SetDateTimeAsString(ColumnNames.ExpireDate, value);
			}
		}

		public virtual string s_ReceiveDocID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceiveDocID) ? string.Empty : base.GetintAsString(ColumnNames.ReceiveDocID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceiveDocID);
				else
					this.ReceiveDocID = base.SetintAsString(ColumnNames.ReceiveDocID, value);
			}
		}

		public virtual string s_ManufacturerID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ManufacturerID) ? string.Empty : base.GetintAsString(ColumnNames.ManufacturerID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ManufacturerID);
				else
					this.ManufacturerID = base.SetintAsString(ColumnNames.ManufacturerID, value);
			}
		}

		public virtual string s_BoxLevel
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BoxLevel) ? string.Empty : base.GetintAsString(ColumnNames.BoxLevel);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BoxLevel);
				else
					this.BoxLevel = base.SetintAsString(ColumnNames.BoxLevel, value);
			}
		}

		public virtual string s_QtyPerPack
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.QtyPerPack) ? string.Empty : base.GetintAsString(ColumnNames.QtyPerPack);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.QtyPerPack);
				else
					this.QtyPerPack = base.SetintAsString(ColumnNames.QtyPerPack, value);
			}
		}

		public virtual string s_Packs
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Packs) ? string.Empty : base.GetdecimalAsString(ColumnNames.Packs);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Packs);
				else
					this.Packs = base.SetdecimalAsString(ColumnNames.Packs, value);
			}
		}

		public virtual string s_QuantityInBU
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.QuantityInBU) ? string.Empty : base.GetdecimalAsString(ColumnNames.QuantityInBU);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.QuantityInBU);
				else
					this.QuantityInBU = base.SetdecimalAsString(ColumnNames.QuantityInBU, value);
			}
		}

		public virtual string s_Type
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Type) ? string.Empty : base.GetstringAsString(ColumnNames.Type);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Type);
				else
					this.Type = base.SetstringAsString(ColumnNames.Type, value);
			}
		}

		public virtual string s_IssuedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IssuedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.IssuedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IssuedDate);
				else
					this.IssuedDate = base.SetDateTimeAsString(ColumnNames.IssuedDate, value);
			}
		}

		public virtual string s_ConfirmedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ConfirmedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ConfirmedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ConfirmedDate);
				else
					this.ConfirmedDate = base.SetDateTimeAsString(ColumnNames.ConfirmedDate, value);
			}
		}

		public virtual string s_Status
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Status) ? string.Empty : base.GetintAsString(ColumnNames.Status);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Status);
				else
					this.Status = base.SetintAsString(ColumnNames.Status, value);
			}
		}

		public virtual string s_PrintNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PrintNumber) ? string.Empty : base.GetintAsString(ColumnNames.PrintNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PrintNumber);
				else
					this.PrintNumber = base.SetintAsString(ColumnNames.PrintNumber, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ItemID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FromPalletLocationID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FromPalletLocationID, Parameters.FromPalletLocationID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ToPalletLocationID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ToPalletLocationID, Parameters.ToPalletLocationID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BatchNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BatchNumber, Parameters.BatchNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ExpireDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ExpireDate, Parameters.ExpireDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReceiveDocID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceiveDocID, Parameters.ReceiveDocID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ManufacturerID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ManufacturerID, Parameters.ManufacturerID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BoxLevel
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BoxLevel, Parameters.BoxLevel);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter QtyPerPack
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.QtyPerPack, Parameters.QtyPerPack);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Packs
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Packs, Parameters.Packs);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter QuantityInBU
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.QuantityInBU, Parameters.QuantityInBU);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Type
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Type, Parameters.Type);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IssuedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IssuedDate, Parameters.IssuedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ConfirmedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ConfirmedDate, Parameters.ConfirmedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Status
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Status, Parameters.Status);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PrintNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PrintNumber, Parameters.PrintNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public WhereParameter FromPalletLocationID
		    {
				get
		        {
					if(_FromPalletLocationID_W == null)
	        	    {
						_FromPalletLocationID_W = TearOff.FromPalletLocationID;
					}
					return _FromPalletLocationID_W;
				}
			}

			public WhereParameter ToPalletLocationID
		    {
				get
		        {
					if(_ToPalletLocationID_W == null)
	        	    {
						_ToPalletLocationID_W = TearOff.ToPalletLocationID;
					}
					return _ToPalletLocationID_W;
				}
			}

			public WhereParameter BatchNumber
		    {
				get
		        {
					if(_BatchNumber_W == null)
	        	    {
						_BatchNumber_W = TearOff.BatchNumber;
					}
					return _BatchNumber_W;
				}
			}

			public WhereParameter ExpireDate
		    {
				get
		        {
					if(_ExpireDate_W == null)
	        	    {
						_ExpireDate_W = TearOff.ExpireDate;
					}
					return _ExpireDate_W;
				}
			}

			public WhereParameter ReceiveDocID
		    {
				get
		        {
					if(_ReceiveDocID_W == null)
	        	    {
						_ReceiveDocID_W = TearOff.ReceiveDocID;
					}
					return _ReceiveDocID_W;
				}
			}

			public WhereParameter ManufacturerID
		    {
				get
		        {
					if(_ManufacturerID_W == null)
	        	    {
						_ManufacturerID_W = TearOff.ManufacturerID;
					}
					return _ManufacturerID_W;
				}
			}

			public WhereParameter BoxLevel
		    {
				get
		        {
					if(_BoxLevel_W == null)
	        	    {
						_BoxLevel_W = TearOff.BoxLevel;
					}
					return _BoxLevel_W;
				}
			}

			public WhereParameter QtyPerPack
		    {
				get
		        {
					if(_QtyPerPack_W == null)
	        	    {
						_QtyPerPack_W = TearOff.QtyPerPack;
					}
					return _QtyPerPack_W;
				}
			}

			public WhereParameter Packs
		    {
				get
		        {
					if(_Packs_W == null)
	        	    {
						_Packs_W = TearOff.Packs;
					}
					return _Packs_W;
				}
			}

			public WhereParameter QuantityInBU
		    {
				get
		        {
					if(_QuantityInBU_W == null)
	        	    {
						_QuantityInBU_W = TearOff.QuantityInBU;
					}
					return _QuantityInBU_W;
				}
			}

			public WhereParameter Type
		    {
				get
		        {
					if(_Type_W == null)
	        	    {
						_Type_W = TearOff.Type;
					}
					return _Type_W;
				}
			}

			public WhereParameter IssuedDate
		    {
				get
		        {
					if(_IssuedDate_W == null)
	        	    {
						_IssuedDate_W = TearOff.IssuedDate;
					}
					return _IssuedDate_W;
				}
			}

			public WhereParameter ConfirmedDate
		    {
				get
		        {
					if(_ConfirmedDate_W == null)
	        	    {
						_ConfirmedDate_W = TearOff.ConfirmedDate;
					}
					return _ConfirmedDate_W;
				}
			}

			public WhereParameter Status
		    {
				get
		        {
					if(_Status_W == null)
	        	    {
						_Status_W = TearOff.Status;
					}
					return _Status_W;
				}
			}

			public WhereParameter PrintNumber
		    {
				get
		        {
					if(_PrintNumber_W == null)
	        	    {
						_PrintNumber_W = TearOff.PrintNumber;
					}
					return _PrintNumber_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _ItemID_W = null;
			private WhereParameter _FromPalletLocationID_W = null;
			private WhereParameter _ToPalletLocationID_W = null;
			private WhereParameter _BatchNumber_W = null;
			private WhereParameter _ExpireDate_W = null;
			private WhereParameter _ReceiveDocID_W = null;
			private WhereParameter _ManufacturerID_W = null;
			private WhereParameter _BoxLevel_W = null;
			private WhereParameter _QtyPerPack_W = null;
			private WhereParameter _Packs_W = null;
			private WhereParameter _QuantityInBU_W = null;
			private WhereParameter _Type_W = null;
			private WhereParameter _IssuedDate_W = null;
			private WhereParameter _ConfirmedDate_W = null;
			private WhereParameter _Status_W = null;
			private WhereParameter _PrintNumber_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_ItemID_W = null;
				_FromPalletLocationID_W = null;
				_ToPalletLocationID_W = null;
				_BatchNumber_W = null;
				_ExpireDate_W = null;
				_ReceiveDocID_W = null;
				_ManufacturerID_W = null;
				_BoxLevel_W = null;
				_QtyPerPack_W = null;
				_Packs_W = null;
				_QuantityInBU_W = null;
				_Type_W = null;
				_IssuedDate_W = null;
				_ConfirmedDate_W = null;
				_Status_W = null;
				_PrintNumber_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ItemID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FromPalletLocationID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FromPalletLocationID, Parameters.FromPalletLocationID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ToPalletLocationID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ToPalletLocationID, Parameters.ToPalletLocationID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BatchNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BatchNumber, Parameters.BatchNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ExpireDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExpireDate, Parameters.ExpireDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReceiveDocID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceiveDocID, Parameters.ReceiveDocID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ManufacturerID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ManufacturerID, Parameters.ManufacturerID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BoxLevel
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BoxLevel, Parameters.BoxLevel);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter QtyPerPack
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.QtyPerPack, Parameters.QtyPerPack);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Packs
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Packs, Parameters.Packs);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter QuantityInBU
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.QuantityInBU, Parameters.QuantityInBU);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Type
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Type, Parameters.Type);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IssuedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IssuedDate, Parameters.IssuedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ConfirmedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ConfirmedDate, Parameters.ConfirmedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Status
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Status, Parameters.Status);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PrintNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PrintNumber, Parameters.PrintNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public AggregateParameter FromPalletLocationID
		    {
				get
		        {
					if(_FromPalletLocationID_W == null)
	        	    {
						_FromPalletLocationID_W = TearOff.FromPalletLocationID;
					}
					return _FromPalletLocationID_W;
				}
			}

			public AggregateParameter ToPalletLocationID
		    {
				get
		        {
					if(_ToPalletLocationID_W == null)
	        	    {
						_ToPalletLocationID_W = TearOff.ToPalletLocationID;
					}
					return _ToPalletLocationID_W;
				}
			}

			public AggregateParameter BatchNumber
		    {
				get
		        {
					if(_BatchNumber_W == null)
	        	    {
						_BatchNumber_W = TearOff.BatchNumber;
					}
					return _BatchNumber_W;
				}
			}

			public AggregateParameter ExpireDate
		    {
				get
		        {
					if(_ExpireDate_W == null)
	        	    {
						_ExpireDate_W = TearOff.ExpireDate;
					}
					return _ExpireDate_W;
				}
			}

			public AggregateParameter ReceiveDocID
		    {
				get
		        {
					if(_ReceiveDocID_W == null)
	        	    {
						_ReceiveDocID_W = TearOff.ReceiveDocID;
					}
					return _ReceiveDocID_W;
				}
			}

			public AggregateParameter ManufacturerID
		    {
				get
		        {
					if(_ManufacturerID_W == null)
	        	    {
						_ManufacturerID_W = TearOff.ManufacturerID;
					}
					return _ManufacturerID_W;
				}
			}

			public AggregateParameter BoxLevel
		    {
				get
		        {
					if(_BoxLevel_W == null)
	        	    {
						_BoxLevel_W = TearOff.BoxLevel;
					}
					return _BoxLevel_W;
				}
			}

			public AggregateParameter QtyPerPack
		    {
				get
		        {
					if(_QtyPerPack_W == null)
	        	    {
						_QtyPerPack_W = TearOff.QtyPerPack;
					}
					return _QtyPerPack_W;
				}
			}

			public AggregateParameter Packs
		    {
				get
		        {
					if(_Packs_W == null)
	        	    {
						_Packs_W = TearOff.Packs;
					}
					return _Packs_W;
				}
			}

			public AggregateParameter QuantityInBU
		    {
				get
		        {
					if(_QuantityInBU_W == null)
	        	    {
						_QuantityInBU_W = TearOff.QuantityInBU;
					}
					return _QuantityInBU_W;
				}
			}

			public AggregateParameter Type
		    {
				get
		        {
					if(_Type_W == null)
	        	    {
						_Type_W = TearOff.Type;
					}
					return _Type_W;
				}
			}

			public AggregateParameter IssuedDate
		    {
				get
		        {
					if(_IssuedDate_W == null)
	        	    {
						_IssuedDate_W = TearOff.IssuedDate;
					}
					return _IssuedDate_W;
				}
			}

			public AggregateParameter ConfirmedDate
		    {
				get
		        {
					if(_ConfirmedDate_W == null)
	        	    {
						_ConfirmedDate_W = TearOff.ConfirmedDate;
					}
					return _ConfirmedDate_W;
				}
			}

			public AggregateParameter Status
		    {
				get
		        {
					if(_Status_W == null)
	        	    {
						_Status_W = TearOff.Status;
					}
					return _Status_W;
				}
			}

			public AggregateParameter PrintNumber
		    {
				get
		        {
					if(_PrintNumber_W == null)
	        	    {
						_PrintNumber_W = TearOff.PrintNumber;
					}
					return _PrintNumber_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _ItemID_W = null;
			private AggregateParameter _FromPalletLocationID_W = null;
			private AggregateParameter _ToPalletLocationID_W = null;
			private AggregateParameter _BatchNumber_W = null;
			private AggregateParameter _ExpireDate_W = null;
			private AggregateParameter _ReceiveDocID_W = null;
			private AggregateParameter _ManufacturerID_W = null;
			private AggregateParameter _BoxLevel_W = null;
			private AggregateParameter _QtyPerPack_W = null;
			private AggregateParameter _Packs_W = null;
			private AggregateParameter _QuantityInBU_W = null;
			private AggregateParameter _Type_W = null;
			private AggregateParameter _IssuedDate_W = null;
			private AggregateParameter _ConfirmedDate_W = null;
			private AggregateParameter _Status_W = null;
			private AggregateParameter _PrintNumber_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_ItemID_W = null;
				_FromPalletLocationID_W = null;
				_ToPalletLocationID_W = null;
				_BatchNumber_W = null;
				_ExpireDate_W = null;
				_ReceiveDocID_W = null;
				_ManufacturerID_W = null;
				_BoxLevel_W = null;
				_QtyPerPack_W = null;
				_Packs_W = null;
				_QuantityInBU_W = null;
				_Type_W = null;
				_IssuedDate_W = null;
				_ConfirmedDate_W = null;
				_Status_W = null;
				_PrintNumber_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InternalTransferInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InternalTransferUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InternalTransferDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ItemID);
			p.SourceColumn = ColumnNames.ItemID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FromPalletLocationID);
			p.SourceColumn = ColumnNames.FromPalletLocationID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ToPalletLocationID);
			p.SourceColumn = ColumnNames.ToPalletLocationID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BatchNumber);
			p.SourceColumn = ColumnNames.BatchNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ExpireDate);
			p.SourceColumn = ColumnNames.ExpireDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReceiveDocID);
			p.SourceColumn = ColumnNames.ReceiveDocID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ManufacturerID);
			p.SourceColumn = ColumnNames.ManufacturerID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BoxLevel);
			p.SourceColumn = ColumnNames.BoxLevel;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.QtyPerPack);
			p.SourceColumn = ColumnNames.QtyPerPack;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Packs);
			p.SourceColumn = ColumnNames.Packs;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.QuantityInBU);
			p.SourceColumn = ColumnNames.QuantityInBU;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Type);
			p.SourceColumn = ColumnNames.Type;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IssuedDate);
			p.SourceColumn = ColumnNames.IssuedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ConfirmedDate);
			p.SourceColumn = ColumnNames.ConfirmedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Status);
			p.SourceColumn = ColumnNames.Status;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PrintNumber);
			p.SourceColumn = ColumnNames.PrintNumber;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
