
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _MovingAverageHistory : SqlClientEntity
	{
		public _MovingAverageHistory()
		{
			this.QuerySource = "MovingAverageHistory";
			this.MappingName = "MovingAverageHistory";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_MovingAverageHistoryLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_MovingAverageHistoryLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ItemID
			{
				get
				{
					return new SqlParameter("@ItemID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SupplierID
			{
				get
				{
					return new SqlParameter("@SupplierID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SOHWhenApplied
			{
				get
				{
					return new SqlParameter("@SOHWhenApplied", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter Price
			{
				get
				{
					return new SqlParameter("@Price", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Date
			{
				get
				{
					return new SqlParameter("@Date", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StoreID
			{
				get
				{
					return new SqlParameter("@StoreID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Insurance
			{
				get
				{
					return new SqlParameter("@Insurance", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter ManufacturerID
			{
				get
				{
					return new SqlParameter("@ManufacturerID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UnitID
			{
				get
				{
					return new SqlParameter("@UnitID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ReceiptId
			{
				get
				{
					return new SqlParameter("@ReceiptId", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UPUnitCost
			{
				get
				{
					return new SqlParameter("@UPUnitCost", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter UPQty
			{
				get
				{
					return new SqlParameter("@UPQty", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter UPTotalCost
			{
				get
				{
					return new SqlParameter("@UPTotalCost", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter PQty
			{
				get
				{
					return new SqlParameter("@PQty", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter PUnitCost
			{
				get
				{
					return new SqlParameter("@PUnitCost", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter PTotalCost
			{
				get
				{
					return new SqlParameter("@PTotalCost", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter NTotalCost
			{
				get
				{
					return new SqlParameter("@NTotalCost", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Remark
			{
				get
				{
					return new SqlParameter("@Remark", SqlDbType.Text, 2147483647);
				}
			}
			
			public static SqlParameter NQty
			{
				get
				{
					return new SqlParameter("@NQty", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter NUnitCost
			{
				get
				{
					return new SqlParameter("@NUnitCost", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter PriceDifference
			{
				get
				{
					return new SqlParameter("@PriceDifference", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Margin
			{
				get
				{
					return new SqlParameter("@Margin", SqlDbType.Float, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string ItemID = "ItemID";
            public const string SupplierID = "SupplierID";
            public const string SOHWhenApplied = "SOHWhenApplied";
            public const string Price = "Price";
            public const string Date = "Date";
            public const string UserID = "UserID";
            public const string StoreID = "StoreID";
            public const string Insurance = "Insurance";
            public const string ManufacturerID = "ManufacturerID";
            public const string UnitID = "UnitID";
            public const string ReceiptId = "ReceiptId";
            public const string UPUnitCost = "UPUnitCost";
            public const string UPQty = "UPQty";
            public const string UPTotalCost = "UPTotalCost";
            public const string PQty = "PQty";
            public const string PUnitCost = "PUnitCost";
            public const string PTotalCost = "PTotalCost";
            public const string NTotalCost = "NTotalCost";
            public const string Remark = "Remark";
            public const string NQty = "NQty";
            public const string NUnitCost = "NUnitCost";
            public const string PriceDifference = "PriceDifference";
            public const string Margin = "Margin";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _MovingAverageHistory.PropertyNames.ID;
					ht[ItemID] = _MovingAverageHistory.PropertyNames.ItemID;
					ht[SupplierID] = _MovingAverageHistory.PropertyNames.SupplierID;
					ht[SOHWhenApplied] = _MovingAverageHistory.PropertyNames.SOHWhenApplied;
					ht[Price] = _MovingAverageHistory.PropertyNames.Price;
					ht[Date] = _MovingAverageHistory.PropertyNames.Date;
					ht[UserID] = _MovingAverageHistory.PropertyNames.UserID;
					ht[StoreID] = _MovingAverageHistory.PropertyNames.StoreID;
					ht[Insurance] = _MovingAverageHistory.PropertyNames.Insurance;
					ht[ManufacturerID] = _MovingAverageHistory.PropertyNames.ManufacturerID;
					ht[UnitID] = _MovingAverageHistory.PropertyNames.UnitID;
					ht[ReceiptId] = _MovingAverageHistory.PropertyNames.ReceiptId;
					ht[UPUnitCost] = _MovingAverageHistory.PropertyNames.UPUnitCost;
					ht[UPQty] = _MovingAverageHistory.PropertyNames.UPQty;
					ht[UPTotalCost] = _MovingAverageHistory.PropertyNames.UPTotalCost;
					ht[PQty] = _MovingAverageHistory.PropertyNames.PQty;
					ht[PUnitCost] = _MovingAverageHistory.PropertyNames.PUnitCost;
					ht[PTotalCost] = _MovingAverageHistory.PropertyNames.PTotalCost;
					ht[NTotalCost] = _MovingAverageHistory.PropertyNames.NTotalCost;
					ht[Remark] = _MovingAverageHistory.PropertyNames.Remark;
					ht[NQty] = _MovingAverageHistory.PropertyNames.NQty;
					ht[NUnitCost] = _MovingAverageHistory.PropertyNames.NUnitCost;
					ht[PriceDifference] = _MovingAverageHistory.PropertyNames.PriceDifference;
					ht[Margin] = _MovingAverageHistory.PropertyNames.Margin;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string ItemID = "ItemID";
            public const string SupplierID = "SupplierID";
            public const string SOHWhenApplied = "SOHWhenApplied";
            public const string Price = "Price";
            public const string Date = "Date";
            public const string UserID = "UserID";
            public const string StoreID = "StoreID";
            public const string Insurance = "Insurance";
            public const string ManufacturerID = "ManufacturerID";
            public const string UnitID = "UnitID";
            public const string ReceiptId = "ReceiptId";
            public const string UPUnitCost = "UPUnitCost";
            public const string UPQty = "UPQty";
            public const string UPTotalCost = "UPTotalCost";
            public const string PQty = "PQty";
            public const string PUnitCost = "PUnitCost";
            public const string PTotalCost = "PTotalCost";
            public const string NTotalCost = "NTotalCost";
            public const string Remark = "Remark";
            public const string NQty = "NQty";
            public const string NUnitCost = "NUnitCost";
            public const string PriceDifference = "PriceDifference";
            public const string Margin = "Margin";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _MovingAverageHistory.ColumnNames.ID;
					ht[ItemID] = _MovingAverageHistory.ColumnNames.ItemID;
					ht[SupplierID] = _MovingAverageHistory.ColumnNames.SupplierID;
					ht[SOHWhenApplied] = _MovingAverageHistory.ColumnNames.SOHWhenApplied;
					ht[Price] = _MovingAverageHistory.ColumnNames.Price;
					ht[Date] = _MovingAverageHistory.ColumnNames.Date;
					ht[UserID] = _MovingAverageHistory.ColumnNames.UserID;
					ht[StoreID] = _MovingAverageHistory.ColumnNames.StoreID;
					ht[Insurance] = _MovingAverageHistory.ColumnNames.Insurance;
					ht[ManufacturerID] = _MovingAverageHistory.ColumnNames.ManufacturerID;
					ht[UnitID] = _MovingAverageHistory.ColumnNames.UnitID;
					ht[ReceiptId] = _MovingAverageHistory.ColumnNames.ReceiptId;
					ht[UPUnitCost] = _MovingAverageHistory.ColumnNames.UPUnitCost;
					ht[UPQty] = _MovingAverageHistory.ColumnNames.UPQty;
					ht[UPTotalCost] = _MovingAverageHistory.ColumnNames.UPTotalCost;
					ht[PQty] = _MovingAverageHistory.ColumnNames.PQty;
					ht[PUnitCost] = _MovingAverageHistory.ColumnNames.PUnitCost;
					ht[PTotalCost] = _MovingAverageHistory.ColumnNames.PTotalCost;
					ht[NTotalCost] = _MovingAverageHistory.ColumnNames.NTotalCost;
					ht[Remark] = _MovingAverageHistory.ColumnNames.Remark;
					ht[NQty] = _MovingAverageHistory.ColumnNames.NQty;
					ht[NUnitCost] = _MovingAverageHistory.ColumnNames.NUnitCost;
					ht[PriceDifference] = _MovingAverageHistory.ColumnNames.PriceDifference;
					ht[Margin] = _MovingAverageHistory.ColumnNames.Margin;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string ItemID = "s_ItemID";
            public const string SupplierID = "s_SupplierID";
            public const string SOHWhenApplied = "s_SOHWhenApplied";
            public const string Price = "s_Price";
            public const string Date = "s_Date";
            public const string UserID = "s_UserID";
            public const string StoreID = "s_StoreID";
            public const string Insurance = "s_Insurance";
            public const string ManufacturerID = "s_ManufacturerID";
            public const string UnitID = "s_UnitID";
            public const string ReceiptId = "s_ReceiptId";
            public const string UPUnitCost = "s_UPUnitCost";
            public const string UPQty = "s_UPQty";
            public const string UPTotalCost = "s_UPTotalCost";
            public const string PQty = "s_PQty";
            public const string PUnitCost = "s_PUnitCost";
            public const string PTotalCost = "s_PTotalCost";
            public const string NTotalCost = "s_NTotalCost";
            public const string Remark = "s_Remark";
            public const string NQty = "s_NQty";
            public const string NUnitCost = "s_NUnitCost";
            public const string PriceDifference = "s_PriceDifference";
            public const string Margin = "s_Margin";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual int ItemID
	    {
			get
	        {
				return base.Getint(ColumnNames.ItemID);
			}
			set
	        {
				base.Setint(ColumnNames.ItemID, value);
			}
		}

		public virtual int SupplierID
	    {
			get
	        {
				return base.Getint(ColumnNames.SupplierID);
			}
			set
	        {
				base.Setint(ColumnNames.SupplierID, value);
			}
		}

		public virtual decimal SOHWhenApplied
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.SOHWhenApplied);
			}
			set
	        {
				base.Setdecimal(ColumnNames.SOHWhenApplied, value);
			}
		}

		public virtual double Price
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Price);
			}
			set
	        {
				base.Setdouble(ColumnNames.Price, value);
			}
		}

		public virtual DateTime Date
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Date);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Date, value);
			}
		}

		public virtual int UserID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserID);
			}
			set
	        {
				base.Setint(ColumnNames.UserID, value);
			}
		}

		public virtual int StoreID
	    {
			get
	        {
				return base.Getint(ColumnNames.StoreID);
			}
			set
	        {
				base.Setint(ColumnNames.StoreID, value);
			}
		}

		public virtual double Insurance
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Insurance);
			}
			set
	        {
				base.Setdouble(ColumnNames.Insurance, value);
			}
		}

		public virtual int ManufacturerID
	    {
			get
	        {
				return base.Getint(ColumnNames.ManufacturerID);
			}
			set
	        {
				base.Setint(ColumnNames.ManufacturerID, value);
			}
		}

		public virtual int UnitID
	    {
			get
	        {
				return base.Getint(ColumnNames.UnitID);
			}
			set
	        {
				base.Setint(ColumnNames.UnitID, value);
			}
		}

		public virtual int ReceiptId
	    {
			get
	        {
				return base.Getint(ColumnNames.ReceiptId);
			}
			set
	        {
				base.Setint(ColumnNames.ReceiptId, value);
			}
		}

		public virtual double UPUnitCost
	    {
			get
	        {
				return base.Getdouble(ColumnNames.UPUnitCost);
			}
			set
	        {
				base.Setdouble(ColumnNames.UPUnitCost, value);
			}
		}

		public virtual decimal UPQty
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.UPQty);
			}
			set
	        {
				base.Setdecimal(ColumnNames.UPQty, value);
			}
		}

		public virtual double UPTotalCost
	    {
			get
	        {
				return base.Getdouble(ColumnNames.UPTotalCost);
			}
			set
	        {
				base.Setdouble(ColumnNames.UPTotalCost, value);
			}
		}

		public virtual decimal PQty
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.PQty);
			}
			set
	        {
				base.Setdecimal(ColumnNames.PQty, value);
			}
		}

		public virtual double PUnitCost
	    {
			get
	        {
				return base.Getdouble(ColumnNames.PUnitCost);
			}
			set
	        {
				base.Setdouble(ColumnNames.PUnitCost, value);
			}
		}

		public virtual double PTotalCost
	    {
			get
	        {
				return base.Getdouble(ColumnNames.PTotalCost);
			}
			set
	        {
				base.Setdouble(ColumnNames.PTotalCost, value);
			}
		}

		public virtual double NTotalCost
	    {
			get
	        {
				return base.Getdouble(ColumnNames.NTotalCost);
			}
			set
	        {
				base.Setdouble(ColumnNames.NTotalCost, value);
			}
		}

		public virtual string Remark
	    {
			get
	        {
				return base.Getstring(ColumnNames.Remark);
			}
			set
	        {
				base.Setstring(ColumnNames.Remark, value);
			}
		}

		public virtual decimal NQty
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.NQty);
			}
			set
	        {
				base.Setdecimal(ColumnNames.NQty, value);
			}
		}

		public virtual double NUnitCost
	    {
			get
	        {
				return base.Getdouble(ColumnNames.NUnitCost);
			}
			set
	        {
				base.Setdouble(ColumnNames.NUnitCost, value);
			}
		}

		public virtual double PriceDifference
	    {
			get
	        {
				return base.Getdouble(ColumnNames.PriceDifference);
			}
			set
	        {
				base.Setdouble(ColumnNames.PriceDifference, value);
			}
		}

		public virtual double Margin
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Margin);
			}
			set
	        {
				base.Setdouble(ColumnNames.Margin, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_ItemID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ItemID) ? string.Empty : base.GetintAsString(ColumnNames.ItemID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ItemID);
				else
					this.ItemID = base.SetintAsString(ColumnNames.ItemID, value);
			}
		}

		public virtual string s_SupplierID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SupplierID) ? string.Empty : base.GetintAsString(ColumnNames.SupplierID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SupplierID);
				else
					this.SupplierID = base.SetintAsString(ColumnNames.SupplierID, value);
			}
		}

		public virtual string s_SOHWhenApplied
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SOHWhenApplied) ? string.Empty : base.GetdecimalAsString(ColumnNames.SOHWhenApplied);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SOHWhenApplied);
				else
					this.SOHWhenApplied = base.SetdecimalAsString(ColumnNames.SOHWhenApplied, value);
			}
		}

		public virtual string s_Price
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Price) ? string.Empty : base.GetdoubleAsString(ColumnNames.Price);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Price);
				else
					this.Price = base.SetdoubleAsString(ColumnNames.Price, value);
			}
		}

		public virtual string s_Date
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Date) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Date);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Date);
				else
					this.Date = base.SetDateTimeAsString(ColumnNames.Date, value);
			}
		}

		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetintAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_StoreID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StoreID) ? string.Empty : base.GetintAsString(ColumnNames.StoreID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StoreID);
				else
					this.StoreID = base.SetintAsString(ColumnNames.StoreID, value);
			}
		}

		public virtual string s_Insurance
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Insurance) ? string.Empty : base.GetdoubleAsString(ColumnNames.Insurance);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Insurance);
				else
					this.Insurance = base.SetdoubleAsString(ColumnNames.Insurance, value);
			}
		}

		public virtual string s_ManufacturerID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ManufacturerID) ? string.Empty : base.GetintAsString(ColumnNames.ManufacturerID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ManufacturerID);
				else
					this.ManufacturerID = base.SetintAsString(ColumnNames.ManufacturerID, value);
			}
		}

		public virtual string s_UnitID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UnitID) ? string.Empty : base.GetintAsString(ColumnNames.UnitID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnitID);
				else
					this.UnitID = base.SetintAsString(ColumnNames.UnitID, value);
			}
		}

		public virtual string s_ReceiptId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceiptId) ? string.Empty : base.GetintAsString(ColumnNames.ReceiptId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceiptId);
				else
					this.ReceiptId = base.SetintAsString(ColumnNames.ReceiptId, value);
			}
		}

		public virtual string s_UPUnitCost
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UPUnitCost) ? string.Empty : base.GetdoubleAsString(ColumnNames.UPUnitCost);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UPUnitCost);
				else
					this.UPUnitCost = base.SetdoubleAsString(ColumnNames.UPUnitCost, value);
			}
		}

		public virtual string s_UPQty
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UPQty) ? string.Empty : base.GetdecimalAsString(ColumnNames.UPQty);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UPQty);
				else
					this.UPQty = base.SetdecimalAsString(ColumnNames.UPQty, value);
			}
		}

		public virtual string s_UPTotalCost
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UPTotalCost) ? string.Empty : base.GetdoubleAsString(ColumnNames.UPTotalCost);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UPTotalCost);
				else
					this.UPTotalCost = base.SetdoubleAsString(ColumnNames.UPTotalCost, value);
			}
		}

		public virtual string s_PQty
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PQty) ? string.Empty : base.GetdecimalAsString(ColumnNames.PQty);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PQty);
				else
					this.PQty = base.SetdecimalAsString(ColumnNames.PQty, value);
			}
		}

		public virtual string s_PUnitCost
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PUnitCost) ? string.Empty : base.GetdoubleAsString(ColumnNames.PUnitCost);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PUnitCost);
				else
					this.PUnitCost = base.SetdoubleAsString(ColumnNames.PUnitCost, value);
			}
		}

		public virtual string s_PTotalCost
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PTotalCost) ? string.Empty : base.GetdoubleAsString(ColumnNames.PTotalCost);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PTotalCost);
				else
					this.PTotalCost = base.SetdoubleAsString(ColumnNames.PTotalCost, value);
			}
		}

		public virtual string s_NTotalCost
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NTotalCost) ? string.Empty : base.GetdoubleAsString(ColumnNames.NTotalCost);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NTotalCost);
				else
					this.NTotalCost = base.SetdoubleAsString(ColumnNames.NTotalCost, value);
			}
		}

		public virtual string s_Remark
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Remark) ? string.Empty : base.GetstringAsString(ColumnNames.Remark);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Remark);
				else
					this.Remark = base.SetstringAsString(ColumnNames.Remark, value);
			}
		}

		public virtual string s_NQty
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NQty) ? string.Empty : base.GetdecimalAsString(ColumnNames.NQty);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NQty);
				else
					this.NQty = base.SetdecimalAsString(ColumnNames.NQty, value);
			}
		}

		public virtual string s_NUnitCost
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NUnitCost) ? string.Empty : base.GetdoubleAsString(ColumnNames.NUnitCost);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NUnitCost);
				else
					this.NUnitCost = base.SetdoubleAsString(ColumnNames.NUnitCost, value);
			}
		}

		public virtual string s_PriceDifference
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PriceDifference) ? string.Empty : base.GetdoubleAsString(ColumnNames.PriceDifference);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PriceDifference);
				else
					this.PriceDifference = base.SetdoubleAsString(ColumnNames.PriceDifference, value);
			}
		}

		public virtual string s_Margin
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Margin) ? string.Empty : base.GetdoubleAsString(ColumnNames.Margin);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Margin);
				else
					this.Margin = base.SetdoubleAsString(ColumnNames.Margin, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ItemID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SupplierID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SupplierID, Parameters.SupplierID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SOHWhenApplied
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SOHWhenApplied, Parameters.SOHWhenApplied);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Price
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Price, Parameters.Price);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Date
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Date, Parameters.Date);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StoreID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StoreID, Parameters.StoreID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Insurance
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Insurance, Parameters.Insurance);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ManufacturerID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ManufacturerID, Parameters.ManufacturerID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UnitID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UnitID, Parameters.UnitID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReceiptId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceiptId, Parameters.ReceiptId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UPUnitCost
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UPUnitCost, Parameters.UPUnitCost);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UPQty
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UPQty, Parameters.UPQty);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UPTotalCost
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UPTotalCost, Parameters.UPTotalCost);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PQty
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PQty, Parameters.PQty);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PUnitCost
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PUnitCost, Parameters.PUnitCost);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PTotalCost
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PTotalCost, Parameters.PTotalCost);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NTotalCost
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NTotalCost, Parameters.NTotalCost);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Remark
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NQty
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NQty, Parameters.NQty);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NUnitCost
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NUnitCost, Parameters.NUnitCost);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PriceDifference
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PriceDifference, Parameters.PriceDifference);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Margin
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Margin, Parameters.Margin);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public WhereParameter SupplierID
		    {
				get
		        {
					if(_SupplierID_W == null)
	        	    {
						_SupplierID_W = TearOff.SupplierID;
					}
					return _SupplierID_W;
				}
			}

			public WhereParameter SOHWhenApplied
		    {
				get
		        {
					if(_SOHWhenApplied_W == null)
	        	    {
						_SOHWhenApplied_W = TearOff.SOHWhenApplied;
					}
					return _SOHWhenApplied_W;
				}
			}

			public WhereParameter Price
		    {
				get
		        {
					if(_Price_W == null)
	        	    {
						_Price_W = TearOff.Price;
					}
					return _Price_W;
				}
			}

			public WhereParameter Date
		    {
				get
		        {
					if(_Date_W == null)
	        	    {
						_Date_W = TearOff.Date;
					}
					return _Date_W;
				}
			}

			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter StoreID
		    {
				get
		        {
					if(_StoreID_W == null)
	        	    {
						_StoreID_W = TearOff.StoreID;
					}
					return _StoreID_W;
				}
			}

			public WhereParameter Insurance
		    {
				get
		        {
					if(_Insurance_W == null)
	        	    {
						_Insurance_W = TearOff.Insurance;
					}
					return _Insurance_W;
				}
			}

			public WhereParameter ManufacturerID
		    {
				get
		        {
					if(_ManufacturerID_W == null)
	        	    {
						_ManufacturerID_W = TearOff.ManufacturerID;
					}
					return _ManufacturerID_W;
				}
			}

			public WhereParameter UnitID
		    {
				get
		        {
					if(_UnitID_W == null)
	        	    {
						_UnitID_W = TearOff.UnitID;
					}
					return _UnitID_W;
				}
			}

			public WhereParameter ReceiptId
		    {
				get
		        {
					if(_ReceiptId_W == null)
	        	    {
						_ReceiptId_W = TearOff.ReceiptId;
					}
					return _ReceiptId_W;
				}
			}

			public WhereParameter UPUnitCost
		    {
				get
		        {
					if(_UPUnitCost_W == null)
	        	    {
						_UPUnitCost_W = TearOff.UPUnitCost;
					}
					return _UPUnitCost_W;
				}
			}

			public WhereParameter UPQty
		    {
				get
		        {
					if(_UPQty_W == null)
	        	    {
						_UPQty_W = TearOff.UPQty;
					}
					return _UPQty_W;
				}
			}

			public WhereParameter UPTotalCost
		    {
				get
		        {
					if(_UPTotalCost_W == null)
	        	    {
						_UPTotalCost_W = TearOff.UPTotalCost;
					}
					return _UPTotalCost_W;
				}
			}

			public WhereParameter PQty
		    {
				get
		        {
					if(_PQty_W == null)
	        	    {
						_PQty_W = TearOff.PQty;
					}
					return _PQty_W;
				}
			}

			public WhereParameter PUnitCost
		    {
				get
		        {
					if(_PUnitCost_W == null)
	        	    {
						_PUnitCost_W = TearOff.PUnitCost;
					}
					return _PUnitCost_W;
				}
			}

			public WhereParameter PTotalCost
		    {
				get
		        {
					if(_PTotalCost_W == null)
	        	    {
						_PTotalCost_W = TearOff.PTotalCost;
					}
					return _PTotalCost_W;
				}
			}

			public WhereParameter NTotalCost
		    {
				get
		        {
					if(_NTotalCost_W == null)
	        	    {
						_NTotalCost_W = TearOff.NTotalCost;
					}
					return _NTotalCost_W;
				}
			}

			public WhereParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			public WhereParameter NQty
		    {
				get
		        {
					if(_NQty_W == null)
	        	    {
						_NQty_W = TearOff.NQty;
					}
					return _NQty_W;
				}
			}

			public WhereParameter NUnitCost
		    {
				get
		        {
					if(_NUnitCost_W == null)
	        	    {
						_NUnitCost_W = TearOff.NUnitCost;
					}
					return _NUnitCost_W;
				}
			}

			public WhereParameter PriceDifference
		    {
				get
		        {
					if(_PriceDifference_W == null)
	        	    {
						_PriceDifference_W = TearOff.PriceDifference;
					}
					return _PriceDifference_W;
				}
			}

			public WhereParameter Margin
		    {
				get
		        {
					if(_Margin_W == null)
	        	    {
						_Margin_W = TearOff.Margin;
					}
					return _Margin_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _ItemID_W = null;
			private WhereParameter _SupplierID_W = null;
			private WhereParameter _SOHWhenApplied_W = null;
			private WhereParameter _Price_W = null;
			private WhereParameter _Date_W = null;
			private WhereParameter _UserID_W = null;
			private WhereParameter _StoreID_W = null;
			private WhereParameter _Insurance_W = null;
			private WhereParameter _ManufacturerID_W = null;
			private WhereParameter _UnitID_W = null;
			private WhereParameter _ReceiptId_W = null;
			private WhereParameter _UPUnitCost_W = null;
			private WhereParameter _UPQty_W = null;
			private WhereParameter _UPTotalCost_W = null;
			private WhereParameter _PQty_W = null;
			private WhereParameter _PUnitCost_W = null;
			private WhereParameter _PTotalCost_W = null;
			private WhereParameter _NTotalCost_W = null;
			private WhereParameter _Remark_W = null;
			private WhereParameter _NQty_W = null;
			private WhereParameter _NUnitCost_W = null;
			private WhereParameter _PriceDifference_W = null;
			private WhereParameter _Margin_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_ItemID_W = null;
				_SupplierID_W = null;
				_SOHWhenApplied_W = null;
				_Price_W = null;
				_Date_W = null;
				_UserID_W = null;
				_StoreID_W = null;
				_Insurance_W = null;
				_ManufacturerID_W = null;
				_UnitID_W = null;
				_ReceiptId_W = null;
				_UPUnitCost_W = null;
				_UPQty_W = null;
				_UPTotalCost_W = null;
				_PQty_W = null;
				_PUnitCost_W = null;
				_PTotalCost_W = null;
				_NTotalCost_W = null;
				_Remark_W = null;
				_NQty_W = null;
				_NUnitCost_W = null;
				_PriceDifference_W = null;
				_Margin_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ItemID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SupplierID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SupplierID, Parameters.SupplierID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SOHWhenApplied
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SOHWhenApplied, Parameters.SOHWhenApplied);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Price
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Price, Parameters.Price);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Date
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Date, Parameters.Date);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StoreID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StoreID, Parameters.StoreID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Insurance
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Insurance, Parameters.Insurance);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ManufacturerID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ManufacturerID, Parameters.ManufacturerID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UnitID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitID, Parameters.UnitID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReceiptId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceiptId, Parameters.ReceiptId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UPUnitCost
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UPUnitCost, Parameters.UPUnitCost);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UPQty
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UPQty, Parameters.UPQty);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UPTotalCost
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UPTotalCost, Parameters.UPTotalCost);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PQty
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PQty, Parameters.PQty);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PUnitCost
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PUnitCost, Parameters.PUnitCost);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PTotalCost
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PTotalCost, Parameters.PTotalCost);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NTotalCost
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NTotalCost, Parameters.NTotalCost);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Remark
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NQty
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NQty, Parameters.NQty);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NUnitCost
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NUnitCost, Parameters.NUnitCost);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PriceDifference
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PriceDifference, Parameters.PriceDifference);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Margin
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Margin, Parameters.Margin);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public AggregateParameter SupplierID
		    {
				get
		        {
					if(_SupplierID_W == null)
	        	    {
						_SupplierID_W = TearOff.SupplierID;
					}
					return _SupplierID_W;
				}
			}

			public AggregateParameter SOHWhenApplied
		    {
				get
		        {
					if(_SOHWhenApplied_W == null)
	        	    {
						_SOHWhenApplied_W = TearOff.SOHWhenApplied;
					}
					return _SOHWhenApplied_W;
				}
			}

			public AggregateParameter Price
		    {
				get
		        {
					if(_Price_W == null)
	        	    {
						_Price_W = TearOff.Price;
					}
					return _Price_W;
				}
			}

			public AggregateParameter Date
		    {
				get
		        {
					if(_Date_W == null)
	        	    {
						_Date_W = TearOff.Date;
					}
					return _Date_W;
				}
			}

			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter StoreID
		    {
				get
		        {
					if(_StoreID_W == null)
	        	    {
						_StoreID_W = TearOff.StoreID;
					}
					return _StoreID_W;
				}
			}

			public AggregateParameter Insurance
		    {
				get
		        {
					if(_Insurance_W == null)
	        	    {
						_Insurance_W = TearOff.Insurance;
					}
					return _Insurance_W;
				}
			}

			public AggregateParameter ManufacturerID
		    {
				get
		        {
					if(_ManufacturerID_W == null)
	        	    {
						_ManufacturerID_W = TearOff.ManufacturerID;
					}
					return _ManufacturerID_W;
				}
			}

			public AggregateParameter UnitID
		    {
				get
		        {
					if(_UnitID_W == null)
	        	    {
						_UnitID_W = TearOff.UnitID;
					}
					return _UnitID_W;
				}
			}

			public AggregateParameter ReceiptId
		    {
				get
		        {
					if(_ReceiptId_W == null)
	        	    {
						_ReceiptId_W = TearOff.ReceiptId;
					}
					return _ReceiptId_W;
				}
			}

			public AggregateParameter UPUnitCost
		    {
				get
		        {
					if(_UPUnitCost_W == null)
	        	    {
						_UPUnitCost_W = TearOff.UPUnitCost;
					}
					return _UPUnitCost_W;
				}
			}

			public AggregateParameter UPQty
		    {
				get
		        {
					if(_UPQty_W == null)
	        	    {
						_UPQty_W = TearOff.UPQty;
					}
					return _UPQty_W;
				}
			}

			public AggregateParameter UPTotalCost
		    {
				get
		        {
					if(_UPTotalCost_W == null)
	        	    {
						_UPTotalCost_W = TearOff.UPTotalCost;
					}
					return _UPTotalCost_W;
				}
			}

			public AggregateParameter PQty
		    {
				get
		        {
					if(_PQty_W == null)
	        	    {
						_PQty_W = TearOff.PQty;
					}
					return _PQty_W;
				}
			}

			public AggregateParameter PUnitCost
		    {
				get
		        {
					if(_PUnitCost_W == null)
	        	    {
						_PUnitCost_W = TearOff.PUnitCost;
					}
					return _PUnitCost_W;
				}
			}

			public AggregateParameter PTotalCost
		    {
				get
		        {
					if(_PTotalCost_W == null)
	        	    {
						_PTotalCost_W = TearOff.PTotalCost;
					}
					return _PTotalCost_W;
				}
			}

			public AggregateParameter NTotalCost
		    {
				get
		        {
					if(_NTotalCost_W == null)
	        	    {
						_NTotalCost_W = TearOff.NTotalCost;
					}
					return _NTotalCost_W;
				}
			}

			public AggregateParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			public AggregateParameter NQty
		    {
				get
		        {
					if(_NQty_W == null)
	        	    {
						_NQty_W = TearOff.NQty;
					}
					return _NQty_W;
				}
			}

			public AggregateParameter NUnitCost
		    {
				get
		        {
					if(_NUnitCost_W == null)
	        	    {
						_NUnitCost_W = TearOff.NUnitCost;
					}
					return _NUnitCost_W;
				}
			}

			public AggregateParameter PriceDifference
		    {
				get
		        {
					if(_PriceDifference_W == null)
	        	    {
						_PriceDifference_W = TearOff.PriceDifference;
					}
					return _PriceDifference_W;
				}
			}

			public AggregateParameter Margin
		    {
				get
		        {
					if(_Margin_W == null)
	        	    {
						_Margin_W = TearOff.Margin;
					}
					return _Margin_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _ItemID_W = null;
			private AggregateParameter _SupplierID_W = null;
			private AggregateParameter _SOHWhenApplied_W = null;
			private AggregateParameter _Price_W = null;
			private AggregateParameter _Date_W = null;
			private AggregateParameter _UserID_W = null;
			private AggregateParameter _StoreID_W = null;
			private AggregateParameter _Insurance_W = null;
			private AggregateParameter _ManufacturerID_W = null;
			private AggregateParameter _UnitID_W = null;
			private AggregateParameter _ReceiptId_W = null;
			private AggregateParameter _UPUnitCost_W = null;
			private AggregateParameter _UPQty_W = null;
			private AggregateParameter _UPTotalCost_W = null;
			private AggregateParameter _PQty_W = null;
			private AggregateParameter _PUnitCost_W = null;
			private AggregateParameter _PTotalCost_W = null;
			private AggregateParameter _NTotalCost_W = null;
			private AggregateParameter _Remark_W = null;
			private AggregateParameter _NQty_W = null;
			private AggregateParameter _NUnitCost_W = null;
			private AggregateParameter _PriceDifference_W = null;
			private AggregateParameter _Margin_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_ItemID_W = null;
				_SupplierID_W = null;
				_SOHWhenApplied_W = null;
				_Price_W = null;
				_Date_W = null;
				_UserID_W = null;
				_StoreID_W = null;
				_Insurance_W = null;
				_ManufacturerID_W = null;
				_UnitID_W = null;
				_ReceiptId_W = null;
				_UPUnitCost_W = null;
				_UPQty_W = null;
				_UPTotalCost_W = null;
				_PQty_W = null;
				_PUnitCost_W = null;
				_PTotalCost_W = null;
				_NTotalCost_W = null;
				_Remark_W = null;
				_NQty_W = null;
				_NUnitCost_W = null;
				_PriceDifference_W = null;
				_Margin_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MovingAverageHistoryInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MovingAverageHistoryUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MovingAverageHistoryDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ItemID);
			p.SourceColumn = ColumnNames.ItemID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SupplierID);
			p.SourceColumn = ColumnNames.SupplierID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SOHWhenApplied);
			p.SourceColumn = ColumnNames.SOHWhenApplied;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Price);
			p.SourceColumn = ColumnNames.Price;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Date);
			p.SourceColumn = ColumnNames.Date;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StoreID);
			p.SourceColumn = ColumnNames.StoreID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Insurance);
			p.SourceColumn = ColumnNames.Insurance;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ManufacturerID);
			p.SourceColumn = ColumnNames.ManufacturerID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UnitID);
			p.SourceColumn = ColumnNames.UnitID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReceiptId);
			p.SourceColumn = ColumnNames.ReceiptId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UPUnitCost);
			p.SourceColumn = ColumnNames.UPUnitCost;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UPQty);
			p.SourceColumn = ColumnNames.UPQty;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UPTotalCost);
			p.SourceColumn = ColumnNames.UPTotalCost;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PQty);
			p.SourceColumn = ColumnNames.PQty;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PUnitCost);
			p.SourceColumn = ColumnNames.PUnitCost;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PTotalCost);
			p.SourceColumn = ColumnNames.PTotalCost;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NTotalCost);
			p.SourceColumn = ColumnNames.NTotalCost;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Remark);
			p.SourceColumn = ColumnNames.Remark;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NQty);
			p.SourceColumn = ColumnNames.NQty;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NUnitCost);
			p.SourceColumn = ColumnNames.NUnitCost;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PriceDifference);
			p.SourceColumn = ColumnNames.PriceDifference;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Margin);
			p.SourceColumn = ColumnNames.Margin;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
