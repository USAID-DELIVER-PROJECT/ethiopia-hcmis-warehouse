
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _RequistionDetail : SqlClientEntity
	{
		public _RequistionDetail()
		{
			this.QuerySource = "RequistionDetail";
			this.MappingName = "RequistionDetail";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_RequistionDetailLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_RequistionDetailLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Identifier
			{
				get
				{
					return new SqlParameter("@Identifier", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter RequisitionID
			{
				get
				{
					return new SqlParameter("@RequisitionID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ItemID
			{
				get
				{
					return new SqlParameter("@ItemID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UnitID
			{
				get
				{
					return new SqlParameter("@UnitID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RequestedQuantity
			{
				get
				{
					return new SqlParameter("@RequestedQuantity", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter CurrentStock
			{
				get
				{
					return new SqlParameter("@CurrentStock", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter AverageMonthlyConsumption
			{
				get
				{
					return new SqlParameter("@AverageMonthlyConsumption", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter CurrentRequests
			{
				get
				{
					return new SqlParameter("@CurrentRequests", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter DaysOutOfStock
			{
				get
				{
					return new SqlParameter("@DaysOutOfStock", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string Identifier = "Identifier";
            public const string RequisitionID = "RequisitionID";
            public const string ItemID = "ItemID";
            public const string UnitID = "UnitID";
            public const string RequestedQuantity = "RequestedQuantity";
            public const string CurrentStock = "CurrentStock";
            public const string AverageMonthlyConsumption = "AverageMonthlyConsumption";
            public const string CurrentRequests = "CurrentRequests";
            public const string DaysOutOfStock = "DaysOutOfStock";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _RequistionDetail.PropertyNames.ID;
					ht[Identifier] = _RequistionDetail.PropertyNames.Identifier;
					ht[RequisitionID] = _RequistionDetail.PropertyNames.RequisitionID;
					ht[ItemID] = _RequistionDetail.PropertyNames.ItemID;
					ht[UnitID] = _RequistionDetail.PropertyNames.UnitID;
					ht[RequestedQuantity] = _RequistionDetail.PropertyNames.RequestedQuantity;
					ht[CurrentStock] = _RequistionDetail.PropertyNames.CurrentStock;
					ht[AverageMonthlyConsumption] = _RequistionDetail.PropertyNames.AverageMonthlyConsumption;
					ht[CurrentRequests] = _RequistionDetail.PropertyNames.CurrentRequests;
					ht[DaysOutOfStock] = _RequistionDetail.PropertyNames.DaysOutOfStock;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string Identifier = "Identifier";
            public const string RequisitionID = "RequisitionID";
            public const string ItemID = "ItemID";
            public const string UnitID = "UnitID";
            public const string RequestedQuantity = "RequestedQuantity";
            public const string CurrentStock = "CurrentStock";
            public const string AverageMonthlyConsumption = "AverageMonthlyConsumption";
            public const string CurrentRequests = "CurrentRequests";
            public const string DaysOutOfStock = "DaysOutOfStock";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _RequistionDetail.ColumnNames.ID;
					ht[Identifier] = _RequistionDetail.ColumnNames.Identifier;
					ht[RequisitionID] = _RequistionDetail.ColumnNames.RequisitionID;
					ht[ItemID] = _RequistionDetail.ColumnNames.ItemID;
					ht[UnitID] = _RequistionDetail.ColumnNames.UnitID;
					ht[RequestedQuantity] = _RequistionDetail.ColumnNames.RequestedQuantity;
					ht[CurrentStock] = _RequistionDetail.ColumnNames.CurrentStock;
					ht[AverageMonthlyConsumption] = _RequistionDetail.ColumnNames.AverageMonthlyConsumption;
					ht[CurrentRequests] = _RequistionDetail.ColumnNames.CurrentRequests;
					ht[DaysOutOfStock] = _RequistionDetail.ColumnNames.DaysOutOfStock;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string Identifier = "s_Identifier";
            public const string RequisitionID = "s_RequisitionID";
            public const string ItemID = "s_ItemID";
            public const string UnitID = "s_UnitID";
            public const string RequestedQuantity = "s_RequestedQuantity";
            public const string CurrentStock = "s_CurrentStock";
            public const string AverageMonthlyConsumption = "s_AverageMonthlyConsumption";
            public const string CurrentRequests = "s_CurrentRequests";
            public const string DaysOutOfStock = "s_DaysOutOfStock";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual Guid Identifier
	    {
			get
	        {
				return base.GetGuid(ColumnNames.Identifier);
			}
			set
	        {
				base.SetGuid(ColumnNames.Identifier, value);
			}
		}

		public virtual int RequisitionID
	    {
			get
	        {
				return base.Getint(ColumnNames.RequisitionID);
			}
			set
	        {
				base.Setint(ColumnNames.RequisitionID, value);
			}
		}

		public virtual int ItemID
	    {
			get
	        {
				return base.Getint(ColumnNames.ItemID);
			}
			set
	        {
				base.Setint(ColumnNames.ItemID, value);
			}
		}

		public virtual int UnitID
	    {
			get
	        {
				return base.Getint(ColumnNames.UnitID);
			}
			set
	        {
				base.Setint(ColumnNames.UnitID, value);
			}
		}

		public virtual decimal RequestedQuantity
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.RequestedQuantity);
			}
			set
	        {
				base.Setdecimal(ColumnNames.RequestedQuantity, value);
			}
		}

		public virtual decimal CurrentStock
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.CurrentStock);
			}
			set
	        {
				base.Setdecimal(ColumnNames.CurrentStock, value);
			}
		}

		public virtual decimal AverageMonthlyConsumption
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.AverageMonthlyConsumption);
			}
			set
	        {
				base.Setdecimal(ColumnNames.AverageMonthlyConsumption, value);
			}
		}

		public virtual decimal CurrentRequests
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.CurrentRequests);
			}
			set
	        {
				base.Setdecimal(ColumnNames.CurrentRequests, value);
			}
		}

		public virtual int DaysOutOfStock
	    {
			get
	        {
				return base.Getint(ColumnNames.DaysOutOfStock);
			}
			set
	        {
				base.Setint(ColumnNames.DaysOutOfStock, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_Identifier
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Identifier) ? string.Empty : base.GetGuidAsString(ColumnNames.Identifier);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Identifier);
				else
					this.Identifier = base.SetGuidAsString(ColumnNames.Identifier, value);
			}
		}

		public virtual string s_RequisitionID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RequisitionID) ? string.Empty : base.GetintAsString(ColumnNames.RequisitionID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RequisitionID);
				else
					this.RequisitionID = base.SetintAsString(ColumnNames.RequisitionID, value);
			}
		}

		public virtual string s_ItemID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ItemID) ? string.Empty : base.GetintAsString(ColumnNames.ItemID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ItemID);
				else
					this.ItemID = base.SetintAsString(ColumnNames.ItemID, value);
			}
		}

		public virtual string s_UnitID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UnitID) ? string.Empty : base.GetintAsString(ColumnNames.UnitID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnitID);
				else
					this.UnitID = base.SetintAsString(ColumnNames.UnitID, value);
			}
		}

		public virtual string s_RequestedQuantity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RequestedQuantity) ? string.Empty : base.GetdecimalAsString(ColumnNames.RequestedQuantity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RequestedQuantity);
				else
					this.RequestedQuantity = base.SetdecimalAsString(ColumnNames.RequestedQuantity, value);
			}
		}

		public virtual string s_CurrentStock
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CurrentStock) ? string.Empty : base.GetdecimalAsString(ColumnNames.CurrentStock);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CurrentStock);
				else
					this.CurrentStock = base.SetdecimalAsString(ColumnNames.CurrentStock, value);
			}
		}

		public virtual string s_AverageMonthlyConsumption
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AverageMonthlyConsumption) ? string.Empty : base.GetdecimalAsString(ColumnNames.AverageMonthlyConsumption);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AverageMonthlyConsumption);
				else
					this.AverageMonthlyConsumption = base.SetdecimalAsString(ColumnNames.AverageMonthlyConsumption, value);
			}
		}

		public virtual string s_CurrentRequests
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CurrentRequests) ? string.Empty : base.GetdecimalAsString(ColumnNames.CurrentRequests);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CurrentRequests);
				else
					this.CurrentRequests = base.SetdecimalAsString(ColumnNames.CurrentRequests, value);
			}
		}

		public virtual string s_DaysOutOfStock
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DaysOutOfStock) ? string.Empty : base.GetintAsString(ColumnNames.DaysOutOfStock);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DaysOutOfStock);
				else
					this.DaysOutOfStock = base.SetintAsString(ColumnNames.DaysOutOfStock, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Identifier
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Identifier, Parameters.Identifier);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RequisitionID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RequisitionID, Parameters.RequisitionID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ItemID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UnitID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UnitID, Parameters.UnitID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RequestedQuantity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RequestedQuantity, Parameters.RequestedQuantity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CurrentStock
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CurrentStock, Parameters.CurrentStock);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AverageMonthlyConsumption
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AverageMonthlyConsumption, Parameters.AverageMonthlyConsumption);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CurrentRequests
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CurrentRequests, Parameters.CurrentRequests);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DaysOutOfStock
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DaysOutOfStock, Parameters.DaysOutOfStock);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter Identifier
		    {
				get
		        {
					if(_Identifier_W == null)
	        	    {
						_Identifier_W = TearOff.Identifier;
					}
					return _Identifier_W;
				}
			}

			public WhereParameter RequisitionID
		    {
				get
		        {
					if(_RequisitionID_W == null)
	        	    {
						_RequisitionID_W = TearOff.RequisitionID;
					}
					return _RequisitionID_W;
				}
			}

			public WhereParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public WhereParameter UnitID
		    {
				get
		        {
					if(_UnitID_W == null)
	        	    {
						_UnitID_W = TearOff.UnitID;
					}
					return _UnitID_W;
				}
			}

			public WhereParameter RequestedQuantity
		    {
				get
		        {
					if(_RequestedQuantity_W == null)
	        	    {
						_RequestedQuantity_W = TearOff.RequestedQuantity;
					}
					return _RequestedQuantity_W;
				}
			}

			public WhereParameter CurrentStock
		    {
				get
		        {
					if(_CurrentStock_W == null)
	        	    {
						_CurrentStock_W = TearOff.CurrentStock;
					}
					return _CurrentStock_W;
				}
			}

			public WhereParameter AverageMonthlyConsumption
		    {
				get
		        {
					if(_AverageMonthlyConsumption_W == null)
	        	    {
						_AverageMonthlyConsumption_W = TearOff.AverageMonthlyConsumption;
					}
					return _AverageMonthlyConsumption_W;
				}
			}

			public WhereParameter CurrentRequests
		    {
				get
		        {
					if(_CurrentRequests_W == null)
	        	    {
						_CurrentRequests_W = TearOff.CurrentRequests;
					}
					return _CurrentRequests_W;
				}
			}

			public WhereParameter DaysOutOfStock
		    {
				get
		        {
					if(_DaysOutOfStock_W == null)
	        	    {
						_DaysOutOfStock_W = TearOff.DaysOutOfStock;
					}
					return _DaysOutOfStock_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _Identifier_W = null;
			private WhereParameter _RequisitionID_W = null;
			private WhereParameter _ItemID_W = null;
			private WhereParameter _UnitID_W = null;
			private WhereParameter _RequestedQuantity_W = null;
			private WhereParameter _CurrentStock_W = null;
			private WhereParameter _AverageMonthlyConsumption_W = null;
			private WhereParameter _CurrentRequests_W = null;
			private WhereParameter _DaysOutOfStock_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_Identifier_W = null;
				_RequisitionID_W = null;
				_ItemID_W = null;
				_UnitID_W = null;
				_RequestedQuantity_W = null;
				_CurrentStock_W = null;
				_AverageMonthlyConsumption_W = null;
				_CurrentRequests_W = null;
				_DaysOutOfStock_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Identifier
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Identifier, Parameters.Identifier);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RequisitionID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequisitionID, Parameters.RequisitionID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ItemID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UnitID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitID, Parameters.UnitID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RequestedQuantity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequestedQuantity, Parameters.RequestedQuantity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CurrentStock
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CurrentStock, Parameters.CurrentStock);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AverageMonthlyConsumption
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AverageMonthlyConsumption, Parameters.AverageMonthlyConsumption);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CurrentRequests
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CurrentRequests, Parameters.CurrentRequests);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DaysOutOfStock
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DaysOutOfStock, Parameters.DaysOutOfStock);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter Identifier
		    {
				get
		        {
					if(_Identifier_W == null)
	        	    {
						_Identifier_W = TearOff.Identifier;
					}
					return _Identifier_W;
				}
			}

			public AggregateParameter RequisitionID
		    {
				get
		        {
					if(_RequisitionID_W == null)
	        	    {
						_RequisitionID_W = TearOff.RequisitionID;
					}
					return _RequisitionID_W;
				}
			}

			public AggregateParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public AggregateParameter UnitID
		    {
				get
		        {
					if(_UnitID_W == null)
	        	    {
						_UnitID_W = TearOff.UnitID;
					}
					return _UnitID_W;
				}
			}

			public AggregateParameter RequestedQuantity
		    {
				get
		        {
					if(_RequestedQuantity_W == null)
	        	    {
						_RequestedQuantity_W = TearOff.RequestedQuantity;
					}
					return _RequestedQuantity_W;
				}
			}

			public AggregateParameter CurrentStock
		    {
				get
		        {
					if(_CurrentStock_W == null)
	        	    {
						_CurrentStock_W = TearOff.CurrentStock;
					}
					return _CurrentStock_W;
				}
			}

			public AggregateParameter AverageMonthlyConsumption
		    {
				get
		        {
					if(_AverageMonthlyConsumption_W == null)
	        	    {
						_AverageMonthlyConsumption_W = TearOff.AverageMonthlyConsumption;
					}
					return _AverageMonthlyConsumption_W;
				}
			}

			public AggregateParameter CurrentRequests
		    {
				get
		        {
					if(_CurrentRequests_W == null)
	        	    {
						_CurrentRequests_W = TearOff.CurrentRequests;
					}
					return _CurrentRequests_W;
				}
			}

			public AggregateParameter DaysOutOfStock
		    {
				get
		        {
					if(_DaysOutOfStock_W == null)
	        	    {
						_DaysOutOfStock_W = TearOff.DaysOutOfStock;
					}
					return _DaysOutOfStock_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _Identifier_W = null;
			private AggregateParameter _RequisitionID_W = null;
			private AggregateParameter _ItemID_W = null;
			private AggregateParameter _UnitID_W = null;
			private AggregateParameter _RequestedQuantity_W = null;
			private AggregateParameter _CurrentStock_W = null;
			private AggregateParameter _AverageMonthlyConsumption_W = null;
			private AggregateParameter _CurrentRequests_W = null;
			private AggregateParameter _DaysOutOfStock_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_Identifier_W = null;
				_RequisitionID_W = null;
				_ItemID_W = null;
				_UnitID_W = null;
				_RequestedQuantity_W = null;
				_CurrentStock_W = null;
				_AverageMonthlyConsumption_W = null;
				_CurrentRequests_W = null;
				_DaysOutOfStock_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RequistionDetailInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RequistionDetailUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RequistionDetailDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Identifier);
			p.SourceColumn = ColumnNames.Identifier;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RequisitionID);
			p.SourceColumn = ColumnNames.RequisitionID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ItemID);
			p.SourceColumn = ColumnNames.ItemID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UnitID);
			p.SourceColumn = ColumnNames.UnitID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RequestedQuantity);
			p.SourceColumn = ColumnNames.RequestedQuantity;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CurrentStock);
			p.SourceColumn = ColumnNames.CurrentStock;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AverageMonthlyConsumption);
			p.SourceColumn = ColumnNames.AverageMonthlyConsumption;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CurrentRequests);
			p.SourceColumn = ColumnNames.CurrentRequests;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DaysOutOfStock);
			p.SourceColumn = ColumnNames.DaysOutOfStock;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
