
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
    public abstract class _Request : SqlClientEntity
    {
        public _Request()
        {
            this.QuerySource = "Request";
            this.MappingName = "Request";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_RequestLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int RequestID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.RequestID, RequestID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_RequestLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter RequestID
            {
                get
                {
                    return new SqlParameter("@RequestID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter PeriodID
            {
                get
                {
                    return new SqlParameter("@PeriodID", SqlDbType.Int, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string RequestID = "RequestID";
            public const string PeriodID = "PeriodID";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[RequestID] = _Request.PropertyNames.RequestID;
                    ht[PeriodID] = _Request.PropertyNames.PeriodID;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string RequestID = "RequestID";
            public const string PeriodID = "PeriodID";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[RequestID] = _Request.ColumnNames.RequestID;
                    ht[PeriodID] = _Request.ColumnNames.PeriodID;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string RequestID = "s_RequestID";
            public const string PeriodID = "s_PeriodID";

        }
        #endregion

        #region Properties

        public virtual int RequestID
        {
            get
            {
                return base.Getint(ColumnNames.RequestID);
            }
            set
            {
                base.Setint(ColumnNames.RequestID, value);
            }
        }

        public virtual int PeriodID
        {
            get
            {
                return base.Getint(ColumnNames.PeriodID);
            }
            set
            {
                base.Setint(ColumnNames.PeriodID, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_RequestID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.RequestID) ? string.Empty : base.GetintAsString(ColumnNames.RequestID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.RequestID);
                else
                    this.RequestID = base.SetintAsString(ColumnNames.RequestID, value);
            }
        }

        public virtual string s_PeriodID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PeriodID) ? string.Empty : base.GetintAsString(ColumnNames.PeriodID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PeriodID);
                else
                    this.PeriodID = base.SetintAsString(ColumnNames.PeriodID, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter RequestID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.RequestID, Parameters.RequestID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PeriodID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PeriodID, Parameters.PeriodID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter RequestID
            {
                get
                {
                    if (_RequestID_W == null)
                    {
                        _RequestID_W = TearOff.RequestID;
                    }
                    return _RequestID_W;
                }
            }

            public WhereParameter PeriodID
            {
                get
                {
                    if (_PeriodID_W == null)
                    {
                        _PeriodID_W = TearOff.PeriodID;
                    }
                    return _PeriodID_W;
                }
            }

            private WhereParameter _RequestID_W = null;
            private WhereParameter _PeriodID_W = null;

            public void WhereClauseReset()
            {
                _RequestID_W = null;
                _PeriodID_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter RequestID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequestID, Parameters.RequestID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PeriodID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PeriodID, Parameters.PeriodID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter RequestID
            {
                get
                {
                    if (_RequestID_W == null)
                    {
                        _RequestID_W = TearOff.RequestID;
                    }
                    return _RequestID_W;
                }
            }

            public AggregateParameter PeriodID
            {
                get
                {
                    if (_PeriodID_W == null)
                    {
                        _PeriodID_W = TearOff.PeriodID;
                    }
                    return _PeriodID_W;
                }
            }

            private AggregateParameter _RequestID_W = null;
            private AggregateParameter _PeriodID_W = null;

            public void AggregateClauseReset()
            {
                _RequestID_W = null;
                _PeriodID_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RequestInsert]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RequestUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RequestDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.RequestID);
            p.SourceColumn = ColumnNames.RequestID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.RequestID);
            p.SourceColumn = ColumnNames.RequestID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PeriodID);
            p.SourceColumn = ColumnNames.PeriodID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}
