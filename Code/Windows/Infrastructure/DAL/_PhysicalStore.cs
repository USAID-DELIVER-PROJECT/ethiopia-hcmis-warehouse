
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _PhysicalStore : SqlClientEntity
	{
		public _PhysicalStore()
		{
			this.QuerySource = "PhysicalStore";
			this.MappingName = "PhysicalStore";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PhysicalStoreLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PhysicalStoreLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Name
			{
				get
				{
					return new SqlParameter("@Name", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Width
			{
				get
				{
					return new SqlParameter("@Width", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Height
			{
				get
				{
					return new SqlParameter("@Height", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Length
			{
				get
				{
					return new SqlParameter("@Length", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter DoorSide
			{
				get
				{
					return new SqlParameter("@DoorSide", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DoorSize
			{
				get
				{
					return new SqlParameter("@DoorSize", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter DistanceFromCornor
			{
				get
				{
					return new SqlParameter("@DistanceFromCornor", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter PhysicalStoreTypeID
			{
				get
				{
					return new SqlParameter("@PhysicalStoreTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CurrentPeriodStartDate
			{
				get
				{
					return new SqlParameter("@CurrentPeriodStartDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter CurrentInventoryPeriodID
			{
				get
				{
					return new SqlParameter("@CurrentInventoryPeriodID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsActive
			{
				get
				{
					return new SqlParameter("@IsActive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter Rowguid
			{
				get
				{
					return new SqlParameter("@Rowguid", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string Name = "Name";
            public const string Width = "Width";
            public const string Height = "Height";
            public const string Length = "Length";
            public const string DoorSide = "DoorSide";
            public const string DoorSize = "DoorSize";
            public const string DistanceFromCornor = "DistanceFromCornor";
            public const string PhysicalStoreTypeID = "PhysicalStoreTypeID";
            public const string CurrentPeriodStartDate = "CurrentPeriodStartDate";
            public const string CurrentInventoryPeriodID = "CurrentInventoryPeriodID";
            public const string IsActive = "IsActive";
            public const string Rowguid = "rowguid";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _PhysicalStore.PropertyNames.ID;
					ht[Name] = _PhysicalStore.PropertyNames.Name;
					ht[Width] = _PhysicalStore.PropertyNames.Width;
					ht[Height] = _PhysicalStore.PropertyNames.Height;
					ht[Length] = _PhysicalStore.PropertyNames.Length;
					ht[DoorSide] = _PhysicalStore.PropertyNames.DoorSide;
					ht[DoorSize] = _PhysicalStore.PropertyNames.DoorSize;
					ht[DistanceFromCornor] = _PhysicalStore.PropertyNames.DistanceFromCornor;
					ht[PhysicalStoreTypeID] = _PhysicalStore.PropertyNames.PhysicalStoreTypeID;
					ht[CurrentPeriodStartDate] = _PhysicalStore.PropertyNames.CurrentPeriodStartDate;
					ht[CurrentInventoryPeriodID] = _PhysicalStore.PropertyNames.CurrentInventoryPeriodID;
					ht[IsActive] = _PhysicalStore.PropertyNames.IsActive;
					ht[Rowguid] = _PhysicalStore.PropertyNames.Rowguid;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string Name = "Name";
            public const string Width = "Width";
            public const string Height = "Height";
            public const string Length = "Length";
            public const string DoorSide = "DoorSide";
            public const string DoorSize = "DoorSize";
            public const string DistanceFromCornor = "DistanceFromCornor";
            public const string PhysicalStoreTypeID = "PhysicalStoreTypeID";
            public const string CurrentPeriodStartDate = "CurrentPeriodStartDate";
            public const string CurrentInventoryPeriodID = "CurrentInventoryPeriodID";
            public const string IsActive = "IsActive";
            public const string Rowguid = "Rowguid";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _PhysicalStore.ColumnNames.ID;
					ht[Name] = _PhysicalStore.ColumnNames.Name;
					ht[Width] = _PhysicalStore.ColumnNames.Width;
					ht[Height] = _PhysicalStore.ColumnNames.Height;
					ht[Length] = _PhysicalStore.ColumnNames.Length;
					ht[DoorSide] = _PhysicalStore.ColumnNames.DoorSide;
					ht[DoorSize] = _PhysicalStore.ColumnNames.DoorSize;
					ht[DistanceFromCornor] = _PhysicalStore.ColumnNames.DistanceFromCornor;
					ht[PhysicalStoreTypeID] = _PhysicalStore.ColumnNames.PhysicalStoreTypeID;
					ht[CurrentPeriodStartDate] = _PhysicalStore.ColumnNames.CurrentPeriodStartDate;
					ht[CurrentInventoryPeriodID] = _PhysicalStore.ColumnNames.CurrentInventoryPeriodID;
					ht[IsActive] = _PhysicalStore.ColumnNames.IsActive;
					ht[Rowguid] = _PhysicalStore.ColumnNames.Rowguid;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string Name = "s_Name";
            public const string Width = "s_Width";
            public const string Height = "s_Height";
            public const string Length = "s_Length";
            public const string DoorSide = "s_DoorSide";
            public const string DoorSize = "s_DoorSize";
            public const string DistanceFromCornor = "s_DistanceFromCornor";
            public const string PhysicalStoreTypeID = "s_PhysicalStoreTypeID";
            public const string CurrentPeriodStartDate = "s_CurrentPeriodStartDate";
            public const string CurrentInventoryPeriodID = "s_CurrentInventoryPeriodID";
            public const string IsActive = "s_IsActive";
            public const string Rowguid = "s_Rowguid";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual string Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Name, value);
			}
		}

		public virtual double Width
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Width);
			}
			set
	        {
				base.Setdouble(ColumnNames.Width, value);
			}
		}

		public virtual double Height
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Height);
			}
			set
	        {
				base.Setdouble(ColumnNames.Height, value);
			}
		}

		public virtual double Length
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Length);
			}
			set
	        {
				base.Setdouble(ColumnNames.Length, value);
			}
		}

		public virtual int DoorSide
	    {
			get
	        {
				return base.Getint(ColumnNames.DoorSide);
			}
			set
	        {
				base.Setint(ColumnNames.DoorSide, value);
			}
		}

		public virtual double DoorSize
	    {
			get
	        {
				return base.Getdouble(ColumnNames.DoorSize);
			}
			set
	        {
				base.Setdouble(ColumnNames.DoorSize, value);
			}
		}

		public virtual double DistanceFromCornor
	    {
			get
	        {
				return base.Getdouble(ColumnNames.DistanceFromCornor);
			}
			set
	        {
				base.Setdouble(ColumnNames.DistanceFromCornor, value);
			}
		}

		public virtual int PhysicalStoreTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.PhysicalStoreTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.PhysicalStoreTypeID, value);
			}
		}

		public virtual DateTime CurrentPeriodStartDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CurrentPeriodStartDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CurrentPeriodStartDate, value);
			}
		}

		public virtual int CurrentInventoryPeriodID
	    {
			get
	        {
				return base.Getint(ColumnNames.CurrentInventoryPeriodID);
			}
			set
	        {
				base.Setint(ColumnNames.CurrentInventoryPeriodID, value);
			}
		}

		public virtual bool IsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.IsActive, value);
			}
		}

		public virtual Guid Rowguid
	    {
			get
	        {
				return base.GetGuid(ColumnNames.Rowguid);
			}
			set
	        {
				base.SetGuid(ColumnNames.Rowguid, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name);
				else
					this.Name = base.SetstringAsString(ColumnNames.Name, value);
			}
		}

		public virtual string s_Width
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Width) ? string.Empty : base.GetdoubleAsString(ColumnNames.Width);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Width);
				else
					this.Width = base.SetdoubleAsString(ColumnNames.Width, value);
			}
		}

		public virtual string s_Height
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Height) ? string.Empty : base.GetdoubleAsString(ColumnNames.Height);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Height);
				else
					this.Height = base.SetdoubleAsString(ColumnNames.Height, value);
			}
		}

		public virtual string s_Length
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Length) ? string.Empty : base.GetdoubleAsString(ColumnNames.Length);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Length);
				else
					this.Length = base.SetdoubleAsString(ColumnNames.Length, value);
			}
		}

		public virtual string s_DoorSide
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DoorSide) ? string.Empty : base.GetintAsString(ColumnNames.DoorSide);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DoorSide);
				else
					this.DoorSide = base.SetintAsString(ColumnNames.DoorSide, value);
			}
		}

		public virtual string s_DoorSize
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DoorSize) ? string.Empty : base.GetdoubleAsString(ColumnNames.DoorSize);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DoorSize);
				else
					this.DoorSize = base.SetdoubleAsString(ColumnNames.DoorSize, value);
			}
		}

		public virtual string s_DistanceFromCornor
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DistanceFromCornor) ? string.Empty : base.GetdoubleAsString(ColumnNames.DistanceFromCornor);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DistanceFromCornor);
				else
					this.DistanceFromCornor = base.SetdoubleAsString(ColumnNames.DistanceFromCornor, value);
			}
		}

		public virtual string s_PhysicalStoreTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PhysicalStoreTypeID) ? string.Empty : base.GetintAsString(ColumnNames.PhysicalStoreTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PhysicalStoreTypeID);
				else
					this.PhysicalStoreTypeID = base.SetintAsString(ColumnNames.PhysicalStoreTypeID, value);
			}
		}

		public virtual string s_CurrentPeriodStartDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CurrentPeriodStartDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CurrentPeriodStartDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CurrentPeriodStartDate);
				else
					this.CurrentPeriodStartDate = base.SetDateTimeAsString(ColumnNames.CurrentPeriodStartDate, value);
			}
		}

		public virtual string s_CurrentInventoryPeriodID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CurrentInventoryPeriodID) ? string.Empty : base.GetintAsString(ColumnNames.CurrentInventoryPeriodID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CurrentInventoryPeriodID);
				else
					this.CurrentInventoryPeriodID = base.SetintAsString(ColumnNames.CurrentInventoryPeriodID, value);
			}
		}

		public virtual string s_IsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsActive) ? string.Empty : base.GetboolAsString(ColumnNames.IsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsActive);
				else
					this.IsActive = base.SetboolAsString(ColumnNames.IsActive, value);
			}
		}

		public virtual string s_Rowguid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rowguid) ? string.Empty : base.GetGuidAsString(ColumnNames.Rowguid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rowguid);
				else
					this.Rowguid = base.SetGuidAsString(ColumnNames.Rowguid, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Width
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Width, Parameters.Width);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Height
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Height, Parameters.Height);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Length
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Length, Parameters.Length);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DoorSide
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DoorSide, Parameters.DoorSide);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DoorSize
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DoorSize, Parameters.DoorSize);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DistanceFromCornor
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DistanceFromCornor, Parameters.DistanceFromCornor);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PhysicalStoreTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PhysicalStoreTypeID, Parameters.PhysicalStoreTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CurrentPeriodStartDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CurrentPeriodStartDate, Parameters.CurrentPeriodStartDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CurrentInventoryPeriodID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CurrentInventoryPeriodID, Parameters.CurrentInventoryPeriodID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rowguid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rowguid, Parameters.Rowguid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter Width
		    {
				get
		        {
					if(_Width_W == null)
	        	    {
						_Width_W = TearOff.Width;
					}
					return _Width_W;
				}
			}

			public WhereParameter Height
		    {
				get
		        {
					if(_Height_W == null)
	        	    {
						_Height_W = TearOff.Height;
					}
					return _Height_W;
				}
			}

			public WhereParameter Length
		    {
				get
		        {
					if(_Length_W == null)
	        	    {
						_Length_W = TearOff.Length;
					}
					return _Length_W;
				}
			}

			public WhereParameter DoorSide
		    {
				get
		        {
					if(_DoorSide_W == null)
	        	    {
						_DoorSide_W = TearOff.DoorSide;
					}
					return _DoorSide_W;
				}
			}

			public WhereParameter DoorSize
		    {
				get
		        {
					if(_DoorSize_W == null)
	        	    {
						_DoorSize_W = TearOff.DoorSize;
					}
					return _DoorSize_W;
				}
			}

			public WhereParameter DistanceFromCornor
		    {
				get
		        {
					if(_DistanceFromCornor_W == null)
	        	    {
						_DistanceFromCornor_W = TearOff.DistanceFromCornor;
					}
					return _DistanceFromCornor_W;
				}
			}

			public WhereParameter PhysicalStoreTypeID
		    {
				get
		        {
					if(_PhysicalStoreTypeID_W == null)
	        	    {
						_PhysicalStoreTypeID_W = TearOff.PhysicalStoreTypeID;
					}
					return _PhysicalStoreTypeID_W;
				}
			}

			public WhereParameter CurrentPeriodStartDate
		    {
				get
		        {
					if(_CurrentPeriodStartDate_W == null)
	        	    {
						_CurrentPeriodStartDate_W = TearOff.CurrentPeriodStartDate;
					}
					return _CurrentPeriodStartDate_W;
				}
			}

			public WhereParameter CurrentInventoryPeriodID
		    {
				get
		        {
					if(_CurrentInventoryPeriodID_W == null)
	        	    {
						_CurrentInventoryPeriodID_W = TearOff.CurrentInventoryPeriodID;
					}
					return _CurrentInventoryPeriodID_W;
				}
			}

			public WhereParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public WhereParameter Rowguid
		    {
				get
		        {
					if(_Rowguid_W == null)
	        	    {
						_Rowguid_W = TearOff.Rowguid;
					}
					return _Rowguid_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _Width_W = null;
			private WhereParameter _Height_W = null;
			private WhereParameter _Length_W = null;
			private WhereParameter _DoorSide_W = null;
			private WhereParameter _DoorSize_W = null;
			private WhereParameter _DistanceFromCornor_W = null;
			private WhereParameter _PhysicalStoreTypeID_W = null;
			private WhereParameter _CurrentPeriodStartDate_W = null;
			private WhereParameter _CurrentInventoryPeriodID_W = null;
			private WhereParameter _IsActive_W = null;
			private WhereParameter _Rowguid_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_Name_W = null;
				_Width_W = null;
				_Height_W = null;
				_Length_W = null;
				_DoorSide_W = null;
				_DoorSize_W = null;
				_DistanceFromCornor_W = null;
				_PhysicalStoreTypeID_W = null;
				_CurrentPeriodStartDate_W = null;
				_CurrentInventoryPeriodID_W = null;
				_IsActive_W = null;
				_Rowguid_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Width
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Width, Parameters.Width);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Height
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Height, Parameters.Height);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Length
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Length, Parameters.Length);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DoorSide
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DoorSide, Parameters.DoorSide);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DoorSize
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DoorSize, Parameters.DoorSize);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DistanceFromCornor
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DistanceFromCornor, Parameters.DistanceFromCornor);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PhysicalStoreTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PhysicalStoreTypeID, Parameters.PhysicalStoreTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CurrentPeriodStartDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CurrentPeriodStartDate, Parameters.CurrentPeriodStartDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CurrentInventoryPeriodID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CurrentInventoryPeriodID, Parameters.CurrentInventoryPeriodID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rowguid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rowguid, Parameters.Rowguid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter Width
		    {
				get
		        {
					if(_Width_W == null)
	        	    {
						_Width_W = TearOff.Width;
					}
					return _Width_W;
				}
			}

			public AggregateParameter Height
		    {
				get
		        {
					if(_Height_W == null)
	        	    {
						_Height_W = TearOff.Height;
					}
					return _Height_W;
				}
			}

			public AggregateParameter Length
		    {
				get
		        {
					if(_Length_W == null)
	        	    {
						_Length_W = TearOff.Length;
					}
					return _Length_W;
				}
			}

			public AggregateParameter DoorSide
		    {
				get
		        {
					if(_DoorSide_W == null)
	        	    {
						_DoorSide_W = TearOff.DoorSide;
					}
					return _DoorSide_W;
				}
			}

			public AggregateParameter DoorSize
		    {
				get
		        {
					if(_DoorSize_W == null)
	        	    {
						_DoorSize_W = TearOff.DoorSize;
					}
					return _DoorSize_W;
				}
			}

			public AggregateParameter DistanceFromCornor
		    {
				get
		        {
					if(_DistanceFromCornor_W == null)
	        	    {
						_DistanceFromCornor_W = TearOff.DistanceFromCornor;
					}
					return _DistanceFromCornor_W;
				}
			}

			public AggregateParameter PhysicalStoreTypeID
		    {
				get
		        {
					if(_PhysicalStoreTypeID_W == null)
	        	    {
						_PhysicalStoreTypeID_W = TearOff.PhysicalStoreTypeID;
					}
					return _PhysicalStoreTypeID_W;
				}
			}

			public AggregateParameter CurrentPeriodStartDate
		    {
				get
		        {
					if(_CurrentPeriodStartDate_W == null)
	        	    {
						_CurrentPeriodStartDate_W = TearOff.CurrentPeriodStartDate;
					}
					return _CurrentPeriodStartDate_W;
				}
			}

			public AggregateParameter CurrentInventoryPeriodID
		    {
				get
		        {
					if(_CurrentInventoryPeriodID_W == null)
	        	    {
						_CurrentInventoryPeriodID_W = TearOff.CurrentInventoryPeriodID;
					}
					return _CurrentInventoryPeriodID_W;
				}
			}

			public AggregateParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public AggregateParameter Rowguid
		    {
				get
		        {
					if(_Rowguid_W == null)
	        	    {
						_Rowguid_W = TearOff.Rowguid;
					}
					return _Rowguid_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _Width_W = null;
			private AggregateParameter _Height_W = null;
			private AggregateParameter _Length_W = null;
			private AggregateParameter _DoorSide_W = null;
			private AggregateParameter _DoorSize_W = null;
			private AggregateParameter _DistanceFromCornor_W = null;
			private AggregateParameter _PhysicalStoreTypeID_W = null;
			private AggregateParameter _CurrentPeriodStartDate_W = null;
			private AggregateParameter _CurrentInventoryPeriodID_W = null;
			private AggregateParameter _IsActive_W = null;
			private AggregateParameter _Rowguid_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_Name_W = null;
				_Width_W = null;
				_Height_W = null;
				_Length_W = null;
				_DoorSide_W = null;
				_DoorSize_W = null;
				_DistanceFromCornor_W = null;
				_PhysicalStoreTypeID_W = null;
				_CurrentPeriodStartDate_W = null;
				_CurrentInventoryPeriodID_W = null;
				_IsActive_W = null;
				_Rowguid_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PhysicalStoreInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PhysicalStoreUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PhysicalStoreDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name);
			p.SourceColumn = ColumnNames.Name;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Width);
			p.SourceColumn = ColumnNames.Width;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Height);
			p.SourceColumn = ColumnNames.Height;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Length);
			p.SourceColumn = ColumnNames.Length;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DoorSide);
			p.SourceColumn = ColumnNames.DoorSide;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DoorSize);
			p.SourceColumn = ColumnNames.DoorSize;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DistanceFromCornor);
			p.SourceColumn = ColumnNames.DistanceFromCornor;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PhysicalStoreTypeID);
			p.SourceColumn = ColumnNames.PhysicalStoreTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CurrentPeriodStartDate);
			p.SourceColumn = ColumnNames.CurrentPeriodStartDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CurrentInventoryPeriodID);
			p.SourceColumn = ColumnNames.CurrentInventoryPeriodID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsActive);
			p.SourceColumn = ColumnNames.IsActive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rowguid);
			p.SourceColumn = ColumnNames.Rowguid;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
