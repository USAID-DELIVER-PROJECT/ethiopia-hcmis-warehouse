
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _ReceiptInvoiceDetail : SqlClientEntity
	{
		public _ReceiptInvoiceDetail()
		{
			this.QuerySource = "ReceiptInvoiceDetail";
			this.MappingName = "ReceiptInvoiceDetail";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ReceiptInvoiceDetailLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ReceiptInvoiceDetailID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ReceiptInvoiceDetailID, ReceiptInvoiceDetailID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ReceiptInvoiceDetailLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ReceiptInvoiceDetailID
			{
				get
				{
					return new SqlParameter("@ReceiptInvoiceDetailID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ReceiptInvoiceID
			{
				get
				{
					return new SqlParameter("@ReceiptInvoiceID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ItemID
			{
				get
				{
					return new SqlParameter("@ItemID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Remark
			{
				get
				{
					return new SqlParameter("@Remark", SqlDbType.NVarChar, 400);
				}
			}
			
			public static SqlParameter UnitOfIssueID
			{
				get
				{
					return new SqlParameter("@UnitOfIssueID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ManufacturerID
			{
				get
				{
					return new SqlParameter("@ManufacturerID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ExpiryDate
			{
				get
				{
					return new SqlParameter("@ExpiryDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter UnitPrice
			{
				get
				{
					return new SqlParameter("@UnitPrice", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter BatchNumber
			{
				get
				{
					return new SqlParameter("@BatchNumber", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter Rowguid
			{
				get
				{
					return new SqlParameter("@Rowguid", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter Margin
			{
				get
				{
					return new SqlParameter("@Margin", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter Quantity
			{
				get
				{
					return new SqlParameter("@Quantity", SqlDbType.Decimal, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ReceiptInvoiceDetailID = "ReceiptInvoiceDetailID";
            public const string ReceiptInvoiceID = "ReceiptInvoiceID";
            public const string ItemID = "ItemID";
            public const string Remark = "Remark";
            public const string UnitOfIssueID = "UnitOfIssueID";
            public const string ManufacturerID = "ManufacturerID";
            public const string ExpiryDate = "ExpiryDate";
            public const string UnitPrice = "UnitPrice";
            public const string BatchNumber = "BatchNumber";
            public const string Rowguid = "rowguid";
            public const string Margin = "Margin";
            public const string Quantity = "Quantity";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ReceiptInvoiceDetailID] = _ReceiptInvoiceDetail.PropertyNames.ReceiptInvoiceDetailID;
					ht[ReceiptInvoiceID] = _ReceiptInvoiceDetail.PropertyNames.ReceiptInvoiceID;
					ht[ItemID] = _ReceiptInvoiceDetail.PropertyNames.ItemID;
					ht[Remark] = _ReceiptInvoiceDetail.PropertyNames.Remark;
					ht[UnitOfIssueID] = _ReceiptInvoiceDetail.PropertyNames.UnitOfIssueID;
					ht[ManufacturerID] = _ReceiptInvoiceDetail.PropertyNames.ManufacturerID;
					ht[ExpiryDate] = _ReceiptInvoiceDetail.PropertyNames.ExpiryDate;
					ht[UnitPrice] = _ReceiptInvoiceDetail.PropertyNames.UnitPrice;
					ht[BatchNumber] = _ReceiptInvoiceDetail.PropertyNames.BatchNumber;
					ht[Rowguid] = _ReceiptInvoiceDetail.PropertyNames.Rowguid;
					ht[Margin] = _ReceiptInvoiceDetail.PropertyNames.Margin;
					ht[Quantity] = _ReceiptInvoiceDetail.PropertyNames.Quantity;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ReceiptInvoiceDetailID = "ReceiptInvoiceDetailID";
            public const string ReceiptInvoiceID = "ReceiptInvoiceID";
            public const string ItemID = "ItemID";
            public const string Remark = "Remark";
            public const string UnitOfIssueID = "UnitOfIssueID";
            public const string ManufacturerID = "ManufacturerID";
            public const string ExpiryDate = "ExpiryDate";
            public const string UnitPrice = "UnitPrice";
            public const string BatchNumber = "BatchNumber";
            public const string Rowguid = "Rowguid";
            public const string Margin = "Margin";
            public const string Quantity = "Quantity";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ReceiptInvoiceDetailID] = _ReceiptInvoiceDetail.ColumnNames.ReceiptInvoiceDetailID;
					ht[ReceiptInvoiceID] = _ReceiptInvoiceDetail.ColumnNames.ReceiptInvoiceID;
					ht[ItemID] = _ReceiptInvoiceDetail.ColumnNames.ItemID;
					ht[Remark] = _ReceiptInvoiceDetail.ColumnNames.Remark;
					ht[UnitOfIssueID] = _ReceiptInvoiceDetail.ColumnNames.UnitOfIssueID;
					ht[ManufacturerID] = _ReceiptInvoiceDetail.ColumnNames.ManufacturerID;
					ht[ExpiryDate] = _ReceiptInvoiceDetail.ColumnNames.ExpiryDate;
					ht[UnitPrice] = _ReceiptInvoiceDetail.ColumnNames.UnitPrice;
					ht[BatchNumber] = _ReceiptInvoiceDetail.ColumnNames.BatchNumber;
					ht[Rowguid] = _ReceiptInvoiceDetail.ColumnNames.Rowguid;
					ht[Margin] = _ReceiptInvoiceDetail.ColumnNames.Margin;
					ht[Quantity] = _ReceiptInvoiceDetail.ColumnNames.Quantity;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ReceiptInvoiceDetailID = "s_ReceiptInvoiceDetailID";
            public const string ReceiptInvoiceID = "s_ReceiptInvoiceID";
            public const string ItemID = "s_ItemID";
            public const string Remark = "s_Remark";
            public const string UnitOfIssueID = "s_UnitOfIssueID";
            public const string ManufacturerID = "s_ManufacturerID";
            public const string ExpiryDate = "s_ExpiryDate";
            public const string UnitPrice = "s_UnitPrice";
            public const string BatchNumber = "s_BatchNumber";
            public const string Rowguid = "s_Rowguid";
            public const string Margin = "s_Margin";
            public const string Quantity = "s_Quantity";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ReceiptInvoiceDetailID
	    {
			get
	        {
				return base.Getint(ColumnNames.ReceiptInvoiceDetailID);
			}
			set
	        {
				base.Setint(ColumnNames.ReceiptInvoiceDetailID, value);
			}
		}

		public virtual int ReceiptInvoiceID
	    {
			get
	        {
				return base.Getint(ColumnNames.ReceiptInvoiceID);
			}
			set
	        {
				base.Setint(ColumnNames.ReceiptInvoiceID, value);
			}
		}

		public virtual int ItemID
	    {
			get
	        {
				return base.Getint(ColumnNames.ItemID);
			}
			set
	        {
				base.Setint(ColumnNames.ItemID, value);
			}
		}

		public virtual string Remark
	    {
			get
	        {
				return base.Getstring(ColumnNames.Remark);
			}
			set
	        {
				base.Setstring(ColumnNames.Remark, value);
			}
		}

		public virtual int UnitOfIssueID
	    {
			get
	        {
				return base.Getint(ColumnNames.UnitOfIssueID);
			}
			set
	        {
				base.Setint(ColumnNames.UnitOfIssueID, value);
			}
		}

		public virtual int ManufacturerID
	    {
			get
	        {
				return base.Getint(ColumnNames.ManufacturerID);
			}
			set
	        {
				base.Setint(ColumnNames.ManufacturerID, value);
			}
		}

		public virtual DateTime ExpiryDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ExpiryDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ExpiryDate, value);
			}
		}

		public virtual decimal UnitPrice
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.UnitPrice);
			}
			set
	        {
				base.Setdecimal(ColumnNames.UnitPrice, value);
			}
		}

		public virtual string BatchNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.BatchNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.BatchNumber, value);
			}
		}

		public virtual Guid Rowguid
	    {
			get
	        {
				return base.GetGuid(ColumnNames.Rowguid);
			}
			set
	        {
				base.SetGuid(ColumnNames.Rowguid, value);
			}
		}

		public virtual decimal Margin
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Margin);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Margin, value);
			}
		}

		public virtual decimal Quantity
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Quantity);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Quantity, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ReceiptInvoiceDetailID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceiptInvoiceDetailID) ? string.Empty : base.GetintAsString(ColumnNames.ReceiptInvoiceDetailID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceiptInvoiceDetailID);
				else
					this.ReceiptInvoiceDetailID = base.SetintAsString(ColumnNames.ReceiptInvoiceDetailID, value);
			}
		}

		public virtual string s_ReceiptInvoiceID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceiptInvoiceID) ? string.Empty : base.GetintAsString(ColumnNames.ReceiptInvoiceID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceiptInvoiceID);
				else
					this.ReceiptInvoiceID = base.SetintAsString(ColumnNames.ReceiptInvoiceID, value);
			}
		}

		public virtual string s_ItemID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ItemID) ? string.Empty : base.GetintAsString(ColumnNames.ItemID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ItemID);
				else
					this.ItemID = base.SetintAsString(ColumnNames.ItemID, value);
			}
		}

		public virtual string s_Remark
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Remark) ? string.Empty : base.GetstringAsString(ColumnNames.Remark);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Remark);
				else
					this.Remark = base.SetstringAsString(ColumnNames.Remark, value);
			}
		}

		public virtual string s_UnitOfIssueID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UnitOfIssueID) ? string.Empty : base.GetintAsString(ColumnNames.UnitOfIssueID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnitOfIssueID);
				else
					this.UnitOfIssueID = base.SetintAsString(ColumnNames.UnitOfIssueID, value);
			}
		}

		public virtual string s_ManufacturerID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ManufacturerID) ? string.Empty : base.GetintAsString(ColumnNames.ManufacturerID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ManufacturerID);
				else
					this.ManufacturerID = base.SetintAsString(ColumnNames.ManufacturerID, value);
			}
		}

		public virtual string s_ExpiryDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ExpiryDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ExpiryDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ExpiryDate);
				else
					this.ExpiryDate = base.SetDateTimeAsString(ColumnNames.ExpiryDate, value);
			}
		}

		public virtual string s_UnitPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UnitPrice) ? string.Empty : base.GetdecimalAsString(ColumnNames.UnitPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnitPrice);
				else
					this.UnitPrice = base.SetdecimalAsString(ColumnNames.UnitPrice, value);
			}
		}

		public virtual string s_BatchNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BatchNumber) ? string.Empty : base.GetstringAsString(ColumnNames.BatchNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BatchNumber);
				else
					this.BatchNumber = base.SetstringAsString(ColumnNames.BatchNumber, value);
			}
		}

		public virtual string s_Rowguid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rowguid) ? string.Empty : base.GetGuidAsString(ColumnNames.Rowguid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rowguid);
				else
					this.Rowguid = base.SetGuidAsString(ColumnNames.Rowguid, value);
			}
		}

		public virtual string s_Margin
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Margin) ? string.Empty : base.GetdecimalAsString(ColumnNames.Margin);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Margin);
				else
					this.Margin = base.SetdecimalAsString(ColumnNames.Margin, value);
			}
		}

		public virtual string s_Quantity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Quantity) ? string.Empty : base.GetdecimalAsString(ColumnNames.Quantity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Quantity);
				else
					this.Quantity = base.SetdecimalAsString(ColumnNames.Quantity, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ReceiptInvoiceDetailID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceiptInvoiceDetailID, Parameters.ReceiptInvoiceDetailID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReceiptInvoiceID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceiptInvoiceID, Parameters.ReceiptInvoiceID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ItemID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Remark
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UnitOfIssueID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UnitOfIssueID, Parameters.UnitOfIssueID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ManufacturerID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ManufacturerID, Parameters.ManufacturerID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ExpiryDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ExpiryDate, Parameters.ExpiryDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UnitPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UnitPrice, Parameters.UnitPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BatchNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BatchNumber, Parameters.BatchNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rowguid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rowguid, Parameters.Rowguid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Margin
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Margin, Parameters.Margin);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Quantity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Quantity, Parameters.Quantity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ReceiptInvoiceDetailID
		    {
				get
		        {
					if(_ReceiptInvoiceDetailID_W == null)
	        	    {
						_ReceiptInvoiceDetailID_W = TearOff.ReceiptInvoiceDetailID;
					}
					return _ReceiptInvoiceDetailID_W;
				}
			}

			public WhereParameter ReceiptInvoiceID
		    {
				get
		        {
					if(_ReceiptInvoiceID_W == null)
	        	    {
						_ReceiptInvoiceID_W = TearOff.ReceiptInvoiceID;
					}
					return _ReceiptInvoiceID_W;
				}
			}

			public WhereParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public WhereParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			public WhereParameter UnitOfIssueID
		    {
				get
		        {
					if(_UnitOfIssueID_W == null)
	        	    {
						_UnitOfIssueID_W = TearOff.UnitOfIssueID;
					}
					return _UnitOfIssueID_W;
				}
			}

			public WhereParameter ManufacturerID
		    {
				get
		        {
					if(_ManufacturerID_W == null)
	        	    {
						_ManufacturerID_W = TearOff.ManufacturerID;
					}
					return _ManufacturerID_W;
				}
			}

			public WhereParameter ExpiryDate
		    {
				get
		        {
					if(_ExpiryDate_W == null)
	        	    {
						_ExpiryDate_W = TearOff.ExpiryDate;
					}
					return _ExpiryDate_W;
				}
			}

			public WhereParameter UnitPrice
		    {
				get
		        {
					if(_UnitPrice_W == null)
	        	    {
						_UnitPrice_W = TearOff.UnitPrice;
					}
					return _UnitPrice_W;
				}
			}

			public WhereParameter BatchNumber
		    {
				get
		        {
					if(_BatchNumber_W == null)
	        	    {
						_BatchNumber_W = TearOff.BatchNumber;
					}
					return _BatchNumber_W;
				}
			}

			public WhereParameter Rowguid
		    {
				get
		        {
					if(_Rowguid_W == null)
	        	    {
						_Rowguid_W = TearOff.Rowguid;
					}
					return _Rowguid_W;
				}
			}

			public WhereParameter Margin
		    {
				get
		        {
					if(_Margin_W == null)
	        	    {
						_Margin_W = TearOff.Margin;
					}
					return _Margin_W;
				}
			}

			public WhereParameter Quantity
		    {
				get
		        {
					if(_Quantity_W == null)
	        	    {
						_Quantity_W = TearOff.Quantity;
					}
					return _Quantity_W;
				}
			}

			private WhereParameter _ReceiptInvoiceDetailID_W = null;
			private WhereParameter _ReceiptInvoiceID_W = null;
			private WhereParameter _ItemID_W = null;
			private WhereParameter _Remark_W = null;
			private WhereParameter _UnitOfIssueID_W = null;
			private WhereParameter _ManufacturerID_W = null;
			private WhereParameter _ExpiryDate_W = null;
			private WhereParameter _UnitPrice_W = null;
			private WhereParameter _BatchNumber_W = null;
			private WhereParameter _Rowguid_W = null;
			private WhereParameter _Margin_W = null;
			private WhereParameter _Quantity_W = null;

			public void WhereClauseReset()
			{
				_ReceiptInvoiceDetailID_W = null;
				_ReceiptInvoiceID_W = null;
				_ItemID_W = null;
				_Remark_W = null;
				_UnitOfIssueID_W = null;
				_ManufacturerID_W = null;
				_ExpiryDate_W = null;
				_UnitPrice_W = null;
				_BatchNumber_W = null;
				_Rowguid_W = null;
				_Margin_W = null;
				_Quantity_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ReceiptInvoiceDetailID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceiptInvoiceDetailID, Parameters.ReceiptInvoiceDetailID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReceiptInvoiceID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceiptInvoiceID, Parameters.ReceiptInvoiceID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ItemID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Remark
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Remark, Parameters.Remark);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UnitOfIssueID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitOfIssueID, Parameters.UnitOfIssueID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ManufacturerID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ManufacturerID, Parameters.ManufacturerID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ExpiryDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExpiryDate, Parameters.ExpiryDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UnitPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitPrice, Parameters.UnitPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BatchNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BatchNumber, Parameters.BatchNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rowguid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rowguid, Parameters.Rowguid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Margin
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Margin, Parameters.Margin);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Quantity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Quantity, Parameters.Quantity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ReceiptInvoiceDetailID
		    {
				get
		        {
					if(_ReceiptInvoiceDetailID_W == null)
	        	    {
						_ReceiptInvoiceDetailID_W = TearOff.ReceiptInvoiceDetailID;
					}
					return _ReceiptInvoiceDetailID_W;
				}
			}

			public AggregateParameter ReceiptInvoiceID
		    {
				get
		        {
					if(_ReceiptInvoiceID_W == null)
	        	    {
						_ReceiptInvoiceID_W = TearOff.ReceiptInvoiceID;
					}
					return _ReceiptInvoiceID_W;
				}
			}

			public AggregateParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public AggregateParameter Remark
		    {
				get
		        {
					if(_Remark_W == null)
	        	    {
						_Remark_W = TearOff.Remark;
					}
					return _Remark_W;
				}
			}

			public AggregateParameter UnitOfIssueID
		    {
				get
		        {
					if(_UnitOfIssueID_W == null)
	        	    {
						_UnitOfIssueID_W = TearOff.UnitOfIssueID;
					}
					return _UnitOfIssueID_W;
				}
			}

			public AggregateParameter ManufacturerID
		    {
				get
		        {
					if(_ManufacturerID_W == null)
	        	    {
						_ManufacturerID_W = TearOff.ManufacturerID;
					}
					return _ManufacturerID_W;
				}
			}

			public AggregateParameter ExpiryDate
		    {
				get
		        {
					if(_ExpiryDate_W == null)
	        	    {
						_ExpiryDate_W = TearOff.ExpiryDate;
					}
					return _ExpiryDate_W;
				}
			}

			public AggregateParameter UnitPrice
		    {
				get
		        {
					if(_UnitPrice_W == null)
	        	    {
						_UnitPrice_W = TearOff.UnitPrice;
					}
					return _UnitPrice_W;
				}
			}

			public AggregateParameter BatchNumber
		    {
				get
		        {
					if(_BatchNumber_W == null)
	        	    {
						_BatchNumber_W = TearOff.BatchNumber;
					}
					return _BatchNumber_W;
				}
			}

			public AggregateParameter Rowguid
		    {
				get
		        {
					if(_Rowguid_W == null)
	        	    {
						_Rowguid_W = TearOff.Rowguid;
					}
					return _Rowguid_W;
				}
			}

			public AggregateParameter Margin
		    {
				get
		        {
					if(_Margin_W == null)
	        	    {
						_Margin_W = TearOff.Margin;
					}
					return _Margin_W;
				}
			}

			public AggregateParameter Quantity
		    {
				get
		        {
					if(_Quantity_W == null)
	        	    {
						_Quantity_W = TearOff.Quantity;
					}
					return _Quantity_W;
				}
			}

			private AggregateParameter _ReceiptInvoiceDetailID_W = null;
			private AggregateParameter _ReceiptInvoiceID_W = null;
			private AggregateParameter _ItemID_W = null;
			private AggregateParameter _Remark_W = null;
			private AggregateParameter _UnitOfIssueID_W = null;
			private AggregateParameter _ManufacturerID_W = null;
			private AggregateParameter _ExpiryDate_W = null;
			private AggregateParameter _UnitPrice_W = null;
			private AggregateParameter _BatchNumber_W = null;
			private AggregateParameter _Rowguid_W = null;
			private AggregateParameter _Margin_W = null;
			private AggregateParameter _Quantity_W = null;

			public void AggregateClauseReset()
			{
				_ReceiptInvoiceDetailID_W = null;
				_ReceiptInvoiceID_W = null;
				_ItemID_W = null;
				_Remark_W = null;
				_UnitOfIssueID_W = null;
				_ManufacturerID_W = null;
				_ExpiryDate_W = null;
				_UnitPrice_W = null;
				_BatchNumber_W = null;
				_Rowguid_W = null;
				_Margin_W = null;
				_Quantity_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ReceiptInvoiceDetailInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ReceiptInvoiceDetailID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ReceiptInvoiceDetailUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ReceiptInvoiceDetailDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ReceiptInvoiceDetailID);
			p.SourceColumn = ColumnNames.ReceiptInvoiceDetailID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ReceiptInvoiceDetailID);
			p.SourceColumn = ColumnNames.ReceiptInvoiceDetailID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReceiptInvoiceID);
			p.SourceColumn = ColumnNames.ReceiptInvoiceID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ItemID);
			p.SourceColumn = ColumnNames.ItemID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Remark);
			p.SourceColumn = ColumnNames.Remark;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UnitOfIssueID);
			p.SourceColumn = ColumnNames.UnitOfIssueID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ManufacturerID);
			p.SourceColumn = ColumnNames.ManufacturerID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ExpiryDate);
			p.SourceColumn = ColumnNames.ExpiryDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UnitPrice);
			p.SourceColumn = ColumnNames.UnitPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BatchNumber);
			p.SourceColumn = ColumnNames.BatchNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rowguid);
			p.SourceColumn = ColumnNames.Rowguid;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Margin);
			p.SourceColumn = ColumnNames.Margin;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Quantity);
			p.SourceColumn = ColumnNames.Quantity;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
