
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
    public abstract class _Institution : SqlClientEntity
    {
        public _Institution()
        {
            this.QuerySource = "Institution";
            this.MappingName = "Institution";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InstitutionLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int ID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.ID, ID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InstitutionLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter ID
            {
                get
                {
                    return new SqlParameter("@ID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Name
            {
                get
                {
                    return new SqlParameter("@Name", SqlDbType.NVarChar, 200);
                }
            }

            public static SqlParameter Description
            {
                get
                {
                    return new SqlParameter("@Description", SqlDbType.Text, 2147483647);
                }
            }

            public static SqlParameter Phone
            {
                get
                {
                    return new SqlParameter("@Phone", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter Woreda
            {
                get
                {
                    return new SqlParameter("@Woreda", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Route
            {
                get
                {
                    return new SqlParameter("@Route", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter RouteSequence
            {
                get
                {
                    return new SqlParameter("@RouteSequence", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter PaymentTypeID
            {
                get
                {
                    return new SqlParameter("@PaymentTypeID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter LicenseNo
            {
                get
                {
                    return new SqlParameter("@LicenseNo", SqlDbType.NVarChar, 255);
                }
            }

            public static SqlParameter VATNo
            {
                get
                {
                    return new SqlParameter("@VATNo", SqlDbType.NVarChar, 255);
                }
            }

            public static SqlParameter TinNo
            {
                get
                {
                    return new SqlParameter("@TinNo", SqlDbType.NVarChar, 255);
                }
            }

            public static SqlParameter DateOfRegistration
            {
                get
                {
                    return new SqlParameter("@DateOfRegistration", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter Town
            {
                get
                {
                    return new SqlParameter("@Town", SqlDbType.NVarChar, 50);
                }
            }

            public static SqlParameter Kebele
            {
                get
                {
                    return new SqlParameter("@Kebele", SqlDbType.NVarChar, 50);
                }
            }

            public static SqlParameter RUType
            {
                get
                {
                    return new SqlParameter("@RUType", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Ownership
            {
                get
                {
                    return new SqlParameter("@Ownership", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Zone
            {
                get
                {
                    return new SqlParameter("@Zone", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Active
            {
                get
                {
                    return new SqlParameter("@Active", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter InProcess
            {
                get
                {
                    return new SqlParameter("@InProcess", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter CreatedDate
            {
                get
                {
                    return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter ModifiedDate
            {
                get
                {
                    return new SqlParameter("@ModifiedDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter ModifiedBy
            {
                get
                {
                    return new SqlParameter("@ModifiedBy", SqlDbType.NVarChar, 50);
                }
            }

            public static SqlParameter SN
            {
                get
                {
                    return new SqlParameter("@SN", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter IsUsedAtFacility
            {
                get
                {
                    return new SqlParameter("@IsUsedAtFacility", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter IsDraft
            {
                get
                {
                    return new SqlParameter("@IsDraft", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter IsLocalSite
            {
                get
                {
                    return new SqlParameter("@IsLocalSite", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter AdministrativeUnitID
            {
                get
                {
                    return new SqlParameter("@AdministrativeUnitID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter OperationalStatus
            {
                get
                {
                    return new SqlParameter("@OperationalStatus", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter NUrowguid
            {
                get
                {
                    return new SqlParameter("@NUrowguid", SqlDbType.UniqueIdentifier, 0);
                }
            }

            public static SqlParameter Rowguid
            {
                get
                {
                    return new SqlParameter("@Rowguid", SqlDbType.UniqueIdentifier, 0);
                }
            }

            public static SqlParameter AlternateName
            {
                get
                {
                    return new SqlParameter("@AlternateName", SqlDbType.NVarChar, 100);
                }
            }

            public static SqlParameter ReportingGroupID
            {
                get
                {
                    return new SqlParameter("@ReportingGroupID", SqlDbType.Int, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string ID = "ID";
            public const string Name = "Name";
            public const string Description = "Description";
            public const string Phone = "Phone";
            public const string Woreda = "Woreda";
            public const string Route = "Route";
            public const string RouteSequence = "RouteSequence";
            public const string PaymentTypeID = "PaymentTypeID";
            public const string LicenseNo = "LicenseNo";
            public const string VATNo = "VATNo";
            public const string TinNo = "TinNo";
            public const string DateOfRegistration = "DateOfRegistration";
            public const string Town = "Town";
            public const string Kebele = "Kebele";
            public const string RUType = "RUType";
            public const string Ownership = "Ownership";
            public const string Zone = "Zone";
            public const string Active = "Active";
            public const string InProcess = "InProcess";
            public const string CreatedDate = "CreatedDate";
            public const string ModifiedDate = "ModifiedDate";
            public const string ModifiedBy = "ModifiedBy";
            public const string SN = "SN";
            public const string IsUsedAtFacility = "IsUsedAtFacility";
            public const string IsDraft = "IsDraft";
            public const string IsLocalSite = "IsLocalSite";
            public const string AdministrativeUnitID = "AdministrativeUnitID";
            public const string OperationalStatus = "OperationalStatus";
            public const string NUrowguid = "NUrowguid";
            public const string Rowguid = "rowguid";
            public const string AlternateName = "AlternateName";
            public const string ReportingGroupID = "ReportingGroupID";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _Institution.PropertyNames.ID;
                    ht[Name] = _Institution.PropertyNames.Name;
                    ht[Description] = _Institution.PropertyNames.Description;
                    ht[Phone] = _Institution.PropertyNames.Phone;
                    ht[Woreda] = _Institution.PropertyNames.Woreda;
                    ht[Route] = _Institution.PropertyNames.Route;
                    ht[RouteSequence] = _Institution.PropertyNames.RouteSequence;
                    ht[PaymentTypeID] = _Institution.PropertyNames.PaymentTypeID;
                    ht[LicenseNo] = _Institution.PropertyNames.LicenseNo;
                    ht[VATNo] = _Institution.PropertyNames.VATNo;
                    ht[TinNo] = _Institution.PropertyNames.TinNo;
                    ht[DateOfRegistration] = _Institution.PropertyNames.DateOfRegistration;
                    ht[Town] = _Institution.PropertyNames.Town;
                    ht[Kebele] = _Institution.PropertyNames.Kebele;
                    ht[RUType] = _Institution.PropertyNames.RUType;
                    ht[Ownership] = _Institution.PropertyNames.Ownership;
                    ht[Zone] = _Institution.PropertyNames.Zone;
                    ht[Active] = _Institution.PropertyNames.Active;
                    ht[InProcess] = _Institution.PropertyNames.InProcess;
                    ht[CreatedDate] = _Institution.PropertyNames.CreatedDate;
                    ht[ModifiedDate] = _Institution.PropertyNames.ModifiedDate;
                    ht[ModifiedBy] = _Institution.PropertyNames.ModifiedBy;
                    ht[SN] = _Institution.PropertyNames.SN;
                    ht[IsUsedAtFacility] = _Institution.PropertyNames.IsUsedAtFacility;
                    ht[IsDraft] = _Institution.PropertyNames.IsDraft;
                    ht[IsLocalSite] = _Institution.PropertyNames.IsLocalSite;
                    ht[AdministrativeUnitID] = _Institution.PropertyNames.AdministrativeUnitID;
                    ht[OperationalStatus] = _Institution.PropertyNames.OperationalStatus;
                    ht[NUrowguid] = _Institution.PropertyNames.NUrowguid;
                    ht[Rowguid] = _Institution.PropertyNames.Rowguid;
                    ht[AlternateName] = _Institution.PropertyNames.AlternateName;
                    ht[ReportingGroupID] = _Institution.PropertyNames.ReportingGroupID;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string ID = "ID";
            public const string Name = "Name";
            public const string Description = "Description";
            public const string Phone = "Phone";
            public const string Woreda = "Woreda";
            public const string Route = "Route";
            public const string RouteSequence = "RouteSequence";
            public const string PaymentTypeID = "PaymentTypeID";
            public const string LicenseNo = "LicenseNo";
            public const string VATNo = "VATNo";
            public const string TinNo = "TinNo";
            public const string DateOfRegistration = "DateOfRegistration";
            public const string Town = "Town";
            public const string Kebele = "Kebele";
            public const string RUType = "RUType";
            public const string Ownership = "Ownership";
            public const string Zone = "Zone";
            public const string Active = "Active";
            public const string InProcess = "InProcess";
            public const string CreatedDate = "CreatedDate";
            public const string ModifiedDate = "ModifiedDate";
            public const string ModifiedBy = "ModifiedBy";
            public const string SN = "SN";
            public const string IsUsedAtFacility = "IsUsedAtFacility";
            public const string IsDraft = "IsDraft";
            public const string IsLocalSite = "IsLocalSite";
            public const string AdministrativeUnitID = "AdministrativeUnitID";
            public const string OperationalStatus = "OperationalStatus";
            public const string NUrowguid = "NUrowguid";
            public const string Rowguid = "Rowguid";
            public const string AlternateName = "AlternateName";
            public const string ReportingGroupID = "ReportingGroupID";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _Institution.ColumnNames.ID;
                    ht[Name] = _Institution.ColumnNames.Name;
                    ht[Description] = _Institution.ColumnNames.Description;
                    ht[Phone] = _Institution.ColumnNames.Phone;
                    ht[Woreda] = _Institution.ColumnNames.Woreda;
                    ht[Route] = _Institution.ColumnNames.Route;
                    ht[RouteSequence] = _Institution.ColumnNames.RouteSequence;
                    ht[PaymentTypeID] = _Institution.ColumnNames.PaymentTypeID;
                    ht[LicenseNo] = _Institution.ColumnNames.LicenseNo;
                    ht[VATNo] = _Institution.ColumnNames.VATNo;
                    ht[TinNo] = _Institution.ColumnNames.TinNo;
                    ht[DateOfRegistration] = _Institution.ColumnNames.DateOfRegistration;
                    ht[Town] = _Institution.ColumnNames.Town;
                    ht[Kebele] = _Institution.ColumnNames.Kebele;
                    ht[RUType] = _Institution.ColumnNames.RUType;
                    ht[Ownership] = _Institution.ColumnNames.Ownership;
                    ht[Zone] = _Institution.ColumnNames.Zone;
                    ht[Active] = _Institution.ColumnNames.Active;
                    ht[InProcess] = _Institution.ColumnNames.InProcess;
                    ht[CreatedDate] = _Institution.ColumnNames.CreatedDate;
                    ht[ModifiedDate] = _Institution.ColumnNames.ModifiedDate;
                    ht[ModifiedBy] = _Institution.ColumnNames.ModifiedBy;
                    ht[SN] = _Institution.ColumnNames.SN;
                    ht[IsUsedAtFacility] = _Institution.ColumnNames.IsUsedAtFacility;
                    ht[IsDraft] = _Institution.ColumnNames.IsDraft;
                    ht[IsLocalSite] = _Institution.ColumnNames.IsLocalSite;
                    ht[AdministrativeUnitID] = _Institution.ColumnNames.AdministrativeUnitID;
                    ht[OperationalStatus] = _Institution.ColumnNames.OperationalStatus;
                    ht[NUrowguid] = _Institution.ColumnNames.NUrowguid;
                    ht[Rowguid] = _Institution.ColumnNames.Rowguid;
                    ht[AlternateName] = _Institution.ColumnNames.AlternateName;
                    ht[ReportingGroupID] = _Institution.ColumnNames.ReportingGroupID;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string ID = "s_ID";
            public const string Name = "s_Name";
            public const string Description = "s_Description";
            public const string Phone = "s_Phone";
            public const string Woreda = "s_Woreda";
            public const string Route = "s_Route";
            public const string RouteSequence = "s_RouteSequence";
            public const string PaymentTypeID = "s_PaymentTypeID";
            public const string LicenseNo = "s_LicenseNo";
            public const string VATNo = "s_VATNo";
            public const string TinNo = "s_TinNo";
            public const string DateOfRegistration = "s_DateOfRegistration";
            public const string Town = "s_Town";
            public const string Kebele = "s_Kebele";
            public const string RUType = "s_RUType";
            public const string Ownership = "s_Ownership";
            public const string Zone = "s_Zone";
            public const string Active = "s_Active";
            public const string InProcess = "s_InProcess";
            public const string CreatedDate = "s_CreatedDate";
            public const string ModifiedDate = "s_ModifiedDate";
            public const string ModifiedBy = "s_ModifiedBy";
            public const string SN = "s_SN";
            public const string IsUsedAtFacility = "s_IsUsedAtFacility";
            public const string IsDraft = "s_IsDraft";
            public const string IsLocalSite = "s_IsLocalSite";
            public const string AdministrativeUnitID = "s_AdministrativeUnitID";
            public const string OperationalStatus = "s_OperationalStatus";
            public const string NUrowguid = "s_NUrowguid";
            public const string Rowguid = "s_Rowguid";
            public const string AlternateName = "s_AlternateName";
            public const string ReportingGroupID = "s_ReportingGroupID";

        }
        #endregion

        #region Properties

        public virtual int ID
        {
            get
            {
                return base.Getint(ColumnNames.ID);
            }
            set
            {
                base.Setint(ColumnNames.ID, value);
            }
        }

        public virtual string Name
        {
            get
            {
                return base.Getstring(ColumnNames.Name);
            }
            set
            {
                base.Setstring(ColumnNames.Name, value);
            }
        }

        public virtual string Description
        {
            get
            {
                return base.Getstring(ColumnNames.Description);
            }
            set
            {
                base.Setstring(ColumnNames.Description, value);
            }
        }

        public virtual string Phone
        {
            get
            {
                return base.Getstring(ColumnNames.Phone);
            }
            set
            {
                base.Setstring(ColumnNames.Phone, value);
            }
        }

        public virtual int Woreda
        {
            get
            {
                return base.Getint(ColumnNames.Woreda);
            }
            set
            {
                base.Setint(ColumnNames.Woreda, value);
            }
        }

        public virtual int Route
        {
            get
            {
                return base.Getint(ColumnNames.Route);
            }
            set
            {
                base.Setint(ColumnNames.Route, value);
            }
        }

        public virtual int RouteSequence
        {
            get
            {
                return base.Getint(ColumnNames.RouteSequence);
            }
            set
            {
                base.Setint(ColumnNames.RouteSequence, value);
            }
        }

        public virtual int PaymentTypeID
        {
            get
            {
                return base.Getint(ColumnNames.PaymentTypeID);
            }
            set
            {
                base.Setint(ColumnNames.PaymentTypeID, value);
            }
        }

        public virtual string LicenseNo
        {
            get
            {
                return base.Getstring(ColumnNames.LicenseNo);
            }
            set
            {
                base.Setstring(ColumnNames.LicenseNo, value);
            }
        }

        public virtual string VATNo
        {
            get
            {
                return base.Getstring(ColumnNames.VATNo);
            }
            set
            {
                base.Setstring(ColumnNames.VATNo, value);
            }
        }

        public virtual string TinNo
        {
            get
            {
                return base.Getstring(ColumnNames.TinNo);
            }
            set
            {
                base.Setstring(ColumnNames.TinNo, value);
            }
        }

        public virtual DateTime DateOfRegistration
        {
            get
            {
                return base.GetDateTime(ColumnNames.DateOfRegistration);
            }
            set
            {
                base.SetDateTime(ColumnNames.DateOfRegistration, value);
            }
        }

        public virtual string Town
        {
            get
            {
                return base.Getstring(ColumnNames.Town);
            }
            set
            {
                base.Setstring(ColumnNames.Town, value);
            }
        }

        public virtual string Kebele
        {
            get
            {
                return base.Getstring(ColumnNames.Kebele);
            }
            set
            {
                base.Setstring(ColumnNames.Kebele, value);
            }
        }

        public virtual int RUType
        {
            get
            {
                return base.Getint(ColumnNames.RUType);
            }
            set
            {
                base.Setint(ColumnNames.RUType, value);
            }
        }

        public virtual int Ownership
        {
            get
            {
                return base.Getint(ColumnNames.Ownership);
            }
            set
            {
                base.Setint(ColumnNames.Ownership, value);
            }
        }

        public virtual int Zone
        {
            get
            {
                return base.Getint(ColumnNames.Zone);
            }
            set
            {
                base.Setint(ColumnNames.Zone, value);
            }
        }

        public virtual bool Active
        {
            get
            {
                return base.Getbool(ColumnNames.Active);
            }
            set
            {
                base.Setbool(ColumnNames.Active, value);
            }
        }

        public virtual bool InProcess
        {
            get
            {
                return base.Getbool(ColumnNames.InProcess);
            }
            set
            {
                base.Setbool(ColumnNames.InProcess, value);
            }
        }

        public virtual DateTime CreatedDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.CreatedDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.CreatedDate, value);
            }
        }

        public virtual DateTime ModifiedDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.ModifiedDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.ModifiedDate, value);
            }
        }

        public virtual string ModifiedBy
        {
            get
            {
                return base.Getstring(ColumnNames.ModifiedBy);
            }
            set
            {
                base.Setstring(ColumnNames.ModifiedBy, value);
            }
        }

        public virtual int SN
        {
            get
            {
                return base.Getint(ColumnNames.SN);
            }
            set
            {
                base.Setint(ColumnNames.SN, value);
            }
        }

        public virtual bool IsUsedAtFacility
        {
            get
            {
                return base.Getbool(ColumnNames.IsUsedAtFacility);
            }
            set
            {
                base.Setbool(ColumnNames.IsUsedAtFacility, value);
            }
        }

        public virtual bool IsDraft
        {
            get
            {
                return base.Getbool(ColumnNames.IsDraft);
            }
            set
            {
                base.Setbool(ColumnNames.IsDraft, value);
            }
        }

        public virtual bool IsLocalSite
        {
            get
            {
                return base.Getbool(ColumnNames.IsLocalSite);
            }
            set
            {
                base.Setbool(ColumnNames.IsLocalSite, value);
            }
        }

        public virtual int AdministrativeUnitID
        {
            get
            {
                return base.Getint(ColumnNames.AdministrativeUnitID);
            }
            set
            {
                base.Setint(ColumnNames.AdministrativeUnitID, value);
            }
        }

        public virtual bool OperationalStatus
        {
            get
            {
                return base.Getbool(ColumnNames.OperationalStatus);
            }
            set
            {
                base.Setbool(ColumnNames.OperationalStatus, value);
            }
        }

        public virtual Guid NUrowguid
        {
            get
            {
                return base.GetGuid(ColumnNames.NUrowguid);
            }
            set
            {
                base.SetGuid(ColumnNames.NUrowguid, value);
            }
        }

        public virtual Guid Rowguid
        {
            get
            {
                return base.GetGuid(ColumnNames.Rowguid);
            }
            set
            {
                base.SetGuid(ColumnNames.Rowguid, value);
            }
        }

        public virtual string AlternateName
        {
            get
            {
                return base.Getstring(ColumnNames.AlternateName);
            }
            set
            {
                base.Setstring(ColumnNames.AlternateName, value);
            }
        }

        public virtual int ReportingGroupID
        {
            get
            {
                return base.Getint(ColumnNames.ReportingGroupID);
            }
            set
            {
                base.Setint(ColumnNames.ReportingGroupID, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_ID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ID);
                else
                    this.ID = base.SetintAsString(ColumnNames.ID, value);
            }
        }

        public virtual string s_Name
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Name);
                else
                    this.Name = base.SetstringAsString(ColumnNames.Name, value);
            }
        }

        public virtual string s_Description
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Description) ? string.Empty : base.GetstringAsString(ColumnNames.Description);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Description);
                else
                    this.Description = base.SetstringAsString(ColumnNames.Description, value);
            }
        }

        public virtual string s_Phone
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Phone) ? string.Empty : base.GetstringAsString(ColumnNames.Phone);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Phone);
                else
                    this.Phone = base.SetstringAsString(ColumnNames.Phone, value);
            }
        }

        public virtual string s_Woreda
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Woreda) ? string.Empty : base.GetintAsString(ColumnNames.Woreda);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Woreda);
                else
                    this.Woreda = base.SetintAsString(ColumnNames.Woreda, value);
            }
        }

        public virtual string s_Route
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Route) ? string.Empty : base.GetintAsString(ColumnNames.Route);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Route);
                else
                    this.Route = base.SetintAsString(ColumnNames.Route, value);
            }
        }

        public virtual string s_RouteSequence
        {
            get
            {
                return this.IsColumnNull(ColumnNames.RouteSequence) ? string.Empty : base.GetintAsString(ColumnNames.RouteSequence);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.RouteSequence);
                else
                    this.RouteSequence = base.SetintAsString(ColumnNames.RouteSequence, value);
            }
        }

        public virtual string s_PaymentTypeID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PaymentTypeID) ? string.Empty : base.GetintAsString(ColumnNames.PaymentTypeID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PaymentTypeID);
                else
                    this.PaymentTypeID = base.SetintAsString(ColumnNames.PaymentTypeID, value);
            }
        }

        public virtual string s_LicenseNo
        {
            get
            {
                return this.IsColumnNull(ColumnNames.LicenseNo) ? string.Empty : base.GetstringAsString(ColumnNames.LicenseNo);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.LicenseNo);
                else
                    this.LicenseNo = base.SetstringAsString(ColumnNames.LicenseNo, value);
            }
        }

        public virtual string s_VATNo
        {
            get
            {
                return this.IsColumnNull(ColumnNames.VATNo) ? string.Empty : base.GetstringAsString(ColumnNames.VATNo);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.VATNo);
                else
                    this.VATNo = base.SetstringAsString(ColumnNames.VATNo, value);
            }
        }

        public virtual string s_TinNo
        {
            get
            {
                return this.IsColumnNull(ColumnNames.TinNo) ? string.Empty : base.GetstringAsString(ColumnNames.TinNo);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.TinNo);
                else
                    this.TinNo = base.SetstringAsString(ColumnNames.TinNo, value);
            }
        }

        public virtual string s_DateOfRegistration
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DateOfRegistration) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateOfRegistration);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DateOfRegistration);
                else
                    this.DateOfRegistration = base.SetDateTimeAsString(ColumnNames.DateOfRegistration, value);
            }
        }

        public virtual string s_Town
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Town) ? string.Empty : base.GetstringAsString(ColumnNames.Town);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Town);
                else
                    this.Town = base.SetstringAsString(ColumnNames.Town, value);
            }
        }

        public virtual string s_Kebele
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Kebele) ? string.Empty : base.GetstringAsString(ColumnNames.Kebele);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Kebele);
                else
                    this.Kebele = base.SetstringAsString(ColumnNames.Kebele, value);
            }
        }

        public virtual string s_RUType
        {
            get
            {
                return this.IsColumnNull(ColumnNames.RUType) ? string.Empty : base.GetintAsString(ColumnNames.RUType);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.RUType);
                else
                    this.RUType = base.SetintAsString(ColumnNames.RUType, value);
            }
        }

        public virtual string s_Ownership
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Ownership) ? string.Empty : base.GetintAsString(ColumnNames.Ownership);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Ownership);
                else
                    this.Ownership = base.SetintAsString(ColumnNames.Ownership, value);
            }
        }

        public virtual string s_Zone
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Zone) ? string.Empty : base.GetintAsString(ColumnNames.Zone);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Zone);
                else
                    this.Zone = base.SetintAsString(ColumnNames.Zone, value);
            }
        }

        public virtual string s_Active
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Active) ? string.Empty : base.GetboolAsString(ColumnNames.Active);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Active);
                else
                    this.Active = base.SetboolAsString(ColumnNames.Active, value);
            }
        }

        public virtual string s_InProcess
        {
            get
            {
                return this.IsColumnNull(ColumnNames.InProcess) ? string.Empty : base.GetboolAsString(ColumnNames.InProcess);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.InProcess);
                else
                    this.InProcess = base.SetboolAsString(ColumnNames.InProcess, value);
            }
        }

        public virtual string s_CreatedDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.CreatedDate);
                else
                    this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
            }
        }

        public virtual string s_ModifiedDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ModifiedDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ModifiedDate);
                else
                    this.ModifiedDate = base.SetDateTimeAsString(ColumnNames.ModifiedDate, value);
            }
        }

        public virtual string s_ModifiedBy
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ModifiedBy) ? string.Empty : base.GetstringAsString(ColumnNames.ModifiedBy);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ModifiedBy);
                else
                    this.ModifiedBy = base.SetstringAsString(ColumnNames.ModifiedBy, value);
            }
        }

        public virtual string s_SN
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SN) ? string.Empty : base.GetintAsString(ColumnNames.SN);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SN);
                else
                    this.SN = base.SetintAsString(ColumnNames.SN, value);
            }
        }

        public virtual string s_IsUsedAtFacility
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IsUsedAtFacility) ? string.Empty : base.GetboolAsString(ColumnNames.IsUsedAtFacility);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IsUsedAtFacility);
                else
                    this.IsUsedAtFacility = base.SetboolAsString(ColumnNames.IsUsedAtFacility, value);
            }
        }

        public virtual string s_IsDraft
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IsDraft) ? string.Empty : base.GetboolAsString(ColumnNames.IsDraft);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IsDraft);
                else
                    this.IsDraft = base.SetboolAsString(ColumnNames.IsDraft, value);
            }
        }

        public virtual string s_IsLocalSite
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IsLocalSite) ? string.Empty : base.GetboolAsString(ColumnNames.IsLocalSite);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IsLocalSite);
                else
                    this.IsLocalSite = base.SetboolAsString(ColumnNames.IsLocalSite, value);
            }
        }

        public virtual string s_AdministrativeUnitID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.AdministrativeUnitID) ? string.Empty : base.GetintAsString(ColumnNames.AdministrativeUnitID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.AdministrativeUnitID);
                else
                    this.AdministrativeUnitID = base.SetintAsString(ColumnNames.AdministrativeUnitID, value);
            }
        }

        public virtual string s_OperationalStatus
        {
            get
            {
                return this.IsColumnNull(ColumnNames.OperationalStatus) ? string.Empty : base.GetboolAsString(ColumnNames.OperationalStatus);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.OperationalStatus);
                else
                    this.OperationalStatus = base.SetboolAsString(ColumnNames.OperationalStatus, value);
            }
        }

        public virtual string s_NUrowguid
        {
            get
            {
                return this.IsColumnNull(ColumnNames.NUrowguid) ? string.Empty : base.GetGuidAsString(ColumnNames.NUrowguid);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.NUrowguid);
                else
                    this.NUrowguid = base.SetGuidAsString(ColumnNames.NUrowguid, value);
            }
        }

        public virtual string s_Rowguid
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Rowguid) ? string.Empty : base.GetGuidAsString(ColumnNames.Rowguid);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Rowguid);
                else
                    this.Rowguid = base.SetGuidAsString(ColumnNames.Rowguid, value);
            }
        }

        public virtual string s_AlternateName
        {
            get
            {
                return this.IsColumnNull(ColumnNames.AlternateName) ? string.Empty : base.GetstringAsString(ColumnNames.AlternateName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.AlternateName);
                else
                    this.AlternateName = base.SetstringAsString(ColumnNames.AlternateName, value);
            }
        }

        public virtual string s_ReportingGroupID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ReportingGroupID) ? string.Empty : base.GetintAsString(ColumnNames.ReportingGroupID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ReportingGroupID);
                else
                    this.ReportingGroupID = base.SetintAsString(ColumnNames.ReportingGroupID, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter ID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Name
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Description
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Description, Parameters.Description);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Phone
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Phone, Parameters.Phone);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Woreda
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Woreda, Parameters.Woreda);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Route
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Route, Parameters.Route);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter RouteSequence
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.RouteSequence, Parameters.RouteSequence);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PaymentTypeID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PaymentTypeID, Parameters.PaymentTypeID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter LicenseNo
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.LicenseNo, Parameters.LicenseNo);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter VATNo
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.VATNo, Parameters.VATNo);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter TinNo
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.TinNo, Parameters.TinNo);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DateOfRegistration
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DateOfRegistration, Parameters.DateOfRegistration);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Town
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Town, Parameters.Town);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Kebele
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Kebele, Parameters.Kebele);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter RUType
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.RUType, Parameters.RUType);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Ownership
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Ownership, Parameters.Ownership);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Zone
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Zone, Parameters.Zone);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Active
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Active, Parameters.Active);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter InProcess
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.InProcess, Parameters.InProcess);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter CreatedDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ModifiedDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ModifiedDate, Parameters.ModifiedDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ModifiedBy
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ModifiedBy, Parameters.ModifiedBy);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SN
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SN, Parameters.SN);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IsUsedAtFacility
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IsUsedAtFacility, Parameters.IsUsedAtFacility);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IsDraft
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IsDraft, Parameters.IsDraft);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IsLocalSite
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IsLocalSite, Parameters.IsLocalSite);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter AdministrativeUnitID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.AdministrativeUnitID, Parameters.AdministrativeUnitID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter OperationalStatus
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.OperationalStatus, Parameters.OperationalStatus);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter NUrowguid
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.NUrowguid, Parameters.NUrowguid);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Rowguid
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Rowguid, Parameters.Rowguid);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter AlternateName
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.AlternateName, Parameters.AlternateName);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ReportingGroupID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ReportingGroupID, Parameters.ReportingGroupID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public WhereParameter Name
            {
                get
                {
                    if (_Name_W == null)
                    {
                        _Name_W = TearOff.Name;
                    }
                    return _Name_W;
                }
            }

            public WhereParameter Description
            {
                get
                {
                    if (_Description_W == null)
                    {
                        _Description_W = TearOff.Description;
                    }
                    return _Description_W;
                }
            }

            public WhereParameter Phone
            {
                get
                {
                    if (_Phone_W == null)
                    {
                        _Phone_W = TearOff.Phone;
                    }
                    return _Phone_W;
                }
            }

            public WhereParameter Woreda
            {
                get
                {
                    if (_Woreda_W == null)
                    {
                        _Woreda_W = TearOff.Woreda;
                    }
                    return _Woreda_W;
                }
            }

            public WhereParameter Route
            {
                get
                {
                    if (_Route_W == null)
                    {
                        _Route_W = TearOff.Route;
                    }
                    return _Route_W;
                }
            }

            public WhereParameter RouteSequence
            {
                get
                {
                    if (_RouteSequence_W == null)
                    {
                        _RouteSequence_W = TearOff.RouteSequence;
                    }
                    return _RouteSequence_W;
                }
            }

            public WhereParameter PaymentTypeID
            {
                get
                {
                    if (_PaymentTypeID_W == null)
                    {
                        _PaymentTypeID_W = TearOff.PaymentTypeID;
                    }
                    return _PaymentTypeID_W;
                }
            }

            public WhereParameter LicenseNo
            {
                get
                {
                    if (_LicenseNo_W == null)
                    {
                        _LicenseNo_W = TearOff.LicenseNo;
                    }
                    return _LicenseNo_W;
                }
            }

            public WhereParameter VATNo
            {
                get
                {
                    if (_VATNo_W == null)
                    {
                        _VATNo_W = TearOff.VATNo;
                    }
                    return _VATNo_W;
                }
            }

            public WhereParameter TinNo
            {
                get
                {
                    if (_TinNo_W == null)
                    {
                        _TinNo_W = TearOff.TinNo;
                    }
                    return _TinNo_W;
                }
            }

            public WhereParameter DateOfRegistration
            {
                get
                {
                    if (_DateOfRegistration_W == null)
                    {
                        _DateOfRegistration_W = TearOff.DateOfRegistration;
                    }
                    return _DateOfRegistration_W;
                }
            }

            public WhereParameter Town
            {
                get
                {
                    if (_Town_W == null)
                    {
                        _Town_W = TearOff.Town;
                    }
                    return _Town_W;
                }
            }

            public WhereParameter Kebele
            {
                get
                {
                    if (_Kebele_W == null)
                    {
                        _Kebele_W = TearOff.Kebele;
                    }
                    return _Kebele_W;
                }
            }

            public WhereParameter RUType
            {
                get
                {
                    if (_RUType_W == null)
                    {
                        _RUType_W = TearOff.RUType;
                    }
                    return _RUType_W;
                }
            }

            public WhereParameter Ownership
            {
                get
                {
                    if (_Ownership_W == null)
                    {
                        _Ownership_W = TearOff.Ownership;
                    }
                    return _Ownership_W;
                }
            }

            public WhereParameter Zone
            {
                get
                {
                    if (_Zone_W == null)
                    {
                        _Zone_W = TearOff.Zone;
                    }
                    return _Zone_W;
                }
            }

            public WhereParameter Active
            {
                get
                {
                    if (_Active_W == null)
                    {
                        _Active_W = TearOff.Active;
                    }
                    return _Active_W;
                }
            }

            public WhereParameter InProcess
            {
                get
                {
                    if (_InProcess_W == null)
                    {
                        _InProcess_W = TearOff.InProcess;
                    }
                    return _InProcess_W;
                }
            }

            public WhereParameter CreatedDate
            {
                get
                {
                    if (_CreatedDate_W == null)
                    {
                        _CreatedDate_W = TearOff.CreatedDate;
                    }
                    return _CreatedDate_W;
                }
            }

            public WhereParameter ModifiedDate
            {
                get
                {
                    if (_ModifiedDate_W == null)
                    {
                        _ModifiedDate_W = TearOff.ModifiedDate;
                    }
                    return _ModifiedDate_W;
                }
            }

            public WhereParameter ModifiedBy
            {
                get
                {
                    if (_ModifiedBy_W == null)
                    {
                        _ModifiedBy_W = TearOff.ModifiedBy;
                    }
                    return _ModifiedBy_W;
                }
            }

            public WhereParameter SN
            {
                get
                {
                    if (_SN_W == null)
                    {
                        _SN_W = TearOff.SN;
                    }
                    return _SN_W;
                }
            }

            public WhereParameter IsUsedAtFacility
            {
                get
                {
                    if (_IsUsedAtFacility_W == null)
                    {
                        _IsUsedAtFacility_W = TearOff.IsUsedAtFacility;
                    }
                    return _IsUsedAtFacility_W;
                }
            }

            public WhereParameter IsDraft
            {
                get
                {
                    if (_IsDraft_W == null)
                    {
                        _IsDraft_W = TearOff.IsDraft;
                    }
                    return _IsDraft_W;
                }
            }

            public WhereParameter IsLocalSite
            {
                get
                {
                    if (_IsLocalSite_W == null)
                    {
                        _IsLocalSite_W = TearOff.IsLocalSite;
                    }
                    return _IsLocalSite_W;
                }
            }

            public WhereParameter AdministrativeUnitID
            {
                get
                {
                    if (_AdministrativeUnitID_W == null)
                    {
                        _AdministrativeUnitID_W = TearOff.AdministrativeUnitID;
                    }
                    return _AdministrativeUnitID_W;
                }
            }

            public WhereParameter OperationalStatus
            {
                get
                {
                    if (_OperationalStatus_W == null)
                    {
                        _OperationalStatus_W = TearOff.OperationalStatus;
                    }
                    return _OperationalStatus_W;
                }
            }

            public WhereParameter NUrowguid
            {
                get
                {
                    if (_NUrowguid_W == null)
                    {
                        _NUrowguid_W = TearOff.NUrowguid;
                    }
                    return _NUrowguid_W;
                }
            }

            public WhereParameter Rowguid
            {
                get
                {
                    if (_Rowguid_W == null)
                    {
                        _Rowguid_W = TearOff.Rowguid;
                    }
                    return _Rowguid_W;
                }
            }

            public WhereParameter AlternateName
            {
                get
                {
                    if (_AlternateName_W == null)
                    {
                        _AlternateName_W = TearOff.AlternateName;
                    }
                    return _AlternateName_W;
                }
            }

            public WhereParameter ReportingGroupID
            {
                get
                {
                    if (_ReportingGroupID_W == null)
                    {
                        _ReportingGroupID_W = TearOff.ReportingGroupID;
                    }
                    return _ReportingGroupID_W;
                }
            }

            private WhereParameter _ID_W = null;
            private WhereParameter _Name_W = null;
            private WhereParameter _Description_W = null;
            private WhereParameter _Phone_W = null;
            private WhereParameter _Woreda_W = null;
            private WhereParameter _Route_W = null;
            private WhereParameter _RouteSequence_W = null;
            private WhereParameter _PaymentTypeID_W = null;
            private WhereParameter _LicenseNo_W = null;
            private WhereParameter _VATNo_W = null;
            private WhereParameter _TinNo_W = null;
            private WhereParameter _DateOfRegistration_W = null;
            private WhereParameter _Town_W = null;
            private WhereParameter _Kebele_W = null;
            private WhereParameter _RUType_W = null;
            private WhereParameter _Ownership_W = null;
            private WhereParameter _Zone_W = null;
            private WhereParameter _Active_W = null;
            private WhereParameter _InProcess_W = null;
            private WhereParameter _CreatedDate_W = null;
            private WhereParameter _ModifiedDate_W = null;
            private WhereParameter _ModifiedBy_W = null;
            private WhereParameter _SN_W = null;
            private WhereParameter _IsUsedAtFacility_W = null;
            private WhereParameter _IsDraft_W = null;
            private WhereParameter _IsLocalSite_W = null;
            private WhereParameter _AdministrativeUnitID_W = null;
            private WhereParameter _OperationalStatus_W = null;
            private WhereParameter _NUrowguid_W = null;
            private WhereParameter _Rowguid_W = null;
            private WhereParameter _AlternateName_W = null;
            private WhereParameter _ReportingGroupID_W = null;

            public void WhereClauseReset()
            {
                _ID_W = null;
                _Name_W = null;
                _Description_W = null;
                _Phone_W = null;
                _Woreda_W = null;
                _Route_W = null;
                _RouteSequence_W = null;
                _PaymentTypeID_W = null;
                _LicenseNo_W = null;
                _VATNo_W = null;
                _TinNo_W = null;
                _DateOfRegistration_W = null;
                _Town_W = null;
                _Kebele_W = null;
                _RUType_W = null;
                _Ownership_W = null;
                _Zone_W = null;
                _Active_W = null;
                _InProcess_W = null;
                _CreatedDate_W = null;
                _ModifiedDate_W = null;
                _ModifiedBy_W = null;
                _SN_W = null;
                _IsUsedAtFacility_W = null;
                _IsDraft_W = null;
                _IsLocalSite_W = null;
                _AdministrativeUnitID_W = null;
                _OperationalStatus_W = null;
                _NUrowguid_W = null;
                _Rowguid_W = null;
                _AlternateName_W = null;
                _ReportingGroupID_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter ID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Name
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Description
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description, Parameters.Description);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Phone
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Phone, Parameters.Phone);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Woreda
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Woreda, Parameters.Woreda);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Route
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Route, Parameters.Route);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter RouteSequence
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.RouteSequence, Parameters.RouteSequence);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PaymentTypeID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PaymentTypeID, Parameters.PaymentTypeID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter LicenseNo
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.LicenseNo, Parameters.LicenseNo);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter VATNo
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.VATNo, Parameters.VATNo);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter TinNo
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.TinNo, Parameters.TinNo);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DateOfRegistration
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateOfRegistration, Parameters.DateOfRegistration);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Town
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Town, Parameters.Town);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Kebele
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Kebele, Parameters.Kebele);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter RUType
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.RUType, Parameters.RUType);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Ownership
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Ownership, Parameters.Ownership);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Zone
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Zone, Parameters.Zone);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Active
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Active, Parameters.Active);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter InProcess
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.InProcess, Parameters.InProcess);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter CreatedDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ModifiedDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifiedDate, Parameters.ModifiedDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ModifiedBy
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifiedBy, Parameters.ModifiedBy);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SN
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SN, Parameters.SN);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IsUsedAtFacility
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsUsedAtFacility, Parameters.IsUsedAtFacility);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IsDraft
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsDraft, Parameters.IsDraft);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IsLocalSite
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsLocalSite, Parameters.IsLocalSite);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter AdministrativeUnitID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.AdministrativeUnitID, Parameters.AdministrativeUnitID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter OperationalStatus
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.OperationalStatus, Parameters.OperationalStatus);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter NUrowguid
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.NUrowguid, Parameters.NUrowguid);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Rowguid
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rowguid, Parameters.Rowguid);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter AlternateName
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.AlternateName, Parameters.AlternateName);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ReportingGroupID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReportingGroupID, Parameters.ReportingGroupID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public AggregateParameter Name
            {
                get
                {
                    if (_Name_W == null)
                    {
                        _Name_W = TearOff.Name;
                    }
                    return _Name_W;
                }
            }

            public AggregateParameter Description
            {
                get
                {
                    if (_Description_W == null)
                    {
                        _Description_W = TearOff.Description;
                    }
                    return _Description_W;
                }
            }

            public AggregateParameter Phone
            {
                get
                {
                    if (_Phone_W == null)
                    {
                        _Phone_W = TearOff.Phone;
                    }
                    return _Phone_W;
                }
            }

            public AggregateParameter Woreda
            {
                get
                {
                    if (_Woreda_W == null)
                    {
                        _Woreda_W = TearOff.Woreda;
                    }
                    return _Woreda_W;
                }
            }

            public AggregateParameter Route
            {
                get
                {
                    if (_Route_W == null)
                    {
                        _Route_W = TearOff.Route;
                    }
                    return _Route_W;
                }
            }

            public AggregateParameter RouteSequence
            {
                get
                {
                    if (_RouteSequence_W == null)
                    {
                        _RouteSequence_W = TearOff.RouteSequence;
                    }
                    return _RouteSequence_W;
                }
            }

            public AggregateParameter PaymentTypeID
            {
                get
                {
                    if (_PaymentTypeID_W == null)
                    {
                        _PaymentTypeID_W = TearOff.PaymentTypeID;
                    }
                    return _PaymentTypeID_W;
                }
            }

            public AggregateParameter LicenseNo
            {
                get
                {
                    if (_LicenseNo_W == null)
                    {
                        _LicenseNo_W = TearOff.LicenseNo;
                    }
                    return _LicenseNo_W;
                }
            }

            public AggregateParameter VATNo
            {
                get
                {
                    if (_VATNo_W == null)
                    {
                        _VATNo_W = TearOff.VATNo;
                    }
                    return _VATNo_W;
                }
            }

            public AggregateParameter TinNo
            {
                get
                {
                    if (_TinNo_W == null)
                    {
                        _TinNo_W = TearOff.TinNo;
                    }
                    return _TinNo_W;
                }
            }

            public AggregateParameter DateOfRegistration
            {
                get
                {
                    if (_DateOfRegistration_W == null)
                    {
                        _DateOfRegistration_W = TearOff.DateOfRegistration;
                    }
                    return _DateOfRegistration_W;
                }
            }

            public AggregateParameter Town
            {
                get
                {
                    if (_Town_W == null)
                    {
                        _Town_W = TearOff.Town;
                    }
                    return _Town_W;
                }
            }

            public AggregateParameter Kebele
            {
                get
                {
                    if (_Kebele_W == null)
                    {
                        _Kebele_W = TearOff.Kebele;
                    }
                    return _Kebele_W;
                }
            }

            public AggregateParameter RUType
            {
                get
                {
                    if (_RUType_W == null)
                    {
                        _RUType_W = TearOff.RUType;
                    }
                    return _RUType_W;
                }
            }

            public AggregateParameter Ownership
            {
                get
                {
                    if (_Ownership_W == null)
                    {
                        _Ownership_W = TearOff.Ownership;
                    }
                    return _Ownership_W;
                }
            }

            public AggregateParameter Zone
            {
                get
                {
                    if (_Zone_W == null)
                    {
                        _Zone_W = TearOff.Zone;
                    }
                    return _Zone_W;
                }
            }

            public AggregateParameter Active
            {
                get
                {
                    if (_Active_W == null)
                    {
                        _Active_W = TearOff.Active;
                    }
                    return _Active_W;
                }
            }

            public AggregateParameter InProcess
            {
                get
                {
                    if (_InProcess_W == null)
                    {
                        _InProcess_W = TearOff.InProcess;
                    }
                    return _InProcess_W;
                }
            }

            public AggregateParameter CreatedDate
            {
                get
                {
                    if (_CreatedDate_W == null)
                    {
                        _CreatedDate_W = TearOff.CreatedDate;
                    }
                    return _CreatedDate_W;
                }
            }

            public AggregateParameter ModifiedDate
            {
                get
                {
                    if (_ModifiedDate_W == null)
                    {
                        _ModifiedDate_W = TearOff.ModifiedDate;
                    }
                    return _ModifiedDate_W;
                }
            }

            public AggregateParameter ModifiedBy
            {
                get
                {
                    if (_ModifiedBy_W == null)
                    {
                        _ModifiedBy_W = TearOff.ModifiedBy;
                    }
                    return _ModifiedBy_W;
                }
            }

            public AggregateParameter SN
            {
                get
                {
                    if (_SN_W == null)
                    {
                        _SN_W = TearOff.SN;
                    }
                    return _SN_W;
                }
            }

            public AggregateParameter IsUsedAtFacility
            {
                get
                {
                    if (_IsUsedAtFacility_W == null)
                    {
                        _IsUsedAtFacility_W = TearOff.IsUsedAtFacility;
                    }
                    return _IsUsedAtFacility_W;
                }
            }

            public AggregateParameter IsDraft
            {
                get
                {
                    if (_IsDraft_W == null)
                    {
                        _IsDraft_W = TearOff.IsDraft;
                    }
                    return _IsDraft_W;
                }
            }

            public AggregateParameter IsLocalSite
            {
                get
                {
                    if (_IsLocalSite_W == null)
                    {
                        _IsLocalSite_W = TearOff.IsLocalSite;
                    }
                    return _IsLocalSite_W;
                }
            }

            public AggregateParameter AdministrativeUnitID
            {
                get
                {
                    if (_AdministrativeUnitID_W == null)
                    {
                        _AdministrativeUnitID_W = TearOff.AdministrativeUnitID;
                    }
                    return _AdministrativeUnitID_W;
                }
            }

            public AggregateParameter OperationalStatus
            {
                get
                {
                    if (_OperationalStatus_W == null)
                    {
                        _OperationalStatus_W = TearOff.OperationalStatus;
                    }
                    return _OperationalStatus_W;
                }
            }

            public AggregateParameter NUrowguid
            {
                get
                {
                    if (_NUrowguid_W == null)
                    {
                        _NUrowguid_W = TearOff.NUrowguid;
                    }
                    return _NUrowguid_W;
                }
            }

            public AggregateParameter Rowguid
            {
                get
                {
                    if (_Rowguid_W == null)
                    {
                        _Rowguid_W = TearOff.Rowguid;
                    }
                    return _Rowguid_W;
                }
            }

            public AggregateParameter AlternateName
            {
                get
                {
                    if (_AlternateName_W == null)
                    {
                        _AlternateName_W = TearOff.AlternateName;
                    }
                    return _AlternateName_W;
                }
            }

            public AggregateParameter ReportingGroupID
            {
                get
                {
                    if (_ReportingGroupID_W == null)
                    {
                        _ReportingGroupID_W = TearOff.ReportingGroupID;
                    }
                    return _ReportingGroupID_W;
                }
            }

            private AggregateParameter _ID_W = null;
            private AggregateParameter _Name_W = null;
            private AggregateParameter _Description_W = null;
            private AggregateParameter _Phone_W = null;
            private AggregateParameter _Woreda_W = null;
            private AggregateParameter _Route_W = null;
            private AggregateParameter _RouteSequence_W = null;
            private AggregateParameter _PaymentTypeID_W = null;
            private AggregateParameter _LicenseNo_W = null;
            private AggregateParameter _VATNo_W = null;
            private AggregateParameter _TinNo_W = null;
            private AggregateParameter _DateOfRegistration_W = null;
            private AggregateParameter _Town_W = null;
            private AggregateParameter _Kebele_W = null;
            private AggregateParameter _RUType_W = null;
            private AggregateParameter _Ownership_W = null;
            private AggregateParameter _Zone_W = null;
            private AggregateParameter _Active_W = null;
            private AggregateParameter _InProcess_W = null;
            private AggregateParameter _CreatedDate_W = null;
            private AggregateParameter _ModifiedDate_W = null;
            private AggregateParameter _ModifiedBy_W = null;
            private AggregateParameter _SN_W = null;
            private AggregateParameter _IsUsedAtFacility_W = null;
            private AggregateParameter _IsDraft_W = null;
            private AggregateParameter _IsLocalSite_W = null;
            private AggregateParameter _AdministrativeUnitID_W = null;
            private AggregateParameter _OperationalStatus_W = null;
            private AggregateParameter _NUrowguid_W = null;
            private AggregateParameter _Rowguid_W = null;
            private AggregateParameter _AlternateName_W = null;
            private AggregateParameter _ReportingGroupID_W = null;

            public void AggregateClauseReset()
            {
                _ID_W = null;
                _Name_W = null;
                _Description_W = null;
                _Phone_W = null;
                _Woreda_W = null;
                _Route_W = null;
                _RouteSequence_W = null;
                _PaymentTypeID_W = null;
                _LicenseNo_W = null;
                _VATNo_W = null;
                _TinNo_W = null;
                _DateOfRegistration_W = null;
                _Town_W = null;
                _Kebele_W = null;
                _RUType_W = null;
                _Ownership_W = null;
                _Zone_W = null;
                _Active_W = null;
                _InProcess_W = null;
                _CreatedDate_W = null;
                _ModifiedDate_W = null;
                _ModifiedBy_W = null;
                _SN_W = null;
                _IsUsedAtFacility_W = null;
                _IsDraft_W = null;
                _IsLocalSite_W = null;
                _AdministrativeUnitID_W = null;
                _OperationalStatus_W = null;
                _NUrowguid_W = null;
                _Rowguid_W = null;
                _AlternateName_W = null;
                _ReportingGroupID_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InstitutionInsert]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.ID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InstitutionUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InstitutionDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Name);
            p.SourceColumn = ColumnNames.Name;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Description);
            p.SourceColumn = ColumnNames.Description;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Phone);
            p.SourceColumn = ColumnNames.Phone;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Woreda);
            p.SourceColumn = ColumnNames.Woreda;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Route);
            p.SourceColumn = ColumnNames.Route;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.RouteSequence);
            p.SourceColumn = ColumnNames.RouteSequence;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PaymentTypeID);
            p.SourceColumn = ColumnNames.PaymentTypeID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.LicenseNo);
            p.SourceColumn = ColumnNames.LicenseNo;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.VATNo);
            p.SourceColumn = ColumnNames.VATNo;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.TinNo);
            p.SourceColumn = ColumnNames.TinNo;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DateOfRegistration);
            p.SourceColumn = ColumnNames.DateOfRegistration;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Town);
            p.SourceColumn = ColumnNames.Town;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Kebele);
            p.SourceColumn = ColumnNames.Kebele;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.RUType);
            p.SourceColumn = ColumnNames.RUType;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Ownership);
            p.SourceColumn = ColumnNames.Ownership;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Zone);
            p.SourceColumn = ColumnNames.Zone;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Active);
            p.SourceColumn = ColumnNames.Active;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.InProcess);
            p.SourceColumn = ColumnNames.InProcess;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.CreatedDate);
            p.SourceColumn = ColumnNames.CreatedDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ModifiedDate);
            p.SourceColumn = ColumnNames.ModifiedDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ModifiedBy);
            p.SourceColumn = ColumnNames.ModifiedBy;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SN);
            p.SourceColumn = ColumnNames.SN;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IsUsedAtFacility);
            p.SourceColumn = ColumnNames.IsUsedAtFacility;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IsDraft);
            p.SourceColumn = ColumnNames.IsDraft;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IsLocalSite);
            p.SourceColumn = ColumnNames.IsLocalSite;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.AdministrativeUnitID);
            p.SourceColumn = ColumnNames.AdministrativeUnitID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.OperationalStatus);
            p.SourceColumn = ColumnNames.OperationalStatus;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.NUrowguid);
            p.SourceColumn = ColumnNames.NUrowguid;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Rowguid);
            p.SourceColumn = ColumnNames.Rowguid;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.AlternateName);
            p.SourceColumn = ColumnNames.AlternateName;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ReportingGroupID);
            p.SourceColumn = ColumnNames.ReportingGroupID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}


