
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _LogError : SqlClientEntity
	{
		public _LogError()
		{
			this.QuerySource = "LogError";
			this.MappingName = "LogError";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_LogErrorLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int LogID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.LogID, LogID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_LogErrorLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter LogID
			{
				get
				{
					return new SqlParameter("@LogID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter WareHouse
			{
				get
				{
					return new SqlParameter("@WareHouse", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter HostName
			{
				get
				{
					return new SqlParameter("@HostName", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter IPAddress
			{
				get
				{
					return new SqlParameter("@IPAddress", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter OccuranceDate
			{
				get
				{
					return new SqlParameter("@OccuranceDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ErrorLevel
			{
				get
				{
					return new SqlParameter("@ErrorLevel", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Message
			{
				get
				{
					return new SqlParameter("@Message", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter ExceptionType
			{
				get
				{
					return new SqlParameter("@ExceptionType", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter Form
			{
				get
				{
					return new SqlParameter("@Form", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter LineNumberOnMainForm
			{
				get
				{
					return new SqlParameter("@LineNumberOnMainForm", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CallerMethod
			{
				get
				{
					return new SqlParameter("@CallerMethod", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter FileName
			{
				get
				{
					return new SqlParameter("@FileName", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter Method
			{
				get
				{
					return new SqlParameter("@Method", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter LineNumber
			{
				get
				{
					return new SqlParameter("@LineNumber", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Activity
			{
				get
				{
					return new SqlParameter("@Activity", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter Detail
			{
				get
				{
					return new SqlParameter("@Detail", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter StackTrace
			{
				get
				{
					return new SqlParameter("@StackTrace", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter InnerException
			{
				get
				{
					return new SqlParameter("@InnerException", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter AppVersion
			{
				get
				{
					return new SqlParameter("@AppVersion", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter DbVersion
			{
				get
				{
					return new SqlParameter("@DbVersion", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter VPNIP
			{
				get
				{
					return new SqlParameter("@VPNIP", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string LogID = "LogID";
            public const string WareHouse = "WareHouse";
            public const string HostName = "HostName";
            public const string IPAddress = "IPAddress";
            public const string OccuranceDate = "OccuranceDate";
            public const string ErrorLevel = "ErrorLevel";
            public const string Message = "Message";
            public const string ExceptionType = "ExceptionType";
            public const string Form = "Form";
            public const string LineNumberOnMainForm = "LineNumberOnMainForm";
            public const string CallerMethod = "CallerMethod";
            public const string FileName = "FileName";
            public const string Method = "Method";
            public const string LineNumber = "LineNumber";
            public const string Activity = "Activity";
            public const string Detail = "Detail";
            public const string StackTrace = "StackTrace";
            public const string InnerException = "InnerException";
            public const string AppVersion = "AppVersion";
            public const string DbVersion = "DbVersion";
            public const string VPNIP = "VPNIP";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[LogID] = _LogError.PropertyNames.LogID;
					ht[WareHouse] = _LogError.PropertyNames.WareHouse;
					ht[HostName] = _LogError.PropertyNames.HostName;
					ht[IPAddress] = _LogError.PropertyNames.IPAddress;
					ht[OccuranceDate] = _LogError.PropertyNames.OccuranceDate;
					ht[ErrorLevel] = _LogError.PropertyNames.ErrorLevel;
					ht[Message] = _LogError.PropertyNames.Message;
					ht[ExceptionType] = _LogError.PropertyNames.ExceptionType;
					ht[Form] = _LogError.PropertyNames.Form;
					ht[LineNumberOnMainForm] = _LogError.PropertyNames.LineNumberOnMainForm;
					ht[CallerMethod] = _LogError.PropertyNames.CallerMethod;
					ht[FileName] = _LogError.PropertyNames.FileName;
					ht[Method] = _LogError.PropertyNames.Method;
					ht[LineNumber] = _LogError.PropertyNames.LineNumber;
					ht[Activity] = _LogError.PropertyNames.Activity;
					ht[Detail] = _LogError.PropertyNames.Detail;
					ht[StackTrace] = _LogError.PropertyNames.StackTrace;
					ht[InnerException] = _LogError.PropertyNames.InnerException;
					ht[AppVersion] = _LogError.PropertyNames.AppVersion;
					ht[DbVersion] = _LogError.PropertyNames.DbVersion;
					ht[VPNIP] = _LogError.PropertyNames.VPNIP;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string LogID = "LogID";
            public const string WareHouse = "WareHouse";
            public const string HostName = "HostName";
            public const string IPAddress = "IPAddress";
            public const string OccuranceDate = "OccuranceDate";
            public const string ErrorLevel = "ErrorLevel";
            public const string Message = "Message";
            public const string ExceptionType = "ExceptionType";
            public const string Form = "Form";
            public const string LineNumberOnMainForm = "LineNumberOnMainForm";
            public const string CallerMethod = "CallerMethod";
            public const string FileName = "FileName";
            public const string Method = "Method";
            public const string LineNumber = "LineNumber";
            public const string Activity = "Activity";
            public const string Detail = "Detail";
            public const string StackTrace = "StackTrace";
            public const string InnerException = "InnerException";
            public const string AppVersion = "AppVersion";
            public const string DbVersion = "DbVersion";
            public const string VPNIP = "VPNIP";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[LogID] = _LogError.ColumnNames.LogID;
					ht[WareHouse] = _LogError.ColumnNames.WareHouse;
					ht[HostName] = _LogError.ColumnNames.HostName;
					ht[IPAddress] = _LogError.ColumnNames.IPAddress;
					ht[OccuranceDate] = _LogError.ColumnNames.OccuranceDate;
					ht[ErrorLevel] = _LogError.ColumnNames.ErrorLevel;
					ht[Message] = _LogError.ColumnNames.Message;
					ht[ExceptionType] = _LogError.ColumnNames.ExceptionType;
					ht[Form] = _LogError.ColumnNames.Form;
					ht[LineNumberOnMainForm] = _LogError.ColumnNames.LineNumberOnMainForm;
					ht[CallerMethod] = _LogError.ColumnNames.CallerMethod;
					ht[FileName] = _LogError.ColumnNames.FileName;
					ht[Method] = _LogError.ColumnNames.Method;
					ht[LineNumber] = _LogError.ColumnNames.LineNumber;
					ht[Activity] = _LogError.ColumnNames.Activity;
					ht[Detail] = _LogError.ColumnNames.Detail;
					ht[StackTrace] = _LogError.ColumnNames.StackTrace;
					ht[InnerException] = _LogError.ColumnNames.InnerException;
					ht[AppVersion] = _LogError.ColumnNames.AppVersion;
					ht[DbVersion] = _LogError.ColumnNames.DbVersion;
					ht[VPNIP] = _LogError.ColumnNames.VPNIP;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string LogID = "s_LogID";
            public const string WareHouse = "s_WareHouse";
            public const string HostName = "s_HostName";
            public const string IPAddress = "s_IPAddress";
            public const string OccuranceDate = "s_OccuranceDate";
            public const string ErrorLevel = "s_ErrorLevel";
            public const string Message = "s_Message";
            public const string ExceptionType = "s_ExceptionType";
            public const string Form = "s_Form";
            public const string LineNumberOnMainForm = "s_LineNumberOnMainForm";
            public const string CallerMethod = "s_CallerMethod";
            public const string FileName = "s_FileName";
            public const string Method = "s_Method";
            public const string LineNumber = "s_LineNumber";
            public const string Activity = "s_Activity";
            public const string Detail = "s_Detail";
            public const string StackTrace = "s_StackTrace";
            public const string InnerException = "s_InnerException";
            public const string AppVersion = "s_AppVersion";
            public const string DbVersion = "s_DbVersion";
            public const string VPNIP = "s_VPNIP";

		}
		#endregion		
		
		#region Properties
	
		public virtual int LogID
	    {
			get
	        {
				return base.Getint(ColumnNames.LogID);
			}
			set
	        {
				base.Setint(ColumnNames.LogID, value);
			}
		}

		public virtual string WareHouse
	    {
			get
	        {
				return base.Getstring(ColumnNames.WareHouse);
			}
			set
	        {
				base.Setstring(ColumnNames.WareHouse, value);
			}
		}

		public virtual string HostName
	    {
			get
	        {
				return base.Getstring(ColumnNames.HostName);
			}
			set
	        {
				base.Setstring(ColumnNames.HostName, value);
			}
		}

		public virtual string IPAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.IPAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.IPAddress, value);
			}
		}

		public virtual DateTime OccuranceDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.OccuranceDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.OccuranceDate, value);
			}
		}

		public virtual int ErrorLevel
	    {
			get
	        {
				return base.Getint(ColumnNames.ErrorLevel);
			}
			set
	        {
				base.Setint(ColumnNames.ErrorLevel, value);
			}
		}

		public virtual string Message
	    {
			get
	        {
				return base.Getstring(ColumnNames.Message);
			}
			set
	        {
				base.Setstring(ColumnNames.Message, value);
			}
		}

		public virtual string ExceptionType
	    {
			get
	        {
				return base.Getstring(ColumnNames.ExceptionType);
			}
			set
	        {
				base.Setstring(ColumnNames.ExceptionType, value);
			}
		}

		public virtual string Form
	    {
			get
	        {
				return base.Getstring(ColumnNames.Form);
			}
			set
	        {
				base.Setstring(ColumnNames.Form, value);
			}
		}

		public virtual int LineNumberOnMainForm
	    {
			get
	        {
				return base.Getint(ColumnNames.LineNumberOnMainForm);
			}
			set
	        {
				base.Setint(ColumnNames.LineNumberOnMainForm, value);
			}
		}

		public virtual string CallerMethod
	    {
			get
	        {
				return base.Getstring(ColumnNames.CallerMethod);
			}
			set
	        {
				base.Setstring(ColumnNames.CallerMethod, value);
			}
		}

		public virtual string FileName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FileName);
			}
			set
	        {
				base.Setstring(ColumnNames.FileName, value);
			}
		}

		public virtual string Method
	    {
			get
	        {
				return base.Getstring(ColumnNames.Method);
			}
			set
	        {
				base.Setstring(ColumnNames.Method, value);
			}
		}

		public virtual int LineNumber
	    {
			get
	        {
				return base.Getint(ColumnNames.LineNumber);
			}
			set
	        {
				base.Setint(ColumnNames.LineNumber, value);
			}
		}

		public virtual string Activity
	    {
			get
	        {
				return base.Getstring(ColumnNames.Activity);
			}
			set
	        {
				base.Setstring(ColumnNames.Activity, value);
			}
		}

		public virtual string Detail
	    {
			get
	        {
				return base.Getstring(ColumnNames.Detail);
			}
			set
	        {
				base.Setstring(ColumnNames.Detail, value);
			}
		}

		public virtual string StackTrace
	    {
			get
	        {
				return base.Getstring(ColumnNames.StackTrace);
			}
			set
	        {
				base.Setstring(ColumnNames.StackTrace, value);
			}
		}

		public virtual string InnerException
	    {
			get
	        {
				return base.Getstring(ColumnNames.InnerException);
			}
			set
	        {
				base.Setstring(ColumnNames.InnerException, value);
			}
		}

		public virtual string AppVersion
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppVersion);
			}
			set
	        {
				base.Setstring(ColumnNames.AppVersion, value);
			}
		}

		public virtual string DbVersion
	    {
			get
	        {
				return base.Getstring(ColumnNames.DbVersion);
			}
			set
	        {
				base.Setstring(ColumnNames.DbVersion, value);
			}
		}

		public virtual int VPNIP
	    {
			get
	        {
				return base.Getint(ColumnNames.VPNIP);
			}
			set
	        {
				base.Setint(ColumnNames.VPNIP, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_LogID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LogID) ? string.Empty : base.GetintAsString(ColumnNames.LogID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LogID);
				else
					this.LogID = base.SetintAsString(ColumnNames.LogID, value);
			}
		}

		public virtual string s_WareHouse
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WareHouse) ? string.Empty : base.GetstringAsString(ColumnNames.WareHouse);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WareHouse);
				else
					this.WareHouse = base.SetstringAsString(ColumnNames.WareHouse, value);
			}
		}

		public virtual string s_HostName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HostName) ? string.Empty : base.GetstringAsString(ColumnNames.HostName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HostName);
				else
					this.HostName = base.SetstringAsString(ColumnNames.HostName, value);
			}
		}

		public virtual string s_IPAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IPAddress) ? string.Empty : base.GetstringAsString(ColumnNames.IPAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IPAddress);
				else
					this.IPAddress = base.SetstringAsString(ColumnNames.IPAddress, value);
			}
		}

		public virtual string s_OccuranceDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OccuranceDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.OccuranceDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OccuranceDate);
				else
					this.OccuranceDate = base.SetDateTimeAsString(ColumnNames.OccuranceDate, value);
			}
		}

		public virtual string s_ErrorLevel
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ErrorLevel) ? string.Empty : base.GetintAsString(ColumnNames.ErrorLevel);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ErrorLevel);
				else
					this.ErrorLevel = base.SetintAsString(ColumnNames.ErrorLevel, value);
			}
		}

		public virtual string s_Message
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Message) ? string.Empty : base.GetstringAsString(ColumnNames.Message);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Message);
				else
					this.Message = base.SetstringAsString(ColumnNames.Message, value);
			}
		}

		public virtual string s_ExceptionType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ExceptionType) ? string.Empty : base.GetstringAsString(ColumnNames.ExceptionType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ExceptionType);
				else
					this.ExceptionType = base.SetstringAsString(ColumnNames.ExceptionType, value);
			}
		}

		public virtual string s_Form
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Form) ? string.Empty : base.GetstringAsString(ColumnNames.Form);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Form);
				else
					this.Form = base.SetstringAsString(ColumnNames.Form, value);
			}
		}

		public virtual string s_LineNumberOnMainForm
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LineNumberOnMainForm) ? string.Empty : base.GetintAsString(ColumnNames.LineNumberOnMainForm);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LineNumberOnMainForm);
				else
					this.LineNumberOnMainForm = base.SetintAsString(ColumnNames.LineNumberOnMainForm, value);
			}
		}

		public virtual string s_CallerMethod
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CallerMethod) ? string.Empty : base.GetstringAsString(ColumnNames.CallerMethod);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CallerMethod);
				else
					this.CallerMethod = base.SetstringAsString(ColumnNames.CallerMethod, value);
			}
		}

		public virtual string s_FileName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FileName) ? string.Empty : base.GetstringAsString(ColumnNames.FileName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FileName);
				else
					this.FileName = base.SetstringAsString(ColumnNames.FileName, value);
			}
		}

		public virtual string s_Method
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Method) ? string.Empty : base.GetstringAsString(ColumnNames.Method);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Method);
				else
					this.Method = base.SetstringAsString(ColumnNames.Method, value);
			}
		}

		public virtual string s_LineNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LineNumber) ? string.Empty : base.GetintAsString(ColumnNames.LineNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LineNumber);
				else
					this.LineNumber = base.SetintAsString(ColumnNames.LineNumber, value);
			}
		}

		public virtual string s_Activity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Activity) ? string.Empty : base.GetstringAsString(ColumnNames.Activity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Activity);
				else
					this.Activity = base.SetstringAsString(ColumnNames.Activity, value);
			}
		}

		public virtual string s_Detail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Detail) ? string.Empty : base.GetstringAsString(ColumnNames.Detail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Detail);
				else
					this.Detail = base.SetstringAsString(ColumnNames.Detail, value);
			}
		}

		public virtual string s_StackTrace
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StackTrace) ? string.Empty : base.GetstringAsString(ColumnNames.StackTrace);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StackTrace);
				else
					this.StackTrace = base.SetstringAsString(ColumnNames.StackTrace, value);
			}
		}

		public virtual string s_InnerException
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InnerException) ? string.Empty : base.GetstringAsString(ColumnNames.InnerException);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InnerException);
				else
					this.InnerException = base.SetstringAsString(ColumnNames.InnerException, value);
			}
		}

		public virtual string s_AppVersion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppVersion) ? string.Empty : base.GetstringAsString(ColumnNames.AppVersion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppVersion);
				else
					this.AppVersion = base.SetstringAsString(ColumnNames.AppVersion, value);
			}
		}

		public virtual string s_DbVersion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DbVersion) ? string.Empty : base.GetstringAsString(ColumnNames.DbVersion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DbVersion);
				else
					this.DbVersion = base.SetstringAsString(ColumnNames.DbVersion, value);
			}
		}

		public virtual string s_VPNIP
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VPNIP) ? string.Empty : base.GetintAsString(ColumnNames.VPNIP);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VPNIP);
				else
					this.VPNIP = base.SetintAsString(ColumnNames.VPNIP, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter LogID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LogID, Parameters.LogID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WareHouse
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WareHouse, Parameters.WareHouse);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HostName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HostName, Parameters.HostName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IPAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IPAddress, Parameters.IPAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OccuranceDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OccuranceDate, Parameters.OccuranceDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ErrorLevel
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ErrorLevel, Parameters.ErrorLevel);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Message
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Message, Parameters.Message);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ExceptionType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ExceptionType, Parameters.ExceptionType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Form
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Form, Parameters.Form);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LineNumberOnMainForm
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LineNumberOnMainForm, Parameters.LineNumberOnMainForm);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CallerMethod
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CallerMethod, Parameters.CallerMethod);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FileName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FileName, Parameters.FileName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Method
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Method, Parameters.Method);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LineNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LineNumber, Parameters.LineNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Activity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Activity, Parameters.Activity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Detail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Detail, Parameters.Detail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StackTrace
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StackTrace, Parameters.StackTrace);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InnerException
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InnerException, Parameters.InnerException);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppVersion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppVersion, Parameters.AppVersion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DbVersion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DbVersion, Parameters.DbVersion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter VPNIP
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VPNIP, Parameters.VPNIP);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter LogID
		    {
				get
		        {
					if(_LogID_W == null)
	        	    {
						_LogID_W = TearOff.LogID;
					}
					return _LogID_W;
				}
			}

			public WhereParameter WareHouse
		    {
				get
		        {
					if(_WareHouse_W == null)
	        	    {
						_WareHouse_W = TearOff.WareHouse;
					}
					return _WareHouse_W;
				}
			}

			public WhereParameter HostName
		    {
				get
		        {
					if(_HostName_W == null)
	        	    {
						_HostName_W = TearOff.HostName;
					}
					return _HostName_W;
				}
			}

			public WhereParameter IPAddress
		    {
				get
		        {
					if(_IPAddress_W == null)
	        	    {
						_IPAddress_W = TearOff.IPAddress;
					}
					return _IPAddress_W;
				}
			}

			public WhereParameter OccuranceDate
		    {
				get
		        {
					if(_OccuranceDate_W == null)
	        	    {
						_OccuranceDate_W = TearOff.OccuranceDate;
					}
					return _OccuranceDate_W;
				}
			}

			public WhereParameter ErrorLevel
		    {
				get
		        {
					if(_ErrorLevel_W == null)
	        	    {
						_ErrorLevel_W = TearOff.ErrorLevel;
					}
					return _ErrorLevel_W;
				}
			}

			public WhereParameter Message
		    {
				get
		        {
					if(_Message_W == null)
	        	    {
						_Message_W = TearOff.Message;
					}
					return _Message_W;
				}
			}

			public WhereParameter ExceptionType
		    {
				get
		        {
					if(_ExceptionType_W == null)
	        	    {
						_ExceptionType_W = TearOff.ExceptionType;
					}
					return _ExceptionType_W;
				}
			}

			public WhereParameter Form
		    {
				get
		        {
					if(_Form_W == null)
	        	    {
						_Form_W = TearOff.Form;
					}
					return _Form_W;
				}
			}

			public WhereParameter LineNumberOnMainForm
		    {
				get
		        {
					if(_LineNumberOnMainForm_W == null)
	        	    {
						_LineNumberOnMainForm_W = TearOff.LineNumberOnMainForm;
					}
					return _LineNumberOnMainForm_W;
				}
			}

			public WhereParameter CallerMethod
		    {
				get
		        {
					if(_CallerMethod_W == null)
	        	    {
						_CallerMethod_W = TearOff.CallerMethod;
					}
					return _CallerMethod_W;
				}
			}

			public WhereParameter FileName
		    {
				get
		        {
					if(_FileName_W == null)
	        	    {
						_FileName_W = TearOff.FileName;
					}
					return _FileName_W;
				}
			}

			public WhereParameter Method
		    {
				get
		        {
					if(_Method_W == null)
	        	    {
						_Method_W = TearOff.Method;
					}
					return _Method_W;
				}
			}

			public WhereParameter LineNumber
		    {
				get
		        {
					if(_LineNumber_W == null)
	        	    {
						_LineNumber_W = TearOff.LineNumber;
					}
					return _LineNumber_W;
				}
			}

			public WhereParameter Activity
		    {
				get
		        {
					if(_Activity_W == null)
	        	    {
						_Activity_W = TearOff.Activity;
					}
					return _Activity_W;
				}
			}

			public WhereParameter Detail
		    {
				get
		        {
					if(_Detail_W == null)
	        	    {
						_Detail_W = TearOff.Detail;
					}
					return _Detail_W;
				}
			}

			public WhereParameter StackTrace
		    {
				get
		        {
					if(_StackTrace_W == null)
	        	    {
						_StackTrace_W = TearOff.StackTrace;
					}
					return _StackTrace_W;
				}
			}

			public WhereParameter InnerException
		    {
				get
		        {
					if(_InnerException_W == null)
	        	    {
						_InnerException_W = TearOff.InnerException;
					}
					return _InnerException_W;
				}
			}

			public WhereParameter AppVersion
		    {
				get
		        {
					if(_AppVersion_W == null)
	        	    {
						_AppVersion_W = TearOff.AppVersion;
					}
					return _AppVersion_W;
				}
			}

			public WhereParameter DbVersion
		    {
				get
		        {
					if(_DbVersion_W == null)
	        	    {
						_DbVersion_W = TearOff.DbVersion;
					}
					return _DbVersion_W;
				}
			}

			public WhereParameter VPNIP
		    {
				get
		        {
					if(_VPNIP_W == null)
	        	    {
						_VPNIP_W = TearOff.VPNIP;
					}
					return _VPNIP_W;
				}
			}

			private WhereParameter _LogID_W = null;
			private WhereParameter _WareHouse_W = null;
			private WhereParameter _HostName_W = null;
			private WhereParameter _IPAddress_W = null;
			private WhereParameter _OccuranceDate_W = null;
			private WhereParameter _ErrorLevel_W = null;
			private WhereParameter _Message_W = null;
			private WhereParameter _ExceptionType_W = null;
			private WhereParameter _Form_W = null;
			private WhereParameter _LineNumberOnMainForm_W = null;
			private WhereParameter _CallerMethod_W = null;
			private WhereParameter _FileName_W = null;
			private WhereParameter _Method_W = null;
			private WhereParameter _LineNumber_W = null;
			private WhereParameter _Activity_W = null;
			private WhereParameter _Detail_W = null;
			private WhereParameter _StackTrace_W = null;
			private WhereParameter _InnerException_W = null;
			private WhereParameter _AppVersion_W = null;
			private WhereParameter _DbVersion_W = null;
			private WhereParameter _VPNIP_W = null;

			public void WhereClauseReset()
			{
				_LogID_W = null;
				_WareHouse_W = null;
				_HostName_W = null;
				_IPAddress_W = null;
				_OccuranceDate_W = null;
				_ErrorLevel_W = null;
				_Message_W = null;
				_ExceptionType_W = null;
				_Form_W = null;
				_LineNumberOnMainForm_W = null;
				_CallerMethod_W = null;
				_FileName_W = null;
				_Method_W = null;
				_LineNumber_W = null;
				_Activity_W = null;
				_Detail_W = null;
				_StackTrace_W = null;
				_InnerException_W = null;
				_AppVersion_W = null;
				_DbVersion_W = null;
				_VPNIP_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter LogID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LogID, Parameters.LogID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WareHouse
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WareHouse, Parameters.WareHouse);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HostName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HostName, Parameters.HostName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IPAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IPAddress, Parameters.IPAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OccuranceDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OccuranceDate, Parameters.OccuranceDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ErrorLevel
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ErrorLevel, Parameters.ErrorLevel);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Message
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Message, Parameters.Message);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ExceptionType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExceptionType, Parameters.ExceptionType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Form
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Form, Parameters.Form);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LineNumberOnMainForm
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LineNumberOnMainForm, Parameters.LineNumberOnMainForm);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CallerMethod
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CallerMethod, Parameters.CallerMethod);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FileName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FileName, Parameters.FileName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Method
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Method, Parameters.Method);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LineNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LineNumber, Parameters.LineNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Activity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Activity, Parameters.Activity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Detail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Detail, Parameters.Detail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StackTrace
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StackTrace, Parameters.StackTrace);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InnerException
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InnerException, Parameters.InnerException);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppVersion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppVersion, Parameters.AppVersion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DbVersion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DbVersion, Parameters.DbVersion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter VPNIP
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VPNIP, Parameters.VPNIP);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter LogID
		    {
				get
		        {
					if(_LogID_W == null)
	        	    {
						_LogID_W = TearOff.LogID;
					}
					return _LogID_W;
				}
			}

			public AggregateParameter WareHouse
		    {
				get
		        {
					if(_WareHouse_W == null)
	        	    {
						_WareHouse_W = TearOff.WareHouse;
					}
					return _WareHouse_W;
				}
			}

			public AggregateParameter HostName
		    {
				get
		        {
					if(_HostName_W == null)
	        	    {
						_HostName_W = TearOff.HostName;
					}
					return _HostName_W;
				}
			}

			public AggregateParameter IPAddress
		    {
				get
		        {
					if(_IPAddress_W == null)
	        	    {
						_IPAddress_W = TearOff.IPAddress;
					}
					return _IPAddress_W;
				}
			}

			public AggregateParameter OccuranceDate
		    {
				get
		        {
					if(_OccuranceDate_W == null)
	        	    {
						_OccuranceDate_W = TearOff.OccuranceDate;
					}
					return _OccuranceDate_W;
				}
			}

			public AggregateParameter ErrorLevel
		    {
				get
		        {
					if(_ErrorLevel_W == null)
	        	    {
						_ErrorLevel_W = TearOff.ErrorLevel;
					}
					return _ErrorLevel_W;
				}
			}

			public AggregateParameter Message
		    {
				get
		        {
					if(_Message_W == null)
	        	    {
						_Message_W = TearOff.Message;
					}
					return _Message_W;
				}
			}

			public AggregateParameter ExceptionType
		    {
				get
		        {
					if(_ExceptionType_W == null)
	        	    {
						_ExceptionType_W = TearOff.ExceptionType;
					}
					return _ExceptionType_W;
				}
			}

			public AggregateParameter Form
		    {
				get
		        {
					if(_Form_W == null)
	        	    {
						_Form_W = TearOff.Form;
					}
					return _Form_W;
				}
			}

			public AggregateParameter LineNumberOnMainForm
		    {
				get
		        {
					if(_LineNumberOnMainForm_W == null)
	        	    {
						_LineNumberOnMainForm_W = TearOff.LineNumberOnMainForm;
					}
					return _LineNumberOnMainForm_W;
				}
			}

			public AggregateParameter CallerMethod
		    {
				get
		        {
					if(_CallerMethod_W == null)
	        	    {
						_CallerMethod_W = TearOff.CallerMethod;
					}
					return _CallerMethod_W;
				}
			}

			public AggregateParameter FileName
		    {
				get
		        {
					if(_FileName_W == null)
	        	    {
						_FileName_W = TearOff.FileName;
					}
					return _FileName_W;
				}
			}

			public AggregateParameter Method
		    {
				get
		        {
					if(_Method_W == null)
	        	    {
						_Method_W = TearOff.Method;
					}
					return _Method_W;
				}
			}

			public AggregateParameter LineNumber
		    {
				get
		        {
					if(_LineNumber_W == null)
	        	    {
						_LineNumber_W = TearOff.LineNumber;
					}
					return _LineNumber_W;
				}
			}

			public AggregateParameter Activity
		    {
				get
		        {
					if(_Activity_W == null)
	        	    {
						_Activity_W = TearOff.Activity;
					}
					return _Activity_W;
				}
			}

			public AggregateParameter Detail
		    {
				get
		        {
					if(_Detail_W == null)
	        	    {
						_Detail_W = TearOff.Detail;
					}
					return _Detail_W;
				}
			}

			public AggregateParameter StackTrace
		    {
				get
		        {
					if(_StackTrace_W == null)
	        	    {
						_StackTrace_W = TearOff.StackTrace;
					}
					return _StackTrace_W;
				}
			}

			public AggregateParameter InnerException
		    {
				get
		        {
					if(_InnerException_W == null)
	        	    {
						_InnerException_W = TearOff.InnerException;
					}
					return _InnerException_W;
				}
			}

			public AggregateParameter AppVersion
		    {
				get
		        {
					if(_AppVersion_W == null)
	        	    {
						_AppVersion_W = TearOff.AppVersion;
					}
					return _AppVersion_W;
				}
			}

			public AggregateParameter DbVersion
		    {
				get
		        {
					if(_DbVersion_W == null)
	        	    {
						_DbVersion_W = TearOff.DbVersion;
					}
					return _DbVersion_W;
				}
			}

			public AggregateParameter VPNIP
		    {
				get
		        {
					if(_VPNIP_W == null)
	        	    {
						_VPNIP_W = TearOff.VPNIP;
					}
					return _VPNIP_W;
				}
			}

			private AggregateParameter _LogID_W = null;
			private AggregateParameter _WareHouse_W = null;
			private AggregateParameter _HostName_W = null;
			private AggregateParameter _IPAddress_W = null;
			private AggregateParameter _OccuranceDate_W = null;
			private AggregateParameter _ErrorLevel_W = null;
			private AggregateParameter _Message_W = null;
			private AggregateParameter _ExceptionType_W = null;
			private AggregateParameter _Form_W = null;
			private AggregateParameter _LineNumberOnMainForm_W = null;
			private AggregateParameter _CallerMethod_W = null;
			private AggregateParameter _FileName_W = null;
			private AggregateParameter _Method_W = null;
			private AggregateParameter _LineNumber_W = null;
			private AggregateParameter _Activity_W = null;
			private AggregateParameter _Detail_W = null;
			private AggregateParameter _StackTrace_W = null;
			private AggregateParameter _InnerException_W = null;
			private AggregateParameter _AppVersion_W = null;
			private AggregateParameter _DbVersion_W = null;
			private AggregateParameter _VPNIP_W = null;

			public void AggregateClauseReset()
			{
				_LogID_W = null;
				_WareHouse_W = null;
				_HostName_W = null;
				_IPAddress_W = null;
				_OccuranceDate_W = null;
				_ErrorLevel_W = null;
				_Message_W = null;
				_ExceptionType_W = null;
				_Form_W = null;
				_LineNumberOnMainForm_W = null;
				_CallerMethod_W = null;
				_FileName_W = null;
				_Method_W = null;
				_LineNumber_W = null;
				_Activity_W = null;
				_Detail_W = null;
				_StackTrace_W = null;
				_InnerException_W = null;
				_AppVersion_W = null;
				_DbVersion_W = null;
				_VPNIP_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_LogErrorInsert]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_LogErrorUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_LogErrorDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.LogID);
			p.SourceColumn = ColumnNames.LogID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.LogID);
			p.SourceColumn = ColumnNames.LogID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WareHouse);
			p.SourceColumn = ColumnNames.WareHouse;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HostName);
			p.SourceColumn = ColumnNames.HostName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IPAddress);
			p.SourceColumn = ColumnNames.IPAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OccuranceDate);
			p.SourceColumn = ColumnNames.OccuranceDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ErrorLevel);
			p.SourceColumn = ColumnNames.ErrorLevel;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Message);
			p.SourceColumn = ColumnNames.Message;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ExceptionType);
			p.SourceColumn = ColumnNames.ExceptionType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Form);
			p.SourceColumn = ColumnNames.Form;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LineNumberOnMainForm);
			p.SourceColumn = ColumnNames.LineNumberOnMainForm;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CallerMethod);
			p.SourceColumn = ColumnNames.CallerMethod;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FileName);
			p.SourceColumn = ColumnNames.FileName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Method);
			p.SourceColumn = ColumnNames.Method;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LineNumber);
			p.SourceColumn = ColumnNames.LineNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Activity);
			p.SourceColumn = ColumnNames.Activity;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Detail);
			p.SourceColumn = ColumnNames.Detail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StackTrace);
			p.SourceColumn = ColumnNames.StackTrace;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InnerException);
			p.SourceColumn = ColumnNames.InnerException;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppVersion);
			p.SourceColumn = ColumnNames.AppVersion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DbVersion);
			p.SourceColumn = ColumnNames.DbVersion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.VPNIP);
			p.SourceColumn = ColumnNames.VPNIP;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
