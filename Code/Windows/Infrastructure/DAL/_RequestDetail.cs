
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
    public abstract class _RequestDetail : SqlClientEntity
    {
        public _RequestDetail()
        {
            this.QuerySource = "RequestDetail";
            this.MappingName = "RequestDetail";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_RequestDetailLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int RequestDetailID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.RequestDetailID, RequestDetailID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_RequestDetailLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter RequestDetailID
            {
                get
                {
                    return new SqlParameter("@RequestDetailID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter BeginningBalance
            {
                get
                {
                    return new SqlParameter("@BeginningBalance", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter DOS
            {
                get
                {
                    return new SqlParameter("@DOS", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Loss
            {
                get
                {
                    return new SqlParameter("@Loss", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter Adjustment
            {
                get
                {
                    return new SqlParameter("@Adjustment", SqlDbType.Decimal, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string RequestDetailID = "RequestDetailID";
            public const string BeginningBalance = "BeginningBalance";
            public const string DOS = "DOS";
            public const string Loss = "Loss";
            public const string Adjustment = "Adjustment";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[RequestDetailID] = _RequestDetail.PropertyNames.RequestDetailID;
                    ht[BeginningBalance] = _RequestDetail.PropertyNames.BeginningBalance;
                    ht[DOS] = _RequestDetail.PropertyNames.DOS;
                    ht[Loss] = _RequestDetail.PropertyNames.Loss;
                    ht[Adjustment] = _RequestDetail.PropertyNames.Adjustment;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string RequestDetailID = "RequestDetailID";
            public const string BeginningBalance = "BeginningBalance";
            public const string DOS = "DOS";
            public const string Loss = "Loss";
            public const string Adjustment = "Adjustment";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[RequestDetailID] = _RequestDetail.ColumnNames.RequestDetailID;
                    ht[BeginningBalance] = _RequestDetail.ColumnNames.BeginningBalance;
                    ht[DOS] = _RequestDetail.ColumnNames.DOS;
                    ht[Loss] = _RequestDetail.ColumnNames.Loss;
                    ht[Adjustment] = _RequestDetail.ColumnNames.Adjustment;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string RequestDetailID = "s_RequestDetailID";
            public const string BeginningBalance = "s_BeginningBalance";
            public const string DOS = "s_DOS";
            public const string Loss = "s_Loss";
            public const string Adjustment = "s_Adjustment";

        }
        #endregion

        #region Properties

        public virtual int RequestDetailID
        {
            get
            {
                return base.Getint(ColumnNames.RequestDetailID);
            }
            set
            {
                base.Setint(ColumnNames.RequestDetailID, value);
            }
        }

        public virtual decimal BeginningBalance
        {
            get
            {
                return base.Getdecimal(ColumnNames.BeginningBalance);
            }
            set
            {
                base.Setdecimal(ColumnNames.BeginningBalance, value);
            }
        }

        public virtual int DOS
        {
            get
            {
                return base.Getint(ColumnNames.DOS);
            }
            set
            {
                base.Setint(ColumnNames.DOS, value);
            }
        }

        public virtual decimal Loss
        {
            get
            {
                return base.Getdecimal(ColumnNames.Loss);
            }
            set
            {
                base.Setdecimal(ColumnNames.Loss, value);
            }
        }

        public virtual decimal Adjustment
        {
            get
            {
                return base.Getdecimal(ColumnNames.Adjustment);
            }
            set
            {
                base.Setdecimal(ColumnNames.Adjustment, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_RequestDetailID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.RequestDetailID) ? string.Empty : base.GetintAsString(ColumnNames.RequestDetailID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.RequestDetailID);
                else
                    this.RequestDetailID = base.SetintAsString(ColumnNames.RequestDetailID, value);
            }
        }

        public virtual string s_BeginningBalance
        {
            get
            {
                return this.IsColumnNull(ColumnNames.BeginningBalance) ? string.Empty : base.GetdecimalAsString(ColumnNames.BeginningBalance);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.BeginningBalance);
                else
                    this.BeginningBalance = base.SetdecimalAsString(ColumnNames.BeginningBalance, value);
            }
        }

        public virtual string s_DOS
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DOS) ? string.Empty : base.GetintAsString(ColumnNames.DOS);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DOS);
                else
                    this.DOS = base.SetintAsString(ColumnNames.DOS, value);
            }
        }

        public virtual string s_Loss
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Loss) ? string.Empty : base.GetdecimalAsString(ColumnNames.Loss);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Loss);
                else
                    this.Loss = base.SetdecimalAsString(ColumnNames.Loss, value);
            }
        }

        public virtual string s_Adjustment
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Adjustment) ? string.Empty : base.GetdecimalAsString(ColumnNames.Adjustment);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Adjustment);
                else
                    this.Adjustment = base.SetdecimalAsString(ColumnNames.Adjustment, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter RequestDetailID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.RequestDetailID, Parameters.RequestDetailID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter BeginningBalance
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.BeginningBalance, Parameters.BeginningBalance);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DOS
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DOS, Parameters.DOS);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Loss
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Loss, Parameters.Loss);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Adjustment
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Adjustment, Parameters.Adjustment);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter RequestDetailID
            {
                get
                {
                    if (_RequestDetailID_W == null)
                    {
                        _RequestDetailID_W = TearOff.RequestDetailID;
                    }
                    return _RequestDetailID_W;
                }
            }

            public WhereParameter BeginningBalance
            {
                get
                {
                    if (_BeginningBalance_W == null)
                    {
                        _BeginningBalance_W = TearOff.BeginningBalance;
                    }
                    return _BeginningBalance_W;
                }
            }

            public WhereParameter DOS
            {
                get
                {
                    if (_DOS_W == null)
                    {
                        _DOS_W = TearOff.DOS;
                    }
                    return _DOS_W;
                }
            }

            public WhereParameter Loss
            {
                get
                {
                    if (_Loss_W == null)
                    {
                        _Loss_W = TearOff.Loss;
                    }
                    return _Loss_W;
                }
            }

            public WhereParameter Adjustment
            {
                get
                {
                    if (_Adjustment_W == null)
                    {
                        _Adjustment_W = TearOff.Adjustment;
                    }
                    return _Adjustment_W;
                }
            }

            private WhereParameter _RequestDetailID_W = null;
            private WhereParameter _BeginningBalance_W = null;
            private WhereParameter _DOS_W = null;
            private WhereParameter _Loss_W = null;
            private WhereParameter _Adjustment_W = null;

            public void WhereClauseReset()
            {
                _RequestDetailID_W = null;
                _BeginningBalance_W = null;
                _DOS_W = null;
                _Loss_W = null;
                _Adjustment_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter RequestDetailID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequestDetailID, Parameters.RequestDetailID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter BeginningBalance
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.BeginningBalance, Parameters.BeginningBalance);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DOS
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DOS, Parameters.DOS);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Loss
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Loss, Parameters.Loss);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Adjustment
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Adjustment, Parameters.Adjustment);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter RequestDetailID
            {
                get
                {
                    if (_RequestDetailID_W == null)
                    {
                        _RequestDetailID_W = TearOff.RequestDetailID;
                    }
                    return _RequestDetailID_W;
                }
            }

            public AggregateParameter BeginningBalance
            {
                get
                {
                    if (_BeginningBalance_W == null)
                    {
                        _BeginningBalance_W = TearOff.BeginningBalance;
                    }
                    return _BeginningBalance_W;
                }
            }

            public AggregateParameter DOS
            {
                get
                {
                    if (_DOS_W == null)
                    {
                        _DOS_W = TearOff.DOS;
                    }
                    return _DOS_W;
                }
            }

            public AggregateParameter Loss
            {
                get
                {
                    if (_Loss_W == null)
                    {
                        _Loss_W = TearOff.Loss;
                    }
                    return _Loss_W;
                }
            }

            public AggregateParameter Adjustment
            {
                get
                {
                    if (_Adjustment_W == null)
                    {
                        _Adjustment_W = TearOff.Adjustment;
                    }
                    return _Adjustment_W;
                }
            }

            private AggregateParameter _RequestDetailID_W = null;
            private AggregateParameter _BeginningBalance_W = null;
            private AggregateParameter _DOS_W = null;
            private AggregateParameter _Loss_W = null;
            private AggregateParameter _Adjustment_W = null;

            public void AggregateClauseReset()
            {
                _RequestDetailID_W = null;
                _BeginningBalance_W = null;
                _DOS_W = null;
                _Loss_W = null;
                _Adjustment_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RequestDetailInsert]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RequestDetailUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RequestDetailDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.RequestDetailID);
            p.SourceColumn = ColumnNames.RequestDetailID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.RequestDetailID);
            p.SourceColumn = ColumnNames.RequestDetailID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.BeginningBalance);
            p.SourceColumn = ColumnNames.BeginningBalance;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DOS);
            p.SourceColumn = ColumnNames.DOS;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Loss);
            p.SourceColumn = ColumnNames.Loss;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Adjustment);
            p.SourceColumn = ColumnNames.Adjustment;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }

}
