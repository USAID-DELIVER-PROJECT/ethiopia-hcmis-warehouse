
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _Shelf : SqlClientEntity
	{
		public _Shelf()
		{
			this.QuerySource = "Shelf";
			this.MappingName = "Shelf";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ShelfLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ShelfLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StoreID
			{
				get
				{
					return new SqlParameter("@StoreID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ShelfCode
			{
				get
				{
					return new SqlParameter("@ShelfCode", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter ShelfType
			{
				get
				{
					return new SqlParameter("@ShelfType", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Rows
			{
				get
				{
					return new SqlParameter("@Rows", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Columns
			{
				get
				{
					return new SqlParameter("@Columns", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CoordinateX
			{
				get
				{
					return new SqlParameter("@CoordinateX", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter CoordinateY
			{
				get
				{
					return new SqlParameter("@CoordinateY", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Rotation
			{
				get
				{
					return new SqlParameter("@Rotation", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Length
			{
				get
				{
					return new SqlParameter("@Length", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Width
			{
				get
				{
					return new SqlParameter("@Width", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Height
			{
				get
				{
					return new SqlParameter("@Height", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter ShelfStorageType
			{
				get
				{
					return new SqlParameter("@ShelfStorageType", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string StoreID = "StoreID";
            public const string ShelfCode = "ShelfCode";
            public const string ShelfType = "ShelfType";
            public const string Rows = "Rows";
            public const string Columns = "Columns";
            public const string CoordinateX = "CoordinateX";
            public const string CoordinateY = "CoordinateY";
            public const string Rotation = "Rotation";
            public const string Length = "Length";
            public const string Width = "Width";
            public const string Height = "Height";
            public const string ShelfStorageType = "ShelfStorageType";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _Shelf.PropertyNames.ID;
					ht[StoreID] = _Shelf.PropertyNames.StoreID;
					ht[ShelfCode] = _Shelf.PropertyNames.ShelfCode;
					ht[ShelfType] = _Shelf.PropertyNames.ShelfType;
					ht[Rows] = _Shelf.PropertyNames.Rows;
					ht[Columns] = _Shelf.PropertyNames.Columns;
					ht[CoordinateX] = _Shelf.PropertyNames.CoordinateX;
					ht[CoordinateY] = _Shelf.PropertyNames.CoordinateY;
					ht[Rotation] = _Shelf.PropertyNames.Rotation;
					ht[Length] = _Shelf.PropertyNames.Length;
					ht[Width] = _Shelf.PropertyNames.Width;
					ht[Height] = _Shelf.PropertyNames.Height;
					ht[ShelfStorageType] = _Shelf.PropertyNames.ShelfStorageType;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string StoreID = "StoreID";
            public const string ShelfCode = "ShelfCode";
            public const string ShelfType = "ShelfType";
            public const string Rows = "Rows";
            public const string Columns = "Columns";
            public const string CoordinateX = "CoordinateX";
            public const string CoordinateY = "CoordinateY";
            public const string Rotation = "Rotation";
            public const string Length = "Length";
            public const string Width = "Width";
            public const string Height = "Height";
            public const string ShelfStorageType = "ShelfStorageType";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _Shelf.ColumnNames.ID;
					ht[StoreID] = _Shelf.ColumnNames.StoreID;
					ht[ShelfCode] = _Shelf.ColumnNames.ShelfCode;
					ht[ShelfType] = _Shelf.ColumnNames.ShelfType;
					ht[Rows] = _Shelf.ColumnNames.Rows;
					ht[Columns] = _Shelf.ColumnNames.Columns;
					ht[CoordinateX] = _Shelf.ColumnNames.CoordinateX;
					ht[CoordinateY] = _Shelf.ColumnNames.CoordinateY;
					ht[Rotation] = _Shelf.ColumnNames.Rotation;
					ht[Length] = _Shelf.ColumnNames.Length;
					ht[Width] = _Shelf.ColumnNames.Width;
					ht[Height] = _Shelf.ColumnNames.Height;
					ht[ShelfStorageType] = _Shelf.ColumnNames.ShelfStorageType;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string StoreID = "s_StoreID";
            public const string ShelfCode = "s_ShelfCode";
            public const string ShelfType = "s_ShelfType";
            public const string Rows = "s_Rows";
            public const string Columns = "s_Columns";
            public const string CoordinateX = "s_CoordinateX";
            public const string CoordinateY = "s_CoordinateY";
            public const string Rotation = "s_Rotation";
            public const string Length = "s_Length";
            public const string Width = "s_Width";
            public const string Height = "s_Height";
            public const string ShelfStorageType = "s_ShelfStorageType";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual int StoreID
	    {
			get
	        {
				return base.Getint(ColumnNames.StoreID);
			}
			set
	        {
				base.Setint(ColumnNames.StoreID, value);
			}
		}

		public virtual string ShelfCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.ShelfCode);
			}
			set
	        {
				base.Setstring(ColumnNames.ShelfCode, value);
			}
		}

		public virtual string ShelfType
	    {
			get
	        {
				return base.Getstring(ColumnNames.ShelfType);
			}
			set
	        {
				base.Setstring(ColumnNames.ShelfType, value);
			}
		}

		public virtual int Rows
	    {
			get
	        {
				return base.Getint(ColumnNames.Rows);
			}
			set
	        {
				base.Setint(ColumnNames.Rows, value);
			}
		}

		public virtual int Columns
	    {
			get
	        {
				return base.Getint(ColumnNames.Columns);
			}
			set
	        {
				base.Setint(ColumnNames.Columns, value);
			}
		}

		public virtual double CoordinateX
	    {
			get
	        {
				return base.Getdouble(ColumnNames.CoordinateX);
			}
			set
	        {
				base.Setdouble(ColumnNames.CoordinateX, value);
			}
		}

		public virtual double CoordinateY
	    {
			get
	        {
				return base.Getdouble(ColumnNames.CoordinateY);
			}
			set
	        {
				base.Setdouble(ColumnNames.CoordinateY, value);
			}
		}

		public virtual double Rotation
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Rotation);
			}
			set
	        {
				base.Setdouble(ColumnNames.Rotation, value);
			}
		}

		public virtual double Length
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Length);
			}
			set
	        {
				base.Setdouble(ColumnNames.Length, value);
			}
		}

		public virtual double Width
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Width);
			}
			set
	        {
				base.Setdouble(ColumnNames.Width, value);
			}
		}

		public virtual double Height
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Height);
			}
			set
	        {
				base.Setdouble(ColumnNames.Height, value);
			}
		}

		public virtual int ShelfStorageType
	    {
			get
	        {
				return base.Getint(ColumnNames.ShelfStorageType);
			}
			set
	        {
				base.Setint(ColumnNames.ShelfStorageType, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_StoreID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StoreID) ? string.Empty : base.GetintAsString(ColumnNames.StoreID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StoreID);
				else
					this.StoreID = base.SetintAsString(ColumnNames.StoreID, value);
			}
		}

		public virtual string s_ShelfCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShelfCode) ? string.Empty : base.GetstringAsString(ColumnNames.ShelfCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShelfCode);
				else
					this.ShelfCode = base.SetstringAsString(ColumnNames.ShelfCode, value);
			}
		}

		public virtual string s_ShelfType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShelfType) ? string.Empty : base.GetstringAsString(ColumnNames.ShelfType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShelfType);
				else
					this.ShelfType = base.SetstringAsString(ColumnNames.ShelfType, value);
			}
		}

		public virtual string s_Rows
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rows) ? string.Empty : base.GetintAsString(ColumnNames.Rows);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rows);
				else
					this.Rows = base.SetintAsString(ColumnNames.Rows, value);
			}
		}

		public virtual string s_Columns
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Columns) ? string.Empty : base.GetintAsString(ColumnNames.Columns);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Columns);
				else
					this.Columns = base.SetintAsString(ColumnNames.Columns, value);
			}
		}

		public virtual string s_CoordinateX
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CoordinateX) ? string.Empty : base.GetdoubleAsString(ColumnNames.CoordinateX);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CoordinateX);
				else
					this.CoordinateX = base.SetdoubleAsString(ColumnNames.CoordinateX, value);
			}
		}

		public virtual string s_CoordinateY
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CoordinateY) ? string.Empty : base.GetdoubleAsString(ColumnNames.CoordinateY);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CoordinateY);
				else
					this.CoordinateY = base.SetdoubleAsString(ColumnNames.CoordinateY, value);
			}
		}

		public virtual string s_Rotation
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rotation) ? string.Empty : base.GetdoubleAsString(ColumnNames.Rotation);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rotation);
				else
					this.Rotation = base.SetdoubleAsString(ColumnNames.Rotation, value);
			}
		}

		public virtual string s_Length
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Length) ? string.Empty : base.GetdoubleAsString(ColumnNames.Length);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Length);
				else
					this.Length = base.SetdoubleAsString(ColumnNames.Length, value);
			}
		}

		public virtual string s_Width
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Width) ? string.Empty : base.GetdoubleAsString(ColumnNames.Width);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Width);
				else
					this.Width = base.SetdoubleAsString(ColumnNames.Width, value);
			}
		}

		public virtual string s_Height
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Height) ? string.Empty : base.GetdoubleAsString(ColumnNames.Height);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Height);
				else
					this.Height = base.SetdoubleAsString(ColumnNames.Height, value);
			}
		}

		public virtual string s_ShelfStorageType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShelfStorageType) ? string.Empty : base.GetintAsString(ColumnNames.ShelfStorageType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShelfStorageType);
				else
					this.ShelfStorageType = base.SetintAsString(ColumnNames.ShelfStorageType, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StoreID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StoreID, Parameters.StoreID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShelfCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShelfCode, Parameters.ShelfCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShelfType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShelfType, Parameters.ShelfType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rows
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rows, Parameters.Rows);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Columns
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Columns, Parameters.Columns);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CoordinateX
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CoordinateX, Parameters.CoordinateX);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CoordinateY
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CoordinateY, Parameters.CoordinateY);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rotation
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rotation, Parameters.Rotation);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Length
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Length, Parameters.Length);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Width
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Width, Parameters.Width);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Height
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Height, Parameters.Height);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShelfStorageType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShelfStorageType, Parameters.ShelfStorageType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter StoreID
		    {
				get
		        {
					if(_StoreID_W == null)
	        	    {
						_StoreID_W = TearOff.StoreID;
					}
					return _StoreID_W;
				}
			}

			public WhereParameter ShelfCode
		    {
				get
		        {
					if(_ShelfCode_W == null)
	        	    {
						_ShelfCode_W = TearOff.ShelfCode;
					}
					return _ShelfCode_W;
				}
			}

			public WhereParameter ShelfType
		    {
				get
		        {
					if(_ShelfType_W == null)
	        	    {
						_ShelfType_W = TearOff.ShelfType;
					}
					return _ShelfType_W;
				}
			}

			public WhereParameter Rows
		    {
				get
		        {
					if(_Rows_W == null)
	        	    {
						_Rows_W = TearOff.Rows;
					}
					return _Rows_W;
				}
			}

			public WhereParameter Columns
		    {
				get
		        {
					if(_Columns_W == null)
	        	    {
						_Columns_W = TearOff.Columns;
					}
					return _Columns_W;
				}
			}

			public WhereParameter CoordinateX
		    {
				get
		        {
					if(_CoordinateX_W == null)
	        	    {
						_CoordinateX_W = TearOff.CoordinateX;
					}
					return _CoordinateX_W;
				}
			}

			public WhereParameter CoordinateY
		    {
				get
		        {
					if(_CoordinateY_W == null)
	        	    {
						_CoordinateY_W = TearOff.CoordinateY;
					}
					return _CoordinateY_W;
				}
			}

			public WhereParameter Rotation
		    {
				get
		        {
					if(_Rotation_W == null)
	        	    {
						_Rotation_W = TearOff.Rotation;
					}
					return _Rotation_W;
				}
			}

			public WhereParameter Length
		    {
				get
		        {
					if(_Length_W == null)
	        	    {
						_Length_W = TearOff.Length;
					}
					return _Length_W;
				}
			}

			public WhereParameter Width
		    {
				get
		        {
					if(_Width_W == null)
	        	    {
						_Width_W = TearOff.Width;
					}
					return _Width_W;
				}
			}

			public WhereParameter Height
		    {
				get
		        {
					if(_Height_W == null)
	        	    {
						_Height_W = TearOff.Height;
					}
					return _Height_W;
				}
			}

			public WhereParameter ShelfStorageType
		    {
				get
		        {
					if(_ShelfStorageType_W == null)
	        	    {
						_ShelfStorageType_W = TearOff.ShelfStorageType;
					}
					return _ShelfStorageType_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _StoreID_W = null;
			private WhereParameter _ShelfCode_W = null;
			private WhereParameter _ShelfType_W = null;
			private WhereParameter _Rows_W = null;
			private WhereParameter _Columns_W = null;
			private WhereParameter _CoordinateX_W = null;
			private WhereParameter _CoordinateY_W = null;
			private WhereParameter _Rotation_W = null;
			private WhereParameter _Length_W = null;
			private WhereParameter _Width_W = null;
			private WhereParameter _Height_W = null;
			private WhereParameter _ShelfStorageType_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_StoreID_W = null;
				_ShelfCode_W = null;
				_ShelfType_W = null;
				_Rows_W = null;
				_Columns_W = null;
				_CoordinateX_W = null;
				_CoordinateY_W = null;
				_Rotation_W = null;
				_Length_W = null;
				_Width_W = null;
				_Height_W = null;
				_ShelfStorageType_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StoreID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StoreID, Parameters.StoreID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShelfCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShelfCode, Parameters.ShelfCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShelfType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShelfType, Parameters.ShelfType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rows
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rows, Parameters.Rows);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Columns
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Columns, Parameters.Columns);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CoordinateX
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CoordinateX, Parameters.CoordinateX);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CoordinateY
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CoordinateY, Parameters.CoordinateY);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rotation
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rotation, Parameters.Rotation);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Length
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Length, Parameters.Length);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Width
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Width, Parameters.Width);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Height
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Height, Parameters.Height);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShelfStorageType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShelfStorageType, Parameters.ShelfStorageType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter StoreID
		    {
				get
		        {
					if(_StoreID_W == null)
	        	    {
						_StoreID_W = TearOff.StoreID;
					}
					return _StoreID_W;
				}
			}

			public AggregateParameter ShelfCode
		    {
				get
		        {
					if(_ShelfCode_W == null)
	        	    {
						_ShelfCode_W = TearOff.ShelfCode;
					}
					return _ShelfCode_W;
				}
			}

			public AggregateParameter ShelfType
		    {
				get
		        {
					if(_ShelfType_W == null)
	        	    {
						_ShelfType_W = TearOff.ShelfType;
					}
					return _ShelfType_W;
				}
			}

			public AggregateParameter Rows
		    {
				get
		        {
					if(_Rows_W == null)
	        	    {
						_Rows_W = TearOff.Rows;
					}
					return _Rows_W;
				}
			}

			public AggregateParameter Columns
		    {
				get
		        {
					if(_Columns_W == null)
	        	    {
						_Columns_W = TearOff.Columns;
					}
					return _Columns_W;
				}
			}

			public AggregateParameter CoordinateX
		    {
				get
		        {
					if(_CoordinateX_W == null)
	        	    {
						_CoordinateX_W = TearOff.CoordinateX;
					}
					return _CoordinateX_W;
				}
			}

			public AggregateParameter CoordinateY
		    {
				get
		        {
					if(_CoordinateY_W == null)
	        	    {
						_CoordinateY_W = TearOff.CoordinateY;
					}
					return _CoordinateY_W;
				}
			}

			public AggregateParameter Rotation
		    {
				get
		        {
					if(_Rotation_W == null)
	        	    {
						_Rotation_W = TearOff.Rotation;
					}
					return _Rotation_W;
				}
			}

			public AggregateParameter Length
		    {
				get
		        {
					if(_Length_W == null)
	        	    {
						_Length_W = TearOff.Length;
					}
					return _Length_W;
				}
			}

			public AggregateParameter Width
		    {
				get
		        {
					if(_Width_W == null)
	        	    {
						_Width_W = TearOff.Width;
					}
					return _Width_W;
				}
			}

			public AggregateParameter Height
		    {
				get
		        {
					if(_Height_W == null)
	        	    {
						_Height_W = TearOff.Height;
					}
					return _Height_W;
				}
			}

			public AggregateParameter ShelfStorageType
		    {
				get
		        {
					if(_ShelfStorageType_W == null)
	        	    {
						_ShelfStorageType_W = TearOff.ShelfStorageType;
					}
					return _ShelfStorageType_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _StoreID_W = null;
			private AggregateParameter _ShelfCode_W = null;
			private AggregateParameter _ShelfType_W = null;
			private AggregateParameter _Rows_W = null;
			private AggregateParameter _Columns_W = null;
			private AggregateParameter _CoordinateX_W = null;
			private AggregateParameter _CoordinateY_W = null;
			private AggregateParameter _Rotation_W = null;
			private AggregateParameter _Length_W = null;
			private AggregateParameter _Width_W = null;
			private AggregateParameter _Height_W = null;
			private AggregateParameter _ShelfStorageType_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_StoreID_W = null;
				_ShelfCode_W = null;
				_ShelfType_W = null;
				_Rows_W = null;
				_Columns_W = null;
				_CoordinateX_W = null;
				_CoordinateY_W = null;
				_Rotation_W = null;
				_Length_W = null;
				_Width_W = null;
				_Height_W = null;
				_ShelfStorageType_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ShelfInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ShelfUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ShelfDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StoreID);
			p.SourceColumn = ColumnNames.StoreID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShelfCode);
			p.SourceColumn = ColumnNames.ShelfCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShelfType);
			p.SourceColumn = ColumnNames.ShelfType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rows);
			p.SourceColumn = ColumnNames.Rows;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Columns);
			p.SourceColumn = ColumnNames.Columns;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CoordinateX);
			p.SourceColumn = ColumnNames.CoordinateX;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CoordinateY);
			p.SourceColumn = ColumnNames.CoordinateY;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rotation);
			p.SourceColumn = ColumnNames.Rotation;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Length);
			p.SourceColumn = ColumnNames.Length;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Width);
			p.SourceColumn = ColumnNames.Width;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Height);
			p.SourceColumn = ColumnNames.Height;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShelfStorageType);
			p.SourceColumn = ColumnNames.ShelfStorageType;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
