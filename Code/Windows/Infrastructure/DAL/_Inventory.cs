/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
    public abstract class _Inventory : SqlClientEntity
    {
        public _Inventory()
        {
            this.QuerySource = "Inventory";
            this.MappingName = "Inventory";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InventoryLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int ID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.ID, ID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InventoryLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter ID
            {
                get
                {
                    return new SqlParameter("@ID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter InventoryPeriodID
            {
                get
                {
                    return new SqlParameter("@InventoryPeriodID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter PhysicalStoreID
            {
                get
                {
                    return new SqlParameter("@PhysicalStoreID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ActivityID
            {
                get
                {
                    return new SqlParameter("@ActivityID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ItemID
            {
                get
                {
                    return new SqlParameter("@ItemID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter UnitID
            {
                get
                {
                    return new SqlParameter("@UnitID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ManufacturerID
            {
                get
                {
                    return new SqlParameter("@ManufacturerID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter SupplierID
            {
                get
                {
                    return new SqlParameter("@SupplierID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter BatchNo
            {
                get
                {
                    return new SqlParameter("@BatchNo", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter ExpiryDate
            {
                get
                {
                    return new SqlParameter("@ExpiryDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter SystemSoundQuantity
            {
                get
                {
                    return new SqlParameter("@SystemSoundQuantity", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter SystemDamagedQuantity
            {
                get
                {
                    return new SqlParameter("@SystemDamagedQuantity", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter InventorySoundQuantity
            {
                get
                {
                    return new SqlParameter("@InventorySoundQuantity", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter InventoryDamagedQuantity
            {
                get
                {
                    return new SqlParameter("@InventoryDamagedQuantity", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter Cost
            {
                get
                {
                    return new SqlParameter("@Cost", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter Margin
            {
                get
                {
                    return new SqlParameter("@Margin", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter SellingPrice
            {
                get
                {
                    return new SqlParameter("@SellingPrice", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter RecordedDate
            {
                get
                {
                    return new SqlParameter("@RecordedDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter IsDraft
            {
                get
                {
                    return new SqlParameter("@IsDraft", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter ApprovedDate
            {
                get
                {
                    return new SqlParameter("@ApprovedDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter RecordedBy
            {
                get
                {
                    return new SqlParameter("@RecordedBy", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ApprovedBy
            {
                get
                {
                    return new SqlParameter("@ApprovedBy", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter SystemExpiredQuantity
            {
                get
                {
                    return new SqlParameter("@SystemExpiredQuantity", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter InventoryExpiredQuantity
            {
                get
                {
                    return new SqlParameter("@InventoryExpiredQuantity", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter Remarks
            {
                get
                {
                    return new SqlParameter("@Remarks", SqlDbType.NVarChar, 4000);
                }
            }

            public static SqlParameter ReceiveDocID
            {
                get
                {
                    return new SqlParameter("@ReceiveDocID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter PalletLocationID
            {
                get
                {
                    return new SqlParameter("@PalletLocationID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter DamagedReceiveDocID
            {
                get
                {
                    return new SqlParameter("@DamagedReceiveDocID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter DamagedPalletLocationID
            {
                get
                {
                    return new SqlParameter("@DamagedPalletLocationID", SqlDbType.Int, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string ID = "ID";
            public const string InventoryPeriodID = "InventoryPeriodID";
            public const string PhysicalStoreID = "PhysicalStoreID";
            public const string ActivityID = "ActivityID";
            public const string ItemID = "ItemID";
            public const string UnitID = "UnitID";
            public const string ManufacturerID = "ManufacturerID";
            public const string SupplierID = "SupplierID";
            public const string BatchNo = "BatchNo";
            public const string ExpiryDate = "ExpiryDate";
            public const string SystemSoundQuantity = "SystemSoundQuantity";
            public const string SystemDamagedQuantity = "SystemDamagedQuantity";
            public const string InventorySoundQuantity = "InventorySoundQuantity";
            public const string InventoryDamagedQuantity = "InventoryDamagedQuantity";
            public const string Cost = "Cost";
            public const string Margin = "Margin";
            public const string SellingPrice = "SellingPrice";
            public const string RecordedDate = "RecordedDate";
            public const string IsDraft = "IsDraft";
            public const string ApprovedDate = "ApprovedDate";
            public const string RecordedBy = "RecordedBy";
            public const string ApprovedBy = "ApprovedBy";
            public const string SystemExpiredQuantity = "SystemExpiredQuantity";
            public const string InventoryExpiredQuantity = "InventoryExpiredQuantity";
            public const string Remarks = "Remarks";
            public const string ReceiveDocID = "ReceiveDocID";
            public const string PalletLocationID = "PalletLocationID";
            public const string DamagedReceiveDocID = "DamagedReceiveDocID";
            public const string DamagedPalletLocationID = "DamagedPalletLocationID";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _Inventory.PropertyNames.ID;
                    ht[InventoryPeriodID] = _Inventory.PropertyNames.InventoryPeriodID;
                    ht[PhysicalStoreID] = _Inventory.PropertyNames.PhysicalStoreID;
                    ht[ActivityID] = _Inventory.PropertyNames.ActivityID;
                    ht[ItemID] = _Inventory.PropertyNames.ItemID;
                    ht[UnitID] = _Inventory.PropertyNames.UnitID;
                    ht[ManufacturerID] = _Inventory.PropertyNames.ManufacturerID;
                    ht[SupplierID] = _Inventory.PropertyNames.SupplierID;
                    ht[BatchNo] = _Inventory.PropertyNames.BatchNo;
                    ht[ExpiryDate] = _Inventory.PropertyNames.ExpiryDate;
                    ht[SystemSoundQuantity] = _Inventory.PropertyNames.SystemSoundQuantity;
                    ht[SystemDamagedQuantity] = _Inventory.PropertyNames.SystemDamagedQuantity;
                    ht[InventorySoundQuantity] = _Inventory.PropertyNames.InventorySoundQuantity;
                    ht[InventoryDamagedQuantity] = _Inventory.PropertyNames.InventoryDamagedQuantity;
                    ht[Cost] = _Inventory.PropertyNames.Cost;
                    ht[Margin] = _Inventory.PropertyNames.Margin;
                    ht[SellingPrice] = _Inventory.PropertyNames.SellingPrice;
                    ht[RecordedDate] = _Inventory.PropertyNames.RecordedDate;
                    ht[IsDraft] = _Inventory.PropertyNames.IsDraft;
                    ht[ApprovedDate] = _Inventory.PropertyNames.ApprovedDate;
                    ht[RecordedBy] = _Inventory.PropertyNames.RecordedBy;
                    ht[ApprovedBy] = _Inventory.PropertyNames.ApprovedBy;
                    ht[SystemExpiredQuantity] = _Inventory.PropertyNames.SystemExpiredQuantity;
                    ht[InventoryExpiredQuantity] = _Inventory.PropertyNames.InventoryExpiredQuantity;
                    ht[Remarks] = _Inventory.PropertyNames.Remarks;
                    ht[ReceiveDocID] = _Inventory.PropertyNames.ReceiveDocID;
                    ht[PalletLocationID] = _Inventory.PropertyNames.PalletLocationID;
                    ht[DamagedReceiveDocID] = _Inventory.PropertyNames.DamagedReceiveDocID;
                    ht[DamagedPalletLocationID] = _Inventory.PropertyNames.DamagedPalletLocationID;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string ID = "ID";
            public const string InventoryPeriodID = "InventoryPeriodID";
            public const string PhysicalStoreID = "PhysicalStoreID";
            public const string ActivityID = "ActivityID";
            public const string ItemID = "ItemID";
            public const string UnitID = "UnitID";
            public const string ManufacturerID = "ManufacturerID";
            public const string SupplierID = "SupplierID";
            public const string BatchNo = "BatchNo";
            public const string ExpiryDate = "ExpiryDate";
            public const string SystemSoundQuantity = "SystemSoundQuantity";
            public const string SystemDamagedQuantity = "SystemDamagedQuantity";
            public const string InventorySoundQuantity = "InventorySoundQuantity";
            public const string InventoryDamagedQuantity = "InventoryDamagedQuantity";
            public const string Cost = "Cost";
            public const string Margin = "Margin";
            public const string SellingPrice = "SellingPrice";
            public const string RecordedDate = "RecordedDate";
            public const string IsDraft = "IsDraft";
            public const string ApprovedDate = "ApprovedDate";
            public const string RecordedBy = "RecordedBy";
            public const string ApprovedBy = "ApprovedBy";
            public const string SystemExpiredQuantity = "SystemExpiredQuantity";
            public const string InventoryExpiredQuantity = "InventoryExpiredQuantity";
            public const string Remarks = "Remarks";
            public const string ReceiveDocID = "ReceiveDocID";
            public const string PalletLocationID = "PalletLocationID";
            public const string DamagedReceiveDocID = "DamagedReceiveDocID";
            public const string DamagedPalletLocationID = "DamagedPalletLocationID";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _Inventory.ColumnNames.ID;
                    ht[InventoryPeriodID] = _Inventory.ColumnNames.InventoryPeriodID;
                    ht[PhysicalStoreID] = _Inventory.ColumnNames.PhysicalStoreID;
                    ht[ActivityID] = _Inventory.ColumnNames.ActivityID;
                    ht[ItemID] = _Inventory.ColumnNames.ItemID;
                    ht[UnitID] = _Inventory.ColumnNames.UnitID;
                    ht[ManufacturerID] = _Inventory.ColumnNames.ManufacturerID;
                    ht[SupplierID] = _Inventory.ColumnNames.SupplierID;
                    ht[BatchNo] = _Inventory.ColumnNames.BatchNo;
                    ht[ExpiryDate] = _Inventory.ColumnNames.ExpiryDate;
                    ht[SystemSoundQuantity] = _Inventory.ColumnNames.SystemSoundQuantity;
                    ht[SystemDamagedQuantity] = _Inventory.ColumnNames.SystemDamagedQuantity;
                    ht[InventorySoundQuantity] = _Inventory.ColumnNames.InventorySoundQuantity;
                    ht[InventoryDamagedQuantity] = _Inventory.ColumnNames.InventoryDamagedQuantity;
                    ht[Cost] = _Inventory.ColumnNames.Cost;
                    ht[Margin] = _Inventory.ColumnNames.Margin;
                    ht[SellingPrice] = _Inventory.ColumnNames.SellingPrice;
                    ht[RecordedDate] = _Inventory.ColumnNames.RecordedDate;
                    ht[IsDraft] = _Inventory.ColumnNames.IsDraft;
                    ht[ApprovedDate] = _Inventory.ColumnNames.ApprovedDate;
                    ht[RecordedBy] = _Inventory.ColumnNames.RecordedBy;
                    ht[ApprovedBy] = _Inventory.ColumnNames.ApprovedBy;
                    ht[SystemExpiredQuantity] = _Inventory.ColumnNames.SystemExpiredQuantity;
                    ht[InventoryExpiredQuantity] = _Inventory.ColumnNames.InventoryExpiredQuantity;
                    ht[Remarks] = _Inventory.ColumnNames.Remarks;
                    ht[ReceiveDocID] = _Inventory.ColumnNames.ReceiveDocID;
                    ht[PalletLocationID] = _Inventory.ColumnNames.PalletLocationID;
                    ht[DamagedReceiveDocID] = _Inventory.ColumnNames.DamagedReceiveDocID;
                    ht[DamagedPalletLocationID] = _Inventory.ColumnNames.DamagedPalletLocationID;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string ID = "s_ID";
            public const string InventoryPeriodID = "s_InventoryPeriodID";
            public const string PhysicalStoreID = "s_PhysicalStoreID";
            public const string ActivityID = "s_ActivityID";
            public const string ItemID = "s_ItemID";
            public const string UnitID = "s_UnitID";
            public const string ManufacturerID = "s_ManufacturerID";
            public const string SupplierID = "s_SupplierID";
            public const string BatchNo = "s_BatchNo";
            public const string ExpiryDate = "s_ExpiryDate";
            public const string SystemSoundQuantity = "s_SystemSoundQuantity";
            public const string SystemDamagedQuantity = "s_SystemDamagedQuantity";
            public const string InventorySoundQuantity = "s_InventorySoundQuantity";
            public const string InventoryDamagedQuantity = "s_InventoryDamagedQuantity";
            public const string Cost = "s_Cost";
            public const string Margin = "s_Margin";
            public const string SellingPrice = "s_SellingPrice";
            public const string RecordedDate = "s_RecordedDate";
            public const string IsDraft = "s_IsDraft";
            public const string ApprovedDate = "s_ApprovedDate";
            public const string RecordedBy = "s_RecordedBy";
            public const string ApprovedBy = "s_ApprovedBy";
            public const string SystemExpiredQuantity = "s_SystemExpiredQuantity";
            public const string InventoryExpiredQuantity = "s_InventoryExpiredQuantity";
            public const string Remarks = "s_Remarks";
            public const string ReceiveDocID = "s_ReceiveDocID";
            public const string PalletLocationID = "s_PalletLocationID";
            public const string DamagedReceiveDocID = "s_DamagedReceiveDocID";
            public const string DamagedPalletLocationID = "s_DamagedPalletLocationID";

        }
        #endregion

        #region Properties

        public virtual int ID
        {
            get
            {
                return base.Getint(ColumnNames.ID);
            }
            set
            {
                base.Setint(ColumnNames.ID, value);
            }
        }

        public virtual int InventoryPeriodID
        {
            get
            {
                return base.Getint(ColumnNames.InventoryPeriodID);
            }
            set
            {
                base.Setint(ColumnNames.InventoryPeriodID, value);
            }
        }

        public virtual int PhysicalStoreID
        {
            get
            {
                return base.Getint(ColumnNames.PhysicalStoreID);
            }
            set
            {
                base.Setint(ColumnNames.PhysicalStoreID, value);
            }
        }

        public virtual int ActivityID
        {
            get
            {
                return base.Getint(ColumnNames.ActivityID);
            }
            set
            {
                base.Setint(ColumnNames.ActivityID, value);
            }
        }

        public virtual int ItemID
        {
            get
            {
                return base.Getint(ColumnNames.ItemID);
            }
            set
            {
                base.Setint(ColumnNames.ItemID, value);
            }
        }

        public virtual int UnitID
        {
            get
            {
                return base.Getint(ColumnNames.UnitID);
            }
            set
            {
                base.Setint(ColumnNames.UnitID, value);
            }
        }

        public virtual int ManufacturerID
        {
            get
            {
                return base.Getint(ColumnNames.ManufacturerID);
            }
            set
            {
                base.Setint(ColumnNames.ManufacturerID, value);
            }
        }

        public virtual int SupplierID
        {
            get
            {
                return base.Getint(ColumnNames.SupplierID);
            }
            set
            {
                base.Setint(ColumnNames.SupplierID, value);
            }
        }

        public virtual string BatchNo
        {
            get
            {
                return base.Getstring(ColumnNames.BatchNo);
            }
            set
            {
                base.Setstring(ColumnNames.BatchNo, value);
            }
        }

        public virtual DateTime ExpiryDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.ExpiryDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.ExpiryDate, value);
            }
        }

        public virtual decimal SystemSoundQuantity
        {
            get
            {
                return base.Getdecimal(ColumnNames.SystemSoundQuantity);
            }
            set
            {
                base.Setdecimal(ColumnNames.SystemSoundQuantity, value);
            }
        }

        public virtual decimal SystemDamagedQuantity
        {
            get
            {
                return base.Getdecimal(ColumnNames.SystemDamagedQuantity);
            }
            set
            {
                base.Setdecimal(ColumnNames.SystemDamagedQuantity, value);
            }
        }

        public virtual decimal InventorySoundQuantity
        {
            get
            {
                return base.Getdecimal(ColumnNames.InventorySoundQuantity);
            }
            set
            {
                base.Setdecimal(ColumnNames.InventorySoundQuantity, value);
            }
        }

        public virtual decimal InventoryDamagedQuantity
        {
            get
            {
                return base.Getdecimal(ColumnNames.InventoryDamagedQuantity);
            }
            set
            {
                base.Setdecimal(ColumnNames.InventoryDamagedQuantity, value);
            }
        }

        public virtual decimal Cost
        {
            get
            {
                return base.Getdecimal(ColumnNames.Cost);
            }
            set
            {
                base.Setdecimal(ColumnNames.Cost, value);
            }
        }

        public virtual decimal Margin
        {
            get
            {
                return base.Getdecimal(ColumnNames.Margin);
            }
            set
            {
                base.Setdecimal(ColumnNames.Margin, value);
            }
        }

        public virtual decimal SellingPrice
        {
            get
            {
                return base.Getdecimal(ColumnNames.SellingPrice);
            }
            set
            {
                base.Setdecimal(ColumnNames.SellingPrice, value);
            }
        }

        public virtual DateTime RecordedDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.RecordedDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.RecordedDate, value);
            }
        }

        public virtual bool IsDraft
        {
            get
            {
                return base.Getbool(ColumnNames.IsDraft);
            }
            set
            {
                base.Setbool(ColumnNames.IsDraft, value);
            }
        }

        public virtual DateTime ApprovedDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.ApprovedDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.ApprovedDate, value);
            }
        }

        public virtual int RecordedBy
        {
            get
            {
                return base.Getint(ColumnNames.RecordedBy);
            }
            set
            {
                base.Setint(ColumnNames.RecordedBy, value);
            }
        }

        public virtual int ApprovedBy
        {
            get
            {
                return base.Getint(ColumnNames.ApprovedBy);
            }
            set
            {
                base.Setint(ColumnNames.ApprovedBy, value);
            }
        }

        public virtual decimal SystemExpiredQuantity
        {
            get
            {
                return base.Getdecimal(ColumnNames.SystemExpiredQuantity);
            }
            set
            {
                base.Setdecimal(ColumnNames.SystemExpiredQuantity, value);
            }
        }

        public virtual decimal InventoryExpiredQuantity
        {
            get
            {
                return base.Getdecimal(ColumnNames.InventoryExpiredQuantity);
            }
            set
            {
                base.Setdecimal(ColumnNames.InventoryExpiredQuantity, value);
            }
        }

        public virtual string Remarks
        {
            get
            {
                return base.Getstring(ColumnNames.Remarks);
            }
            set
            {
                base.Setstring(ColumnNames.Remarks, value);
            }
        }

        public virtual int ReceiveDocID
        {
            get
            {
                return base.Getint(ColumnNames.ReceiveDocID);
            }
            set
            {
                base.Setint(ColumnNames.ReceiveDocID, value);
            }
        }

        public virtual int PalletLocationID
        {
            get
            {
                return base.Getint(ColumnNames.PalletLocationID);
            }
            set
            {
                base.Setint(ColumnNames.PalletLocationID, value);
            }
        }

        public virtual int DamagedReceiveDocID
        {
            get
            {
                return base.Getint(ColumnNames.DamagedReceiveDocID);
            }
            set
            {
                base.Setint(ColumnNames.DamagedReceiveDocID, value);
            }
        }

        public virtual int DamagedPalletLocationID
        {
            get
            {
                return base.Getint(ColumnNames.DamagedPalletLocationID);
            }
            set
            {
                base.Setint(ColumnNames.DamagedPalletLocationID, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_ID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ID);
                else
                    this.ID = base.SetintAsString(ColumnNames.ID, value);
            }
        }

        public virtual string s_InventoryPeriodID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.InventoryPeriodID) ? string.Empty : base.GetintAsString(ColumnNames.InventoryPeriodID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.InventoryPeriodID);
                else
                    this.InventoryPeriodID = base.SetintAsString(ColumnNames.InventoryPeriodID, value);
            }
        }

        public virtual string s_PhysicalStoreID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PhysicalStoreID) ? string.Empty : base.GetintAsString(ColumnNames.PhysicalStoreID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PhysicalStoreID);
                else
                    this.PhysicalStoreID = base.SetintAsString(ColumnNames.PhysicalStoreID, value);
            }
        }

        public virtual string s_ActivityID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ActivityID) ? string.Empty : base.GetintAsString(ColumnNames.ActivityID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ActivityID);
                else
                    this.ActivityID = base.SetintAsString(ColumnNames.ActivityID, value);
            }
        }

        public virtual string s_ItemID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ItemID) ? string.Empty : base.GetintAsString(ColumnNames.ItemID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ItemID);
                else
                    this.ItemID = base.SetintAsString(ColumnNames.ItemID, value);
            }
        }

        public virtual string s_UnitID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.UnitID) ? string.Empty : base.GetintAsString(ColumnNames.UnitID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.UnitID);
                else
                    this.UnitID = base.SetintAsString(ColumnNames.UnitID, value);
            }
        }

        public virtual string s_ManufacturerID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ManufacturerID) ? string.Empty : base.GetintAsString(ColumnNames.ManufacturerID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ManufacturerID);
                else
                    this.ManufacturerID = base.SetintAsString(ColumnNames.ManufacturerID, value);
            }
        }

        public virtual string s_SupplierID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SupplierID) ? string.Empty : base.GetintAsString(ColumnNames.SupplierID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SupplierID);
                else
                    this.SupplierID = base.SetintAsString(ColumnNames.SupplierID, value);
            }
        }

        public virtual string s_BatchNo
        {
            get
            {
                return this.IsColumnNull(ColumnNames.BatchNo) ? string.Empty : base.GetstringAsString(ColumnNames.BatchNo);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.BatchNo);
                else
                    this.BatchNo = base.SetstringAsString(ColumnNames.BatchNo, value);
            }
        }

        public virtual string s_ExpiryDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ExpiryDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ExpiryDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ExpiryDate);
                else
                    this.ExpiryDate = base.SetDateTimeAsString(ColumnNames.ExpiryDate, value);
            }
        }

        public virtual string s_SystemSoundQuantity
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SystemSoundQuantity) ? string.Empty : base.GetdecimalAsString(ColumnNames.SystemSoundQuantity);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SystemSoundQuantity);
                else
                    this.SystemSoundQuantity = base.SetdecimalAsString(ColumnNames.SystemSoundQuantity, value);
            }
        }

        public virtual string s_SystemDamagedQuantity
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SystemDamagedQuantity) ? string.Empty : base.GetdecimalAsString(ColumnNames.SystemDamagedQuantity);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SystemDamagedQuantity);
                else
                    this.SystemDamagedQuantity = base.SetdecimalAsString(ColumnNames.SystemDamagedQuantity, value);
            }
        }

        public virtual string s_InventorySoundQuantity
        {
            get
            {
                return this.IsColumnNull(ColumnNames.InventorySoundQuantity) ? string.Empty : base.GetdecimalAsString(ColumnNames.InventorySoundQuantity);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.InventorySoundQuantity);
                else
                    this.InventorySoundQuantity = base.SetdecimalAsString(ColumnNames.InventorySoundQuantity, value);
            }
        }

        public virtual string s_InventoryDamagedQuantity
        {
            get
            {
                return this.IsColumnNull(ColumnNames.InventoryDamagedQuantity) ? string.Empty : base.GetdecimalAsString(ColumnNames.InventoryDamagedQuantity);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.InventoryDamagedQuantity);
                else
                    this.InventoryDamagedQuantity = base.SetdecimalAsString(ColumnNames.InventoryDamagedQuantity, value);
            }
        }

        public virtual string s_Cost
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Cost) ? string.Empty : base.GetdecimalAsString(ColumnNames.Cost);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Cost);
                else
                    this.Cost = base.SetdecimalAsString(ColumnNames.Cost, value);
            }
        }

        public virtual string s_Margin
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Margin) ? string.Empty : base.GetdecimalAsString(ColumnNames.Margin);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Margin);
                else
                    this.Margin = base.SetdecimalAsString(ColumnNames.Margin, value);
            }
        }

        public virtual string s_SellingPrice
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SellingPrice) ? string.Empty : base.GetdecimalAsString(ColumnNames.SellingPrice);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SellingPrice);
                else
                    this.SellingPrice = base.SetdecimalAsString(ColumnNames.SellingPrice, value);
            }
        }

        public virtual string s_RecordedDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.RecordedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.RecordedDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.RecordedDate);
                else
                    this.RecordedDate = base.SetDateTimeAsString(ColumnNames.RecordedDate, value);
            }
        }

        public virtual string s_IsDraft
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IsDraft) ? string.Empty : base.GetboolAsString(ColumnNames.IsDraft);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IsDraft);
                else
                    this.IsDraft = base.SetboolAsString(ColumnNames.IsDraft, value);
            }
        }

        public virtual string s_ApprovedDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ApprovedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ApprovedDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ApprovedDate);
                else
                    this.ApprovedDate = base.SetDateTimeAsString(ColumnNames.ApprovedDate, value);
            }
        }

        public virtual string s_RecordedBy
        {
            get
            {
                return this.IsColumnNull(ColumnNames.RecordedBy) ? string.Empty : base.GetintAsString(ColumnNames.RecordedBy);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.RecordedBy);
                else
                    this.RecordedBy = base.SetintAsString(ColumnNames.RecordedBy, value);
            }
        }

        public virtual string s_ApprovedBy
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ApprovedBy) ? string.Empty : base.GetintAsString(ColumnNames.ApprovedBy);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ApprovedBy);
                else
                    this.ApprovedBy = base.SetintAsString(ColumnNames.ApprovedBy, value);
            }
        }

        public virtual string s_SystemExpiredQuantity
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SystemExpiredQuantity) ? string.Empty : base.GetdecimalAsString(ColumnNames.SystemExpiredQuantity);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SystemExpiredQuantity);
                else
                    this.SystemExpiredQuantity = base.SetdecimalAsString(ColumnNames.SystemExpiredQuantity, value);
            }
        }

        public virtual string s_InventoryExpiredQuantity
        {
            get
            {
                return this.IsColumnNull(ColumnNames.InventoryExpiredQuantity) ? string.Empty : base.GetdecimalAsString(ColumnNames.InventoryExpiredQuantity);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.InventoryExpiredQuantity);
                else
                    this.InventoryExpiredQuantity = base.SetdecimalAsString(ColumnNames.InventoryExpiredQuantity, value);
            }
        }

        public virtual string s_Remarks
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Remarks) ? string.Empty : base.GetstringAsString(ColumnNames.Remarks);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Remarks);
                else
                    this.Remarks = base.SetstringAsString(ColumnNames.Remarks, value);
            }
        }

        public virtual string s_ReceiveDocID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ReceiveDocID) ? string.Empty : base.GetintAsString(ColumnNames.ReceiveDocID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ReceiveDocID);
                else
                    this.ReceiveDocID = base.SetintAsString(ColumnNames.ReceiveDocID, value);
            }
        }

        public virtual string s_PalletLocationID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PalletLocationID) ? string.Empty : base.GetintAsString(ColumnNames.PalletLocationID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PalletLocationID);
                else
                    this.PalletLocationID = base.SetintAsString(ColumnNames.PalletLocationID, value);
            }
        }

        public virtual string s_DamagedReceiveDocID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DamagedReceiveDocID) ? string.Empty : base.GetintAsString(ColumnNames.DamagedReceiveDocID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DamagedReceiveDocID);
                else
                    this.DamagedReceiveDocID = base.SetintAsString(ColumnNames.DamagedReceiveDocID, value);
            }
        }

        public virtual string s_DamagedPalletLocationID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DamagedPalletLocationID) ? string.Empty : base.GetintAsString(ColumnNames.DamagedPalletLocationID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DamagedPalletLocationID);
                else
                    this.DamagedPalletLocationID = base.SetintAsString(ColumnNames.DamagedPalletLocationID, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter ID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter InventoryPeriodID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.InventoryPeriodID, Parameters.InventoryPeriodID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PhysicalStoreID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PhysicalStoreID, Parameters.PhysicalStoreID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ActivityID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ActivityID, Parameters.ActivityID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ItemID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ItemID, Parameters.ItemID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter UnitID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.UnitID, Parameters.UnitID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ManufacturerID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ManufacturerID, Parameters.ManufacturerID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SupplierID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SupplierID, Parameters.SupplierID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter BatchNo
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.BatchNo, Parameters.BatchNo);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ExpiryDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ExpiryDate, Parameters.ExpiryDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SystemSoundQuantity
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SystemSoundQuantity, Parameters.SystemSoundQuantity);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SystemDamagedQuantity
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SystemDamagedQuantity, Parameters.SystemDamagedQuantity);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter InventorySoundQuantity
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.InventorySoundQuantity, Parameters.InventorySoundQuantity);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter InventoryDamagedQuantity
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.InventoryDamagedQuantity, Parameters.InventoryDamagedQuantity);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Cost
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Cost, Parameters.Cost);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Margin
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Margin, Parameters.Margin);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SellingPrice
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SellingPrice, Parameters.SellingPrice);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter RecordedDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.RecordedDate, Parameters.RecordedDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IsDraft
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IsDraft, Parameters.IsDraft);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ApprovedDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ApprovedDate, Parameters.ApprovedDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter RecordedBy
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.RecordedBy, Parameters.RecordedBy);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ApprovedBy
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ApprovedBy, Parameters.ApprovedBy);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SystemExpiredQuantity
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SystemExpiredQuantity, Parameters.SystemExpiredQuantity);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter InventoryExpiredQuantity
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.InventoryExpiredQuantity, Parameters.InventoryExpiredQuantity);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Remarks
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Remarks, Parameters.Remarks);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ReceiveDocID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ReceiveDocID, Parameters.ReceiveDocID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PalletLocationID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PalletLocationID, Parameters.PalletLocationID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DamagedReceiveDocID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DamagedReceiveDocID, Parameters.DamagedReceiveDocID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DamagedPalletLocationID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DamagedPalletLocationID, Parameters.DamagedPalletLocationID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public WhereParameter InventoryPeriodID
            {
                get
                {
                    if (_InventoryPeriodID_W == null)
                    {
                        _InventoryPeriodID_W = TearOff.InventoryPeriodID;
                    }
                    return _InventoryPeriodID_W;
                }
            }

            public WhereParameter PhysicalStoreID
            {
                get
                {
                    if (_PhysicalStoreID_W == null)
                    {
                        _PhysicalStoreID_W = TearOff.PhysicalStoreID;
                    }
                    return _PhysicalStoreID_W;
                }
            }

            public WhereParameter ActivityID
            {
                get
                {
                    if (_ActivityID_W == null)
                    {
                        _ActivityID_W = TearOff.ActivityID;
                    }
                    return _ActivityID_W;
                }
            }

            public WhereParameter ItemID
            {
                get
                {
                    if (_ItemID_W == null)
                    {
                        _ItemID_W = TearOff.ItemID;
                    }
                    return _ItemID_W;
                }
            }

            public WhereParameter UnitID
            {
                get
                {
                    if (_UnitID_W == null)
                    {
                        _UnitID_W = TearOff.UnitID;
                    }
                    return _UnitID_W;
                }
            }

            public WhereParameter ManufacturerID
            {
                get
                {
                    if (_ManufacturerID_W == null)
                    {
                        _ManufacturerID_W = TearOff.ManufacturerID;
                    }
                    return _ManufacturerID_W;
                }
            }

            public WhereParameter SupplierID
            {
                get
                {
                    if (_SupplierID_W == null)
                    {
                        _SupplierID_W = TearOff.SupplierID;
                    }
                    return _SupplierID_W;
                }
            }

            public WhereParameter BatchNo
            {
                get
                {
                    if (_BatchNo_W == null)
                    {
                        _BatchNo_W = TearOff.BatchNo;
                    }
                    return _BatchNo_W;
                }
            }

            public WhereParameter ExpiryDate
            {
                get
                {
                    if (_ExpiryDate_W == null)
                    {
                        _ExpiryDate_W = TearOff.ExpiryDate;
                    }
                    return _ExpiryDate_W;
                }
            }

            public WhereParameter SystemSoundQuantity
            {
                get
                {
                    if (_SystemSoundQuantity_W == null)
                    {
                        _SystemSoundQuantity_W = TearOff.SystemSoundQuantity;
                    }
                    return _SystemSoundQuantity_W;
                }
            }

            public WhereParameter SystemDamagedQuantity
            {
                get
                {
                    if (_SystemDamagedQuantity_W == null)
                    {
                        _SystemDamagedQuantity_W = TearOff.SystemDamagedQuantity;
                    }
                    return _SystemDamagedQuantity_W;
                }
            }

            public WhereParameter InventorySoundQuantity
            {
                get
                {
                    if (_InventorySoundQuantity_W == null)
                    {
                        _InventorySoundQuantity_W = TearOff.InventorySoundQuantity;
                    }
                    return _InventorySoundQuantity_W;
                }
            }

            public WhereParameter InventoryDamagedQuantity
            {
                get
                {
                    if (_InventoryDamagedQuantity_W == null)
                    {
                        _InventoryDamagedQuantity_W = TearOff.InventoryDamagedQuantity;
                    }
                    return _InventoryDamagedQuantity_W;
                }
            }

            public WhereParameter Cost
            {
                get
                {
                    if (_Cost_W == null)
                    {
                        _Cost_W = TearOff.Cost;
                    }
                    return _Cost_W;
                }
            }

            public WhereParameter Margin
            {
                get
                {
                    if (_Margin_W == null)
                    {
                        _Margin_W = TearOff.Margin;
                    }
                    return _Margin_W;
                }
            }

            public WhereParameter SellingPrice
            {
                get
                {
                    if (_SellingPrice_W == null)
                    {
                        _SellingPrice_W = TearOff.SellingPrice;
                    }
                    return _SellingPrice_W;
                }
            }

            public WhereParameter RecordedDate
            {
                get
                {
                    if (_RecordedDate_W == null)
                    {
                        _RecordedDate_W = TearOff.RecordedDate;
                    }
                    return _RecordedDate_W;
                }
            }

            public WhereParameter IsDraft
            {
                get
                {
                    if (_IsDraft_W == null)
                    {
                        _IsDraft_W = TearOff.IsDraft;
                    }
                    return _IsDraft_W;
                }
            }

            public WhereParameter ApprovedDate
            {
                get
                {
                    if (_ApprovedDate_W == null)
                    {
                        _ApprovedDate_W = TearOff.ApprovedDate;
                    }
                    return _ApprovedDate_W;
                }
            }

            public WhereParameter RecordedBy
            {
                get
                {
                    if (_RecordedBy_W == null)
                    {
                        _RecordedBy_W = TearOff.RecordedBy;
                    }
                    return _RecordedBy_W;
                }
            }

            public WhereParameter ApprovedBy
            {
                get
                {
                    if (_ApprovedBy_W == null)
                    {
                        _ApprovedBy_W = TearOff.ApprovedBy;
                    }
                    return _ApprovedBy_W;
                }
            }

            public WhereParameter SystemExpiredQuantity
            {
                get
                {
                    if (_SystemExpiredQuantity_W == null)
                    {
                        _SystemExpiredQuantity_W = TearOff.SystemExpiredQuantity;
                    }
                    return _SystemExpiredQuantity_W;
                }
            }

            public WhereParameter InventoryExpiredQuantity
            {
                get
                {
                    if (_InventoryExpiredQuantity_W == null)
                    {
                        _InventoryExpiredQuantity_W = TearOff.InventoryExpiredQuantity;
                    }
                    return _InventoryExpiredQuantity_W;
                }
            }

            public WhereParameter Remarks
            {
                get
                {
                    if (_Remarks_W == null)
                    {
                        _Remarks_W = TearOff.Remarks;
                    }
                    return _Remarks_W;
                }
            }

            public WhereParameter ReceiveDocID
            {
                get
                {
                    if (_ReceiveDocID_W == null)
                    {
                        _ReceiveDocID_W = TearOff.ReceiveDocID;
                    }
                    return _ReceiveDocID_W;
                }
            }

            public WhereParameter PalletLocationID
            {
                get
                {
                    if (_PalletLocationID_W == null)
                    {
                        _PalletLocationID_W = TearOff.PalletLocationID;
                    }
                    return _PalletLocationID_W;
                }
            }

            public WhereParameter DamagedReceiveDocID
            {
                get
                {
                    if (_DamagedReceiveDocID_W == null)
                    {
                        _DamagedReceiveDocID_W = TearOff.DamagedReceiveDocID;
                    }
                    return _DamagedReceiveDocID_W;
                }
            }

            public WhereParameter DamagedPalletLocationID
            {
                get
                {
                    if (_DamagedPalletLocationID_W == null)
                    {
                        _DamagedPalletLocationID_W = TearOff.DamagedPalletLocationID;
                    }
                    return _DamagedPalletLocationID_W;
                }
            }

            private WhereParameter _ID_W = null;
            private WhereParameter _InventoryPeriodID_W = null;
            private WhereParameter _PhysicalStoreID_W = null;
            private WhereParameter _ActivityID_W = null;
            private WhereParameter _ItemID_W = null;
            private WhereParameter _UnitID_W = null;
            private WhereParameter _ManufacturerID_W = null;
            private WhereParameter _SupplierID_W = null;
            private WhereParameter _BatchNo_W = null;
            private WhereParameter _ExpiryDate_W = null;
            private WhereParameter _SystemSoundQuantity_W = null;
            private WhereParameter _SystemDamagedQuantity_W = null;
            private WhereParameter _InventorySoundQuantity_W = null;
            private WhereParameter _InventoryDamagedQuantity_W = null;
            private WhereParameter _Cost_W = null;
            private WhereParameter _Margin_W = null;
            private WhereParameter _SellingPrice_W = null;
            private WhereParameter _RecordedDate_W = null;
            private WhereParameter _IsDraft_W = null;
            private WhereParameter _ApprovedDate_W = null;
            private WhereParameter _RecordedBy_W = null;
            private WhereParameter _ApprovedBy_W = null;
            private WhereParameter _SystemExpiredQuantity_W = null;
            private WhereParameter _InventoryExpiredQuantity_W = null;
            private WhereParameter _Remarks_W = null;
            private WhereParameter _ReceiveDocID_W = null;
            private WhereParameter _PalletLocationID_W = null;
            private WhereParameter _DamagedReceiveDocID_W = null;
            private WhereParameter _DamagedPalletLocationID_W = null;

            public void WhereClauseReset()
            {
                _ID_W = null;
                _InventoryPeriodID_W = null;
                _PhysicalStoreID_W = null;
                _ActivityID_W = null;
                _ItemID_W = null;
                _UnitID_W = null;
                _ManufacturerID_W = null;
                _SupplierID_W = null;
                _BatchNo_W = null;
                _ExpiryDate_W = null;
                _SystemSoundQuantity_W = null;
                _SystemDamagedQuantity_W = null;
                _InventorySoundQuantity_W = null;
                _InventoryDamagedQuantity_W = null;
                _Cost_W = null;
                _Margin_W = null;
                _SellingPrice_W = null;
                _RecordedDate_W = null;
                _IsDraft_W = null;
                _ApprovedDate_W = null;
                _RecordedBy_W = null;
                _ApprovedBy_W = null;
                _SystemExpiredQuantity_W = null;
                _InventoryExpiredQuantity_W = null;
                _Remarks_W = null;
                _ReceiveDocID_W = null;
                _PalletLocationID_W = null;
                _DamagedReceiveDocID_W = null;
                _DamagedPalletLocationID_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter ID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter InventoryPeriodID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.InventoryPeriodID, Parameters.InventoryPeriodID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PhysicalStoreID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PhysicalStoreID, Parameters.PhysicalStoreID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ActivityID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ActivityID, Parameters.ActivityID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ItemID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ItemID, Parameters.ItemID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter UnitID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitID, Parameters.UnitID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ManufacturerID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ManufacturerID, Parameters.ManufacturerID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SupplierID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SupplierID, Parameters.SupplierID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter BatchNo
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.BatchNo, Parameters.BatchNo);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ExpiryDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExpiryDate, Parameters.ExpiryDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SystemSoundQuantity
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SystemSoundQuantity, Parameters.SystemSoundQuantity);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SystemDamagedQuantity
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SystemDamagedQuantity, Parameters.SystemDamagedQuantity);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter InventorySoundQuantity
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.InventorySoundQuantity, Parameters.InventorySoundQuantity);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter InventoryDamagedQuantity
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.InventoryDamagedQuantity, Parameters.InventoryDamagedQuantity);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Cost
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Cost, Parameters.Cost);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Margin
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Margin, Parameters.Margin);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SellingPrice
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SellingPrice, Parameters.SellingPrice);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter RecordedDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.RecordedDate, Parameters.RecordedDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IsDraft
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsDraft, Parameters.IsDraft);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ApprovedDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ApprovedDate, Parameters.ApprovedDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter RecordedBy
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.RecordedBy, Parameters.RecordedBy);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ApprovedBy
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ApprovedBy, Parameters.ApprovedBy);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SystemExpiredQuantity
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SystemExpiredQuantity, Parameters.SystemExpiredQuantity);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter InventoryExpiredQuantity
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.InventoryExpiredQuantity, Parameters.InventoryExpiredQuantity);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Remarks
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Remarks, Parameters.Remarks);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ReceiveDocID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceiveDocID, Parameters.ReceiveDocID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PalletLocationID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PalletLocationID, Parameters.PalletLocationID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DamagedReceiveDocID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DamagedReceiveDocID, Parameters.DamagedReceiveDocID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DamagedPalletLocationID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DamagedPalletLocationID, Parameters.DamagedPalletLocationID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public AggregateParameter InventoryPeriodID
            {
                get
                {
                    if (_InventoryPeriodID_W == null)
                    {
                        _InventoryPeriodID_W = TearOff.InventoryPeriodID;
                    }
                    return _InventoryPeriodID_W;
                }
            }

            public AggregateParameter PhysicalStoreID
            {
                get
                {
                    if (_PhysicalStoreID_W == null)
                    {
                        _PhysicalStoreID_W = TearOff.PhysicalStoreID;
                    }
                    return _PhysicalStoreID_W;
                }
            }

            public AggregateParameter ActivityID
            {
                get
                {
                    if (_ActivityID_W == null)
                    {
                        _ActivityID_W = TearOff.ActivityID;
                    }
                    return _ActivityID_W;
                }
            }

            public AggregateParameter ItemID
            {
                get
                {
                    if (_ItemID_W == null)
                    {
                        _ItemID_W = TearOff.ItemID;
                    }
                    return _ItemID_W;
                }
            }

            public AggregateParameter UnitID
            {
                get
                {
                    if (_UnitID_W == null)
                    {
                        _UnitID_W = TearOff.UnitID;
                    }
                    return _UnitID_W;
                }
            }

            public AggregateParameter ManufacturerID
            {
                get
                {
                    if (_ManufacturerID_W == null)
                    {
                        _ManufacturerID_W = TearOff.ManufacturerID;
                    }
                    return _ManufacturerID_W;
                }
            }

            public AggregateParameter SupplierID
            {
                get
                {
                    if (_SupplierID_W == null)
                    {
                        _SupplierID_W = TearOff.SupplierID;
                    }
                    return _SupplierID_W;
                }
            }

            public AggregateParameter BatchNo
            {
                get
                {
                    if (_BatchNo_W == null)
                    {
                        _BatchNo_W = TearOff.BatchNo;
                    }
                    return _BatchNo_W;
                }
            }

            public AggregateParameter ExpiryDate
            {
                get
                {
                    if (_ExpiryDate_W == null)
                    {
                        _ExpiryDate_W = TearOff.ExpiryDate;
                    }
                    return _ExpiryDate_W;
                }
            }

            public AggregateParameter SystemSoundQuantity
            {
                get
                {
                    if (_SystemSoundQuantity_W == null)
                    {
                        _SystemSoundQuantity_W = TearOff.SystemSoundQuantity;
                    }
                    return _SystemSoundQuantity_W;
                }
            }

            public AggregateParameter SystemDamagedQuantity
            {
                get
                {
                    if (_SystemDamagedQuantity_W == null)
                    {
                        _SystemDamagedQuantity_W = TearOff.SystemDamagedQuantity;
                    }
                    return _SystemDamagedQuantity_W;
                }
            }

            public AggregateParameter InventorySoundQuantity
            {
                get
                {
                    if (_InventorySoundQuantity_W == null)
                    {
                        _InventorySoundQuantity_W = TearOff.InventorySoundQuantity;
                    }
                    return _InventorySoundQuantity_W;
                }
            }

            public AggregateParameter InventoryDamagedQuantity
            {
                get
                {
                    if (_InventoryDamagedQuantity_W == null)
                    {
                        _InventoryDamagedQuantity_W = TearOff.InventoryDamagedQuantity;
                    }
                    return _InventoryDamagedQuantity_W;
                }
            }

            public AggregateParameter Cost
            {
                get
                {
                    if (_Cost_W == null)
                    {
                        _Cost_W = TearOff.Cost;
                    }
                    return _Cost_W;
                }
            }

            public AggregateParameter Margin
            {
                get
                {
                    if (_Margin_W == null)
                    {
                        _Margin_W = TearOff.Margin;
                    }
                    return _Margin_W;
                }
            }

            public AggregateParameter SellingPrice
            {
                get
                {
                    if (_SellingPrice_W == null)
                    {
                        _SellingPrice_W = TearOff.SellingPrice;
                    }
                    return _SellingPrice_W;
                }
            }

            public AggregateParameter RecordedDate
            {
                get
                {
                    if (_RecordedDate_W == null)
                    {
                        _RecordedDate_W = TearOff.RecordedDate;
                    }
                    return _RecordedDate_W;
                }
            }

            public AggregateParameter IsDraft
            {
                get
                {
                    if (_IsDraft_W == null)
                    {
                        _IsDraft_W = TearOff.IsDraft;
                    }
                    return _IsDraft_W;
                }
            }

            public AggregateParameter ApprovedDate
            {
                get
                {
                    if (_ApprovedDate_W == null)
                    {
                        _ApprovedDate_W = TearOff.ApprovedDate;
                    }
                    return _ApprovedDate_W;
                }
            }

            public AggregateParameter RecordedBy
            {
                get
                {
                    if (_RecordedBy_W == null)
                    {
                        _RecordedBy_W = TearOff.RecordedBy;
                    }
                    return _RecordedBy_W;
                }
            }

            public AggregateParameter ApprovedBy
            {
                get
                {
                    if (_ApprovedBy_W == null)
                    {
                        _ApprovedBy_W = TearOff.ApprovedBy;
                    }
                    return _ApprovedBy_W;
                }
            }

            public AggregateParameter SystemExpiredQuantity
            {
                get
                {
                    if (_SystemExpiredQuantity_W == null)
                    {
                        _SystemExpiredQuantity_W = TearOff.SystemExpiredQuantity;
                    }
                    return _SystemExpiredQuantity_W;
                }
            }

            public AggregateParameter InventoryExpiredQuantity
            {
                get
                {
                    if (_InventoryExpiredQuantity_W == null)
                    {
                        _InventoryExpiredQuantity_W = TearOff.InventoryExpiredQuantity;
                    }
                    return _InventoryExpiredQuantity_W;
                }
            }

            public AggregateParameter Remarks
            {
                get
                {
                    if (_Remarks_W == null)
                    {
                        _Remarks_W = TearOff.Remarks;
                    }
                    return _Remarks_W;
                }
            }

            public AggregateParameter ReceiveDocID
            {
                get
                {
                    if (_ReceiveDocID_W == null)
                    {
                        _ReceiveDocID_W = TearOff.ReceiveDocID;
                    }
                    return _ReceiveDocID_W;
                }
            }

            public AggregateParameter PalletLocationID
            {
                get
                {
                    if (_PalletLocationID_W == null)
                    {
                        _PalletLocationID_W = TearOff.PalletLocationID;
                    }
                    return _PalletLocationID_W;
                }
            }

            public AggregateParameter DamagedReceiveDocID
            {
                get
                {
                    if (_DamagedReceiveDocID_W == null)
                    {
                        _DamagedReceiveDocID_W = TearOff.DamagedReceiveDocID;
                    }
                    return _DamagedReceiveDocID_W;
                }
            }

            public AggregateParameter DamagedPalletLocationID
            {
                get
                {
                    if (_DamagedPalletLocationID_W == null)
                    {
                        _DamagedPalletLocationID_W = TearOff.DamagedPalletLocationID;
                    }
                    return _DamagedPalletLocationID_W;
                }
            }

            private AggregateParameter _ID_W = null;
            private AggregateParameter _InventoryPeriodID_W = null;
            private AggregateParameter _PhysicalStoreID_W = null;
            private AggregateParameter _ActivityID_W = null;
            private AggregateParameter _ItemID_W = null;
            private AggregateParameter _UnitID_W = null;
            private AggregateParameter _ManufacturerID_W = null;
            private AggregateParameter _SupplierID_W = null;
            private AggregateParameter _BatchNo_W = null;
            private AggregateParameter _ExpiryDate_W = null;
            private AggregateParameter _SystemSoundQuantity_W = null;
            private AggregateParameter _SystemDamagedQuantity_W = null;
            private AggregateParameter _InventorySoundQuantity_W = null;
            private AggregateParameter _InventoryDamagedQuantity_W = null;
            private AggregateParameter _Cost_W = null;
            private AggregateParameter _Margin_W = null;
            private AggregateParameter _SellingPrice_W = null;
            private AggregateParameter _RecordedDate_W = null;
            private AggregateParameter _IsDraft_W = null;
            private AggregateParameter _ApprovedDate_W = null;
            private AggregateParameter _RecordedBy_W = null;
            private AggregateParameter _ApprovedBy_W = null;
            private AggregateParameter _SystemExpiredQuantity_W = null;
            private AggregateParameter _InventoryExpiredQuantity_W = null;
            private AggregateParameter _Remarks_W = null;
            private AggregateParameter _ReceiveDocID_W = null;
            private AggregateParameter _PalletLocationID_W = null;
            private AggregateParameter _DamagedReceiveDocID_W = null;
            private AggregateParameter _DamagedPalletLocationID_W = null;

            public void AggregateClauseReset()
            {
                _ID_W = null;
                _InventoryPeriodID_W = null;
                _PhysicalStoreID_W = null;
                _ActivityID_W = null;
                _ItemID_W = null;
                _UnitID_W = null;
                _ManufacturerID_W = null;
                _SupplierID_W = null;
                _BatchNo_W = null;
                _ExpiryDate_W = null;
                _SystemSoundQuantity_W = null;
                _SystemDamagedQuantity_W = null;
                _InventorySoundQuantity_W = null;
                _InventoryDamagedQuantity_W = null;
                _Cost_W = null;
                _Margin_W = null;
                _SellingPrice_W = null;
                _RecordedDate_W = null;
                _IsDraft_W = null;
                _ApprovedDate_W = null;
                _RecordedBy_W = null;
                _ApprovedBy_W = null;
                _SystemExpiredQuantity_W = null;
                _InventoryExpiredQuantity_W = null;
                _Remarks_W = null;
                _ReceiveDocID_W = null;
                _PalletLocationID_W = null;
                _DamagedReceiveDocID_W = null;
                _DamagedPalletLocationID_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InventoryInsert]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.ID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InventoryUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InventoryDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.InventoryPeriodID);
            p.SourceColumn = ColumnNames.InventoryPeriodID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PhysicalStoreID);
            p.SourceColumn = ColumnNames.PhysicalStoreID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ActivityID);
            p.SourceColumn = ColumnNames.ActivityID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ItemID);
            p.SourceColumn = ColumnNames.ItemID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.UnitID);
            p.SourceColumn = ColumnNames.UnitID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ManufacturerID);
            p.SourceColumn = ColumnNames.ManufacturerID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SupplierID);
            p.SourceColumn = ColumnNames.SupplierID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.BatchNo);
            p.SourceColumn = ColumnNames.BatchNo;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ExpiryDate);
            p.SourceColumn = ColumnNames.ExpiryDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SystemSoundQuantity);
            p.SourceColumn = ColumnNames.SystemSoundQuantity;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SystemDamagedQuantity);
            p.SourceColumn = ColumnNames.SystemDamagedQuantity;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.InventorySoundQuantity);
            p.SourceColumn = ColumnNames.InventorySoundQuantity;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.InventoryDamagedQuantity);
            p.SourceColumn = ColumnNames.InventoryDamagedQuantity;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Cost);
            p.SourceColumn = ColumnNames.Cost;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Margin);
            p.SourceColumn = ColumnNames.Margin;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SellingPrice);
            p.SourceColumn = ColumnNames.SellingPrice;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.RecordedDate);
            p.SourceColumn = ColumnNames.RecordedDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IsDraft);
            p.SourceColumn = ColumnNames.IsDraft;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ApprovedDate);
            p.SourceColumn = ColumnNames.ApprovedDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.RecordedBy);
            p.SourceColumn = ColumnNames.RecordedBy;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ApprovedBy);
            p.SourceColumn = ColumnNames.ApprovedBy;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SystemExpiredQuantity);
            p.SourceColumn = ColumnNames.SystemExpiredQuantity;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.InventoryExpiredQuantity);
            p.SourceColumn = ColumnNames.InventoryExpiredQuantity;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Remarks);
            p.SourceColumn = ColumnNames.Remarks;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ReceiveDocID);
            p.SourceColumn = ColumnNames.ReceiveDocID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PalletLocationID);
            p.SourceColumn = ColumnNames.PalletLocationID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DamagedReceiveDocID);
            p.SourceColumn = ColumnNames.DamagedReceiveDocID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DamagedPalletLocationID);
            p.SourceColumn = ColumnNames.DamagedPalletLocationID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}


