//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HCMIS.Concrete.Repository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    using EntityFramework.Patterns;
    using HCMIS.Concrete.Models;

    public partial class RepositoryFactory : IRepositoryFactory
    {
        private HcmisContext context;
        private DbContextAdapter adapter;

        public DbContextAdapter Adaptor
        {
            get
            {
                return adapter;
            }
        }

        public IUnitOfWork UnitOfWork
        {
            get
            {
                return new UnitOfWork(adapter);
            }
        }

        public RepositoryFactory()
        {
            context = new HcmisContext();
            adapter = new DbContextAdapter(context);
        }



        private IRepository<ABC> _ABCs = null;

        public IRepository<ABC> ABCs
        {
            get
            {
                if (_ABCs == null)
                {
                    _ABCs = new Repository<ABC>(adapter);
                }
                return _ABCs;
            }
        }



        private IRepository<Balance> _Balances = null;

        public IRepository<Balance> Balances
        {
            get
            {
                if (_Balances == null)
                {
                    _Balances = new Repository<Balance>(adapter);
                }
                return _Balances;
            }
        }



        private IRepository<Category> _Categories = null;

        public IRepository<Category> Categories
        {
            get
            {
                if (_Categories == null)
                {
                    _Categories = new Repository<Category>(adapter);
                }
                return _Categories;
            }
        }



        private IRepository<ChangeLog> _ChangeLogs = null;

        public IRepository<ChangeLog> ChangeLogs
        {
            get
            {
                if (_ChangeLogs == null)
                {
                    _ChangeLogs = new Repository<ChangeLog>(adapter);
                }
                return _ChangeLogs;
            }
        }



        private IRepository<Cluster> _Clusters = null;

        public IRepository<Cluster> Clusters
        {
            get
            {
                if (_Clusters == null)
                {
                    _Clusters = new Repository<Cluster>(adapter);
                }
                return _Clusters;
            }
        }



        private IRepository<DirectoryUpdateStatu> _DirectoryUpdateStatus = null;

        public IRepository<DirectoryUpdateStatu> DirectoryUpdateStatus
        {
            get
            {
                if (_DirectoryUpdateStatus == null)
                {
                    _DirectoryUpdateStatus = new Repository<DirectoryUpdateStatu>(adapter);
                }
                return _DirectoryUpdateStatus;
            }
        }



        private IRepository<Disposal> _Disposals = null;

        public IRepository<Disposal> Disposals
        {
            get
            {
                if (_Disposals == null)
                {
                    _Disposals = new Repository<Disposal>(adapter);
                }
                return _Disposals;
            }
        }



        private IRepository<DisposalReason> _DisposalReasons = null;

        public IRepository<DisposalReason> DisposalReasons
        {
            get
            {
                if (_DisposalReasons == null)
                {
                    _DisposalReasons = new Repository<DisposalReason>(adapter);
                }
                return _DisposalReasons;
            }
        }



        private IRepository<DosageForm> _DosageForms = null;

        public IRepository<DosageForm> DosageForms
        {
            get
            {
                if (_DosageForms == null)
                {
                    _DosageForms = new Repository<DosageForm>(adapter);
                }
                return _DosageForms;
            }
        }



        private IRepository<ErrorLog> _ErrorLogs = null;

        public IRepository<ErrorLog> ErrorLogs
        {
            get
            {
                if (_ErrorLogs == null)
                {
                    _ErrorLogs = new Repository<ErrorLog>(adapter);
                }
                return _ErrorLogs;
            }
        }



        private IRepository<Exchange> _Exchanges = null;

        public IRepository<Exchange> Exchanges
        {
            get
            {
                if (_Exchanges == null)
                {
                    _Exchanges = new Repository<Exchange>(adapter);
                }
                return _Exchanges;
            }
        }



        private IRepository<ExchangeType> _ExchangeTypes = null;

        public IRepository<ExchangeType> ExchangeTypes
        {
            get
            {
                if (_ExchangeTypes == null)
                {
                    _ExchangeTypes = new Repository<ExchangeType>(adapter);
                }
                return _ExchangeTypes;
            }
        }



        private IRepository<GeneralInfo> _GeneralInfoes = null;

        public IRepository<GeneralInfo> GeneralInfoes
        {
            get
            {
                if (_GeneralInfoes == null)
                {
                    _GeneralInfoes = new Repository<GeneralInfo>(adapter);
                }
                return _GeneralInfoes;
            }
        }



        private IRepository<HalfPalletLocation> _HalfPalletLocations = null;

        public IRepository<HalfPalletLocation> HalfPalletLocations
        {
            get
            {
                if (_HalfPalletLocations == null)
                {
                    _HalfPalletLocations = new Repository<HalfPalletLocation>(adapter);
                }
                return _HalfPalletLocations;
            }
        }



        private IRepository<InternalTransfer> _InternalTransfers = null;

        public IRepository<InternalTransfer> InternalTransfers
        {
            get
            {
                if (_InternalTransfers == null)
                {
                    _InternalTransfers = new Repository<InternalTransfer>(adapter);
                }
                return _InternalTransfers;
            }
        }



        private IRepository<IssueDoc> _IssueDocs = null;

        public IRepository<IssueDoc> IssueDocs
        {
            get
            {
                if (_IssueDocs == null)
                {
                    _IssueDocs = new Repository<IssueDoc>(adapter);
                }
                return _IssueDocs;
            }
        }



        private IRepository<IssueDocDeleted> _IssueDocDeleteds = null;

        public IRepository<IssueDocDeleted> IssueDocDeleteds
        {
            get
            {
                if (_IssueDocDeleteds == null)
                {
                    _IssueDocDeleteds = new Repository<IssueDocDeleted>(adapter);
                }
                return _IssueDocDeleteds;
            }
        }



        private IRepository<ItemManufacturer> _ItemManufacturers = null;

        public IRepository<ItemManufacturer> ItemManufacturers
        {
            get
            {
                if (_ItemManufacturers == null)
                {
                    _ItemManufacturers = new Repository<ItemManufacturer>(adapter);
                }
                return _ItemManufacturers;
            }
        }



        private IRepository<ItemOwnershipType> _ItemOwnershipTypes = null;

        public IRepository<ItemOwnershipType> ItemOwnershipTypes
        {
            get
            {
                if (_ItemOwnershipTypes == null)
                {
                    _ItemOwnershipTypes = new Repository<ItemOwnershipType>(adapter);
                }
                return _ItemOwnershipTypes;
            }
        }



        private IRepository<ItemPrefferedLocation> _ItemPrefferedLocations = null;

        public IRepository<ItemPrefferedLocation> ItemPrefferedLocations
        {
            get
            {
                if (_ItemPrefferedLocations == null)
                {
                    _ItemPrefferedLocations = new Repository<ItemPrefferedLocation>(adapter);
                }
                return _ItemPrefferedLocations;
            }
        }



        private IRepository<ItemReceivingUnitType> _ItemReceivingUnitTypes = null;

        public IRepository<ItemReceivingUnitType> ItemReceivingUnitTypes
        {
            get
            {
                if (_ItemReceivingUnitTypes == null)
                {
                    _ItemReceivingUnitTypes = new Repository<ItemReceivingUnitType>(adapter);
                }
                return _ItemReceivingUnitTypes;
            }
        }



        private IRepository<Item> _Items = null;

        public IRepository<Item> Items
        {
            get
            {
                if (_Items == null)
                {
                    _Items = new Repository<Item>(adapter);
                }
                return _Items;
            }
        }



        private IRepository<ItemSupplier> _ItemSuppliers = null;

        public IRepository<ItemSupplier> ItemSuppliers
        {
            get
            {
                if (_ItemSuppliers == null)
                {
                    _ItemSuppliers = new Repository<ItemSupplier>(adapter);
                }
                return _ItemSuppliers;
            }
        }



        private IRepository<ItemSupplyCategory> _ItemSupplyCategories = null;

        public IRepository<ItemSupplyCategory> ItemSupplyCategories
        {
            get
            {
                if (_ItemSupplyCategories == null)
                {
                    _ItemSupplyCategories = new Repository<ItemSupplyCategory>(adapter);
                }
                return _ItemSupplyCategories;
            }
        }



        private IRepository<ItemUnit> _ItemUnits = null;

        public IRepository<ItemUnit> ItemUnits
        {
            get
            {
                if (_ItemUnits == null)
                {
                    _ItemUnits = new Repository<ItemUnit>(adapter);
                }
                return _ItemUnits;
            }
        }



        private IRepository<ItemUnitCopy> _ItemUnitCopies = null;

        public IRepository<ItemUnitCopy> ItemUnitCopies
        {
            get
            {
                if (_ItemUnitCopies == null)
                {
                    _ItemUnitCopies = new Repository<ItemUnitCopy>(adapter);
                }
                return _ItemUnitCopies;
            }
        }



        private IRepository<LoginLog> _LoginLogs = null;

        public IRepository<LoginLog> LoginLogs
        {
            get
            {
                if (_LoginLogs == null)
                {
                    _LoginLogs = new Repository<LoginLog>(adapter);
                }
                return _LoginLogs;
            }
        }



        private IRepository<Manufacturer> _Manufacturers = null;

        public IRepository<Manufacturer> Manufacturers
        {
            get
            {
                if (_Manufacturers == null)
                {
                    _Manufacturers = new Repository<Manufacturer>(adapter);
                }
                return _Manufacturers;
            }
        }



        private IRepository<Order> _Orders = null;

        public IRepository<Order> Orders
        {
            get
            {
                if (_Orders == null)
                {
                    _Orders = new Repository<Order>(adapter);
                }
                return _Orders;
            }
        }



        private IRepository<OrderDetail> _OrderDetails = null;

        public IRepository<OrderDetail> OrderDetails
        {
            get
            {
                if (_OrderDetails == null)
                {
                    _OrderDetails = new Repository<OrderDetail>(adapter);
                }
                return _OrderDetails;
            }
        }



        private IRepository<OrderStatu> _OrderStatus = null;

        public IRepository<OrderStatu> OrderStatus
        {
            get
            {
                if (_OrderStatus == null)
                {
                    _OrderStatus = new Repository<OrderStatu>(adapter);
                }
                return _OrderStatus;
            }
        }



        private IRepository<Pallet> _Pallets = null;

        public IRepository<Pallet> Pallets
        {
            get
            {
                if (_Pallets == null)
                {
                    _Pallets = new Repository<Pallet>(adapter);
                }
                return _Pallets;
            }
        }



        private IRepository<PalletLocation> _PalletLocations = null;

        public IRepository<PalletLocation> PalletLocations
        {
            get
            {
                if (_PalletLocations == null)
                {
                    _PalletLocations = new Repository<PalletLocation>(adapter);
                }
                return _PalletLocations;
            }
        }



        private IRepository<PaymentType> _PaymentTypes = null;

        public IRepository<PaymentType> PaymentTypes
        {
            get
            {
                if (_PaymentTypes == null)
                {
                    _PaymentTypes = new Repository<PaymentType>(adapter);
                }
                return _PaymentTypes;
            }
        }



        private IRepository<PhysicalStore> _PhysicalStores = null;

        public IRepository<PhysicalStore> PhysicalStores
        {
            get
            {
                if (_PhysicalStores == null)
                {
                    _PhysicalStores = new Repository<PhysicalStore>(adapter);
                }
                return _PhysicalStores;
            }
        }



        private IRepository<PhysicalStoreType> _PhysicalStoreTypes = null;

        public IRepository<PhysicalStoreType> PhysicalStoreTypes
        {
            get
            {
                if (_PhysicalStoreTypes == null)
                {
                    _PhysicalStoreTypes = new Repository<PhysicalStoreType>(adapter);
                }
                return _PhysicalStoreTypes;
            }
        }



        private IRepository<PickFace> _PickFaces = null;

        public IRepository<PickFace> PickFaces
        {
            get
            {
                if (_PickFaces == null)
                {
                    _PickFaces = new Repository<PickFace>(adapter);
                }
                return _PickFaces;
            }
        }



        private IRepository<PickList> _PickLists = null;

        public IRepository<PickList> PickLists
        {
            get
            {
                if (_PickLists == null)
                {
                    _PickLists = new Repository<PickList>(adapter);
                }
                return _PickLists;
            }
        }



        private IRepository<PickListDetail> _PickListDetails = null;

        public IRepository<PickListDetail> PickListDetails
        {
            get
            {
                if (_PickListDetails == null)
                {
                    _PickListDetails = new Repository<PickListDetail>(adapter);
                }
                return _PickListDetails;
            }
        }



        private IRepository<PO> _POes = null;

        public IRepository<PO> POes
        {
            get
            {
                if (_POes == null)
                {
                    _POes = new Repository<PO>(adapter);
                }
                return _POes;
            }
        }

        private IRepository<PrintLog> _PrintLog = null;

        public IRepository<PrintLog> PrintLogs
        {
            get
            {
                if (_PrintLog == null)
                {
                    _PrintLog = new Repository<PrintLog>(adapter);
                 
                }
                return _PrintLog;
            }
        }

        private IRepository<Product> _Products = null;

        public IRepository<Product> Products
        {
            get
            {
                if (_Products == null)
                {
                    _Products = new Repository<Product>(adapter);
                }
                return _Products;
            }
        }



        private IRepository<ProductReceivingUnitType> _ProductReceivingUnitTypes = null;

        public IRepository<ProductReceivingUnitType> ProductReceivingUnitTypes
        {
            get
            {
                if (_ProductReceivingUnitTypes == null)
                {
                    _ProductReceivingUnitTypes = new Repository<ProductReceivingUnitType>(adapter);
                }
                return _ProductReceivingUnitTypes;
            }
        }



        private IRepository<ProductRUOwnershipType> _ProductRUOwnershipTypes = null;

        public IRepository<ProductRUOwnershipType> ProductRUOwnershipTypes
        {
            get
            {
                if (_ProductRUOwnershipTypes == null)
                {
                    _ProductRUOwnershipTypes = new Repository<ProductRUOwnershipType>(adapter);
                }
                return _ProductRUOwnershipTypes;
            }
        }



        private IRepository<ProductsCategory> _ProductsCategories = null;

        public IRepository<ProductsCategory> ProductsCategories
        {
            get
            {
                if (_ProductsCategories == null)
                {
                    _ProductsCategories = new Repository<ProductsCategory>(adapter);
                }
                return _ProductsCategories;
            }
        }



        private IRepository<ProgramProduct> _ProgramProducts = null;

        public IRepository<ProgramProduct> ProgramProducts
        {
            get
            {
                if (_ProgramProducts == null)
                {
                    _ProgramProducts = new Repository<ProgramProduct>(adapter);
                }
                return _ProgramProducts;
            }
        }



        private IRepository<Program> _Programs = null;

        public IRepository<Program> Programs
        {
            get
            {
                if (_Programs == null)
                {
                    _Programs = new Repository<Program>(adapter);
                }
                return _Programs;
            }
        }



        private IRepository<RackStatu> _RackStatus = null;

        public IRepository<RackStatu> RackStatus
        {
            get
            {
                if (_RackStatus == null)
                {
                    _RackStatus = new Repository<RackStatu>(adapter);
                }
                return _RackStatus;
            }
        }



        private IRepository<Receipt> _Receipts = null;

        public IRepository<Receipt> Receipts
        {
            get
            {
                if (_Receipts == null)
                {
                    _Receipts = new Repository<Receipt>(adapter);
                }
                return _Receipts;
            }
        }



        private IRepository<ReceiptConfirmationPrintout> _ReceiptConfirmationPrintouts = null;

        public IRepository<ReceiptConfirmationPrintout> ReceiptConfirmationPrintouts
        {
            get
            {
                if (_ReceiptConfirmationPrintouts == null)
                {
                    _ReceiptConfirmationPrintouts = new Repository<ReceiptConfirmationPrintout>(adapter);
                }
                return _ReceiptConfirmationPrintouts;
            }
        }



        private IRepository<ReceiptConfirmationStatu> _ReceiptConfirmationStatus = null;

        public IRepository<ReceiptConfirmationStatu> ReceiptConfirmationStatus
        {
            get
            {
                if (_ReceiptConfirmationStatus == null)
                {
                    _ReceiptConfirmationStatus = new Repository<ReceiptConfirmationStatu>(adapter);
                }
                return _ReceiptConfirmationStatus;
            }
        }



        private IRepository<ReceiptInvoice> _ReceiptInvoices = null;

        public IRepository<ReceiptInvoice> ReceiptInvoices
        {
            get
            {
                if (_ReceiptInvoices == null)
                {
                    _ReceiptInvoices = new Repository<ReceiptInvoice>(adapter);
                }
                return _ReceiptInvoices;
            }
        }



        private IRepository<ReceiptType> _ReceiptTypes = null;

        public IRepository<ReceiptType> ReceiptTypes
        {
            get
            {
                if (_ReceiptTypes == null)
                {
                    _ReceiptTypes = new Repository<ReceiptType>(adapter);
                }
                return _ReceiptTypes;
            }
        }



        private IRepository<ReceiveDoc> _ReceiveDocs = null;

        public IRepository<ReceiveDoc> ReceiveDocs
        {
            get
            {
                if (_ReceiveDocs == null)
                {
                    _ReceiveDocs = new Repository<ReceiveDoc>(adapter);
                }
                return _ReceiveDocs;
            }
        }



        private IRepository<ReceiveDocConfirmation> _ReceiveDocConfirmations = null;

        public IRepository<ReceiveDocConfirmation> ReceiveDocConfirmations
        {
            get
            {
                if (_ReceiveDocConfirmations == null)
                {
                    _ReceiveDocConfirmations = new Repository<ReceiveDocConfirmation>(adapter);
                }
                return _ReceiveDocConfirmations;
            }
        }



        private IRepository<ReceiveDocDeleted> _ReceiveDocDeleteds = null;

        public IRepository<ReceiveDocDeleted> ReceiveDocDeleteds
        {
            get
            {
                if (_ReceiveDocDeleteds == null)
                {
                    _ReceiveDocDeleteds = new Repository<ReceiveDocDeleted>(adapter);
                }
                return _ReceiveDocDeleteds;
            }
        }



        private IRepository<ReceivePallet> _ReceivePallets = null;

        public IRepository<ReceivePallet> ReceivePallets
        {
            get
            {
                if (_ReceivePallets == null)
                {
                    _ReceivePallets = new Repository<ReceivePallet>(adapter);
                }
                return _ReceivePallets;
            }
        }



        private IRepository<ReceivingUnit> _ReceivingUnits = null;

        public IRepository<ReceivingUnit> ReceivingUnits
        {
            get
            {
                if (_ReceivingUnits == null)
                {
                    _ReceivingUnits = new Repository<ReceivingUnit>(adapter);
                }
                return _ReceivingUnits;
            }
        }



        private IRepository<ReceivingUnitType> _ReceivingUnitTypes = null;

        public IRepository<ReceivingUnitType> ReceivingUnitTypes
        {
            get
            {
                if (_ReceivingUnitTypes == null)
                {
                    _ReceivingUnitTypes = new Repository<ReceivingUnitType>(adapter);
                }
                return _ReceivingUnitTypes;
            }
        }



        private IRepository<Region> _Regions = null;

        public IRepository<Region> Regions
        {
            get
            {
                if (_Regions == null)
                {
                    _Regions = new Repository<Region>(adapter);
                }
                return _Regions;
            }
        }



        private IRepository<Route> _Routes = null;

        public IRepository<Route> Routes
        {
            get
            {
                if (_Routes == null)
                {
                    _Routes = new Repository<Route>(adapter);
                }
                return _Routes;
            }
        }



        private IRepository<RUOwnershipType> _RUOwnershipTypes = null;

        public IRepository<RUOwnershipType> RUOwnershipTypes
        {
            get
            {
                if (_RUOwnershipTypes == null)
                {
                    _RUOwnershipTypes = new Repository<RUOwnershipType>(adapter);
                }
                return _RUOwnershipTypes;
            }
        }



        private IRepository<SchemaScript> _SchemaScripts = null;

        public IRepository<SchemaScript> SchemaScripts
        {
            get
            {
                if (_SchemaScripts == null)
                {
                    _SchemaScripts = new Repository<SchemaScript>(adapter);
                }
                return _SchemaScripts;
            }
        }



        private IRepository<Shelf> _Shelves = null;

        public IRepository<Shelf> Shelves
        {
            get
            {
                if (_Shelves == null)
                {
                    _Shelves = new Repository<Shelf>(adapter);
                }
                return _Shelves;
            }
        }



        private IRepository<ShelfRowColumn> _ShelfRowColumns = null;

        public IRepository<ShelfRowColumn> ShelfRowColumns
        {
            get
            {
                if (_ShelfRowColumns == null)
                {
                    _ShelfRowColumns = new Repository<ShelfRowColumn>(adapter);
                }
                return _ShelfRowColumns;
            }
        }



        private IRepository<ShortageReason> _ShortageReasons = null;

        public IRepository<ShortageReason> ShortageReasons
        {
            get
            {
                if (_ShortageReasons == null)
                {
                    _ShortageReasons = new Repository<ShortageReason>(adapter);
                }
                return _ShortageReasons;
            }
        }



        private IRepository<SoftwareSetting> _SoftwareSettings = null;

        public IRepository<SoftwareSetting> SoftwareSettings
        {
            get
            {
                if (_SoftwareSettings == null)
                {
                    _SoftwareSettings = new Repository<SoftwareSetting>(adapter);
                }
                return _SoftwareSettings;
            }
        }



        private IRepository<StorageType> _StorageTypes = null;

        public IRepository<StorageType> StorageTypes
        {
            get
            {
                if (_StorageTypes == null)
                {
                    _StorageTypes = new Repository<StorageType>(adapter);
                }
                return _StorageTypes;
            }
        }



        private IRepository<StoreGroup> _StoreGroups = null;

        public IRepository<StoreGroup> StoreGroups
        {
            get
            {
                if (_StoreGroups == null)
                {
                    _StoreGroups = new Repository<StoreGroup>(adapter);
                }
                return _StoreGroups;
            }
        }



        private IRepository<StoreGroupDivision> _StoreGroupDivisions = null;

        public IRepository<StoreGroupDivision> StoreGroupDivisions
        {
            get
            {
                if (_StoreGroupDivisions == null)
                {
                    _StoreGroupDivisions = new Repository<StoreGroupDivision>(adapter);
                }
                return _StoreGroupDivisions;
            }
        }



        private IRepository<StoreItem> _StoreItems = null;

        public IRepository<StoreItem> StoreItems
        {
            get
            {
                if (_StoreItems == null)
                {
                    _StoreItems = new Repository<StoreItem>(adapter);
                }
                return _StoreItems;
            }
        }



        private IRepository<Store> _Stores = null;

        public IRepository<Store> Stores
        {
            get
            {
                if (_Stores == null)
                {
                    _Stores = new Repository<Store>(adapter);
                }
                return _Stores;
            }
        }



        private IRepository<StoreType> _StoreTypes = null;

        public IRepository<StoreType> StoreTypes
        {
            get
            {
                if (_StoreTypes == null)
                {
                    _StoreTypes = new Repository<StoreType>(adapter);
                }
                return _StoreTypes;
            }
        }



        private IRepository<STVLog> _STVLogs = null;

        public IRepository<STVLog> STVLogs
        {
            get
            {
                if (_STVLogs == null)
                {
                    _STVLogs = new Repository<STVLog>(adapter);
                }
                return _STVLogs;
            }
        }



        private IRepository<SubCategory> _SubCategories = null;

        public IRepository<SubCategory> SubCategories
        {
            get
            {
                if (_SubCategories == null)
                {
                    _SubCategories = new Repository<SubCategory>(adapter);
                }
                return _SubCategories;
            }
        }



        private IRepository<Supplier> _Suppliers = null;

        public IRepository<Supplier> Suppliers
        {
            get
            {
                if (_Suppliers == null)
                {
                    _Suppliers = new Repository<Supplier>(adapter);
                }
                return _Suppliers;
            }
        }



        private IRepository<SupplyCategory> _SupplyCategories = null;

        public IRepository<SupplyCategory> SupplyCategories
        {
            get
            {
                if (_SupplyCategories == null)
                {
                    _SupplyCategories = new Repository<SupplyCategory>(adapter);
                }
                return _SupplyCategories;
            }
        }



        private IRepository<Transfer> _Transfers = null;

        public IRepository<Transfer> Transfers
        {
            get
            {
                if (_Transfers == null)
                {
                    _Transfers = new Repository<Transfer>(adapter);
                }
                return _Transfers;
            }
        }



        private IRepository<TransferType> _TransferTypes = null;

        public IRepository<TransferType> TransferTypes
        {
            get
            {
                if (_TransferTypes == null)
                {
                    _TransferTypes = new Repository<TransferType>(adapter);
                }
                return _TransferTypes;
            }
        }



        private IRepository<HCMIS.Concrete.Models.Type> _Types = null;

        public IRepository<HCMIS.Concrete.Models.Type> Types
        {
            get
            {
                if (_Types == null)
                {
                    _Types = new Repository<HCMIS.Concrete.Models.Type>(adapter);
                }
                return _Types;
            }
        }



        private IRepository<Unit> _Units = null;

        public IRepository<Unit> Units
        {
            get
            {
                if (_Units == null)
                {
                    _Units = new Repository<Unit>(adapter);
                }
                return _Units;
            }
        }



        private IRepository<UnitofIssue> _UnitofIssues = null;

        public IRepository<UnitofIssue> UnitofIssues
        {
            get
            {
                if (_UnitofIssues == null)
                {
                    _UnitofIssues = new Repository<UnitofIssue>(adapter);
                }
                return _UnitofIssues;
            }
        }



        private IRepository<User> _Users = null;

        public IRepository<User> Users
        {
            get
            {
                if (_Users == null)
                {
                    _Users = new Repository<User>(adapter);
                }
                return _Users;
            }
        }



        private IRepository<UserPaymentType> _UserPaymentTypes = null;

        public IRepository<UserPaymentType> UserPaymentTypes
        {
            get
            {
                if (_UserPaymentTypes == null)
                {
                    _UserPaymentTypes = new Repository<UserPaymentType>(adapter);
                }
                return _UserPaymentTypes;
            }
        }



        private IRepository<UserPhysicalStore> _UserPhysicalStores = null;

        public IRepository<UserPhysicalStore> UserPhysicalStores
        {
            get
            {
                if (_UserPhysicalStores == null)
                {
                    _UserPhysicalStores = new Repository<UserPhysicalStore>(adapter);
                }
                return _UserPhysicalStores;
            }
        }



        private IRepository<UserStore> _UserStores = null;

        public IRepository<UserStore> UserStores
        {
            get
            {
                if (_UserStores == null)
                {
                    _UserStores = new Repository<UserStore>(adapter);
                }
                return _UserStores;
            }
        }



        private IRepository<UserType> _UserTypes = null;

        public IRepository<UserType> UserTypes
        {
            get
            {
                if (_UserTypes == null)
                {
                    _UserTypes = new Repository<UserType>(adapter);
                }
                return _UserTypes;
            }
        }



        private IRepository<VEN> _VENs = null;

        public IRepository<VEN> VENs
        {
            get
            {
                if (_VENs == null)
                {
                    _VENs = new Repository<VEN>(adapter);
                }
                return _VENs;
            }
        }



        private IRepository<WeightedAverageLog> _WeightedAverageLogs = null;

        public IRepository<WeightedAverageLog> WeightedAverageLogs
        {
            get
            {
                if (_WeightedAverageLogs == null)
                {
                    _WeightedAverageLogs = new Repository<WeightedAverageLog>(adapter);
                }
                return _WeightedAverageLogs;
            }
        }



        private IRepository<Woreda> _Woredas = null;

        public IRepository<Woreda> Woredas
        {
            get
            {
                if (_Woredas == null)
                {
                    _Woredas = new Repository<Woreda>(adapter);
                }
                return _Woredas;
            }
        }



        private IRepository<YearEnd> _YearEnds = null;

        public IRepository<YearEnd> YearEnds
        {
            get
            {
                if (_YearEnds == null)
                {
                    _YearEnds = new Repository<YearEnd>(adapter);
                }
                return _YearEnds;
            }
        }



        private IRepository<Zone> _Zones = null;

        public IRepository<Zone> Zones
        {
            get
            {
                if (_Zones == null)
                {
                    _Zones = new Repository<Zone>(adapter);
                }
                return _Zones;
            }
        }
        
       private IRepository<JournalLite> _JournalLites;
       
       public IRepository<JournalLite> JournalLites
       {
         get
         {
             if(_JournalLites == null)
             {
                 _JournalLites = new Repository<JournalLite>(adapter);
             }
             return _JournalLites;
         }
       } 
        
       private IRepository<Ledger> _LedgerLites;
       
       public IRepository<Ledger> LedgerLites
       {
         get
         {
             if(_LedgerLites == null)
             {
                 _LedgerLites = new Repository<Ledger>(adapter);
             }
           return _LedgerLites;
         }
       }

       private IRepository<TempLedger> _Ledgers;

       public IRepository<TempLedger> Ledgers
       {
           get
           {
               if (_Ledgers == null)
               {
                   _Ledgers = new Repository<TempLedger>(adapter);
               }
               return _Ledgers;
           }
       }
           

       
    

        public IRepository<DirectoryUpdate> DirectoryUpdates
        {
            get { throw new NotImplementedException(); }
        }


       

        public IRepository<vwAccount> vwAccounts
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwAccountTree> vwAccountTrees
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwAccountTreeByUser> vwAccountTreeByUsers
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwGetAdjustment> vwGetAdjustments
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwGetAllItem> vwGetAllItems
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwGetCategory> vwGetCategories
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwGetIssuedItemsByBatch> vwGetIssuedItemsByBatches
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwGetIssue> vwGetIssues
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwGetItemBalance> vwGetItemBalances
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwGetItemProgram> vwGetItemPrograms
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwGetItem> vwGetItems
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwGetItemsByCategory> vwGetItemsByCategories
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwGetItemSupplier> vwGetItemSuppliers
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwGetLoss> vwGetLosses
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwGetReceivedItemsByBatch> vwGetReceivedItemsByBatches
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwGetShelfStore> vwGetShelfStores
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwGetSupply> vwGetSupplies
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwGetSupplyByCategory> vwGetSupplyByCategories
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwGetSupplyProgram> vwGetSupplyPrograms
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwGetUser> vwGetUsers
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwIssueDoc> vwIssueDocs
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwItemOnPalletLocation> vwItemOnPalletLocations
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwItemsReadyForDispatch> vwItemsReadyForDispatches
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwPallet> vwPallets
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwPalletLocation> vwPalletLocations
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwPhysicalStoreForItem> vwPhysicalStoreForItems
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwReceiptPallet> vwReceiptPallets
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwReceivedDoc> vwReceivedDocs
        {
            get { throw new NotImplementedException(); }
        }

        public IRepository<vwTree> vwTrees
        {
            get { throw new NotImplementedException(); }
        }
   }
}
